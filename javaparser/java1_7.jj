/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. java1_7.jj */
/*@egen*//*
Copyright (c) 2013-2015, Thierry Lavoie
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by the Thierry Lavoie and Polytechnique Montreal.
4. Neither the name of the <organization> nor the
   names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Thierry Lavoie ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Thierry Lavoie BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
This grammar has been written in accordance with the Java 1.7 specification by Oracle(TM).

*/

options {
    STATIC = false;                 // 1 seul parseur actif a la fois (+ rapide)
    UNICODE_INPUT = true;
    JAVA_UNICODE_ESCAPE = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
                                                                        
                                                                
                      
                            
                    
                     
    LOOKAHEAD=3;
    FORCE_LA_CHECK=false;
}

PARSER_BEGIN(JavaParser1_7)

package javaparser;
import java.io.*;
import java.util.*;

public class JavaParser1_7/*@bgen(jjtree)*/implements JavaParser1_7TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJavaParser1_7State jjtree = new JJTJavaParser1_7State();

/*@egen*/

   private static int parseFilesFromFileList(String fileName)
   {
      DataInputStream str = null;
      int cnt = 0;
      try
      {
         str = new DataInputStream(new FileInputStream(new File(fileName)));
         String s;

         while ((s = str.readLine()) != null)
         {
            try
            {
               cnt++;
               System.out.println("Parsing: " + s);
               JavaParser1_7 parser = new JavaParser1_7(s);

               // Dump syntax tree
               // SimpleNode n = parser.CompilationUnit();
               // n.dump(" ");

		       ExampleVisitor vis = new ExampleVisitor();
               parser.CompilationUnit().jjtAccept(vis, null);

            }
            catch(ParseException e) { e.printStackTrace(); }
            catch(TokenMgrError tme) { tme.printStackTrace(); }
	        catch(Exception e) {e.printStackTrace(); }
         }
      }
      catch(Exception e) { e.printStackTrace(); }
      finally { if (str != null) try { str.close(); } catch(Exception e) {}  }

      return cnt;
   }

   public JavaParser1_7(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }


  public static void m(String args[]) {
    JavaParser1_7 parser;
	String fileName = new String();
    if (args.length == 0) {
      System.out.println("Java Parser Version 0.1:  Reading from standard input . . .");
      parser = new JavaParser1_7(System.in);
	  fileName = "_default_";
    } else if (args.length == 1) {
      System.out.println("Java Parser Version 0.1:  Reading from file " + args[0] + " . . .");
	  fileName = args[0];
      try {
        parser = new JavaParser1_7(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 0.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 0.1:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
	  ExampleVisitor vis = new ExampleVisitor();
      parser.CompilationUnit().jjtAccept(vis, null);

      // Dump syntax tree
      // SimpleNode n = parser.CompilationUnit();
      // n.dump(" ");

      System.out.println("Java Parser Version 0.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 0.1:  Encountered errors during parse.");
    }
  }


   public static void main(String[] args) throws Throwable
   {
      int cnt = 1;
      long l = System.currentTimeMillis();
      if (args.length > 0 && args[0].charAt(0) == '@')
      {
         cnt = parseFilesFromFileList(args[0].substring(1));
      }
      else
      {
         JavaParser1_7.m(args);
      }
      System.out.println("Parsed " + cnt + " files in: " + (System.currentTimeMillis() - l));
   }

}

PARSER_END(JavaParser1_7)

// TOKEN SPECIFICATION

// WHITESPACES

SKIP:
{
  " " | "\n" | "\r" | "\n\r" | "\t" | "\f"
}

// COMMENTS

SPECIAL_TOKEN:
{
  <END_OF_LINE_COMMENT: "//" (~["\n","\r"]|"\\u")* ("\n"|"\r"|"\r\n")? >
}

MORE:
{
  <"/*"> : IN_MULTILINE_COMMENT
}

<IN_MULTILINE_COMMENT>
MORE:
{
  <~[]>
}

<IN_MULTILINE_COMMENT>
SPECIAL_TOKEN:
{
  <MULTILINE_COMMENT: "*/"> :DEFAULT
}


//KEYWORDS

TOKEN:
{
   <ABSTRACT: "abstract">
   |
   <ASSERT: "assert">
   |
   <BOOLEAN: "boolean">
   |
   <BREAK: "break">
   |
   <BYTE: "byte">
   |
   <CASE: "case">
   |
   <CATCH: "catch">
   |
   <CHAR: "char">
   |
   <CLASS: "class">
   |
   <CONST: "const">	// Reserved but unused
   |
   <CONTINUE: "continue">
   |
   <DEFAULTTK: "default">  // Required KEYWORD suffix to avoid ambiguity
   |
   <DO: "do">
   |
   <DOUBLE: "double">
   |
   <ELSE: "else">
   |
   <ENUM: "enum"> // This feature was introduced only in Java 1.5, and thus with sources in Java <= 1.4, it can be used as a valid Identifier. This grammar can only be used with 1.5, 1.6 and 1.7
   |
   <EXTENDS: "extends">
   |
   <FINAL: "final">
   |
   <FINALLY: "finally">
   |
   <FLOAT: "float">
   |
   <FOR: "for">
   |
   <IF: "if">
   |
   <GOTO: "goto">	//Reserved, but unused!
   |
   <IMPLEMENTS: "implements">
   |
   <IMPORT: "import">
   |
   <INSTANCEOF: "instanceof">
   |
   <INT: "int">
   |
   <INTERFACE: "interface">
   |
   <LONG: "long">
   |
   <NATIVE: "native">
   |
   <NEW: "new">
   |
   <PACKAGE: "package">
   |
   <PRIVATE: "private">
   |
   <PROTECTED: "protected">
   |
   <PUBLIC: "public">
   |
   <RETURN: "return">
   |
   <SHORT: "short">
   |
   <STATIC: "static">
   |
   <STRICTFP: "strictfp">
   |
   <SUPER: "super">
   |
   <SWITCH: "switch">
   |
   <SYNCHRONIZED: "synchronized">
   |
   <THIS: "this">
   |
   <THROW: "throw">
   |
   <THROWS: "throws">
   |
   <TRANSIENT: "transient">
   |
   <TRY: "try">
   |
   <VOID: "void">
   |
   <VOLATILE: "volatile">
   |
   <WHILE: "while">
}


// OPERATORS
TOKEN:{
	<EQUAL: ("=")>
	|
	<LOGICALEQUAL: ("==")>
	|
	<GT: (">") >
	|
	<LT: ("<") >
	|
	<NOT: ("!") >
	|
	<BINARYNOT: ("~") >
	|
	<QMARK: ("?") >
	|
	<COLON: (":") >
	|
	<LTEQUAL: ("<=") >
	|
	<GTEQUAL: (">=") >
	|
	<NOTEQUAL: ("!=") >
	|
	<LOGICALAND: ("&&") >
	|
	<LOGICALOR: ("||") >
	|
	<PLUSPLUS: ("++") >
	|
	<MINUSMINUS: ("--") >
	|
	<PLUS: ("+") >
	|
	<MINUS: ("-") >
	|
	<STAR: ("*") >
	|
	<DIVIDE: ("/") >
	|
	<BINARYAND: ("&") >
	|
	<BINARYOR: ("|") >
	|
	<BINARYXOR: ("^") >
	|
	<MODULO: ("%") >
	|
	<LBINARYSHIFT: ("<<") >
	//|
	//<RBINARYSHIFT: (">>") >
	//|
	//<TRIPLESHIFT: (">>>") >
	|
	<PLUSEQUAL: ("+=") >
	|
	<MINUSEQUAL: ("-=") >
	|
	<TIMESEQUAL: ("*=") >
	|
	<DIVIDEEQUAL: ("/=") >
	|
	<BINARYANDEQUAL: ("&=") >
	|
	<BINARYOREQUAL: ("|=") >
	|
	<BINARYXOREQUAL: ("^=") >
	|
	<MODULOEQUAL: ("%=") >
	|
	<LBINARYSHIFTEQUAL: ("<<=") >
	|
	<RBINARYSHIFTEQUAL: (">>=") >
	|
	<TRIPLESHIFTEQUAL: (">>>=") >
}

// SEPARATORS
TOKEN: {
	<LPAR: ("(")>
	|
	<RPAR: (")")>
	|
	<LBRACE: ("{")>
	|
	<RBRACE: ("}")>
	|
	<LBRACKET: ("[")>
	|
	<RBRACKET: ("]")>
	|
	<SEMICOLON: (";")>
	|
	<COMA: (",")>
	|
	<DOT: (".")>
}

// MISC
TOKEN: {
	<AROBAS: ("@")>
	|
	<ELLIPSIS: ("...")>
}

// LITERALS

TOKEN:
{
   <INTEGER_LITERAL: (<DECIMAL_LITERAL>|<HEX_LITERAL>|<OCTAL_LITERAL>|<BINARY_LITERAL> ) >
   |
   <FLOATING_POINT_LITERAL: (<DECIMAL_FLOATING_POINT_LITERAL> |<HEX_FLOATING_POINT_LITERAL>) >
   |
   <#DECIMAL_LITERAL: (<DECIMAL_NUMERAL> (<INTEGER_SUFFIX>)?) >
   |
   <#HEX_LITERAL: (<HEX_NUMERAL> (<INTEGER_SUFFIX>)? ) >
   |
   <#OCTAL_LITERAL: (<OCTAL_NUMERAL> (<INTEGER_SUFFIX>)? ) >
   |
   <#BINARY_LITERAL: (<BINARY_NUMERAL> (<INTEGER_SUFFIX>)?) >
   |
   <#INTEGER_SUFFIX: ("l"|"L") >
   |
   <#FLOAT_TYPE_SUFFIX: ("f"|"F") >
   |
   <#DECIMAL_NUMERAL: ( ("0") | (<NON_ZERO_DIGIT> (<DIGITS>)?) | (<NON_ZERO_DIGIT><UNDERSCORES><DIGITS>) ) >
   |
   <#DIGITS: ( (<DIGIT>) | (<DIGIT> (<DIGITS_AND_UNDERSCORES>)? <DIGIT>) )>
   |
   <#DIGITS_AND_UNDERSCORES: (<DIGIT_OR_UNDERSCORE>)+ >
   |
   <#DIGIT_OR_UNDERSCORE: (<DIGIT>|"_") >
   |
   <#DIGIT: ("0"|<NON_ZERO_DIGIT>) >
   |
   <#NON_ZERO_DIGIT: ["1"-"9"] >
   |
   <#UNDERSCORES: ("_")+ >
   |
   <#HEX_NUMERAL: ("0"("x"|"X") (<HEX_DIGITS>)? ) > // Allowing for 0x 0X alone for 0 representation. Happens in OpenJDK and compiles
   |
   <#HEX_DIGITS: (<HEX_DIGIT> ( (<HEX_DIGITS_AND_UNDERSCORES> )? <HEX_DIGIT> )? ) >
   |
   <#HEX_DIGIT: (["0"-"9", "a"-"f", "A"-"F"]) >
   |
   <#HEX_DIGITS_AND_UNDERSCORES: (<HEX_DIGIT_OR_UNDERSCORE>)+ >
   |
   <#HEX_DIGIT_OR_UNDERSCORE: (<HEX_DIGIT>|"_") >
   |
   <#OCTAL_NUMERAL: ("0" <OCTAL_DIGITS>) >
   |
   <#OCTAL_DIGITS: (<OCTAL_DIGIT> ( (<OCTAL_DIGITS_AND_UNDERSCORES>)? <OCTAL_DIGIT> )? ) >
   |
   <#OCTAL_DIGIT: (["0"-"7"]) >
   |
   <#OCTAL_DIGITS_AND_UNDERSCORES: (<OCTAL_DIGIT_OR_UNDERSCORE>)+ >
   |
   <#OCTAL_DIGIT_OR_UNDERSCORE: (<OCTAL_DIGIT>|"_") >
   |
   <#BINARY_NUMERAL: ("0"("b"|"B") (<BINARY_DIGITS>)? ) > // Allowing for 0b 0B alone for 0 representation. Happens in OpenJDK and compiles
   |
   <#BINARY_DIGITS: (<BINARY_DIGIT> ( (<BINARY_DIGITS_AND_UNDERSCORES> )? <BINARY_DIGIT> )? ) >
   |
   <#BINARY_DIGIT: (["0"-"1"]) >
   |
   <#BINARY_DIGITS_AND_UNDERSCORES: (<BINARY_DIGIT_OR_UNDERSCORE>)+ >
   |
   <#BINARY_DIGIT_OR_UNDERSCORE: (<BINARY_DIGIT>|"_") >
   |
   <#DECIMAL_FLOATING_POINT_LITERAL: (<DIGITS> "." (<DIGITS>)? (<EXPONENT_PART>)? (<FLOAT_SUFFIX>)?) | ("." <DIGITS> (<EXPONENT_PART>)? (<FLOAT_SUFFIX>)?) | (<DIGITS> <EXPONENT_PART> (<FLOAT_SUFFIX>)?) | (<DIGITS> (<EXPONENT_PART>)? <FLOAT_SUFFIX> ) >
   |
   <#EXPONENT_PART: (<EXPONENT_INDICATOR> <SIGNED_INTEGER>) >
   |
   <#EXPONENT_INDICATOR: ("e"|"E") >
   |
   <#SIGNED_INTEGER: ((<SIGN>)? <DIGITS>) >
   |
   <#SIGN: ("+"|"-") >
   |
   <#FLOAT_SUFFIX: ("f"|"F"|"d"|"D") >
   |
   <#HEX_FLOATING_POINT_LITERAL : (<HEX_SIGNIFICAND> <BINARY_EXPONENT> (<FLOAT_TYPE_SUFFIX>)? ) >
   |
   <#HEX_SIGNIFICAND: (<HEX_NUMERAL> (<DOT>)? ) | ("0" ("x"|"X") (<HEX_DIGITS>)? <DOT> <HEX_DIGITS> ) >
   |
   <#BINARY_EXPONENT: (<BINARY_EXPONENT_INDICATOR> <SIGNED_INTEGER>) >
   |
   <#BINARY_EXPONENT_INDICATOR: ("p"|"P")>
}

TOKEN:
{
	<BOOLEAN_LITERAL: ("true"|"false")>
	|
	<NULL_LITERAL: ("null")>
}

// IDENTIFIERS AFTER ALL KEYWORDS AND RESERVED LITERAL

TOKEN:
{
  <IDENTIFIER: <JAVA_LETTER> (<JAVA_LETTER>|<JAVA_DIGIT>)* >
  |
  <#JAVA_LETTER:  ["A"-"Z", "a"-"z", "_", "$"] >
  |
  <#JAVA_DIGIT: ["0"-"9"] >
}

TOKEN:
{
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
                ["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

void Identifier():
{/*@bgen(jjtree) Identifier */
  Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void QualifiedIdentifier():
{/*@bgen(jjtree) QualifiedIdentifier */
  QualifiedIdentifier jjtn000 = new QualifiedIdentifier(JJTQUALIFIEDIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) QualifiedIdentifier */
        try {
/*@egen*/
	Identifier() ( <DOT> Identifier() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void QualifiedIdentifierList():
{/*@bgen(jjtree) QualifiedIdentifierList */
  QualifiedIdentifierList jjtn000 = new QualifiedIdentifierList(JJTQUALIFIEDIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) QualifiedIdentifierList */
        try {
/*@egen*/
	QualifiedIdentifier() ( <COMA> QualifiedIdentifier() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

CompilationUnit CompilationUnit():
{/*@bgen(jjtree) CompilationUnit */
  CompilationUnit jjtn000 = new CompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CompilationUnit */
        try {
/*@egen*/
	// LOOKAHEAD required because Annotation can also be part of class modifiers
	[ LOOKAHEAD([Annotations()] <PACKAGE>) [Annotations()] <PACKAGE> QualifiedIdentifier() <SEMICOLON> ]
		( ImportDeclaration() )*
		( TypeDeclaration() )*

	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/

	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ImportDeclaration():
{/*@bgen(jjtree) ImportDeclaration */
  ImportDeclaration jjtn000 = new ImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ImportDeclaration */
        try {
/*@egen*/
	<IMPORT> PossibleStaticModifier() Identifier() ( <DOT> Identifier() )* Ellipsis() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Ellipsis():
{/*@bgen(jjtree) Ellipsis */
  Ellipsis jjtn000 = new Ellipsis(JJTELLIPSIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Ellipsis */
        try {
/*@egen*//*@bgen(jjtree) #HasNotEllipsis( jjtree . nodeArity ( ) == 0) */
        {
          HasNotEllipsis jjtn002 = new HasNotEllipsis(JJTHASNOTELLIPSIS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(/*@bgen(jjtree) HasEllipsis */
          {
            HasEllipsis jjtn001 = new HasEllipsis(JJTHASELLIPSIS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ (<DOT> <STAR>)/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/             )?/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                                       /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PossibleStaticModifier():
{/*@bgen(jjtree) PossibleStaticModifier */
  PossibleStaticModifier jjtn000 = new PossibleStaticModifier(JJTPOSSIBLESTATICMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) PossibleStaticModifier */
        try {
/*@egen*//*@bgen(jjtree) #HasNotStaticModifier( jjtree . nodeArity ( ) == 0) */
        {
          HasNotStaticModifier jjtn002 = new HasNotStaticModifier(JJTHASNOTSTATICMODIFIER);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(/*@bgen(jjtree) #HasStaticModifier(true) */
         {
           HasStaticModifier jjtn001 = new HasStaticModifier(JJTHASSTATICMODIFIER);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/<STATIC>/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                     )?/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                                             /*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TypeDeclaration():
{/*@bgen(jjtree) TypeDeclaration */
  TypeDeclaration jjtn000 = new TypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeDeclaration */
        try {
/*@egen*/
	ClassOrInterfaceDeclaration()
	|/*@bgen(jjtree) #EmptyInterfaceDeclaration(true) */
        {
          EmptyInterfaceDeclaration jjtn001 = new EmptyInterfaceDeclaration(JJTEMPTYINTERFACEDECLARATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(<SEMICOLON>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                             /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassOrInterfaceDeclaration():
{/*@bgen(jjtree) ClassOrInterfaceDeclaration */
  ClassOrInterfaceDeclaration jjtn000 = new ClassOrInterfaceDeclaration(JJTCLASSORINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ClassOrInterfaceDeclaration */
        try {
/*@egen*//*@bgen(jjtree) #ModifierList( true) */
        {
          ModifierList jjtn001 = new ModifierList(JJTMODIFIERLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(( Modifier() )*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                    ( ClassDeclaration() | InterfaceDeclaration() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassDeclaration():
{/*@bgen(jjtree) ClassDeclaration */
  ClassDeclaration jjtn000 = new ClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	NormalClassDeclaration()
	|
	EnumDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceDeclaration():
{/*@bgen(jjtree) InterfaceDeclaration */
  InterfaceDeclaration jjtn000 = new InterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceDeclaration */
        try {
/*@egen*/
	NormalInterfaceDeclaration()
	|
	AnnotationTypeDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void NormalClassDeclaration():
{/*@bgen(jjtree) NormalClassDeclaration */
  NormalClassDeclaration jjtn000 = new NormalClassDeclaration(JJTNORMALCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) NormalClassDeclaration */
        try {
/*@egen*/
	<CLASS> Identifier() [TypeParameters()] [<EXTENDS> Type()] [<IMPLEMENTS> TypeList()] ClassBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EnumDeclaration():
{/*@bgen(jjtree) EnumDeclaration */
  EnumDeclaration jjtn000 = new EnumDeclaration(JJTENUMDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumDeclaration */
        try {
/*@egen*/
	<ENUM> Identifier() [<IMPLEMENTS> TypeList()] EnumBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void NormalInterfaceDeclaration():
{/*@bgen(jjtree) NormalInterfaceDeclaration */
  NormalInterfaceDeclaration jjtn000 = new NormalInterfaceDeclaration(JJTNORMALINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) NormalInterfaceDeclaration */
        try {
/*@egen*/
	<INTERFACE> Identifier() [TypeParameters()] [<EXTENDS> TypeList()] InterfaceBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationTypeDeclaration():
{/*@bgen(jjtree) AnnotationTypeDeclaration */
  AnnotationTypeDeclaration jjtn000 = new AnnotationTypeDeclaration(JJTANNOTATIONTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationTypeDeclaration */
        try {
/*@egen*/
	<AROBAS> <INTERFACE> Identifier() AnnotationTypeBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Type():
{/*@bgen(jjtree) Type */
  Type jjtn000 = new Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	( BasicType() ( <LBRACKET> <RBRACKET> )* )
	|
	( ReferenceType() ( <LBRACKET> <RBRACKET> )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BasicType():
{/*@bgen(jjtree) BasicType */
  BasicType jjtn000 = new BasicType(JJTBASICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) BasicType */
        try {
/*@egen*/
	<BYTE>|<SHORT>|<CHAR>|<INT>|<LONG>|<FLOAT>|<DOUBLE>|<BOOLEAN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Added lookahead but not sure why it made it work...but it is necessary for proper behaviour
void ReferenceType():
{/*@bgen(jjtree) ReferenceType */
  ReferenceType jjtn000 = new ReferenceType(JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ReferenceType */
        try {
/*@egen*/
	Identifier() [LOOKAHEAD(<LT>) TypeArguments() ] (<DOT> Identifier() [ LOOKAHEAD(<LT>) TypeArguments()] )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Added support for array type in generics
void TypeArguments():
{/*@bgen(jjtree) TypeArguments */
  TypeArguments jjtn000 = new TypeArguments(JJTTYPEARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeArguments */
        try {
/*@egen*/
	<LT> TypeArgument() ( <LBRACKET> <RBRACKET> )* ( LOOKAHEAD(<COMA>) <COMA> TypeArgument() ( <LBRACKET> <RBRACKET> )* )*  <GT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	//  <LT> TypeArgument() (<COMA> TypeArgument() )*  <GT>
}

void TypeArgument():
{/*@bgen(jjtree) TypeArgument */
  TypeArgument jjtn000 = new TypeArgument(JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeArgument */
        try {
/*@egen*/
	ReferenceType()
	|
	BasicType()  // For sake of int[]... and other basic[]. Not sure why, but compiles with gnu javac
	|
	( <QMARK> [ (<EXTENDS>|<SUPER>) ReferenceType()] )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void NonWildcardTypeArguments():
{/*@bgen(jjtree) NonWildcardTypeArguments */
  NonWildcardTypeArguments jjtn000 = new NonWildcardTypeArguments(JJTNONWILDCARDTYPEARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) NonWildcardTypeArguments */
        try {
/*@egen*/
	<LT> TypeList() <GT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TypeList():
{/*@bgen(jjtree) TypeList */
  TypeList jjtn000 = new TypeList(JJTTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeList */
        try {
/*@egen*/
	ReferenceType() (<COMA> ReferenceType() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TypeArgumentsOrDiamond():
{/*@bgen(jjtree) TypeArgumentsOrDiamond */
  TypeArgumentsOrDiamond jjtn000 = new TypeArgumentsOrDiamond(JJTTYPEARGUMENTSORDIAMOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeArgumentsOrDiamond */
        try {
/*@egen*/
	(<LT> <GT>)
	|
	( TypeArguments() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void NonWildcardTypeArgumentsOrDiamond():
{/*@bgen(jjtree) NonWildcardTypeArgumentsOrDiamond */
  NonWildcardTypeArgumentsOrDiamond jjtn000 = new NonWildcardTypeArgumentsOrDiamond(JJTNONWILDCARDTYPEARGUMENTSORDIAMOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) NonWildcardTypeArgumentsOrDiamond */
        try {
/*@egen*/
	(<LT> <GT>)
	|
	( NonWildcardTypeArguments() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TypeParameters():
{/*@bgen(jjtree) TypeParameters */
  TypeParameters jjtn000 = new TypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeParameters */
        try {
/*@egen*/
	<LT> TypeParameter() ( <COMA> TypeParameter() )* <GT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TypeParameter():
{/*@bgen(jjtree) TypeParameter */
  TypeParameter jjtn000 = new TypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TypeParameter */
        try {
/*@egen*/
	Identifier() [<EXTENDS> Bound()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Bound():
{/*@bgen(jjtree) Bound */
  Bound jjtn000 = new Bound(JJTBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Bound */
        try {
/*@egen*/
	ReferenceType() ( <BINARYAND> ReferenceType() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Modifier():
{/*@bgen(jjtree) Modifier */
  Modifier jjtn000 = new Modifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Modifier */
        try {
/*@egen*/
	Annotation()|/*@bgen(jjtree) #KeywordModifier(true) */
                     {
                       KeywordModifier jjtn001 = new KeywordModifier(JJTKEYWORDMODIFIER);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/(<PUBLIC>|<PRIVATE>|<PROTECTED>|<STATIC>|<ABSTRACT>|<FINAL>|<NATIVE>|<SYNCHRONIZED>|<TRANSIENT>|<VOLATILE>|<STRICTFP>)/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/                  /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Annotations():
{/*@bgen(jjtree) Annotations */
  Annotations jjtn000 = new Annotations(JJTANNOTATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Annotations */
        try {
/*@egen*/
	Annotation() ( Annotation() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Annotation():
{/*@bgen(jjtree) Annotation */
  Annotation jjtn000 = new Annotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Annotation */
        try {
/*@egen*/
	<AROBAS> QualifiedIdentifier() [ <LPAR> [AnnotationElement()] <RPAR> ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationElement():
{/*@bgen(jjtree) AnnotationElement */
  AnnotationElement jjtn000 = new AnnotationElement(JJTANNOTATIONELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationElement */
        try {
/*@egen*/
	ElementValuePairs()
	|
	ElementValue()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ElementValuePairs():
{/*@bgen(jjtree) ElementValuePairs */
  ElementValuePairs jjtn000 = new ElementValuePairs(JJTELEMENTVALUEPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ElementValuePairs */
        try {
/*@egen*/
	ElementValuePair() ( <COMA> ElementValuePair() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ElementValuePair():
{/*@bgen(jjtree) ElementValuePair */
  ElementValuePair jjtn000 = new ElementValuePair(JJTELEMENTVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ElementValuePair */
        try {
/*@egen*/
	Identifier() <EQUAL> ElementValue()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ElementValue():
{/*@bgen(jjtree) ElementValue */
  ElementValue jjtn000 = new ElementValue(JJTELEMENTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ElementValue */
        try {
/*@egen*/
	Annotation()
	|
	Expression1()
	|
	ElementValueArrayInitializer()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ElementValueArrayInitializer():
{/*@bgen(jjtree) ElementValueArrayInitializer */
  ElementValueArrayInitializer jjtn000 = new ElementValueArrayInitializer(JJTELEMENTVALUEARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ElementValueArrayInitializer */
        try {
/*@egen*/
	<LBRACE> [ElementValues()] [<COMA>] <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ElementValues():
{/*@bgen(jjtree) ElementValues */
  ElementValues jjtn000 = new ElementValues(JJTELEMENTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ElementValues */
        try {
/*@egen*/
	ElementValue() ( <COMA> ElementValue() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassBody():
{/*@bgen(jjtree) ClassBody */
  ClassBody jjtn000 = new ClassBody(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ClassBody */
        try {
/*@egen*/
	<LBRACE> ( ClassBodyDeclaration() )* <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassBodyDeclaration():
{/*@bgen(jjtree) ClassBodyDeclaration */
  ClassBodyDeclaration jjtn000 = new ClassBodyDeclaration(JJTCLASSBODYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ClassBodyDeclaration */
        try {
/*@egen*/
	<SEMICOLON>
	|
	(/*@bgen(jjtree) ModifierList */
          {
            ModifierList jjtn001 = new ModifierList(JJTMODIFIERLIST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ ((Modifier())*)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/              MemberDecl() )
	|/*@bgen(jjtree) #StaticInitBlock(true) */
        {
          StaticInitBlock jjtn002 = new StaticInitBlock(JJTSTATICINITBLOCK);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( [<STATIC>] Block() )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                   /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MemberDecl():
{/*@bgen(jjtree) MemberDecl */
  MemberDecl jjtn000 = new MemberDecl(JJTMEMBERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) MemberDecl */
        try {
/*@egen*/
	MethodOrFieldDecl()
	|/*@bgen(jjtree) #VoidMethodDecl(true) */
        {
          VoidMethodDecl jjtn001 = new VoidMethodDecl(JJTVOIDMETHODDECL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( <VOID> Identifier() VoidMethodDeclaratorRest() )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                  
	|/*@bgen(jjtree) #ConstructorDecl(true) */
        {
          ConstructorDecl jjtn002 = new ConstructorDecl(JJTCONSTRUCTORDECL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	( Identifier() ConstructorDeclaratorRest() )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                   
	|
	GenericMethodOrConstructorDecl()
	|
	ClassDeclaration()
	|
	InterfaceDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MethodOrFieldDecl():
{/*@bgen(jjtree) MethodOrFieldDecl */
  MethodOrFieldDecl jjtn000 = new MethodOrFieldDecl(JJTMETHODORFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) MethodOrFieldDecl */
        try {
/*@egen*/
	Type() Identifier() MethodOrFieldRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Choice inversion from original specification because of epsilon production
void MethodOrFieldRest():
{/*@bgen(jjtree) MethodOrFieldRest */
  MethodOrFieldRest jjtn000 = new MethodOrFieldRest(JJTMETHODORFIELDREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) MethodOrFieldRest */
        try {
/*@egen*/
        MethodDeclaratorRest()
	|
	( FieldDeclaratorsRest() <SEMICOLON> )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FieldDeclaratorsRest():
{/*@bgen(jjtree) FieldDeclaratorsRest */
  FieldDeclaratorsRest jjtn000 = new FieldDeclaratorsRest(JJTFIELDDECLARATORSREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FieldDeclaratorsRest */
        try {
/*@egen*/
	VariableDeclaratorRest() ( <COMA> VariableDeclarator() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MethodDeclaratorRest():
{/*@bgen(jjtree) MethodDeclaratorRest */
  MethodDeclaratorRest jjtn000 = new MethodDeclaratorRest(JJTMETHODDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) MethodDeclaratorRest */
        try {
/*@egen*/
	FormalParameters() ( <LBRACKET><RBRACKET> )* [<THROWS> QualifiedIdentifierList() ] (/*@bgen(jjtree) #MethodBody(true) */
                                                                                            {
                                                                                              MethodBody jjtn001 = new MethodBody(JJTMETHODBODY);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
                                                                                              jjtn001.jjtSetFirstToken(getToken(1));
                                                                                            }
                                                                                            try {
/*@egen*/Block()/*@bgen(jjtree)*/
                                                                                            } catch (Throwable jjte001) {
                                                                                              if (jjtc001) {
                                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                                jjtc001 = false;
                                                                                              } else {
                                                                                                jjtree.popNode();
                                                                                              }
                                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                                throw (RuntimeException)jjte001;
                                                                                              }
                                                                                              if (jjte001 instanceof ParseException) {
                                                                                                throw (ParseException)jjte001;
                                                                                              }
                                                                                              throw (Error)jjte001;
                                                                                            } finally {
                                                                                              if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                                                jjtn001.jjtSetLastToken(getToken(0));
                                                                                              }
                                                                                            }
/*@egen*/               |/*@bgen(jjtree) #EmptyBody(true) */
                                                                                                                    {
                                                                                                                      EmptyBody jjtn002 = new EmptyBody(JJTEMPTYBODY);
                                                                                                                      boolean jjtc002 = true;
                                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                                      jjtn002.jjtSetFirstToken(getToken(1));
                                                                                                                    }
                                                                                                                    try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                                                                                                                    } finally {
                                                                                                                      if (jjtc002) {
                                                                                                                        jjtree.closeNodeScope(jjtn002, true);
                                                                                                                        jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                      }
                                                                                                                    }
/*@egen*/              )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VoidMethodDeclaratorRest():
{/*@bgen(jjtree) VoidMethodDeclaratorRest */
  VoidMethodDeclaratorRest jjtn000 = new VoidMethodDeclaratorRest(JJTVOIDMETHODDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VoidMethodDeclaratorRest */
        try {
/*@egen*/
	FormalParameters() [<THROWS> QualifiedIdentifierList() ] (/*@bgen(jjtree) #MethodBody(true) */
                                                                  {
                                                                    MethodBody jjtn001 = new MethodBody(JJTMETHODBODY);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
                                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                                  }
                                                                  try {
/*@egen*/Block()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte001) {
                                                                    if (jjtc001) {
                                                                      jjtree.clearNodeScope(jjtn001);
                                                                      jjtc001 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte001 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte001;
                                                                    }
                                                                    if (jjte001 instanceof ParseException) {
                                                                      throw (ParseException)jjte001;
                                                                    }
                                                                    throw (Error)jjte001;
                                                                  } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                                    }
                                                                  }
/*@egen*/               |/*@bgen(jjtree) #EmptyBody(true) */
                                                                                          {
                                                                                            EmptyBody jjtn002 = new EmptyBody(JJTEMPTYBODY);
                                                                                            boolean jjtc002 = true;
                                                                                            jjtree.openNodeScope(jjtn002);
                                                                                            jjtn002.jjtSetFirstToken(getToken(1));
                                                                                          }
                                                                                          try {
/*@egen*/ <SEMICOLON>/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc002) {
                                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                                              jjtn002.jjtSetLastToken(getToken(0));
                                                                                            }
                                                                                          }
/*@egen*/              )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ConstructorDeclaratorRest():
{/*@bgen(jjtree) ConstructorDeclaratorRest */
  ConstructorDeclaratorRest jjtn000 = new ConstructorDeclaratorRest(JJTCONSTRUCTORDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ConstructorDeclaratorRest */
        try {
/*@egen*/
	FormalParameters() [<THROWS> QualifiedIdentifierList() ]/*@bgen(jjtree) #MethodBody(true) */
                                                                 {
                                                                   MethodBody jjtn001 = new MethodBody(JJTMETHODBODY);
                                                                   boolean jjtc001 = true;
                                                                   jjtree.openNodeScope(jjtn001);
                                                                   jjtn001.jjtSetFirstToken(getToken(1));
                                                                 }
                                                                 try {
/*@egen*/ Block()/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte001) {
                                                                   if (jjtc001) {
                                                                     jjtree.clearNodeScope(jjtn001);
                                                                     jjtc001 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte001 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte001;
                                                                   }
                                                                   if (jjte001 instanceof ParseException) {
                                                                     throw (ParseException)jjte001;
                                                                   }
                                                                   throw (Error)jjte001;
                                                                 } finally {
                                                                   if (jjtc001) {
                                                                     jjtree.closeNodeScope(jjtn001, true);
                                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                                   }
                                                                 }
/*@egen*/              /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void GenericMethodOrConstructorDecl():
{/*@bgen(jjtree) GenericMethodOrConstructorDecl */
  GenericMethodOrConstructorDecl jjtn000 = new GenericMethodOrConstructorDecl(JJTGENERICMETHODORCONSTRUCTORDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) GenericMethodOrConstructorDecl */
        try {
/*@egen*/
	TypeParameters() GenericMethodOrConstructorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void GenericMethodOrConstructorRest():
{/*@bgen(jjtree) GenericMethodOrConstructorRest */
  GenericMethodOrConstructorRest jjtn000 = new GenericMethodOrConstructorRest(JJTGENERICMETHODORCONSTRUCTORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) GenericMethodOrConstructorRest */
        try {
/*@egen*/
	( (Type() | <VOID>) Identifier() MethodDeclaratorRest() )
	|
	( Identifier() ConstructorDeclaratorRest() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceBody():
{/*@bgen(jjtree) InterfaceBody */
  InterfaceBody jjtn000 = new InterfaceBody(JJTINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceBody */
        try {
/*@egen*/
	<LBRACE> ( InterfaceBodyDeclaration() )* <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceBodyDeclaration():
{/*@bgen(jjtree) InterfaceBodyDeclaration */
  InterfaceBodyDeclaration jjtn000 = new InterfaceBodyDeclaration(JJTINTERFACEBODYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceBodyDeclaration */
        try {
/*@egen*//*@bgen(jjtree) #EmptyInterfaceDeclaration(true) */
        {
          EmptyInterfaceDeclaration jjtn001 = new EmptyInterfaceDeclaration(JJTEMPTYINTERFACEDECLARATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(<SEMICOLON>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                             
	|/*@bgen(jjtree) #NonEmptyInterfaceDeclaration(true) */
        {
          NonEmptyInterfaceDeclaration jjtn003 = new NonEmptyInterfaceDeclaration(JJTNONEMPTYINTERFACEDECLARATION);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtn003.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(/*@bgen(jjtree) ModifierList */
          {
            ModifierList jjtn002 = new ModifierList(JJTMODIFIERLIST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ (( Modifier() )*)/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/              InterfaceMemberDecl() )/*@bgen(jjtree)*/
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            throw (RuntimeException)jjte003;
          }
          if (jjte003 instanceof ParseException) {
            throw (ParseException)jjte003;
          }
          throw (Error)jjte003;
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtn003.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                                /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceMemberDecl():
{/*@bgen(jjtree) InterfaceMemberDecl */
  InterfaceMemberDecl jjtn000 = new InterfaceMemberDecl(JJTINTERFACEMEMBERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceMemberDecl */
        try {
/*@egen*/
	InterfaceMethodOrFieldDecl()
	|
	( <VOID> Identifier() VoidInterfaceMethodDeclaratorRest() )
	|
	InterfaceGenericMethodDecl()
	|
	ClassDeclaration()
	|
	InterfaceDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceMethodOrFieldDecl():
{/*@bgen(jjtree) InterfaceMethodOrFieldDecl */
  InterfaceMethodOrFieldDecl jjtn000 = new InterfaceMethodOrFieldDecl(JJTINTERFACEMETHODORFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceMethodOrFieldDecl */
        try {
/*@egen*/
	Type() Identifier() InterfaceMethodOrFieldRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceMethodOrFieldRest():
{/*@bgen(jjtree) InterfaceMethodOrFieldRest */
  InterfaceMethodOrFieldRest jjtn000 = new InterfaceMethodOrFieldRest(JJTINTERFACEMETHODORFIELDREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceMethodOrFieldRest */
        try {
/*@egen*/
	( ConstantDeclaratorsRest() <SEMICOLON> )
	|
	InterfaceMethodDeclaratorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ConstantDeclaratorsRest():
{/*@bgen(jjtree) ConstantDeclaratorsRest */
  ConstantDeclaratorsRest jjtn000 = new ConstantDeclaratorsRest(JJTCONSTANTDECLARATORSREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ConstantDeclaratorsRest */
        try {
/*@egen*/
	ConstantDeclaratorRest() ( <COMA> ConstantDeclarator() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ConstantDeclaratorRest():
{/*@bgen(jjtree) ConstantDeclaratorRest */
  ConstantDeclaratorRest jjtn000 = new ConstantDeclaratorRest(JJTCONSTANTDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ConstantDeclaratorRest */
         try {
/*@egen*/
	 (<LBRACKET><RBRACKET>)* <EQUAL> VariableInitializer()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}

void ConstantDeclarator():
{/*@bgen(jjtree) ConstantDeclarator */
  ConstantDeclarator jjtn000 = new ConstantDeclarator(JJTCONSTANTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ConstantDeclarator */
        try {
/*@egen*/
	Identifier() ConstantDeclaratorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceMethodDeclaratorRest():
{/*@bgen(jjtree) InterfaceMethodDeclaratorRest */
  InterfaceMethodDeclaratorRest jjtn000 = new InterfaceMethodDeclaratorRest(JJTINTERFACEMETHODDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceMethodDeclaratorRest */
        try {
/*@egen*/
	FormalParameters() (<LBRACKET><RBRACKET>)* [<THROWS> QualifiedIdentifierList()] <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VoidInterfaceMethodDeclaratorRest():
{/*@bgen(jjtree) VoidInterfaceMethodDeclaratorRest */
  VoidInterfaceMethodDeclaratorRest jjtn000 = new VoidInterfaceMethodDeclaratorRest(JJTVOIDINTERFACEMETHODDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VoidInterfaceMethodDeclaratorRest */
        try {
/*@egen*/
	FormalParameters() [<THROWS> QualifiedIdentifierList()] <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceGenericMethodDecl():
{/*@bgen(jjtree) InterfaceGenericMethodDecl */
  InterfaceGenericMethodDecl jjtn000 = new InterfaceGenericMethodDecl(JJTINTERFACEGENERICMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InterfaceGenericMethodDecl */
        try {
/*@egen*/
	TypeParameters() ( Type() | <VOID> ) Identifier() InterfaceMethodDeclaratorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FormalParameters():
{/*@bgen(jjtree) FormalParameters */
  FormalParameters jjtn000 = new FormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FormalParameters */
        try {
/*@egen*/
	<LPAR>[ FormalParameterDecls() ]<RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FormalParameterDecls():
{/*@bgen(jjtree) FormalParameterDecls */
  FormalParameterDecls jjtn000 = new FormalParameterDecls(JJTFORMALPARAMETERDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FormalParameterDecls */
        try {
/*@egen*/
	( VariableModifier() )* Type() FormalParameterDeclsRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableModifier():
{/*@bgen(jjtree) VariableModifier */
  VariableModifier jjtn000 = new VariableModifier(JJTVARIABLEMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableModifier */
        try {
/*@egen*/
	<FINAL>
	|
	Annotation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FormalParameterDeclsRest():
{/*@bgen(jjtree) FormalParameterDeclsRest */
  FormalParameterDeclsRest jjtn000 = new FormalParameterDeclsRest(JJTFORMALPARAMETERDECLSREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FormalParameterDeclsRest */
        try {
/*@egen*/
	( VariableDeclaratorId() [<COMA> FormalParameterDecls()] )
	|
	( <ELLIPSIS> VariableDeclaratorId() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableDeclaratorId():
{/*@bgen(jjtree) VariableDeclaratorId */
  VariableDeclaratorId jjtn000 = new VariableDeclaratorId(JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableDeclaratorId */
        try {
/*@egen*/
	Identifier() (<LBRACKET> <RBRACKET>)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


// Slightly changed because this was defined as left recursive in intial grammar! Odd since it defines it as LL(k)
void VariableDeclarators():
{/*@bgen(jjtree) VariableDeclarators */
  VariableDeclarators jjtn000 = new VariableDeclarators(JJTVARIABLEDECLARATORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableDeclarators */
        try {
/*@egen*/
	VariableDeclarator() ( <COMA> VariableDeclarator() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableDeclarator():
{/*@bgen(jjtree) VariableDeclarator */
  VariableDeclarator jjtn000 = new VariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableDeclarator */
        try {
/*@egen*/
	Identifier() VariableDeclaratorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableDeclaratorRest():
{/*@bgen(jjtree) VariableDeclaratorRest */
  VariableDeclaratorRest jjtn000 = new VariableDeclaratorRest(JJTVARIABLEDECLARATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableDeclaratorRest */
        try {
/*@egen*/
	(<LBRACKET><RBRACKET>)* [<EQUAL> VariableInitializer()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableInitializer():
{/*@bgen(jjtree) VariableInitializer */
  VariableInitializer jjtn000 = new VariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VariableInitializer */
        try {
/*@egen*/
	Expression()
	|
	ArrayInitializer()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	//|
	//Expression()
}

void ArrayInitializer():
{/*@bgen(jjtree) ArrayInitializer */
  ArrayInitializer jjtn000 = new ArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ArrayInitializer */
        try {
/*@egen*/
	<LBRACE> [ VariableInitializer() (<COMA> VariableInitializer())* [<COMA>] ]  <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Block():
{/*@bgen(jjtree) Block */
  Block jjtn000 = new Block(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	<LBRACE> BlockStatements() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BlockStatements():
{/*@bgen(jjtree) BlockStatements */
  BlockStatements jjtn000 = new BlockStatements(JJTBLOCKSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) BlockStatements */
        try {
/*@egen*/
	( BlockStatement() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BlockStatement():
{/*@bgen(jjtree) BlockStatement */
  BlockStatement jjtn000 = new BlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) BlockStatement */
        try {
/*@egen*/
	LOOKAHEAD( ( VariableModifier() )* Type() VariableDeclarators() ) LocalVariableDeclarationStatement()
	|
	ClassOrInterfaceDeclaration()
	|
	( /*Identifier() <COLON> ]*/ Statement() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ // Weird original spec at that place considering statement definition. Unless counter-example found, leave prefix in comments
}

void LocalVariableDeclarationStatement():
{/*@bgen(jjtree) LocalVariableDeclarationStatement */
  LocalVariableDeclarationStatement jjtn000 = new LocalVariableDeclarationStatement(JJTLOCALVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) LocalVariableDeclarationStatement */
        try {
/*@egen*/
	( VariableModifier() )* Type() VariableDeclarators() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Statement():
{/*@bgen(jjtree) Statement */
  Statement jjtn000 = new Statement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	Block()
	|
	EmptyStatement()
	|
	IdentifierStatement()
	|
	StatementExpression()
	|
	IfStatement()
	|
	AssertStatement()
	|
	SwitchStatement()
	|
	WhileStatement()
	|
	DoStatement()
	|
	ForStatement()
	|
	BreakStatement()
	|
	ContinueStatement()
	|
	ReturnStatement()
	|
	ThrowStatement()
	|
	SynchronizedStatement()
	|
	TryStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EmptyStatement():
{/*@bgen(jjtree) EmptyStatement */
  EmptyStatement jjtn000 = new EmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EmptyStatement */
        try {
/*@egen*/
	<SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IdentifierStatement():
{/*@bgen(jjtree) IdentifierStatement */
  IdentifierStatement jjtn000 = new IdentifierStatement(JJTIDENTIFIERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) IdentifierStatement */
        try {
/*@egen*/
	Identifier() <COLON> Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void StatementExpression():
{/*@bgen(jjtree) StatementExpression */
  StatementExpression jjtn000 = new StatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) StatementExpression */
        try {
/*@egen*/
	Expression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IfStatement():
{/*@bgen(jjtree) IfStatement */
  IfStatement jjtn000 = new IfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	<IF> ParExpression() Statement()/*@bgen(jjtree) #NoElseStatement( jjtree . nodeArity ( ) == 0) */
                                         {
                                           NoElseStatement jjtn002 = new NoElseStatement(JJTNOELSESTATEMENT);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtn002.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ ( <ELSE>/*@bgen(jjtree) #ElseStatement(true) */
                                                  {
                                                    ElseStatement jjtn001 = new ElseStatement(JJTELSESTATEMENT);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                  )?/*@bgen(jjtree)*/
                                         } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte002;
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             throw (ParseException)jjte002;
                                           }
                                           throw (Error)jjte002;
                                         } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
                                             jjtn002.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/                                        /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AssertStatement():
{/*@bgen(jjtree) AssertStatement */
  AssertStatement jjtn000 = new AssertStatement(JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AssertStatement */
        try {
/*@egen*/
	<ASSERT> Expression() [ <COLON> Expression() ] <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchStatement():
{/*@bgen(jjtree) SwitchStatement */
  SwitchStatement jjtn000 = new SwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	<SWITCH> ParExpression() <LBRACE> SwitchBlockStatementGroups() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void WhileStatement():
{/*@bgen(jjtree) WhileStatement */
  WhileStatement jjtn000 = new WhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) WhileStatement */
        try {
/*@egen*/
	<WHILE> ParExpression() Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void DoStatement():
{/*@bgen(jjtree) DoStatement */
  DoStatement jjtn000 = new DoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) DoStatement */
        try {
/*@egen*/
	<DO> Statement() <WHILE> ParExpression() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForStatement():
{/*@bgen(jjtree) ForStatement */
  ForStatement jjtn000 = new ForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForStatement */
        try {
/*@egen*/
	<FOR> <LPAR> ForControl() <RPAR> Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BreakStatement():
{/*@bgen(jjtree) BreakStatement */
  BreakStatement jjtn000 = new BreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	<BREAK>/*@bgen(jjtree) #UnlabeledBreak( jjtree . nodeArity ( ) == 0) */
                {
                  UnlabeledBreak jjtn002 = new UnlabeledBreak(JJTUNLABELEDBREAK);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ (/*@bgen(jjtree) #LabeledBreak(true) */
                 {
                   LabeledBreak jjtn001 = new LabeledBreak(JJTLABELEDBREAK);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                )?/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                                        <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ContinueStatement():
{/*@bgen(jjtree) ContinueStatement */
  ContinueStatement jjtn000 = new ContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
	<CONTINUE>/*@bgen(jjtree) #UnlabeledContinue( jjtree . nodeArity ( ) == 0) */
                   {
                     UnlabeledContinue jjtn002 = new UnlabeledContinue(JJTUNLABELEDCONTINUE);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ (/*@bgen(jjtree) #LabeledContinue(true) */
                    {
                      LabeledContinue jjtn001 = new LabeledContinue(JJTLABELEDCONTINUE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
                    }
                    try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
                    }
/*@egen*/                   )?/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  jjtree . nodeArity ( ) == 0);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/                                           <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ReturnStatement():
{/*@bgen(jjtree) ReturnStatement */
  ReturnStatement jjtn000 = new ReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ReturnStatement */
        try {
/*@egen*/
	<RETURN> [Expression()] <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ThrowStatement():
{/*@bgen(jjtree) ThrowStatement */
  ThrowStatement jjtn000 = new ThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	<THROW> [Expression()] <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SynchronizedStatement():
{/*@bgen(jjtree) SynchronizedStatement */
  SynchronizedStatement jjtn000 = new SynchronizedStatement(JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SynchronizedStatement */
        try {
/*@egen*/
	<SYNCHRONIZED> ParExpression() Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Rule inversion required for epsilon production and LOOKAHEAD
// Changed weird Catches/Finally rule to make both optionnal
void TryStatement():
{/*@bgen(jjtree) TryStatement */
  TryStatement jjtn000 = new TryStatement(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) TryStatement */
        try {
/*@egen*/
	<TRY>
	(
		//( Block() (( [Catches()] Finally() ) | Catches() ) )
		( Block() [Catches()] [Finally()] )
		|
		(ResourceSpecification() Block() [Catches()] [Finally()] )
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Catches():
{/*@bgen(jjtree) Catches */
  Catches jjtn000 = new Catches(JJTCATCHES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Catches */
        try {
/*@egen*/
	CatchClause() ( CatchClause() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CatchClause():
{/*@bgen(jjtree) CatchClause */
  CatchClause jjtn000 = new CatchClause(JJTCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CatchClause */
        try {
/*@egen*/
	<CATCH> <LPAR> ( VariableModifier() )* CatchType() Identifier() <RPAR> Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Possible mistake from | to .
// Definitely not a mistake, but can't tell semantic yet! Construct found in OpenJDK
void CatchType():
{/*@bgen(jjtree) CatchType */
  CatchType jjtn000 = new CatchType(JJTCATCHTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CatchType */
        try {
/*@egen*/
	QualifiedIdentifier() ( <BINARYOR> QualifiedIdentifier() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	//Identifier() (<DOT> Identifier() ) *
}

void Finally():
{/*@bgen(jjtree) Finally */
  Finally jjtn000 = new Finally(JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Finally */
        try {
/*@egen*/
	<FINALLY> Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ResourceSpecification():
{/*@bgen(jjtree) ResourceSpecification */
  ResourceSpecification jjtn000 = new ResourceSpecification(JJTRESOURCESPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ResourceSpecification */
        try {
/*@egen*/
	<LPAR> Resources() [ <SEMICOLON> ] <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Resources():
{/*@bgen(jjtree) Resources */
  Resources jjtn000 = new Resources(JJTRESOURCES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Resources */
        try {
/*@egen*/
	Resource() ( <SEMICOLON> Resource() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Resource():
{/*@bgen(jjtree) Resource */
  Resource jjtn000 = new Resource(JJTRESOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Resource */
        try {
/*@egen*/
	( VariableModifier() )* ReferenceType() VariableDeclaratorId() <EQUAL> Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchBlockStatementGroups():
{/*@bgen(jjtree) SwitchBlockStatementGroups */
  SwitchBlockStatementGroups jjtn000 = new SwitchBlockStatementGroups(JJTSWITCHBLOCKSTATEMENTGROUPS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SwitchBlockStatementGroups */
        try {
/*@egen*/
	( SwitchBlockStatementGroup() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchBlockStatementGroup():
{/*@bgen(jjtree) SwitchBlockStatementGroup */
  SwitchBlockStatementGroup jjtn000 = new SwitchBlockStatementGroup(JJTSWITCHBLOCKSTATEMENTGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SwitchBlockStatementGroup */
        try {
/*@egen*/
	SwitchLabels() BlockStatements()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchLabels():
{/*@bgen(jjtree) SwitchLabels */
  SwitchLabels jjtn000 = new SwitchLabels(JJTSWITCHLABELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SwitchLabels */
        try {
/*@egen*/
	SwitchLabel() ( SwitchLabel() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SwitchLabel():
{/*@bgen(jjtree) SwitchLabel */
  SwitchLabel jjtn000 = new SwitchLabel(JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SwitchLabel */
        try {
/*@egen*/
	( <CASE> Expression() <COLON> )
	|
	( <CASE> EnumConstantName() <COLON> )
	|
	( <DEFAULTTK> <COLON> )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EnumConstantName():
{/*@bgen(jjtree) EnumConstantName */
  EnumConstantName jjtn000 = new EnumConstantName(JJTENUMCONSTANTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumConstantName */
        try {
/*@egen*/
	Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


// Spec has mandatory Init, but it is optionnal in many compilers
void ForControl():
{/*@bgen(jjtree) ForControl */
  ForControl jjtn000 = new ForControl(JJTFORCONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForControl */
        try {
/*@egen*/
	LOOKAHEAD(ForVarControl()) ForVarControl() // Lookahead on Type because of ambiguity on variable ID and type ID
	|
	( [ForInit()] <SEMICOLON> [Expression()] <SEMICOLON> [ForUpdate()] )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForVarControl():
{/*@bgen(jjtree) ForVarControl */
  ForVarControl jjtn000 = new ForVarControl(JJTFORVARCONTROL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForVarControl */
        try {
/*@egen*/
	( VariableModifier() )* Type() VariableDeclaratorId() ForVarControlRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForVarControlRest():
{/*@bgen(jjtree) ForVarControlRest */
  ForVarControlRest jjtn000 = new ForVarControlRest(JJTFORVARCONTROLREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForVarControlRest */
        try {
/*@egen*/
	( ForVariableDeclaratorsRest() <SEMICOLON> [Expression()] <SEMICOLON> [ LOOKAHEAD(2) ForUpdate() ] )
	|
	(<COLON>  Expression() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForVariableDeclaratorsRest():
{/*@bgen(jjtree) ForVariableDeclaratorsRest */
  ForVariableDeclaratorsRest jjtn000 = new ForVariableDeclaratorsRest(JJTFORVARIABLEDECLARATORSREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForVariableDeclaratorsRest */
        try {
/*@egen*/
	[ <EQUAL> VariableInitializer()] ( <COMA> VariableDeclarator() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForInit():
{/*@bgen(jjtree) ForInit */
  ForInit jjtn000 = new ForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForInit */
        try {
/*@egen*/
	ForUpdate()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ForUpdate():
{/*@bgen(jjtree) ForUpdate */
  ForUpdate jjtn000 = new ForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ForUpdate */
        try {
/*@egen*/
	Expression() ( <COMA> Expression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


// Breaking the original rule to follow the classic expression pattern. Oddly, the original spec of the grammar shouldn't allow a = b = c, but compilers
// allow it, hence the change.
void Expression():
{/*@bgen(jjtree) Expression */
  Expression jjtn000 = new Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	Expression1() [ExpressionRest()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ExpressionRest():
{/*@bgen(jjtree) ExpressionRest */
  ExpressionRest jjtn000 = new ExpressionRest(JJTEXPRESSIONREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ExpressionRest */
        try {
/*@egen*/
	AssignmentOperator() Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AssignmentOperator():
{/*@bgen(jjtree) AssignmentOperator */
  AssignmentOperator jjtn000 = new AssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	<EQUAL>
	|
	<PLUSEQUAL>
	|
	<MINUSEQUAL>
	|
	<TIMESEQUAL>
	|
	<DIVIDEEQUAL>
	|
	<BINARYANDEQUAL>
	|
	<BINARYOREQUAL>
	|
	<BINARYXOREQUAL>
	|
	<MODULOEQUAL>
	|
	<LBINARYSHIFTEQUAL>
	|
	<RBINARYSHIFTEQUAL>
	|
	<TRIPLESHIFTEQUAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Expression1():
{/*@bgen(jjtree) Expression1 */
  Expression1 jjtn000 = new Expression1(JJTEXPRESSION1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression1 */
        try {
/*@egen*/
	Expression2() [Expression1Rest()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Expression1Rest():
{/*@bgen(jjtree) Expression1Rest */
  Expression1Rest jjtn000 = new Expression1Rest(JJTEXPRESSION1REST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression1Rest */
        try {
/*@egen*/
	<QMARK> Expression() <COLON> Expression1()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Expression2():
{/*@bgen(jjtree) Expression2 */
  Expression2 jjtn000 = new Expression2(JJTEXPRESSION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression2 */
        try {
/*@egen*/
	Expression3() Expression2Rest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Rule inversion to prevent epsilon production to be of higher precedence
void Expression2Rest():
{/*@bgen(jjtree) Expression2Rest */
  Expression2Rest jjtn000 = new Expression2Rest(JJTEXPRESSION2REST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression2Rest */
try {
/*@egen*/
(
        LOOKAHEAD(<INSTANCEOF> Type()) ( <INSTANCEOF> Type())
	|
	( InfixOp() Expression3() )
)*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void InfixOp():
{/*@bgen(jjtree) InfixOp */
  InfixOp jjtn000 = new InfixOp(JJTINFIXOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InfixOp */
        try {
/*@egen*/
	<LOGICALOR>
	|
	<LOGICALAND>
	|
	<BINARYOR>
	|
	<BINARYXOR>
	|
	<BINARYAND>
	|
	<LOGICALEQUAL>
	|
	<NOTEQUAL>
	|
	<LT>
	|
	(<GT> [ <GT> [<GT>]])
	|
	<LTEQUAL>
	|
	<GTEQUAL>
	|
	<LBINARYSHIFT>
	//|
	//<RBINARYSHIFT>
	//|
	//<TRIPLESHIFT>
	|
	<PLUS>
	|
	<MINUS>
	|
	<STAR>
	|
	<DIVIDE>
	|
	<MODULO>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Possible typo in original spec (maybe not...)
// order change for conflict resolution
// Original is ambiguous; this is a satisfying parse instead
void Expression3():
{/*@bgen(jjtree) Expression3 */
  Expression3 jjtn000 = new Expression3(JJTEXPRESSION3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Expression3 */
        try {
/*@egen*/
	( PrefixOp() Expression3() )
	//( ( Expression()|Type() ) Expression3() )
	|
	( Primary() ( Selector() )* (PostfixOp() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	//( ( Expression()|Type() ) Expression3() )
	//|
	//( Primary() [Expression3()] ( Selector() )* (PostfixOp() )* )
}

void PrefixOp():
{/*@bgen(jjtree) PrefixOp */
  PrefixOp jjtn000 = new PrefixOp(JJTPREFIXOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) PrefixOp */
        try {
/*@egen*/
	<PLUSPLUS>
	|
	<MINUSMINUS>
	|
	<NOT>
	|
	<BINARYNOT>
	|
	<PLUS>
	|
	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PostfixOp():
{/*@bgen(jjtree) PostfixOp */
  PostfixOp jjtn000 = new PostfixOp(JJTPOSTFIXOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) PostfixOp */
        try {
/*@egen*/
	<PLUSPLUS>
	|
	<MINUSMINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Primary():
{/*@bgen(jjtree) Primary */
  Primary jjtn000 = new Primary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Primary */
        try {
/*@egen*/
	Literal()
	|
	( ParExpression() [LOOKAHEAD(Expression3()) Expression3()] ) // This Lookahead makes sure the expression can parse as Expression3 completely; avoid ambiguity with < from template and infix op
	|
	( <THIS> [Arguments()] )
	|
	( <SUPER> SuperSuffix() )
	|
	( <NEW> Creator() )
	|
	( NonWildcardTypeArguments() ( ExplicitGenericInvocationSuffix() | (<THIS> Arguments() ) ) )
	|
	( Identifier() [LOOKAHEAD(TypeArguments()) TypeArguments()]  (<LBRACKET><RBRACKET>)* ( <DOT> Identifier() [LOOKAHEAD(TypeArguments()) TypeArguments()] (<LBRACKET><RBRACKET>)* )* [ IdentifierSuffix()] )
	|
	( BasicType() (<LBRACKET><RBRACKET>)* [<DOT> <CLASS>] )
	|
	( <VOID> <DOT> <CLASS> )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	//|
	//Type()
}

void Literal():
{/*@bgen(jjtree) Literal */
  Literal jjtn000 = new Literal(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	IntegerLiteral()
	|
	FloatingPointLiteral()
	|
	CharacterLiteral()
	|
	StringLiteral()
	|
	BooleanLiteral()
	|
	NullLiteral()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IntegerLiteral():
{/*@bgen(jjtree) IntegerLiteral */
  IntegerLiteral jjtn000 = new IntegerLiteral(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) IntegerLiteral */
        try {
/*@egen*/
	<INTEGER_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void FloatingPointLiteral():
{/*@bgen(jjtree) FloatingPointLiteral */
  FloatingPointLiteral jjtn000 = new FloatingPointLiteral(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FloatingPointLiteral */
        try {
/*@egen*/
	<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CharacterLiteral():
{/*@bgen(jjtree) CharacterLiteral */
  CharacterLiteral jjtn000 = new CharacterLiteral(JJTCHARACTERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CharacterLiteral */
        try {
/*@egen*/
	<CHARACTER_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void StringLiteral():
{/*@bgen(jjtree) StringLiteral */
  StringLiteral jjtn000 = new StringLiteral(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) StringLiteral */
        try {
/*@egen*/
	<STRING_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BooleanLiteral():
{/*@bgen(jjtree) BooleanLiteral */
  BooleanLiteral jjtn000 = new BooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) BooleanLiteral */
        try {
/*@egen*/
	<BOOLEAN_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void NullLiteral():
{/*@bgen(jjtree) NullLiteral */
  NullLiteral jjtn000 = new NullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) NullLiteral */
        try {
/*@egen*/
	<NULL_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ParExpression():
{/*@bgen(jjtree) ParExpression */
  ParExpression jjtn000 = new ParExpression(JJTPAREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ParExpression */
        try {
/*@egen*/
	<LPAR>
	(
		//LOOKAHEAD( <LPAR> | Expression() <RPAR> ) Expression() // Weird LOOKAHEAD, but prefix with <LPAR> guarantees an expression so it is enough, else need to check whole expression to avoid type ambiguity (because of generics)
		//|
		//Type()
		Expression()
	)
	<RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Arguments():
{/*@bgen(jjtree) Arguments */
  Arguments jjtn000 = new Arguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Arguments */
        try {
/*@egen*/
	<LPAR> [Expression() ( <COMA> Expression() )*] <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SuperSuffix():
{/*@bgen(jjtree) SuperSuffix */
  SuperSuffix jjtn000 = new SuperSuffix(JJTSUPERSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SuperSuffix */
        try {
/*@egen*/
	Arguments()
	|
	( <DOT> Identifier() [Arguments()] )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ExplicitGenericInvocationSuffix():
{/*@bgen(jjtree) ExplicitGenericInvocationSuffix */
  ExplicitGenericInvocationSuffix jjtn000 = new ExplicitGenericInvocationSuffix(JJTEXPLICITGENERICINVOCATIONSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ExplicitGenericInvocationSuffix */
        try {
/*@egen*/
	( <SUPER> SuperSuffix() )
	|
	( Identifier() Arguments() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Additionnal rule for arrays
void Creator():
{/*@bgen(jjtree) Creator */
  Creator jjtn000 = new Creator(JJTCREATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Creator */
        try {
/*@egen*/
	( NonWildcardTypeArguments() CreatedName() ClassCreatorRest() )
	|
	( CreatedName() (ClassCreatorRest() | ArrayCreatorRest() ) )
	|
	( BasicType() ArrayCreatorRest() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CreatedName():
{/*@bgen(jjtree) CreatedName */
  CreatedName jjtn000 = new CreatedName(JJTCREATEDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) CreatedName */
        try {
/*@egen*/
	Identifier() [TypeArgumentsOrDiamond()] ( <DOT> Identifier() [TypeArgumentsOrDiamond()] )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassCreatorRest():
{/*@bgen(jjtree) ClassCreatorRest */
  ClassCreatorRest jjtn000 = new ClassCreatorRest(JJTCLASSCREATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ClassCreatorRest */
        try {
/*@egen*/
	Arguments() [ ClassBody() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


// Maybe incorrect in spec ???
void ArrayCreatorRest():
{/*@bgen(jjtree) ArrayCreatorRest */
  ArrayCreatorRest jjtn000 = new ArrayCreatorRest(JJTARRAYCREATORREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ArrayCreatorRest */
        try {
/*@egen*/
	<LBRACKET> ( (<RBRACKET> (<LBRACKET><RBRACKET>)* ArrayInitializer() ) | ( Expression() <RBRACKET> (<LBRACKET> Expression() <RBRACKET> )* (<LBRACKET><RBRACKET>)* ) )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ //<RBRACKET>
}

void IdentifierSuffix():
{/*@bgen(jjtree) IdentifierSuffix */
  IdentifierSuffix jjtn000 = new IdentifierSuffix(JJTIDENTIFIERSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) IdentifierSuffix */
        try {
/*@egen*/
	( <LBRACKET> [ ( (<RBRACKET><LBRACKET>)* <RBRACKET> <DOT><CLASS>)|Expression() <RBRACKET>]  ) // Making index optionnal allows for ParExpression to parse with array types to. Definitely a hack but it allows more flexible parsing
	|
	Arguments()
	|
	( <DOT> (<CLASS> | ExplicitGenericInvocation() | <THIS> | (<SUPER> Arguments() ) | (<NEW> [NonWildcardTypeArguments()]InnerCreator() ) ) )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ExplicitGenericInvocation():
{/*@bgen(jjtree) ExplicitGenericInvocation */
  ExplicitGenericInvocation jjtn000 = new ExplicitGenericInvocation(JJTEXPLICITGENERICINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ExplicitGenericInvocation */
        try {
/*@egen*/
	NonWildcardTypeArguments() ExplicitGenericInvocationSuffix()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InnerCreator():
{/*@bgen(jjtree) InnerCreator */
  InnerCreator jjtn000 = new InnerCreator(JJTINNERCREATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) InnerCreator */
        try {
/*@egen*/
	Identifier() [NonWildcardTypeArgumentsOrDiamond()] ClassCreatorRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Selector():
{/*@bgen(jjtree) Selector */
  Selector jjtn000 = new Selector(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Selector */
        try {
/*@egen*/
	(<DOT> Identifier() [Arguments()] )
	|
	(<DOT> ExplicitGenericInvocation() )
	|
	(<DOT> <THIS>)
	|
	(<DOT> <SUPER> SuperSuffix() )
	|
	(<DOT> <NEW> NonWildcardTypeArguments() InnerCreator() )
	|
	( <LBRACKET> Expression() <RBRACKET> )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EnumBody():
{/*@bgen(jjtree) EnumBody */
  EnumBody jjtn000 = new EnumBody(JJTENUMBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumBody */
        try {
/*@egen*/
	<LBRACE> [EnumConstants()] [<COMA>] [EnumBodyDeclarations()] <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Possible inversion in original spec
// Left recursive in original spec
void EnumConstants():
{/*@bgen(jjtree) EnumConstants */
  EnumConstants jjtn000 = new EnumConstants(JJTENUMCONSTANTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumConstants */
        try {
/*@egen*/
	EnumConstant()
	//|
	// ( EnumConstants() <COMA> EnumConstant() )
	//( EnumConstant() <COMA> EnumConstants() )
	[ <COMA> EnumConstants() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EnumConstant():
{/*@bgen(jjtree) EnumConstant */
  EnumConstant jjtn000 = new EnumConstant(JJTENUMCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumConstant */
        try {
/*@egen*/
	[Annotations()] Identifier() [Arguments()] [ClassBody()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EnumBodyDeclarations():
{/*@bgen(jjtree) EnumBodyDeclarations */
  EnumBodyDeclarations jjtn000 = new EnumBodyDeclarations(JJTENUMBODYDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) EnumBodyDeclarations */
        try {
/*@egen*/
	<SEMICOLON> (ClassBodyDeclaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Written loc cit as in the spec, but I believe it is inconsistent; changed due to epsilon production, but spec is clearly inconsistent
void AnnotationTypeBody():
{/*@bgen(jjtree) AnnotationTypeBody */
  AnnotationTypeBody jjtn000 = new AnnotationTypeBody(JJTANNOTATIONTYPEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationTypeBody */
        try {
/*@egen*/
	//( [AnnotationTypeElementDeclarations()] )*
	<LBRACE> ( AnnotationTypeElementDeclarations() )* <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

// Possible inversion in original spec
void AnnotationTypeElementDeclarations():
{/*@bgen(jjtree) AnnotationTypeElementDeclarations */
  AnnotationTypeElementDeclarations jjtn000 = new AnnotationTypeElementDeclarations(JJTANNOTATIONTYPEELEMENTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationTypeElementDeclarations */
        try {
/*@egen*/
	AnnotationTypeElementDeclaration()
	|
	( AnnotationTypeElementDeclaration() AnnotationTypeElementDeclarations() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationTypeElementDeclaration():
{/*@bgen(jjtree) AnnotationTypeElementDeclaration */
  AnnotationTypeElementDeclaration jjtn000 = new AnnotationTypeElementDeclaration(JJTANNOTATIONTYPEELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationTypeElementDeclaration */
        try {
/*@egen*//*@bgen(jjtree) ModifierList */
        {
          ModifierList jjtn001 = new ModifierList(JJTMODIFIERLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
	(( Modifier() )*)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/              AnnotationTypeElementRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationTypeElementRest():
{/*@bgen(jjtree) AnnotationTypeElementRest */
  AnnotationTypeElementRest jjtn000 = new AnnotationTypeElementRest(JJTANNOTATIONTYPEELEMENTREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationTypeElementRest */
        try {
/*@egen*/
	( Type() Identifier() AnnotationMethodOrConstantRest() <SEMICOLON> )
	|
	ClassDeclaration()
	|
	InterfaceDeclaration()
	|
	EnumDeclaration()
	|
	AnnotationTypeDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationMethodOrConstantRest():
{/*@bgen(jjtree) AnnotationMethodOrConstantRest */
  AnnotationMethodOrConstantRest jjtn000 = new AnnotationMethodOrConstantRest(JJTANNOTATIONMETHODORCONSTANTREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationMethodOrConstantRest */
        try {
/*@egen*/
	AnnotationMethodRest() | ConstantDeclaratorsRest()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AnnotationMethodRest():
{/*@bgen(jjtree) AnnotationMethodRest */
  AnnotationMethodRest jjtn000 = new AnnotationMethodRest(JJTANNOTATIONMETHODREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) AnnotationMethodRest */
        try {
/*@egen*/
	<LPAR><RPAR> [<LBRACKET><RBRACKET>] [<DEFAULTTK> ElementValue() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

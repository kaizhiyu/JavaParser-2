/* Generated By:JJTree&JavaCC: Do not edit this line. JavaParser1_7Constants.java */
package javaparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParser1_7Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int END_OF_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTILINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 11;
  /** RegularExpression Id. */
  int ASSERT = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int BREAK = 14;
  /** RegularExpression Id. */
  int BYTE = 15;
  /** RegularExpression Id. */
  int CASE = 16;
  /** RegularExpression Id. */
  int CATCH = 17;
  /** RegularExpression Id. */
  int CHAR = 18;
  /** RegularExpression Id. */
  int CLASS = 19;
  /** RegularExpression Id. */
  int CONST = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int DEFAULTTK = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int ENUM = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int FINAL = 28;
  /** RegularExpression Id. */
  int FINALLY = 29;
  /** RegularExpression Id. */
  int FLOAT = 30;
  /** RegularExpression Id. */
  int FOR = 31;
  /** RegularExpression Id. */
  int IF = 32;
  /** RegularExpression Id. */
  int GOTO = 33;
  /** RegularExpression Id. */
  int IMPLEMENTS = 34;
  /** RegularExpression Id. */
  int IMPORT = 35;
  /** RegularExpression Id. */
  int INSTANCEOF = 36;
  /** RegularExpression Id. */
  int INT = 37;
  /** RegularExpression Id. */
  int INTERFACE = 38;
  /** RegularExpression Id. */
  int LONG = 39;
  /** RegularExpression Id. */
  int NATIVE = 40;
  /** RegularExpression Id. */
  int NEW = 41;
  /** RegularExpression Id. */
  int PACKAGE = 42;
  /** RegularExpression Id. */
  int PRIVATE = 43;
  /** RegularExpression Id. */
  int PROTECTED = 44;
  /** RegularExpression Id. */
  int PUBLIC = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int SHORT = 47;
  /** RegularExpression Id. */
  int STATIC = 48;
  /** RegularExpression Id. */
  int STRICTFP = 49;
  /** RegularExpression Id. */
  int SUPER = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 52;
  /** RegularExpression Id. */
  int THIS = 53;
  /** RegularExpression Id. */
  int THROW = 54;
  /** RegularExpression Id. */
  int THROWS = 55;
  /** RegularExpression Id. */
  int TRANSIENT = 56;
  /** RegularExpression Id. */
  int TRY = 57;
  /** RegularExpression Id. */
  int VOID = 58;
  /** RegularExpression Id. */
  int VOLATILE = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int EQUAL = 61;
  /** RegularExpression Id. */
  int LOGICALEQUAL = 62;
  /** RegularExpression Id. */
  int GT = 63;
  /** RegularExpression Id. */
  int LT = 64;
  /** RegularExpression Id. */
  int NOT = 65;
  /** RegularExpression Id. */
  int BINARYNOT = 66;
  /** RegularExpression Id. */
  int QMARK = 67;
  /** RegularExpression Id. */
  int COLON = 68;
  /** RegularExpression Id. */
  int LTEQUAL = 69;
  /** RegularExpression Id. */
  int GTEQUAL = 70;
  /** RegularExpression Id. */
  int NOTEQUAL = 71;
  /** RegularExpression Id. */
  int LOGICALAND = 72;
  /** RegularExpression Id. */
  int LOGICALOR = 73;
  /** RegularExpression Id. */
  int PLUSPLUS = 74;
  /** RegularExpression Id. */
  int MINUSMINUS = 75;
  /** RegularExpression Id. */
  int PLUS = 76;
  /** RegularExpression Id. */
  int MINUS = 77;
  /** RegularExpression Id. */
  int STAR = 78;
  /** RegularExpression Id. */
  int DIVIDE = 79;
  /** RegularExpression Id. */
  int BINARYAND = 80;
  /** RegularExpression Id. */
  int BINARYOR = 81;
  /** RegularExpression Id. */
  int BINARYXOR = 82;
  /** RegularExpression Id. */
  int MODULO = 83;
  /** RegularExpression Id. */
  int LBINARYSHIFT = 84;
  /** RegularExpression Id. */
  int PLUSEQUAL = 85;
  /** RegularExpression Id. */
  int MINUSEQUAL = 86;
  /** RegularExpression Id. */
  int TIMESEQUAL = 87;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 88;
  /** RegularExpression Id. */
  int BINARYANDEQUAL = 89;
  /** RegularExpression Id. */
  int BINARYOREQUAL = 90;
  /** RegularExpression Id. */
  int BINARYXOREQUAL = 91;
  /** RegularExpression Id. */
  int MODULOEQUAL = 92;
  /** RegularExpression Id. */
  int LBINARYSHIFTEQUAL = 93;
  /** RegularExpression Id. */
  int RBINARYSHIFTEQUAL = 94;
  /** RegularExpression Id. */
  int TRIPLESHIFTEQUAL = 95;
  /** RegularExpression Id. */
  int LPAR = 96;
  /** RegularExpression Id. */
  int RPAR = 97;
  /** RegularExpression Id. */
  int LBRACE = 98;
  /** RegularExpression Id. */
  int RBRACE = 99;
  /** RegularExpression Id. */
  int LBRACKET = 100;
  /** RegularExpression Id. */
  int RBRACKET = 101;
  /** RegularExpression Id. */
  int SEMICOLON = 102;
  /** RegularExpression Id. */
  int COMA = 103;
  /** RegularExpression Id. */
  int DOT = 104;
  /** RegularExpression Id. */
  int AROBAS = 105;
  /** RegularExpression Id. */
  int ELLIPSIS = 106;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 107;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 108;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 109;
  /** RegularExpression Id. */
  int HEX_LITERAL = 110;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 111;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 112;
  /** RegularExpression Id. */
  int INTEGER_SUFFIX = 113;
  /** RegularExpression Id. */
  int FLOAT_TYPE_SUFFIX = 114;
  /** RegularExpression Id. */
  int DECIMAL_NUMERAL = 115;
  /** RegularExpression Id. */
  int DIGITS = 116;
  /** RegularExpression Id. */
  int DIGITS_AND_UNDERSCORES = 117;
  /** RegularExpression Id. */
  int DIGIT_OR_UNDERSCORE = 118;
  /** RegularExpression Id. */
  int DIGIT = 119;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 120;
  /** RegularExpression Id. */
  int UNDERSCORES = 121;
  /** RegularExpression Id. */
  int HEX_NUMERAL = 122;
  /** RegularExpression Id. */
  int HEX_DIGITS = 123;
  /** RegularExpression Id. */
  int HEX_DIGIT = 124;
  /** RegularExpression Id. */
  int HEX_DIGITS_AND_UNDERSCORES = 125;
  /** RegularExpression Id. */
  int HEX_DIGIT_OR_UNDERSCORE = 126;
  /** RegularExpression Id. */
  int OCTAL_NUMERAL = 127;
  /** RegularExpression Id. */
  int OCTAL_DIGITS = 128;
  /** RegularExpression Id. */
  int OCTAL_DIGIT = 129;
  /** RegularExpression Id. */
  int OCTAL_DIGITS_AND_UNDERSCORES = 130;
  /** RegularExpression Id. */
  int OCTAL_DIGIT_OR_UNDERSCORE = 131;
  /** RegularExpression Id. */
  int BINARY_NUMERAL = 132;
  /** RegularExpression Id. */
  int BINARY_DIGITS = 133;
  /** RegularExpression Id. */
  int BINARY_DIGIT = 134;
  /** RegularExpression Id. */
  int BINARY_DIGITS_AND_UNDERSCORES = 135;
  /** RegularExpression Id. */
  int BINARY_DIGIT_OR_UNDERSCORE = 136;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 137;
  /** RegularExpression Id. */
  int EXPONENT_PART = 138;
  /** RegularExpression Id. */
  int EXPONENT_INDICATOR = 139;
  /** RegularExpression Id. */
  int SIGNED_INTEGER = 140;
  /** RegularExpression Id. */
  int SIGN = 141;
  /** RegularExpression Id. */
  int FLOAT_SUFFIX = 142;
  /** RegularExpression Id. */
  int HEX_FLOATING_POINT_LITERAL = 143;
  /** RegularExpression Id. */
  int HEX_SIGNIFICAND = 144;
  /** RegularExpression Id. */
  int BINARY_EXPONENT = 145;
  /** RegularExpression Id. */
  int BINARY_EXPONENT_INDICATOR = 146;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 147;
  /** RegularExpression Id. */
  int NULL_LITERAL = 148;
  /** RegularExpression Id. */
  int IDENTIFIER = 149;
  /** RegularExpression Id. */
  int JAVA_LETTER = 150;
  /** RegularExpression Id. */
  int JAVA_DIGIT = 151;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 152;
  /** RegularExpression Id. */
  int STRING_LITERAL = 153;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTILINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\n\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "<END_OF_LINE_COMMENT>",
    "\"/*\"",
    "<token of kind 9>",
    "\"*/\"",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"if\"",
    "\"goto\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"=\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"...\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<INTEGER_SUFFIX>",
    "<FLOAT_TYPE_SUFFIX>",
    "<DECIMAL_NUMERAL>",
    "<DIGITS>",
    "<DIGITS_AND_UNDERSCORES>",
    "<DIGIT_OR_UNDERSCORE>",
    "<DIGIT>",
    "<NON_ZERO_DIGIT>",
    "<UNDERSCORES>",
    "<HEX_NUMERAL>",
    "<HEX_DIGITS>",
    "<HEX_DIGIT>",
    "<HEX_DIGITS_AND_UNDERSCORES>",
    "<HEX_DIGIT_OR_UNDERSCORE>",
    "<OCTAL_NUMERAL>",
    "<OCTAL_DIGITS>",
    "<OCTAL_DIGIT>",
    "<OCTAL_DIGITS_AND_UNDERSCORES>",
    "<OCTAL_DIGIT_OR_UNDERSCORE>",
    "<BINARY_NUMERAL>",
    "<BINARY_DIGITS>",
    "<BINARY_DIGIT>",
    "<BINARY_DIGITS_AND_UNDERSCORES>",
    "<BINARY_DIGIT_OR_UNDERSCORE>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<EXPONENT_PART>",
    "<EXPONENT_INDICATOR>",
    "<SIGNED_INTEGER>",
    "<SIGN>",
    "<FLOAT_SUFFIX>",
    "<HEX_FLOATING_POINT_LITERAL>",
    "<HEX_SIGNIFICAND>",
    "<BINARY_EXPONENT>",
    "<BINARY_EXPONENT_INDICATOR>",
    "<BOOLEAN_LITERAL>",
    "\"null\"",
    "<IDENTIFIER>",
    "<JAVA_LETTER>",
    "<JAVA_DIGIT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
  };

}

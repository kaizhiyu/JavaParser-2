/* Generated By:JJTree&JavaCC: Do not edit this line. JavaParser1_7TokenManager.java */
package javaparser;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class JavaParser1_7TokenManager implements JavaParser1_7Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L || (active1 & 0x1008000L) != 0L)
            return 0;
         if ((active0 & 0x3e0000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            return 20;
         }
         if ((active0 & 0x1c1fffff0ffff800L) != 0L || (active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 149;
            return 27;
         }
         if ((active0 & 0xf0000000L) != 0L)
         {
            jjmatchedKind = 149;
            return 24;
         }
         if ((active1 & 0x50000000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x300000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 1;
            }
            return 19;
         }
         if ((active0 & 0x1cfffffefe7ff800L) != 0L || (active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active0 & 0x101800000L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x1dfffd9e7f7ff800L) != 0L || (active2 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active0 & 0x200026080000000L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0x420008206058000L) != 0L || (active2 & 0x100000L) != 0L)
            return 27;
         if ((active0 & 0x19dffd5c797a7800L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
            return 27;
         }
         return -1;
      case 4:
         if ((active0 & 0x91b7d5c09603800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 149;
               jjmatchedPos = 4;
            }
            return 27;
         }
         if ((active0 & 0x10c48000701a4000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x9121c5428602800L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0x89610801001000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0x912105400200800L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0xc0028402000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0x110105400000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0x802000000200800L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active0 & 0x10001400000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 8;
            return 27;
         }
         if ((active0 & 0x100104000000000L) != 0L)
            return 27;
         return -1;
      case 9:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active0 & 0x1400000000L) != 0L)
            return 27;
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 10;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L, 0x0L);
      case 37:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L);
      case 38:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000100L, 0x0L);
      case 40:
         return jjStopAtPos(0, 96);
      case 41:
         return jjStopAtPos(0, 97);
      case 42:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000L, 0x0L);
      case 43:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200400L, 0x0L);
      case 44:
         return jjStopAtPos(0, 103);
      case 45:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400800L, 0x0L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 47:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x1000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 68);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100020L, 0x0L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000040L, 0x0L);
      case 63:
         return jjStopAtPos(0, 67);
      case 64:
         return jjStopAtPos(0, 105);
      case 91:
         return jjStopAtPos(0, 100);
      case 93:
         return jjStopAtPos(0, 101);
      case 94:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1800L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f0000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xf0000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7d00000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c0000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f800000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3e0000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 98);
      case 124:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000200L, 0x0L);
      case 125:
         return jjStopAtPos(0, 99);
      case 126:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 43:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 45:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 60:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000030000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000400000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10e0800000040000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x42080000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x7004000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00008281302000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x300180000004000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000000000L, active1, 0L, active2, 0x100000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000008000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      case 61:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000000c0000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1428080000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10008030300000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x900040002000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000c00000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0xc2000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002011800L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x414208028000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 27);
         break;
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000070404000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000020000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 27);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 27);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 27);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004008001000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000200400002000L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000800000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x9101000200800L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc1000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000000000L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x100400002000L);
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1200000200000L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 27);
         break;
      case 108:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x404800001800L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 27);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2800L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 27);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 27);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 27);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20400000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000200000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 27);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 27);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x2080000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000800L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 27);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000400000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 27);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 27);
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 27);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 27);
         return jjMoveStringLiteralDfa8_0(active0, 0x101000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x110000400000000L);
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 27);
         break;
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 27);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 27);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 27);
         break;
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 27);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 52, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 20:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 19:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 9);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 13);
                  else if (curChar == 39)
                     jjAddStates(14, 16);
                  else if (curChar == 36)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(17, 19);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(20, 25);
                  }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(26, 29);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(26, 29);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(30, 33);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddTwoStates(12, 17);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(34, 36);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
               case 72:
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(17);
                  break;
               case 26:
                  if (curChar != 36)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 39)
                     jjAddStates(14, 16);
                  break;
               case 29:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if (curChar == 39 && kind > 152)
                     kind = 152;
                  break;
               case 32:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 30);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 35:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 43:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 13);
                  break;
               case 44:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 46:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 53:
                  if (curChar == 34 && kind > 153)
                     kind = 153;
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 55:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 56:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 9);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 17);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(45, 47);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if (curChar != 46)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(48, 50);
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(51, 53);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(54, 57);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddTwoStates(76, 17);
                  break;
               case 84:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(17, 19);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(58, 60);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(61, 63);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 88);
                  break;
               case 92:
                  if (curChar != 48)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(20, 25);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(64, 66);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(67, 69);
                  break;
               case 98:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 99);
                  break;
               case 99:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(89);
                  break;
               case 101:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(70, 72);
                  break;
               case 102:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 103:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(89);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(106, 107);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 108:
                  if (curChar == 46)
                     jjCheckNAdd(109);
                  break;
               case 110:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddStates(77, 79);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(112, 113);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAdd(114);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(119);
                  break;
               case 119:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(83, 85);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(18);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(26, 29);
                  break;
               case 2:
                  if (curChar != 117)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(26, 29);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
                  if (curChar == 95)
                     jjAddStates(86, 87);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 15:
                  if (curChar == 95)
                     jjAddStates(90, 91);
                  break;
               case 17:
                  if ((0x5000000050L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 18:
                  if (curChar == 101 && kind > 147)
                     kind = 147;
                  break;
               case 21:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 115)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAdd(27);
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar == 92)
                     jjAddStates(92, 94);
                  break;
               case 32:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 45:
                  if (curChar == 92)
                     jjAddStates(95, 97);
                  break;
               case 46:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 47:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 59:
                  if (curChar == 95)
                     jjAddStates(98, 99);
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 64:
                  if (curChar == 95)
                     jjAddStates(102, 103);
                  break;
               case 66:
                  if (curChar == 95)
                     jjAddStates(104, 105);
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 71:
                  if (curChar == 95)
                     jjAddStates(108, 109);
                  break;
               case 73:
                  if (curChar == 95)
                     jjAddStates(110, 111);
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(112, 113);
                  break;
               case 79:
                  if (curChar == 95)
                     jjAddStates(114, 115);
                  break;
               case 82:
                  if (curChar == 95)
                     jjAddStates(116, 117);
                  break;
               case 85:
                  if (curChar == 95)
                     jjAddStates(118, 119);
                  break;
               case 87:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 91:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(91, 88);
                  break;
               case 93:
                  if ((0x100000001000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(94, 89);
                  break;
               case 94:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(64, 66);
                  break;
               case 95:
                  if ((0x7e8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 96:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(89);
                  break;
               case 98:
                  if (curChar == 95)
                     jjAddStates(120, 121);
                  break;
               case 100:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddTwoStates(101, 89);
                  break;
               case 102:
                  if (curChar == 95)
                     jjAddStates(122, 123);
                  break;
               case 104:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(124, 126);
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 106:
                  if ((0x7e8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(106, 107);
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 109:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(127, 128);
                  break;
               case 112:
                  if (curChar == 95)
                     jjAddStates(129, 130);
                  break;
               case 114:
                  if ((0x4000000040L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 115:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(116, 119);
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 117:
                  if ((0x7e8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(119);
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(83, 85);
                  break;
               case 121:
                  if ((0x7e8000007eL & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 122:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjAddStates(26, 29);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   59, 60, 61, 17, 66, 67, 68, 73, 74, 75, 44, 45, 52, 53, 29, 31, 
   42, 85, 89, 90, 89, 93, 97, 100, 104, 115, 1, 3, 4, 6, 10, 11, 
   12, 17, 15, 16, 17, 44, 45, 55, 52, 53, 64, 65, 17, 71, 72, 17, 
   76, 17, 81, 79, 80, 17, 82, 83, 76, 17, 87, 88, 89, 91, 88, 89, 
   95, 96, 89, 98, 99, 89, 102, 103, 89, 106, 107, 108, 109, 112, 113, 114, 
   117, 118, 119, 121, 122, 109, 10, 11, 13, 14, 15, 16, 32, 33, 35, 46, 
   54, 56, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 
   77, 78, 79, 80, 82, 83, 85, 86, 98, 99, 102, 103, 105, 108, 109, 110, 
   111, 112, 113, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\151\156\141\154", 
"\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", "\151\146", "\147\157\164\157", 
"\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\154\157\156\147", 
"\156\141\164\151\166\145", "\156\145\167", "\160\141\143\153\141\147\145", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\164\141\164\151\143", 
"\163\164\162\151\143\164\146\160", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\75", "\75\75", "\76", "\74", "\41", "\176", "\77", "\72", "\74\75", 
"\76\75", "\41\75", "\46\46", "\174\174", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\56\56\56", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\156\165\154\154", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTILINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x1fffffffffffL, 0x3380000L, 
};
static final long[] jjtoSkip = {
   0x4feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x480L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x300L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[123];
private final int[] jjstateSet = new int[246];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaParser1_7TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaParser1_7TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 123; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

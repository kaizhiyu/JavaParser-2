digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 Archive [
		 label = "{Archive|+ UNKNOWN_ARCHIVE : Archive\l# zipFile : ZipFile\l# file : File\l# packagesCache : Hashtable\l|# Archive() : \l# Archive(File) : \l# initialize() : \l# getArchiveFileObject(String, Charset) : ArchiveFileObject\l# contains(String) : boolean\l# allPackages() : Set\l# getTypes(String) : List\l# flush() : \l# close() : \l+ toString() : String\l}"
	 ]

	 ArchiveFileObject [
		 label = "{ArchiveFileObject|- entryName : String\l- file : File\l- zipFile : ZipFile\l- charset : Charset\l|# ArchiveFileObject(File, String, Charset) : \l+ finalize() : \l+ getAccessLevel() : Modifier\l+ getKind() : Kind\l+ getNestingKind() : NestingKind\l+ isNameCompatible(String, Kind) : boolean\l+ delete() : boolean\l+ equals(Object) : boolean\l+ hashCode() : int\l+ getCharContent(boolean) : CharSequence\l+ getLastModified() : long\l+ getName() : String\l+ openInputStream() : InputStream\l+ openOutputStream() : OutputStream\l+ openReader(boolean) : Reader\l+ openWriter() : Writer\l+ toUri() : URI\l+ toString() : String\l}"
	 ]

	 EclipseBatchRequestor [
		 label = "{EclipseBatchRequestor|- compiler : Main\l- lineDelta : int\l- diagnosticListener : DiagnosticListener\l- problemFactory : DefaultProblemFactory\l|# EclipseBatchRequestor(Main, DiagnosticListener, DefaultProblemFactory) : \l+ acceptResult(CompilationResult) : \l# reportProblems(CompilationResult) : \l}"
	 ]

	 EclipseCompiler [
		 label = "{EclipseCompiler|- SupportedSourceVersions : Set\l# threadCache : WeakHashMap\l+ diagnosticListener : DiagnosticListener\l- hasRun : boolean\l|# null() : \l# EclipseCompiler() : \l+ getSourceVersions() : Set\l+ getStandardFileManager(DiagnosticListener, Locale, Charset) : StandardJavaFileManager\l+ getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable) : CompilationTask\l+ call() : Boolean\l+ setLocale(Locale) : \l+ setProcessors(Iterable) : \l+ isSupportedOption(String) : int\l+ run(InputStream, OutputStream, OutputStream, String) : int\l}"
	 ]

	 EclipseCompilerImpl [
		 label = "{EclipseCompilerImpl|- NO_UNITS : CompilationUnit\l- javaFileObjectMap : HashMap\l# compilationUnits : Iterable\l+ fileManager : JavaFileManager\l# processors : Processor\l+ diagnosticListener : DiagnosticListener\l|# EclipseCompilerImpl(PrintWriter, PrintWriter, boolean) : \l# call() : boolean\l# cleanup() : \l+ getCompilationUnits() : CompilationUnit\l+ getContents() : char\l+ getHandlingPolicy() : IErrorHandlingPolicy\l+ proceedOnErrors() : boolean\l+ stopOnFirstError() : boolean\l+ ignoreAllErrors() : boolean\l+ getProblemFactory() : IProblemFactory\l+ createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l+ getCode() : String\l+ getColumnNumber() : long\l+ getEndPosition() : long\l+ getKind() : Kind\l+ getLineNumber() : long\l+ getMessage(Locale) : String\l+ getPosition() : long\l+ getSource() : JavaFileObject\l+ getStartPosition() : long\l+ createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l+ getCode() : String\l+ getColumnNumber() : long\l+ getEndPosition() : long\l+ getKind() : Kind\l+ getLineNumber() : long\l+ getMessage(Locale) : String\l+ getPosition() : long\l+ getSource() : JavaFileObject\l+ getStartPosition() : long\l+ initialize(PrintWriter, PrintWriter, boolean, Map, CompilationProgress) : \l+ initializeAnnotationProcessorManager() : \l+ outputClassFiles(CompilationResult) : \l+ setPaths(ArrayList, String, ArrayList, ArrayList, ArrayList, ArrayList, String) : \l+ loggingExtraProblems() : \l+ getCode() : String\l+ getColumnNumber() : long\l+ getEndPosition() : long\l+ getKind() : Kind\l+ getLineNumber() : long\l+ getMessage(Locale) : String\l+ getPosition() : long\l+ getSource() : JavaFileObject\l+ getStartPosition() : long\l}"
	 ]

	 EclipseCompilerRequestor [
		 label = "{EclipseCompilerRequestor|- diagnosticListener : DiagnosticListener\l- problemFactory : DefaultProblemFactory\l|# EclipseCompilerRequestor(Main, DiagnosticListener, DefaultProblemFactory) : \l+ reportProblems(CompilationResult) : \l}"
	 ]

	 EclipseDiagnostic [
		 label = "{EclipseDiagnostic|- kind : Kind\l- problemId : int\l- problemArguments : String\l- originatingFileName : char\l- lineNumber : int\l- columnNumber : int\l- startPosition : int\l- endPosition : int\l- problemFactory : DefaultProblemFactory\l|# EclipseDiagnostic(Kind, int, String, char, DefaultProblemFactory, int, int, int, int) : \l# EclipseDiagnostic(Kind, int, String, char, DefaultProblemFactory) : \l# newInstance(CategorizedProblem, DefaultProblemFactory) : EclipseDiagnostic\l# newInstanceFromDefaultProblem(DefaultProblem, DefaultProblemFactory) : EclipseDiagnostic\l# getKind(CategorizedProblem) : Kind\l+ getKind() : Kind\l+ getSource() : EclipseFileObject\l+ getPosition() : long\l+ getStartPosition() : long\l+ getEndPosition() : long\l+ getLineNumber() : long\l+ getColumnNumber() : long\l+ getCode() : String\l+ getMessage(Locale) : String\l}"
	 ]

	 EclipseFileManager [
		 label = "{EclipseFileManager|- NO_EXTENSION : String\l# HAS_EXT_DIRS : int\l# HAS_BOOTCLASSPATH : int\l# HAS_ENDORSED_DIRS : int\l# HAS_PROCESSORPATH : int\l# archivesCache : Map\l# charset : Charset\l# locale : Locale\l# locations : Map\l# flags : int\l+ bundle : ResourceBundle\l|# EclipseFileManager(Locale, Charset) : \l+ close() : \l# collectAllMatchingFiles(File, String, Set, boolean, ArrayList) : \l# concatFiles(Iterable, Iterable) : Iterable\l+ flush() : \l# getArchive(File) : Archive\l+ getClassLoader(Location) : ClassLoader\l# getPathsFrom(String) : Iterable\l# getDefaultBootclasspath() : Iterable\l# getDefaultClasspath() : Iterable\l# getEndorsedDirsFrom(String) : Iterable\l# getExtdirsFrom(String) : Iterable\l# getExtension(File) : String\l# getExtension(String) : String\l+ getFileForInput(Location, String, String) : FileObject\l+ getFileForOutput(Location, String, String, FileObject) : FileObject\l+ getJavaFileForInput(Location, String, Kind) : JavaFileObject\l+ getJavaFileForOutput(Location, String, Kind, FileObject) : JavaFileObject\l+ getJavaFileObjects(File) : Iterable\l+ getJavaFileObjects(String) : Iterable\l+ getJavaFileObjectsFromFiles(Iterable) : Iterable\l+ getJavaFileObjectsFromStrings(Iterable) : Iterable\l# getKind(File) : Kind\l# getKind(String) : Kind\l+ getLocation(Location) : Iterable\l# getOutputDir(String) : Iterable\l+ handleOption(String, Iterator) : boolean\l+ hasLocation(Location) : boolean\l+ inferBinaryName(Location, JavaFileObject) : String\l# isArchive(File) : boolean\l+ isSameFile(FileObject, FileObject) : boolean\l+ isSupportedOption(String) : int\l+ list(Location, String, Set, boolean) : Iterable\l# normalized(String) : String\l# prependFiles(Iterable, Iterable) : Iterable\l+ setLocation(Location, Iterable) : \l# setLocale(Locale) : \l+ processPathEntries(int, ArrayList, String, String, boolean, boolean) : \l+ addNewEntry(ArrayList, String, ArrayList, String, String, boolean, boolean) : \l# bind(String, String) : String\l# bind(String, String) : String\l}"
	 ]

	 EclipseFileObject [
		 label = "{EclipseFileObject|- f : File\l- charset : Charset\l- parentsExist : boolean\l|# EclipseFileObject(String, URI, Kind, Charset) : \l+ getAccessLevel() : Modifier\l+ getNestingKind() : NestingKind\l+ delete() : boolean\l+ equals(Object) : boolean\l+ getCharContent(boolean) : CharSequence\l+ getLastModified() : long\l+ getName() : String\l+ hashCode() : int\l+ openInputStream() : InputStream\l+ openOutputStream() : OutputStream\l+ openReader(boolean) : Reader\l+ openWriter() : Writer\l+ toString() : String\l# ensureParentDirectoriesExist() : \l}"
	 ]

	 Options [
		 label = "{Options|- ZERO_ARGUMENT_OPTIONS : Set\l- ONE_ARGUMENT_OPTIONS : Set\l- FILE_MANAGER_OPTIONS : Set\l|# null() : \l# processOptionsFileManager(String) : int\l# processOptions(String) : int\l}"
	 ]

	 EncodingErrorCollector [
		 label = "{EncodingErrorCollector|+ LINE_SEPARATOR : String\l# position : int\l# length : in
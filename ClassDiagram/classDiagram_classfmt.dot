digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AnnotationInfo [
		 label = "{AnnotationInfo|- typename : char\l- pairs : ElementValuePairInfo\l# standardAnnotationTagBits : long\l# readOffset : int\l# EmptyValueArray : Object\l|# AnnotationInfo(byte, int, int) : \l# AnnotationInfo(byte, int, int, boolean, boolean) : \l# decodeAnnotation() : \l# decodeDefaultValue() : Object\l# getElementValuePairs() : IBinaryElementValuePair\l# getTypeName() : char\l# initialize() : \l# readRetentionPolicy(int) : int\l# readTargetValue(int) : int\l# scanAnnotation(int, boolean, boolean) : int\l# scanElementValue(int) : int\l# toString() : String\l# hashCode() : int\l# equals(Object) : boolean\l}"
	 ]

	 AnnotationMethodInfo [
		 label = "{AnnotationMethodInfo|# defaultValue : Object\l|# createAnnotationMethod(byte, int, int) : MethodInfo\l# AnnotationMethodInfo(MethodInfo, Object) : \l# getDefaultValue() : Object\l# toStringContent(StringBuffer) : \l}"
	 ]

	 AnnotationMethodInfoWithAnnotations [
		 label = "{AnnotationMethodInfoWithAnnotations|- annotations : AnnotationInfo\l|# AnnotationMethodInfoWithAnnotations(MethodInfo, Object, AnnotationInfo) : \l# getAnnotations() : IBinaryAnnotation\l# initialize() : \l# reset() : \l# toStringContent(StringBuffer) : \l}"
	 ]

	 ClassFileConstants [
		 label = "{ClassFileConstants||# AccDefault() : int\l# AccPublic() : int\l# AccPrivate() : int\l# AccProtected() : int\l# AccStatic() : int\l# AccFinal() : int\l# AccSynchronized() : int\l# AccVolatile() : int\l# AccBridge() : int\l# AccTransient() : int\l# AccVarargs() : int\l# AccNative() : int\l# AccInterface() : int\l# AccAbstract() : int\l# AccStrictfp() : int\l# AccSynthetic() : int\l# AccAnnotation() : int\l# AccEnum() : int\l# AccMandated() : int\l# AccSuper() : int\l# AccAnnotationDefault() : int\l# AccDeprecated() : int\l# Utf8Tag() : int\l# IntegerTag() : int\l# FloatTag() : int\l# LongTag() : int\l# DoubleTag() : int\l# ClassTag() : int\l# StringTag() : int\l# FieldRefTag() : int\l# MethodRefTag() : int\l# InterfaceMethodRefTag() : int\l# NameAndTypeTag() : int\l# MethodHandleTag() : int\l# MethodTypeTag() : int\l# InvokeDynamicTag() : int\l# ConstantMethodRefFixedSize() : int\l# ConstantClassFixedSize() : int\l# ConstantDoubleFixedSize() : int\l# ConstantFieldRefFixedSize() : int\l# ConstantFloatFixedSize() : int\l# ConstantIntegerFixedSize() : int\l# ConstantInterfaceMethodRefFixedSize() : int\l# ConstantLongFixedSize() : int\l# ConstantStringFixedSize() : int\l# ConstantUtf8FixedSize() : int\l# ConstantNameAndTypeFixedSize() : int\l# ConstantMethodHandleFixedSize() : int\l# ConstantMethodTypeFixedSize() : int\l# ConstantInvokeDynamicFixedSize() : int\l# MethodHandleRefKindGetField() : int\l# MethodHandleRefKindGetStatic() : int\l# MethodHandleRefKindPutField() : int\l# MethodHandleRefKindPutStatic() : int\l# MethodHandleRefKindInvokeVirtual() : int\l# MethodHandleRefKindInvokeStatic() : int\l# MethodHandleRefKindInvokeSpecial() : int\l# MethodHandleRefKindNewInvokeSpecial() : int\l# MethodHandleRefKindInvokeInterface() : int\l# MAJOR_VERSION_1_1() : int\l# MAJOR_VERSION_1_2() : int\l# MAJOR_VERSION_1_3() : int\l# MAJOR_VERSION_1_4() : int\l# MAJOR_VERSION_1_5() : int\l# MAJOR_VERSION_1_6() : int\l# MAJOR_VERSION_1_7() : int\l# MAJOR_VERSION_1_8() : int\l# MAJOR_VERSION_1_9() : int\l# MINOR_VERSION_0() : int\l# MINOR_VERSION_1() : int\l# MINOR_VERSION_2() : int\l# MINOR_VERSION_3() : int\l# MINOR_VERSION_4() : int\l# JDK1_1() : long\l# JDK1_2() : long\l# JDK1_3() : long\l# JDK1_4() : long\l# JDK1_5() : long\l# JDK1_6() : long\l# JDK1_7() : long\l# JDK1_8() : long\l# JDK1_9() : long\l# CLDC_1_1() : long\l# JDK_DEFERRED() : long\l# INT_ARRAY() : int\l# BYTE_ARRAY() : int\l# BOOLEAN_ARRAY() : int\l# SHORT_ARRAY() : int\l# CHAR_ARRAY() : int\l# LONG_ARRAY() : int\l# FLOAT_ARRAY() : int\l# DOUBLE_ARRAY() : int\l# ATTR_SOURCE() : int\l# ATTR_LINES() : int\l# ATTR_VARS() : int\l# ATTR_STACK_MAP_TABLE() : int\l# ATTR_STACK_MAP() : int\l# ATTR_TYPE_ANNOTATION() : int\l# ATTR_METHOD_PARAMETERS() : int\l# FLAG_SERIALIZABLE() : int\l# FLAG_MARKERS() : int\l# FLAG_BRIDGES() : int\l}"
	 ]

	 ZipFileProducer [
		 label = "{ZipFileProducer|- accessFlags : int\l- classFileName : char\l- className : char\l- classNameIndex : int\l- constantPoolCount : int\l- annotations : AnnotationInfo\l- typeAnnotations : TypeAnnotationInfo\l- fields : FieldInfo\l- fieldsCount : int\l- innerInfo : InnerClassInfo\l- innerInfoIndex : int\l- innerInfos : InnerClassInfo\l- interfaceNames : char\l- interfacesCount : int\l- methods : MethodInfo\l- methodsCount : int\l- signature : char\l- sourceName : char\l- sourceFileName : char\l- superclassName : char\l- tagBits : long\l- version : long\l- enclosingTypeName : char\l- missingTypeNames : char\l- enclosingNameAndTypeIndex : int\l- enclosingMethod : char\l- annotationProvider : ExternalAnnotationProvider\l|# printTypeModifiers(int) : String\l# read(File) : ClassFileReader\l# read(File, boolean) : ClassFileReader\l# read(InputStream, String) : ClassFileReader\l# read(InputStream, String, boolean) : ClassFileReader\l# read(java, String) : ClassFileReader\l# read(java, String, boolean) : ClassFileReader\l# read(String) : ClassFileReader\l# read(String, boolean) : ClassFileReader\l# ClassFileReader(byte, char) : \l# ClassFileReader(byte, char, boolean) : \l# null() : \l# produce() : ZipFile\l# setExternalAnnotationProvider(String, String, ZipFile, ZipFileProducer) : ZipFile\l# hasAnnotationProvider() : boolean\l+ enrichWithExternalAnnotationsFor(ITypeAnnotationWalker, Object, LookupEnvironment) : ITypeAnnotationWalker\l# accessFlags() : int\l# decodeAnnotations(int, boolean) : \l# decodeTypeAnnotations(int, boolean) : \l# getAnnotations() : IBinaryAnnotation\l# getTypeAnnotations() : IBinaryTypeAnnotation\l# getConstantClassNameAt(int) : char\l# getConstantPoolOffsets() : int\l# getEnclosingMethod() : char\l# getEnclosingTypeName() : char\l# getFields() : IBinaryField\l# getFileName() : char\l# getGenericSignature() : char\l# getInnerSourceName() : char\l# getInterfaceNames() : char\l# getMemberTypes() : IBinaryNestedType\l# getMethods() : IBinaryMethod\l# getMissingTypeNames() : char\l# getModifiers() : int\l# getName() : char\l# getSourceName() : char\l# getSuperclassName() : char\l# getTagBits() : long\l# getVersion() : long\l# hasNonSyntheticFieldChanges(FieldInfo, FieldInfo) : boolean\l# hasNonSyntheticMethodChanges(MethodInfo, MethodInfo) : boolean\l# hasStructuralChanges(byte) : boolean\l# hasStructuralChanges(byte, boolean, boolean) : boolean\l# hasStructuralAnnotationChanges(IBinaryAnnotation, IBinaryAnnotation) : boolean\l# matchAnnotations(IBinaryAnnotation, IBinaryAnnotation) : Boolean\l# hasStructuralFieldChanges(FieldInfo, FieldInfo) : boolean\l# hasStructuralMethodChanges(MethodInfo, MethodInfo) : boolean\l# hasStructuralTypeAnnotationChanges(IBinaryTypeAnnotation, IBinaryTypeAnnotation) : boolean\l# affectsSignature(IBinaryTypeAnnotation) : boolean\l# initialize() : \l# isAnonymous() : boolean\l# isBinaryType() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isNestedType() : boolean\l# sourceFileName() : char\l# toString() : String\l}"
	 ]

	 ClassFileStruct [
		 label = "{ClassFileStruct|# reference : byte\l# constantPoolOffsets : int\l# structOffset : int\l|# ClassFileStruct(byte, int, int) : \l# doubleAt(int) : double\l# floatAt(int) : float\l# i4At(int) : int\l# i8At(int) : long\l# reset() : \l# u1At(int) : int\l# u2At(int) : int\l# u4At(int) : long\l# utf8At(int, int) : char\l}"
	 ]

	 ClassFormatException [
		 label = "{ClassFormatException|+ ErrBadMagic : int\l+ ErrBadMinorVersion : int\l+ ErrBadMajorVersion : int\l+ ErrBadConstantClass : int\l+ ErrBadConstantString : int\l+ ErrBadConstantNameAndType : int\l+ ErrBadConstantFieldRef : int\l+ ErrBadConstantMethodRef : int\l+ ErrBadConstantInterfaceMethodRef : int\l+ ErrBadConstantPoolIndex : int\l+ ErrBadSuperclassName : int\l+ ErrInterfaceCannotBeFinal : int\l+ ErrInterfaceMustBeAbstract : int\l+ ErrBadModifiers : int\l+ ErrClassCannotBeAbstractFinal : int\l+ ErrBadClassname : int\l+ ErrBadFieldInfo : int\l+ ErrBadMethodInfo : int\l+ ErrEmptyConstantPool : int\l+ ErrMalformedUtf8 : int\l+ ErrUnknownConstantTag : int\l+ ErrTruncatedInput : int\l+ ErrMethodMustBeAbstract : int\l+ ErrMalformedAttribute : int\l+ ErrBadInterface : int\l+ ErrInterfaceMustSubclassObject : int\l+ ErrIncorrectInterfaceMethods : int\l+ ErrInvalidMethodName : int\l+ ErrInvalidMethodSignature : int\l- serialVersionUID : long\l- errorCode : int\l- bufferPosition : int\l- nestedException : RuntimeException\l- fileName : char\l|# ClassFormatException(RuntimeException, char) : \l# ClassFormatException(int) : \l# ClassFormatException(int, int) : \l# getErrorCode() : int\l# getBufferPosition() : int\l# getException() : Throwable\l# printStackTrace() : \l# printStackTrace(PrintStream) : \l# printStackTrace(PrintWriter) : \l}"
	 ]

	 ElementValuePairInfo [
		 label = "{ElementValuePairInfo|# NoMembers : ElementValuePairInfo\l- name : char\l- value : Object\l|# ElementValuePairInfo(char, Object) : \l# getName() : char\l# getValue() : Object\l# toString() : String\l# hashCode() : int\l# equals(Object) : boolean\l}"
	 ]

	 FieldAnnotationWalker [
		 label = "{FieldAnnotationWalker|+ ANNOTION_FILE_EXTENSION : String\l+ CLASS_PREFIX : String\l+ SUPER_PREFIX : String\l+ NULLABLE : char\l+ NONNULL : char\l+ NO_ANNOTATION : char\l# ANNOTATION_FILE_SUFFIX : String\l- TYPE_PARAMETER_PREFIX : String\l- typeName : String\l# typeParametersAnnotationSource : String\l# supertypeAnnotationSources : Map\l- methodAnnotationSources : Map\l- fieldAnnotationSources : Map\l# NULLABLE_ANNOTATION : SingleMarkerAnnotation\l- environment : LookupEnvironment\l- typeParametersWalker : TypeParametersAnnotationWalker\l# source : char\l# wrapper : SignatureWrapper\l# pos : int\l# prevTypeArgStart : int\l# currentTypeBound : int\l# environment : LookupEnvironment\l# rankStarts : int\l# currentRank : int\l# prevParamStart : int\l# typeParametersWalker : TypeParametersAnnotationWalker\l|# ExternalAnnotationProvider(InputStream, String) : \l# initialize(InputStream) : \l# assertClassHeader(String, String) : \l# extractSignature(String) : String\l# trimTail(String) : String\l# forTypeHeader(LookupEnvironment) : ITypeAnnotationWalker\l# forMethod(char, char, LookupEnvironment) : ITypeAnnotationWalker\l# forField(char, char, LookupEnvironment) : ITypeAnnotationWalker\l# toString() : String\l# null() : \l+ getElementValuePairs() : IBinaryElementValuePair\l# getBinaryTypeName(char) : char\l# initAnnotations(LookupEnvironment) : \l+ getTypeName() : char\l+ getTypeName() : char\l# null() : \l# DispatchingAnnotationWalker(LookupEnvironment) : \l# toTypeParameter(boolean, int) : ITypeAnnotationWalker\l# toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l# toSupertype(short, char) : ITypeAnnotationWalker\l# toField() : ITypeAnnotationWalker\l# toThrows(int) : ITypeAnnotationWalker\l# toTypeArgument(int) : ITypeAnnotationWalker\l# toMethodParameter(short) : ITypeAnnotationWalker\l# toTypeBound(short) : ITypeAnnotationWalker\l# toMethodReturn() : ITypeAnnotationWalker\l# toReceiver() : ITypeAnnotationWalker\l# toWildcardBound() : ITypeAnnotationWalker\l# toNextArrayDimension() : ITypeAnnotationWalker\l# toNextNestedType() : ITypeAnnotationWalker\l# getAnnotationsAtCursor(int) : IBinaryAnnotation\l# null() : \l# BasicAnnotationWalker(char, int, LookupEnvironment) : \l# wrapperWithStart(int) : SignatureWrapper\l+ toReceiver() : ITypeAnnotationWalker\l+ toTypeParameter(boolean, int) : ITypeAnnotationWalker\l+ toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l+ toTypeBound(short) : ITypeAnnotationWalker\l+ toSupertype(short, char) : ITypeAnnotationWalker\l+ toTypeArgument(int) : ITypeAnnotationWalker\l+ toWildcardBound() : ITypeAnnotationWalker\l+ toNextArrayDimension() : ITypeAnnotationWalker\l+ toNextNestedType() : ITypeAnnotationWalker\l+ getAnnotationsAtCursor(int) : IBinaryAnnotation\l# null() : \l# TypeParametersAnnotationWalker(char, int, int, int, LookupEnvironment) : \l+ toTypeParameter(boolean, int) : ITypeAnnotationWalker\l+ toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l+ toTypeBound(short) : ITypeAnnotationWalker\l+ toField() : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toThrows(int) : ITypeAnnotationWalker\l+ getAnnotationsAtCursor(int) : IBinaryAnnotation\l# null() : \l# SuperTypesAnnotationWalker(char, LookupEnvironment) : \l+ toField() : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toThrows(int) : ITypeAnnotationWalker\l# null() : \l# getParameterCount() : int\l# null() : \l# MethodAnnotationWalker(char, int, LookupEnvironment) : \l# typeEnd(int) : int\l+ toTypeParameter(boolean, int) : ITypeAnnotationWalker\l+ toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toThrows(int) : ITypeAnnotationWalker\l+ toField() : ITypeAnnotationWalker\l+ getParameterCount() : int\l# null() : \l# FieldAnnotationWalker(char, int, LookupEnvironment) : \l+ toField() : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toThrows(int) : ITypeAnnotationWalker\l}"
	 ]

	 FieldInfo [
		 label = "{FieldInfo|# accessFlags : int\l# attributeBytes : int\l# constant : Constant\l# descriptor : char\l# name : char\l# signature : char\l# signatureUtf8Offset : int\l# tagBits : long\l# wrappedConstantValue : Object\l|# createField(byte, int, int) : FieldInfo\l# FieldInfo(byte, int, int) : \l# decodeAnnotations(int, boolean) : AnnotationInfo\l# decodeTypeAnnotations(int, boolean) : TypeAnnotationInfo\l# compareTo(Object) : int\l# equals(Object) : boolean\l# hashCode() : int\l# getConstant() : Constant\l# getGenericSignature() : char\l# getModifiers() : int\l# getName() : char\l# getTagBits() : long\l# getTypeName() : char\l# getAnnotations() : IBinaryAnnotation\l# getTypeAnnotations() : IBinaryTypeAnnotation\l# getWrappedConstantValue() : Object\l# hasConstant() : boolean\l# initialize() : \l# isSynthetic() : boolean\l# readConstantAttribute() : \l# readModifierRelatedAttributes() : \l# sizeInBytes() : int\l# throwFormatException() : \l# toString() : String\l# toStringContent(StringBuffer) : \l}"
	 ]

	 FieldInfoWithAnnotation [
		 label = "{FieldInfoWithAnnotation|- annotations : AnnotationInfo\l|# FieldInfoWithAnnotation(FieldInfo, AnnotationInfo) : \l# getAnnotations() : org\l# initialize() : \l# reset() : \l# toString() : String\l}"
	 ]

	 FieldInfoWithTypeAnnotation [
		 label = "{FieldInfoWithTypeAnnotation|- typeAnnotations : TypeAnnotationInfo\l|# FieldInfoWithTypeAnnotation(FieldInfo, AnnotationInfo, TypeAnnotationInfo) : \l# getTypeAnnotations() : IBinaryTypeAnnotation\l# initialize() : \l# reset() : \l# toString() : String\l}"
	 ]

	 InnerClassInfo [
		 label = "{InnerClassInfo|# innerClassNameIndex : int\l# outerClassNameIndex : int\l# innerNameIndex : int\l- innerClassName : char\l- outerClassName : char\l- innerName : char\l- accessFlags : int\l- readInnerClassName : boolean\l- readOuterClassName : boolean\l- readInnerName : boolean\l|# InnerClassInfo(byte, int, int) : \l# getEnclosingTypeName() : char\l# getModifiers() : int\l# getName() : char\l# getSourceName() : char\l# toString() : String\l# initialize() : \l}"
	 ]

	 MethodInfo [
		 label = "{MethodInfo|# noException : char\l# noArgumentNames : char\l# ARG : char\l# accessFlags : int\l# attributeBytes : int\l# descriptor : char\l# exceptionNames : char\l# name : char\l# signature : char\l# signatureUtf8Offset : int\l# tagBits : long\l# argumentNames : char\l|# createMethod(byte, int, int) : MethodInfo\l# decodeAnnotations(int, boolean, int, MethodInfo) : AnnotationInfo\l# decodeMethodAnnotations(int, boolean, MethodInfo) : AnnotationInfo\l# decodeTypeAnnotations(int, boolean, MethodInfo) : TypeAnnotationInfo\l# decodeParamAnnotations(int, boolean, MethodInfo) : AnnotationInfo\l# MethodInfo(byte, int, int) : \l# compareTo(Object) : int\l# equals(Object) : boolean\l# hashCode() : int\l# getAnnotations() : IBinaryAnnotation\l# getArgumentNames() : char\l# getDefaultValue() : Object\l# getExceptionTypeNames() : char\l# getGenericSignature() : char\l# getMethodDescriptor() : char\l# getModifiers() : int\l# getParameterAnnotations(int, char) : IBinaryAnnotation\l# getAnnotatedParametersCount() : int\l# getTypeAnnotations() : IBinaryTypeAnnotation\l# getSelector() : char\l# getTagBits() : long\l# initialize() : \l# isClinit() : boolean\l# isConstructor() : boolean\l# isSynthetic() : boolean\l# readExceptionAttributes() : \l# readModifierRelatedAttributes() : \l# sizeInBytes() : int\l# toString() : String\l# toString(StringBuffer) : \l# toStringContent(StringBuffer) : \l# readCodeAttribute() : \l# decodeCodeAttribute(int) : \l# decodeLocalVariableAttribute(int, int) : \l# decodeMethodParameters(int, MethodInfo) : \l}"
	 ]

	 MethodInfoWithAnnotations [
		 label = "{MethodInfoWithAnnotations|# annotations : AnnotationInfo\l|# MethodInfoWithAnnotations(MethodInfo, AnnotationInfo) : \l# getAnnotations() : IBinaryAnnotation\l# initialize() : \l# reset() : \l# toStringContent(StringBuffer) : \l}"
	 ]

	 MethodInfoWithParameterAnnotations [
		 label = "{MethodInfoWithParameterAnnotations|- parameterAnnotations : AnnotationInfo\l|# MethodInfoWithParameterAnnotations(MethodInfo, AnnotationInfo, AnnotationInfo) : \l# getParameterAnnotations(int, char) : IBinaryAnnotation\l# getAnnotatedParametersCount() : int\l# initialize() : \l# reset() : \l# toStringContent(StringBuffer) : \l}"
	 ]

	 MethodInfoWithTypeAnnotations [
		 label = "{MethodInfoWithTypeAnnotations|- typeAnnotations : TypeAnnotationInfo\l|# MethodInfoWithTypeAnnotations(MethodInfo, AnnotationInfo, AnnotationInfo, TypeAnnotationInfo) : \l# getTypeAnnotations() : IBinaryTypeAnnotation\l# initialize() : \l# reset() : \l# toStringContent(StringBuffer) : \l}"
	 ]

	 NonNullDefaultAwareTypeAnnotationWalker [
		 label = "{NonNullDefaultAwareTypeAnnotationWalker|- defaultNullness : int\l- atDefaultLocation : boolean\l- nextIsDefaultLocation : boolean\l- atTypeBound : boolean\l- nextIsTypeBound : boolean\l- isEmpty : boolean\l# nonNullAnnotation : IBinaryAnnotation\l# environment : LookupEnvironment\l|# NonNullDefaultAwareTypeAnnotationWalker(IBinaryTypeAnnotation, int, LookupEnvironment) : \l# NonNullDefaultAwareTypeAnnotationWalker(int, LookupEnvironment) : \l# NonNullDefaultAwareTypeAnnotationWalker(IBinaryTypeAnnotation, long, int, int, IBinaryAnnotation, boolean, boolean, LookupEnvironment) : \l# NonNullDefaultAwareTypeAnnotationWalker(int, IBinaryAnnotation, boolean, boolean, LookupEnvironment) : \l# getNonNullAnnotation(LookupEnvironment) : IBinaryAnnotation\l+ getTypeName() : char\l+ getElementValuePairs() : IBinaryElementValuePair\l# restrict(long, int) : TypeAnnotationWalker\l+ toSupertype(short, char) : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toTypeBound(short) : ITypeAnnotationWalker\l+ toWildcardBound() : ITypeAnnotationWalker\l+ toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l+ toTypeArgument(int) : ITypeAnnotationWalker\l+ toTypeParameter(boolean, int) : ITypeAnnotationWalker\l+ toNextDetail(int) : ITypeAnnotationWalker\l+ getAnnotationsAtCursor(int) : IBinaryAnnotation\l}"
	 ]

	 TypeAnnotationInfo [
		 label = "{TypeAnnotationInfo|- annotation : AnnotationInfo\l- targetType : int\l- info : int\l- info2 : int\l- typePath : int\l# readOffset : int\l|# TypeAnnotationInfo(byte, int, int) : \l# TypeAnnotationInfo(byte, int, int, boolean, boolean) : \l# getAnnotation() : IBinaryAnnotation\l# initialize() : \l# reset() : \l# toString() : String\l# getTargetType() : int\l# getSupertypeIndex() : int\l# getTypeParameterIndex() : int\l# getBoundIndex() : int\l# getMethodFormalParameterIndex() : int\l# getThrowsTypeIndex() : int\l# getTypePath() : int\l# hashCode() : int\l# equals(Object) : boolean\l}"
	 ]

	 TypeAnnotationWalker [
		 label = "{TypeAnnotationWalker|# typeAnnotations : IBinaryTypeAnnotation\l# matches : long\l# pathPtr : int\l|# TypeAnnotationWalker(IBinaryTypeAnnotation) : \l# TypeAnnotationWalker(IBinaryTypeAnnotation, long) : \l# TypeAnnotationWalker(IBinaryTypeAnnotation, long, int) : \l# restrict(long, int) : ITypeAnnotationWalker\l+ toField() : ITypeAnnotationWalker\l+ toMethodReturn() : ITypeAnnotationWalker\l+ toReceiver() : ITypeAnnotationWalker\l# toTarget(int) : ITypeAnnotationWalker\l+ toTypeParameter(boolean, int) : ITypeAnnotationWalker\l+ toTypeParameterBounds(boolean, int) : ITypeAnnotationWalker\l+ toTypeBound(short) : ITypeAnnotationWalker\l+ toSupertype(short, char) : ITypeAnnotationWalker\l+ toMethodParameter(short) : ITypeAnnotationWalker\l+ toThrows(int) : ITypeAnnotationWalker\l+ toTypeArgument(int) : ITypeAnnotationWalker\l+ toWildcardBound() : ITypeAnnotationWalker\l+ toNextArrayDimension() : ITypeAnnotationWalker\l+ toNextNestedType() : ITypeAnnotationWalker\l# toNextDetail(int) : ITypeAnnotationWalker\l+ getAnnotationsAtCursor(int) : IBinaryAnnotation\l}"
	 ]

	 ClassFileConstants [
		 label = "{ClassFileConstants||# Utf8Tag() : int\l# IntegerTag() : int\l# FloatTag() : int\l# LongTag() : int\l# DoubleTag() : int\l# ClassTag() : int\l# StringTag() : int\l# FieldRefTag() : int\l# MethodRefTag() : int\l# InterfaceMethodRefTag() : int\l# NameAndTypeTag() : int\l# ConstantMethodRefFixedSize() : int\l# ConstantClassFixedSize() : int\l# ConstantDoubleFixedSize() : int\l# ConstantFieldRefFixedSize() : int\l# ConstantFloatFixedSize() : int\l# ConstantIntegerFixedSize() : int\l# ConstantInterfaceMethodRefFixedSize() : int\l# ConstantLongFixedSize() : int\l# ConstantStringFixedSize() : int\l# ConstantUtf8FixedSize() : int\l# ConstantNameAndTypeFixedSize() : int\l# MAJOR_VERSION_1_1() : int\l# MAJOR_VERSION_1_2() : int\l# MAJOR_VERSION_1_3() : int\l# MAJOR_VERSION_1_4() : int\l# MAJOR_VERSION_1_5() : int\l# MINOR_VERSION_0() : int\l# MINOR_VERSION_1() : int\l# MINOR_VERSION_2() : int\l# MINOR_VERSION_3() : int\l# JDK1_1() : long\l# JDK1_2() : long\l# JDK1_3() : long\l# JDK1_4() : long\l# JDK1_5() : long\l# JDK_DEFERRED() : long\l# INT_ARRAY() : int\l# BYTE_ARRAY() : int\l# BOOLEAN_ARRAY() : int\l# SHORT_ARRAY() : int\l# CHAR_ARRAY() : int\l# LONG_ARRAY() : int\l# FLOAT_ARRAY() : int\l# DOUBLE_ARRAY() : int\l}"
	 ]

	 ClassFileReader [
		 label = "{ClassFileReader|- accessFlags : int\l- classFileName : char\l- className : char\l- classNameIndex : int\l- constantPoolCount : int\l- constantPoolOffsets : int\l- fields : FieldInfo\l- fieldsCount : int\l- innerInfo : InnerClassInfo\l- innerInfoIndex : int\l- innerInfos : InnerClassInfo\l- interfaceNames : char\l- interfacesCount : int\l- methods : MethodInfo\l- methodsCount : int\l- signature : char\l- sourceFileName : char\l- superclassName : char\l- version : long\l|# read(File) : ClassFileReader\l# read(File, boolean) : ClassFileReader\l# read(java, String) : ClassFileReader\l# read(java, String, boolean) : ClassFileReader\l# read(String) : ClassFileReader\l# read(String, boolean) : ClassFileReader\l# ClassFileReader(byte, char) : \l# ClassFileReader(byte, char, boolean) : \l# accessFlags() : int\l# getConstantClassNameAt(int) : char\l# getConstantPoolOffsets() : int\l# getEnclosingTypeName() : char\l# getFields() : IBinaryField\l# getFileName() : char\l# getGenericSignature() : char\l# getInnerSourceName() : char\l# getInterfaceNames() : char\l# getMemberTypes() : IBinaryNestedType\l# getMethods() : IBinaryMethod\l# getModifiers() : int\l# getName() : char\l# getSuperclassName() : char\l# getVersion() : long\l# hasNonSyntheticFieldChanges(FieldInfo, FieldInfo) : boolean\l# hasNonSyntheticMethodChanges(MethodInfo, MethodInfo) : boolean\l# hasStructuralChanges(byte) : boolean\l# hasStructuralChanges(byte, boolean, boolean) : boolean\l# hasStructuralFieldChanges(FieldInfo, FieldInfo) : boolean\l# hasStructuralMethodChanges(MethodInfo, MethodInfo) : boolean\l# initialize() : \l# isAnonymous() : boolean\l# isBinaryType() : boolean\l# isClass() : boolean\l# isInterface() : boolean\l# isLocal() : boolean\l# isMember() 
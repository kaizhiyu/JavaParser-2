digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 CategorizedProblem [
		 label = "{CategorizedProblem|+ CAT_UNSPECIFIED : int\l+ CAT_BUILDPATH : int\l+ CAT_SYNTAX : int\l+ CAT_IMPORT : int\l+ CAT_TYPE : int\l+ CAT_MEMBER : int\l+ CAT_INTERNAL : int\l+ CAT_JAVADOC : int\l+ CAT_CODE_STYLE : int\l+ CAT_POTENTIAL_PROGRAMMING_PROBLEM : int\l+ CAT_NAME_SHADOWING_CONFLICT : int\l+ CAT_DEPRECATION : int\l+ CAT_UNNECESSARY_CODE : int\l+ CAT_UNCHECKED_RAW : int\l+ CAT_NLS : int\l+ CAT_RESTRICTION : int\l+ getCategoryID : int\l+ getMarkerType : String\l|# getExtraMarkerAttributeNames() : String\l# getExtraMarkerAttributeValues() : Object\l# isInfo() : boolean\l}"
	 ]

	 CharOperation [
		 label = "{CharOperation|+ NO_CHAR : char\l+ NO_CHAR_CHAR : char\l+ NO_STRINGS : String\l|# append(char, char) : char\l# append(char, char) : char\l# append(char, int, char, int, int) : char\l# arrayConcat(char, char) : char\l# camelCaseMatch(char, char) : boolean\l# camelCaseMatch(char, char, boolean) : boolean\l# camelCaseMatch(char, int, int, char, int, int) : boolean\l# camelCaseMatch(char, int, int, char, int, int, boolean) : boolean\l# substringMatch(String, String) : boolean\l# substringMatch(char, char) : boolean\l# checkSubstringMatch(char, char) : boolean\l# charArrayToStringArray(char) : String\l# charToString(char) : String\l# arrayConcat(char, char) : char\l# compareTo(char, char) : int\l# compareTo(char, char, int, int) : int\l# compareWith(char, char) : int\l# concat(char, char) : char\l# concat(char, char, char) : char\l# concat(char, char, char) : char\l# concat(char, char, char, char, char) : char\l# concatNonEmpty(char, char, char) : char\l# concatNonEmpty(char, char, char, char, char) : char\l# concat(char, char, char) : char\l# concatWith(char, char, char) : char\l# concatWith(char, char, char) : char\l# concatWith(char, char) : char\l# concatWithAll(char, char) : char\l# contains(char, char) : boolean\l# contains(char, char) : boolean\l# contains(char, char) : boolean\l# deepCopy(char) : char\l# endsWith(char, char) : boolean\l# equals(char, char) : boolean\l# equals(char, char, boolean) : boolean\l# equals(char, char) : boolean\l# equals(char, char, int, int) : boolean\l# equals(char, char, int, int, boolean) : boolean\l# equals(char, char, boolean) : boolean\l# fragmentEquals(char, char, int, boolean) : boolean\l# hashCode(char) : int\l# isWhitespace(char) : boolean\l# indexOf(char, char) : int\l# indexOf(char, char, boolean) : int\l# indexOf(char, char, boolean, int) : int\l# indexOf(char, char, boolean, int, int) : int\l# indexOf(char, char, int) : int\l# indexOf(char, char, int, int) : int\l# lastIndexOf(char, char) : int\l# lastIndexOf(char, char, int) : int\l# lastIndexOf(char, char, int, int) : int\l# lastSegment(char, char) : char\l# match(char, char, boolean) : boolean\l# match(char, int, int, char, int, int, boolean) : boolean\l# pathMatch(char, char, boolean, char) : boolean\l# occurencesOf(char, char) : int\l# occurencesOf(char, char, int) : int\l# parseInt(char, int, int) : int\l# prefixEquals(char, char) : boolean\l# prefixEquals(char, char, boolean) : boolean\l# prefixEquals(char, char, boolean, int) : boolean\l# remove(char, char) : char\l# replace(char, char, char) : \l# replace(char, char, char) : \l# replace(char, char, char, int, int) : \l# replace(char, char, char) : char\l# replaceOnCopy(char, char, char) : char\l# splitAndTrimOn(char, char) : char\l# splitOn(char, char) : char\l# splitOn(char, char, int, int) : char\l# splitOnWithEnclosures(char, char, char, char, int, int) : char\l# subarray(char, int, int) : char\l# subarray(char, int, int) : char\l# toLowerCase(char) : char\l# toUpperCase(char) : char\l# trim(char) : char\l# toString(char) : String\l# toStrings(char) : String\l}"
	 ]

	 InvalidInputException [
		 label = "{InvalidInputException|- serialVersionUID : long\l|# InvalidInputException() : \l# InvalidInputException(String) : \l}"
	 ]

	 IProblem [
		 label = "{IProblem||# getArguments() : String\l# getID() : int\l# getMessage() : String\l# getOriginatingFileName() : char\l# getSourceEnd() : int\l# getSourceLineNumber() : int\l# getSourceStart() : int\l# isError() : boolean\l# isWarning() : boolean\l# isInfo() : boolean\l# setSourceEnd(int) : \l# setSourceLineNumber(int) : \l# setSourceStart(int) : \l# TypeRelated() : int\l# FieldRelated() : int\l# MethodRelated() : int\l# ConstructorRelated() : int\l# ImportRelated() : int\l# Internal() : int\l# Syntax() : int\l# Javadoc() : int\l# IgnoreCategoriesMask() : int\l# Unclassified() : int\l# ObjectHasNoSuperclass() : int\l# UndefinedType() : int\l# NotVisibleType() : int\l# AmbiguousType() : int\l# UsingDeprecatedType() : int\l# InternalTypeNameProvided() : int\l# UnusedPrivateType() : int\l# IncompatibleTypesInEqualityOperator() : int\l# IncompatibleTypesInConditionalOperator() : int\l# TypeMismatch() : int\l# IndirectAccessToStaticType() : int\l# ReturnTypeMismatch() : int\l# MissingEnclosingInstanceForConstructorCall() : int\l# MissingEnclosingInstance() : int\l# IncorrectEnclosingInstanceReference() : int\l# IllegalEnclosingInstanceSpecification() : int\l# CannotDefineStaticInitializerInLocalType() : int\l# OuterLocalMustBeFinal() : int\l# CannotDefineInterfaceInLocalType() : int\l# IllegalPrimitiveOrArrayTypeForEnclosingInstance() : int\l# EnclosingInstanceInConstructorCall() : int\l# AnonymousClassCannotExtendFinalClass() : int\l# CannotDefineAnnotationInLocalType() : int\l# CannotDefineEnumInLocalType() : int\l# NonStaticContextForEnumMemberType() : int\l# TypeHidingType() : int\l# NotAnnotationType() : int\l# UndefinedName() : int\l# UninitializedLocalVariable() : int\l# VariableTypeCannotBeVoid() : int\l# VariableTypeCannotBeVoidArray() : int\l# CannotAllocateVoidArray() : int\l# RedefinedLocal() : int\l# RedefinedArgument() : int\l# DuplicateFinalLocalInitialization() : int\l# NonBlankFinalLocalAssignment() : int\l# ParameterAssignment() : int\l# FinalOuterLocalAssignment() : int\l# LocalVariableIsNeverUsed() : int\l# ArgumentIsNeverUsed() : int\l# BytecodeExceeds64KLimit() : int\l# BytecodeExceeds64KLimitForClinit() : int\l# TooManyArgumentSlots() : int\l# TooManyLocalVariableSlots() : int\l# TooManySyntheticArgumentSlots() : int\l# TooManyArrayDimensions() : int\l# BytecodeExceeds64KLimitForConstructor() : int\l# UndefinedField() : int\l# NotVisibleField() : int\l# AmbiguousField() : int\l# UsingDeprecatedField() : int\l# NonStaticFieldFromStaticInvocation() : int\l# ReferenceToForwardField() : int\l# NonStaticAccessToStaticField() : int\l# UnusedPrivateField() : int\l# IndirectAccessToStaticField() : int\l# UnqualifiedFieldAccess() : int\l# FinalFieldAssignment() : int\l# UninitializedBlankFinalField() : int\l# DuplicateBlankFinalFieldInitialization() : int\l# UnresolvedVariable() : int\l# NonStaticOrAlienTypeReceiver() : int\l# ExceptionParameterIsNeverUsed() : int\l# LocalVariableHidingLocalVariable() : int\l# LocalVariableHidingField() : int\l# FieldHidingLocalVariable() : int\l# FieldHidingField() : int\l# ArgumentHidingLocalVariable() : int\l# ArgumentHidingField() : int\l# MissingSerialVersion() : int\l# LambdaRedeclaresArgument() : int\l# LambdaRedeclaresLocal() : int\l# LambdaDescriptorMentionsUnmentionable() : int\l# UndefinedMethod() : int\l# NotVisibleMethod() : int\l# AmbiguousMethod() : int\l# UsingDeprecatedMethod() : int\l# DirectInvocationOfAbstractMethod() : int\l# VoidMethodReturnsValue() : int\l# MethodReturnsVoid() : int\l# MethodRequiresBody() : int\l# ShouldReturnValue() : int\l# MethodButWithConstructorName() : int\l# MissingReturnType() : int\l# BodyForNativeMethod() : int\l# BodyForAbstractMethod() : int\l# NoMessageSendOnBaseType() : int\l# ParameterMismatch() : int\l# NoMessageSendOnArrayType() : int\l# NonStaticAccessToStaticMethod() : int\l# UnusedPrivateMethod() : int\l# IndirectAccessToStaticMethod() : int\l# MissingTypeInMethod() : int\l# MethodCanBeStatic() : int\l# MethodCanBePotentiallyStatic() : int\l# MethodReferenceSwingsBothWays() : int\l# StaticMethodShouldBeAccessedStatically() : int\l# InvalidArrayConstructorReference() : int\l# ConstructedArrayIncompatible() : int\l# DanglingReference() : int\l# IncompatibleMethodReference() : int\l# MissingTypeInConstructor() : int\l# UndefinedConstructor() : int\l# NotVisibleConstructor() : int\l# AmbiguousConstructor() : int\l# UsingDeprecatedConstructor() : int\l# UnusedPrivateConstructor() : int\l# InstanceFieldDuringConstructorInvocation() : int\l# InstanceMethodDuringConstructorInvocation() : int\l# RecursiveConstructorInvocation() : int\l# ThisSuperDuringConstructorInvocation() : int\l# InvalidExplicitConstructorCall() : int\l# UndefinedConstructorInDefaultConstructor() : int\l# NotVisibleConstructorInDefaultConstructor() : int\l# AmbiguousConstructorInDefaultConstructor() : int\l# UndefinedConstructorInImplicitConstructorCall() : int\l# NotVisibleConstructorInImplicitConstructorCall() : int\l# AmbiguousConstructorInImplicitConstructorCall() : int\l# UnhandledExceptionInDefaultConstructor() : int\l# UnhandledExceptionInImplicitConstructorCall() : int\l# UnusedObjectAllocation() : int\l# DeadCode() : int\l# ArrayReferenceRequired() : int\l# NoImplicitStringConversionForCharArrayExpression() : int\l# StringConstantIsExceedingUtf8Limit() : int\l# NonConstantExpression() : int\l# NumericValueOutOfRange() : int\l# IllegalCast() : int\l# InvalidClassInstantiation() : int\l# CannotDefineDimensionExpressionsWithInit() : int\l# MustDefineEitherDimensionExpressionsOrInitializer() : int\l# InvalidOperator() : int\l# CodeCannotBeReached() : int\l# CannotReturnInInitializer() : int\l# InitializerMustCompleteNormally() : int\l# InvalidVoidExpression() : int\l# MaskedCatch() : int\l# DuplicateDefaultCase() : int\l# UnreachableCatch() : int\l# UnhandledException() : int\l# IncorrectSwitchType() : int\l# DuplicateCase() : int\l# DuplicateLabel() : int\l# InvalidBreak() : int\l# InvalidContinue() : int\l# UndefinedLabel() : int\l# InvalidTypeToSynchronized() : int\l# InvalidNullToSynchronized() : int\l# CannotThrowNull() : int\l# AssignmentHasNoEffect() : int\l# PossibleAccidentalBooleanAssignment() : int\l# SuperfluousSemicolon() : int\l# UnnecessaryCast() : int\l# UnnecessaryArgumentCast() : int\l# UnnecessaryInstanceof() : int\l# FinallyMustCompleteNormally() : int\l# UnusedMethodDeclaredThrownException() : int\l# UnusedConstructorDeclaredThrownException() : int\l# InvalidCatchBlockSequence() : int\l# EmptyControlFlowStatement() : int\l# UnnecessaryElse() : int\l# NeedToEmulateFieldReadAccess() : int\l# NeedToEmulateFieldWriteAccess() : int\l# NeedToEmulateMethodAccess() : int\l# NeedToEmulateConstructorAccess() : int\l# FallthroughCase() : int\l# InheritedMethodHidesEnclosingName() : int\l# InheritedFieldHidesEnclosingName() : int\l# InheritedTypeHidesEnclosingName() : int\l# IllegalUsageOfQualifiedTypeReference() : int\l# UnusedLabel() : int\l# ThisInStaticContext() : int\l# StaticMethodRequested() : int\l# IllegalDimension() : int\l# InvalidTypeExpression() : int\l# ParsingError() : int\l# ParsingErrorNoSuggestion() : int\l# InvalidUnaryExpression() : int\l# InterfaceCannotHaveConstructors() : int\l# ArrayConstantsOnlyInArrayInitializers() : int\l# ParsingErrorOnKeyword() : int\l# ParsingErrorOnKeywordNoSuggestion() : int\l# ComparingIdentical() : int\l# UnmatchedBracket() : int\l# NoFieldOnBaseType() : int\l# InvalidExpressionAsStatement() : int\l# ExpressionShouldBeAVariable() : int\l# MissingSemiColon() : int\l# InvalidParenthesizedExpression() : int\l# NoSuperInInterfaceContext() : int\l# ParsingErrorInsertTokenBefore() : int\l# ParsingErrorInsertTokenAfter() : int\l# ParsingErrorDeleteToken() : int\l# ParsingErrorDeleteTokens() : int\l# ParsingErrorMergeTokens() : int\l# ParsingErrorInvalidToken() : int\l# ParsingErrorMisplacedConstruct() : int\l# ParsingErrorReplaceTokens() : int\l# ParsingErrorNoSuggestionForTokens() : int\l# ParsingErrorUnexpectedEOF() : int\l# ParsingErrorInsertToComplete() : int\l# ParsingErrorInsertToCompleteScope() : int\l# ParsingErrorInsertToCompletePhrase() : int\l# EndOfSource() : int\l# InvalidHexa() : int\l# InvalidOctal() : int\l# InvalidCharacterConstant() : int\l# InvalidEscape() : int\l# InvalidInput() : int\l# InvalidUnicodeEscape() : int\l# InvalidFloat() : int\l# NullSourceString() : int\l# UnterminatedString() : int\l# UnterminatedComment() : int\l# NonExternalizedStringLiteral() : int\l# InvalidDigit() : int\l# InvalidLowSurrogate() : int\l# InvalidHighSurrogate() : int\l# UnnecessaryNLSTag() : int\l# InvalidBinary() : int\l# BinaryLiteralNotBelow17() : int\l# IllegalUnderscorePosition() : int\l# UnderscoresInLiteralsNotBelow17() : int\l# IllegalHexaLiteral() : int\l# MissingTypeInLambda() : int\l# DiscouragedReference() : int\l# InterfaceCannotHaveInitializers() : int\l# DuplicateModifierForType() : int\l# IllegalModifierForClass() : int\l# IllegalModifierForInterface() : int\l# IllegalModifierForMemberClass() : int\l# IllegalModifierForMemberInterface() : int\l# IllegalModifierForLocalClass() : int\l# ForbiddenReference() : int\l# IllegalModifierCombinationFinalAbstractForClass() : int\l# IllegalVisibilityModifierForInterfaceMemberType() : int\l# IllegalVisibilityModifierCombinationForMemberType() : int\l# IllegalStaticModifierForMemberType() : int\l# SuperclassMustBeAClass() : int\l# ClassExtendFinalClass() : int\l# DuplicateSuperInterface() : int\l# SuperInterfaceMustBeAnInterface() : int\l# HierarchyCircularitySelfReference() : int\l# HierarchyCircularity() : int\l# HidingEnclosingType() : int\l# DuplicateNestedType() : int\l# CannotThrowType() : int\l# PackageCollidesWithType() : int\l# TypeCollidesWithPackage() : int\l# DuplicateTypes() : int\l# IsClassPathCorrect() : int\l# PublicClassMustMatchFileName() : int\l# MustSpecifyPackage() : int\l# HierarchyHasProblems() : int\l# PackageIsNotExpectedPackage() : int\l# ObjectCannotHaveSuperTypes() : int\l# ObjectMustBeClass() : int\l# RedundantSuperinterface() : int\l# ShouldImplementHashcode() : int\l# AbstractMethodsInConcreteClass() : int\l# SuperclassNotFound() : int\l# SuperclassNotVisible() : int\l# SuperclassAmbiguous() : int\l# SuperclassInternalNameProvided() : int\l# SuperclassInheritedNameHidesEnclosingName() : int\l# InterfaceNotFound() : int\l# InterfaceNotVisible() : int\l# InterfaceAmbiguous() : int\l# InterfaceInternalNameProvided() : int\l# InterfaceInheritedNameHidesEnclosingName() : int\l# DuplicateField() : int\l# DuplicateModifierForField() : int\l# IllegalModifierForField() : int\l# IllegalModifierForInterfaceField() : int\l# IllegalVisibilityModifierCombinationForField() : int\l# IllegalModifierCombinationFinalVolatileForField() : int\l# UnexpectedStaticModifierForField() : int\l# FieldTypeNotFound() : int\l# FieldTypeNotVisible() : int\l# FieldTypeAmbiguous() : int\l# FieldTypeInternalNameProvided() : int\l# FieldTypeInheritedNameHidesEnclosingName() : int\l# DuplicateMethod() : int\l# IllegalModifierForArgument() : int\l# DuplicateModifierForMethod() : int\l# IllegalModifierForMethod() : int\l# IllegalModifierForInterfaceMethod() : int\l# IllegalVisibilityModifierCombinationForMethod() : int\l# UnexpectedStaticModifierForMethod() : int\l# IllegalAbstractModifierCombinationForMethod() : int\l# AbstractMethodInAbstractClass() : int\l# ArgumentTypeCannotBeVoid() : int\l# ArgumentTypeCannotBeVoidArray() : int\l# ReturnTypeCannotBeVoidArray() : int\l# NativeMethodsCannotBeStrictfp() : int\l# DuplicateModifierForArgument() : int\l# IllegalModifierForConstructor() : int\l# ArgumentTypeNotFound() : int\l# ArgumentTypeNotVisible() : int\l# ArgumentTypeAmbiguous() : int\l# ArgumentTypeInternalNameProvided() : int\l# ArgumentTypeInheritedNameHidesEnclosingName() : int\l# ExceptionTypeNotFound() : int\l# ExceptionTypeNotVisible() : int\l# ExceptionTypeAmbiguous() : int\l# ExceptionTypeInternalNameProvided() : int\l# ExceptionTypeInheritedNameHidesEnclosingName() : int\l# ReturnTypeNotFound() : int\l# ReturnTypeNotVisible() : int\l# ReturnTypeAmbiguous() : int\l# ReturnTypeInternalNameProvided() : int\l# ReturnTypeInheritedNameHidesEnclosingName() : int\l# ConflictingImport() : int\l# DuplicateImport() : int\l# CannotImportPackage() : int\l# UnusedImport() : int\l# ImportNotFound() : int\l# ImportNotVisible() : int\l# ImportAmbiguous() : int\l# ImportInternalNameProvided() : int\l# ImportInheritedNameHidesEnclosingName() : int\l# InvalidTypeForStaticImport() : int\l# DuplicateModifierForVariable() : int\l# IllegalModifierForVariable() : int\l# LocalVariableCannotBeNull() : int\l# LocalVariableCanOnlyBeNull() : int\l# LocalVariableMayBeNull() : int\l# AbstractMethodMustBeImplemented() : int\l# FinalMethodCannotBeOverridden() : int\l# IncompatibleExceptionInThrowsClause() : int\l# IncompatibleExceptionInInheritedMethodThrowsClause() : int\l# IncompatibleReturnType() : int\l# InheritedMethodReducesVisibility() : int\l# CannotOverrideAStaticMethodWithAnInstanceMethod() : int\l# CannotHideAnInstanceMethodWithAStaticMethod() : int\l# StaticInheritedMethodConflicts() : int\l# MethodReducesVisibility() : int\l# OverridingNonVisibleMethod() : int\l# AbstractMethodCannotBeOverridden() : int\l# OverridingDeprecatedMethod() : int\l# IncompatibleReturnTypeForNonInheritedInterfaceMethod() : int\l# IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod() : int\l# IllegalVararg() : int\l# OverridingMethodWithoutSuperInvocation() : int\l# MissingSynchronizedModifierInInheritedMethod() : int\l# AbstractMethodMustBeImplementedOverConcreteMethod() : int\l# InheritedIncompatibleReturnType() : int\l# CodeSnippetMissingClass() : int\l# CodeSnippetMissingMethod() : int\l# CannotUseSuperInCodeSnippet() : int\l# TooManyConstantsInConstantPool() : int\l# TooManyBytesForStringConstant() : int\l# TooManyFields() : int\l# TooManyMethods() : int\l# TooManyParametersForSyntheticMethod() : int\l# UseAssertAsAnIdentifier() : int\l# UseEnumAsAnIdentifier() : int\l# EnumConstantsCannotBeSurroundedByParenthesis() : int\l# IllegalUseOfUnderscoreAsAnIdentifier() : int\l# UninternedIdentityComparison() : int\l# Task() : int\l# NullLocalVariableReference() : int\l# PotentialNullLocalVariableReference() : int\l# RedundantNullCheckOnNullLocalVariable() : int\l# NullLocalVariableComparisonYieldsFalse() : int\l# RedundantLocalVariableNullAssignment() : int\l# NullLocalVariableInstanceofYieldsFalse() : int\l# RedundantNullCheckOnNonNullLocalVariable() : int\l# NonNullLocalVariableComparisonYieldsFalse() : int\l# PotentialNullUnboxing() : int\l# NullUnboxing() : int\l# UndocumentedEmptyBlock() : int\l# JavadocInvalidSeeUrlReference() : int\l# JavadocMissingTagDescription() : int\l# JavadocDuplicateTag() : int\l# JavadocHiddenReference() : int\l# JavadocInvalidMemberTypeQualification() : int\l# JavadocMissingIdentifier() : int\l# JavadocNonStaticTypeFromStaticInvocation() : int\l# JavadocInvalidParamTagTypeParameter() : int\l# JavadocUnexpectedTag() : int\l# JavadocMissingParamTag() : int\l# JavadocMissingParamName() : int\l# JavadocDuplicateParamName() : int\l# JavadocInvalidParamName() : int\l# JavadocMissingReturnTag() : int\l# JavadocDuplicateReturnTag() : int\l# JavadocMissingThrowsTag() : int\l# JavadocMissingThrowsClassName() : int\l# JavadocInvalidThrowsClass() : int\l# JavadocDuplicateThrowsClassName() : int\l# JavadocInvalidThrowsClassName() : int\l# JavadocMissingSeeReference() : int\l# JavadocInvalidSeeReference() : int\l# JavadocInvalidSeeHref() : int\l# JavadocInvalidSeeArgs() : int\l# JavadocMissing() : int\l# JavadocInvalidTag() : int\l# JavadocUndefinedField() : int\l# JavadocNotVisibleField() : int\l# JavadocAmbiguousField() : int\l# JavadocUsingDeprecatedField() : int\l# JavadocUndefinedConstructor() : int\l# JavadocNotVisibleConstructor() : int\l# JavadocAmbiguousConstructor() : int\l# JavadocUsingDeprecatedConstructor() : int\l# JavadocUndefinedMethod() : int\l# JavadocNotVisibleMethod() : int\l# JavadocAmbiguousMethod() : int\l# JavadocUsingDeprecatedMethod() : int\l# JavadocNoMessageSendOnBaseType() : int\l# JavadocParameterMismatch() : int\l# JavadocNoMessageSendOnArrayType() : int\l# JavadocUndefinedType() : int\l# JavadocNotVisibleType() : int\l# JavadocAmbiguousType() : int\l# JavadocUsingDeprecatedType() : int\l# JavadocInternalTypeNameProvided() : int\l# JavadocInheritedMethodHidesEnclosingName() : int\l# JavadocInheritedFieldHidesEnclosingName() : int\l# JavadocInheritedNameHidesEnclosingTypeName() : int\l# JavadocAmbiguousMethodReference() : int\l# JavadocUnterminatedInlineTag() : int\l# JavadocMalformedSeeReference() : int\l# JavadocMessagePrefix() : int\l# JavadocMissingHashCharacter() : int\l# JavadocEmptyReturnTag() : int\l# JavadocInvalidValueReference() : int\l# JavadocUnexpectedText() : int\l# JavadocInvalidParamTagName() : int\l# DuplicateTypeVariable() : int\l# IllegalTypeVariableSuperReference() : int\l# NonStaticTypeFromStaticInvocation() : int\l# ObjectCannotBeGeneric() : int\l# NonGenericType() : int\l# IncorrectArityForParameterizedType() : int\l# TypeArgumentMismatch() : int\l# DuplicateMethodErasure() : int\l# ReferenceToForwardTypeVariable() : int\l# BoundMustBeAnInterface() : int\l# UnsafeRawConstructorInvocation() : int\l# UnsafeRawMethodInvocation() : int\l# UnsafeTypeConversion() : int\l# InvalidTypeVariableExceptionType() : int\l# InvalidParameterizedExceptionType() : int\l# IllegalGenericArray() : int\l# UnsafeRawFieldAssignment() : int\l# FinalBoundForTypeVariable() : int\l# UndefinedTypeVariable() : int\l# SuperInterfacesCollide() : int\l# WildcardConstructorInvocation() : int\l# WildcardMethodInvocation() : int\l# WildcardFieldAssignment() : int\l# GenericMethodTypeArgumentMismatch() : int\l# GenericConstructorTypeArgumentMismatch() : int\l# UnsafeGenericCast() : int\l# IllegalInstanceofParameterizedType() : int\l# IllegalInstanceofTypeParameter() : int\l# NonGenericMethod() : int\l# IncorrectArityForParameterizedMethod() : int\l# ParameterizedMethodArgumentTypeMismatch() : int\l# NonGenericConstructor() : int\l# IncorrectArityForParameterizedConstructor() : int\l# ParameterizedConstructorArgumentTypeMismatch() : int\l# TypeArgumentsForRawGenericMethod() : int\l# TypeArgumentsForRawGenericConstructor() : int\l# SuperTypeUsingWildcard() : int\l# GenericTypeCannotExtendThrowable() : int\l# IllegalClassLiteralForTypeVariable() : int\l# UnsafeReturnTypeOverride() : int\l# MethodNameClash() : int\l# RawMemberTypeCannotBeParameterized() : int\l# MissingArgumentsForParameterizedMemberType() : int\l# StaticMemberOfParameterizedType() : int\l# BoundHasConflictingArguments() : int\l# DuplicateParameterizedMethods() : int\l# IllegalQualifiedParameterizedTypeAllocation() : int\l# DuplicateBounds() : int\l# BoundCannotBeArray() : int\l# UnsafeRawGenericConstructorInvocation() : int\l# UnsafeRawGenericMethodInvocation() : int\l# TypeParameterHidingType() : int\l# RawTypeReference() : int\l# NoAdditionalBoundAfterTypeVariable() : int\l# UnsafeGenericArrayForVarargs() : int\l# IllegalAccessFromTypeVariable() : int\l# TypeHidingTypeParameterFromType() : int\l# TypeHidingTypeParameterFromMethod() : int\l# InvalidUsageOfWildcard() : int\l# UnusedTypeArgumentsForMethodInvocation() : int\l# IncompatibleTypesInForeach() : int\l# InvalidTypeForCollection() : int\l# InvalidTypeForCollectionTarget14() : int\l# DuplicateInheritedMethods() : int\l# MethodNameClashHidden() : int\l# UnsafeElementTypeConversion() : int\l# InvalidTypeArguments() : int\l# InvalidUsageOfTypeParameters() : int\l# InvalidUsageOfStaticImports() : int\l# InvalidUsageOfForeachStatements() : int\l# InvalidUsageOfTypeArguments() : int\l# InvalidUsageOfEnumDeclarations() : int\l# InvalidUsageOfVarargs() : int\l# InvalidUsageOfAnnotations() : int\l# InvalidUsageOfAnnotationDeclarations() : int\l# InvalidUsageOfTypeParametersForAnnotationDeclaration() : int\l# InvalidUsageOfTypeParametersForEnumDeclaration() : int\l# IllegalModifierForAnnotationMethod() : int\l# IllegalExtendedDimensions() : int\l# InvalidFileNameForPackageAnnotations() : int\l# IllegalModifierForAnnotationType() : int\l# IllegalModifierForAnnotationMemberType() : int\l# InvalidAnnotationMemberType() : int\l# AnnotationCircularitySelfReference() : int\l# AnnotationCircularity() : int\l# DuplicateAnnotation() : int\l# MissingValueForAnnotationMember() : int\l# DuplicateAnnotationMember() : int\l# UndefinedAnnotationMember() : int\l# AnnotationValueMustBeClassLiteral() : int\l# AnnotationValueMustBeConstant() : int\l# AnnotationFieldNeedConstantInitialization() : int\l# IllegalModifierForAnnotationField() : int\l# AnnotationCannotOverrideMethod() : int\l# AnnotationMembersCannotHaveParameters() : int\l# AnnotationMembersCannotHaveTypeParameters() : int\l# AnnotationTypeDeclarationCannotHaveSuperclass() : int\l# AnnotationTypeDeclarationCannotHaveSuperinterfaces() : int\l# DuplicateTargetInTargetAnnotation() : int\l# DisallowedTargetForAnnotation() : int\l# MethodMustOverride() : int\l# AnnotationTypeDeclarationCannotHaveConstructor() : int\l# AnnotationValueMustBeAnnotation() : int\l# AnnotationTypeUsedAsSuperInterface() : int\l# MissingOverrideAnnotation() : int\l# FieldMissingDeprecatedAnnotation() : int\l# MethodMissingDeprecatedAnnotation() : int\l# TypeMissingDeprecatedAnnotation() : int\l# UnhandledWarningToken() : int\l# AnnotationValueMustBeArrayInitializer() : int\l# AnnotationValueMustBeAnEnumConstant() : int\l# MethodMustOverrideOrImplement() : int\l# UnusedWarningToken() : int\l# MissingOverrideAnnotationForInterfaceMethodImplementation() : int\l# InvalidUsageOfTypeAnnotations() : int\l# DisallowedExplicitThisParameter() : int\l# MisplacedTypeAnnotations() : int\l# IllegalTypeAnnotationsInStaticMemberAccess() : int\l# IllegalUsageOfTypeAnnotations() : int\l# IllegalDeclarationOfThisParameter() : int\l# ExplicitThisParameterNotBelow18() : int\l# DefaultMethodNotBelow18() : int\l# LambdaExpressionNotBelow18() : int\l# MethodReferenceNotBelow18() : int\l# ConstructorReferenceNotBelow18() : int\l# ExplicitThisParameterNotInLambda() : int\l# ExplicitAnnotationTargetRequired() : int\l# IllegalTypeForExplicitThis() : int\l# IllegalQualifierForExplicitThis() : int\l# IllegalQualifierForExplicitThis2() : int\l# TargetTypeNotAFunctionalInterface() : int\l# IllegalVarargInLambda() : int\l# illFormedParameterizationOfFunctionalInterface() : int\l# lambdaSignatureMismatched() : int\l# lambdaParameterTypeMismatched() : int\l# IncompatibleLambdaParameterType() : int\l# NoGenericLambda() : int\l# UnusedTypeArgumentsForConstructorInvocation() : int\l# UnusedTypeParameter() : int\l# IllegalArrayOfUnionType() : int\l# OuterLocalMustBeEffectivelyFinal() : int\l# InterfaceNotFunctionalInterface() : int\l# ConstructionTypeMismatch() : int\l# ToleratedMisplacedTypeAnnotations() : int\l# NonNullExpressionComparisonYieldsFalse() : int\l# RedundantNullCheckOnNonNullExpression() : int\l# NullExpressionReference() : int\l# PotentialNullExpressionReference() : int\l# CorruptedSignature() : int\l# InvalidEncoding() : int\l# CannotReadSource() : int\l# BoxingConversion() : int\l# UnboxingConversion() : int\l# IllegalModifierForEnum() : int\l# IllegalModifierForEnumConstant() : int\l# IllegalModifierForLocalEnum() : int\l# IllegalModifierForMemberEnum() : int\l# CannotDeclareEnumSpecialMethod() : int\l# IllegalQualifiedEnumConstantLabel() : int\l# CannotExtendEnum() : int\l# CannotInvokeSuperConstructorInEnum() : int\l# EnumAbstractMethodMustBeImplemented() : int\l# EnumSwitchCannotTargetField() : int\l# IllegalModifierForEnumConstructor() : int\l# MissingEnumConstantCase() : int\l# EnumStaticFieldInInInitializerContext() : int\l# EnumConstantMustImplementAbstractMethod() : int\l# EnumConstantCannotDefineAbstractMethod() : int\l# AbstractMethodInEnum() : int\l# MissingEnumDefaultCase() : int\l# MissingDefaultCase() : int\l# MissingEnumConstantCaseDespiteDefault() : int\l# UninitializedLocalVariableHintMissingDefault() : int\l# UninitializedBlankFinalFieldHintMissingDefault() : int\l# ShouldReturnValueHintMissingDefault() : int\l# IllegalExtendedDimensionsForVarArgs() : int\l# MethodVarargsArgumentNeedCast() : int\l# ConstructorVarargsArgumentNeedCast() : int\l# VarargsConflict() : int\l# SafeVarargsOnFixedArityMethod() : int\l# SafeVarargsOnNonFinalInstanceMethod() : int\l# PotentialHeapPollutionFromVararg() : int\l# VarargsElementTypeNotVisible() : int\l# VarargsElementTypeNotVisibleForConstructor() : int\l# ApplicableMethodOverriddenByInapplicable() : int\l# JavadocGenericMethodTypeArgumentMismatch() : int\l# JavadocNonGenericMethod() : int\l# JavadocIncorrectArityForParameterizedMethod() : int\l# JavadocParameterizedMethodArgumentTypeMismatch() : int\l# JavadocTypeArgumentsForRawGenericMethod() : int\l# JavadocGenericConstructorTypeArgumentMismatch() : int\l# JavadocNonGenericConstructor() : int\l# JavadocIncorrectArityForParameterizedConstructor() : int\l# JavadocParameterizedConstructorArgumentTypeMismatch() : int\l# JavadocTypeArgumentsForRawGenericConstructor() : int\l# AssignmentToMultiCatchParameter() : int\l# ResourceHasToImplementAutoCloseable() : int\l# AssignmentToResource() : int\l# InvalidUnionTypeReferenceSequence() : int\l# AutoManagedResourceNotBelow17() : int\l# MultiCatchNotBelow17() : int\l# PolymorphicMethodNotBelow17() : int\l# IncorrectSwitchType17() : int\l# CannotInferElidedTypes() : int\l# CannotUseDiamondWithExplicitTypeArguments() : int\l# CannotUseDiamondWithAnonymousClasses() : int\l# SwitchOnStringsNotBelow17() : int\l# UnhandledExceptionOnAutoClose() : int\l# DiamondNotBelow17() : int\l# RedundantSpecificationOfTypeArguments() : int\l# PotentiallyUnclosedCloseable() : int\l# PotentiallyUnclosedCloseableAtExit() : int\l# UnclosedCloseable() : int\l# UnclosedCloseableAtExit() : int\l# ExplicitlyClosedAutoCloseable() : int\l# SwitchOnEnumNotBelow15() : int\l# IntersectionCastNotBelow18() : int\l# IllegalBasetypeInIntersectionCast() : int\l# IllegalArrayTypeInIntersectionCast() : int\l# DuplicateBoundInIntersectionCast() : int\l# MultipleFunctionalInterfaces() : int\l# StaticInterfaceMethodNotBelow18() : int\l# DuplicateAnnotationNotMarkedRepeatable() : int\l# DisallowedTargetForContainerAnnotationType() : int\l# RepeatedAnnotationWithContainerAnnotation() : int\l# ExternalProblemNotFixable() : int\l# ExternalProblemFixable() : int\l# ContainerAnnotationTypeHasWrongValueType() : int\l# ContainerAnnotationTypeMustHaveValue() : int\l# ContainerAnnotationTypeHasNonDefaultMembers() : int\l# ContainerAnnotationTypeHasShorterRetention() : int\l# RepeatableAnnotationTypeTargetMismatch() : int\l# RepeatableAnnotationTypeIsDocumented() : int\l# RepeatableAnnotationTypeIsInherited() : int\l# RepeatableAnnotationWithRepeatingContainerAnnotation() : int\l# RequiredNonNullButProvidedNull() : int\l# RequiredNonNullButProvidedPotentialNull() : int\l# RequiredNonNullButProvidedUnknown() : int\l# MissingNonNullByDefaultAnnotationOnPackage() : int\l# IllegalReturnNullityRedefinition() : int\l# IllegalRedefinitionToNonNullParameter() : int\l# IllegalDefinitionToNonNullParameter() : int\l# ParameterLackingNonNullAnnotation() : int\l# ParameterLackingNullableAnnotation() : int\l# PotentialNullMessageSendReference() : int\l# RedundantNullCheckOnNonNullMessageSend() : int\l# CannotImplementIncompatibleNullness() : int\l# RedundantNullAnnotation() : int\l# IllegalAnnotationForBaseType() : int\l# NullableFieldReference() : int\l# RedundantNullDefaultAnnotation() : int\l# RedundantNullDefaultAnnotationPackage() : int\l# RedundantNullDefaultAnnotationType() : int\l# RedundantNullDefaultAnnotationMethod() : int\l# ContradictoryNullAnnotations() : int\l# MissingNonNullByDefaultAnnotationOnType() : int\l# RedundantNullCheckOnSpecdNonNullLocalVariable() : int\l# SpecdNonNullLocalVariableComparisonYieldsFalse() : int\l# RequiredNonNullButProvidedSpecdNullable() : int\l# UninitializedNonNullField() : int\l# UninitializedNonNullFieldHintMissingDefault() : int\l# NonNullMessageSendComparisonYieldsFalse() : int\l# RedundantNullCheckOnNonNullSpecdField() : int\l# NonNullSpecdFieldComparisonYieldsFalse() : int\l# ConflictingNullAnnotations() : int\l# ConflictingInheritedNullAnnotations() : int\l# RedundantNullCheckOnField() : int\l# FieldComparisonYieldsFalse() : int\l# ArrayReferencePotentialNullReference() : int\l# DereferencingNullableExpression() : int\l# NullityMismatchingTypeAnnotation() : int\l# NullityMismatchingTypeAnnotationSuperHint() : int\l# NullityUncheckedTypeAnnotationDetail() : int\l# NullityUncheckedTypeAnnotationDetailSuperHint() : int\l# ReferenceExpressionParameterNullityMismatch() : int\l# ReferenceExpressionParameterNullityUnchecked() : int\l# ReferenceExpressionReturnNullRedef() : int\l# ReferenceExpressionReturnNullRedefUnchecked() : int\l# RedundantNullCheckAgainstNonNullType() : int\l# NullAnnotationUnsupportedLocation() : int\l# NullAnnotationUnsupportedLocationAtType() : int\l# NullityMismatchTypeArgument() : int\l# ContradictoryNullAnnotationsOnBound() : int\l# ContradictoryNullAnnotationsInferred() : int\l# UnsafeNullnessCast() : int\l# NonNullDefaultDetailIsNotEvaluated() : int\l# NullNotCompatibleToFreeTypeVariable() : int\l# NullityMismatchAgainstFreeTypeVariable() : int\l# ImplicitObjectBoundNoNullDefault() : int\l# IllegalParameterNullityRedefinition() : int\l# ContradictoryNullAnnotationsInferredFunctionType() : int\l# IllegalReturnNullityRedefinitionFreeTypeVariable() : int\l# IllegalRedefinitionOfTypeVariable() : int\l# IllegalModifiersForElidedType() : int\l# IllegalModifiers() : int\l# IllegalTypeArgumentsInRawConstructorReference() : int\l# IllegalModifierForInterfaceMethod18() : int\l# DefaultMethodOverridesObjectMethod() : int\l# InheritedDefaultMethodConflictsWithOtherInherited() : int\l# DuplicateInheritedDefaultMethods() : int\l# SuperAccessCannotBypassDirectSuper() : int\l# SuperCallCannotBypassOverride() : int\l# IllegalModifierCombinationForInterfaceMethod() : int\l# IllegalStrictfpForAbstractInterfaceMethod() : int\l# IllegalDefaultModifierSpecification() : int\l# GenericInferenceError() : int\l# LambdaShapeComputationError() : int\l}"
	 ]

	 ASTVisitor [
		 label = "{ASTVisitor||# acceptProblem(IProblem) : \l# endVisit(AllocationExpression, BlockScope) : \l# endVisit(AND_AND_Expression, BlockScope) : \l# endVisit(AnnotationMethodDeclaration, ClassScope) : \l# endVisit(Argument, BlockScope) : \l# endVisit(Argument, ClassScope) : \l# endVisit(ArrayAllocationExpression, BlockScope) : \l# endVisit(ArrayInitializer, BlockScope) : \l# endVisit(ArrayInitializer, ClassScope) : \l# endVisit(ArrayQualifiedTypeReference, BlockScope) : \l# endVisit(ArrayQualifiedTypeReference, ClassScope) : \l# endVisit(ArrayReference, BlockScope) : \l# endVisit(ArrayTypeReference, BlockScope) : \l# endVisit(ArrayTypeReference, ClassScope) : \l# endVisit(AssertStatement, BlockScope) : \l# endVisit(Assignment, BlockScope) : \l# endVisit(BinaryExpression, BlockScope) : \l# endVisit(Block, BlockScope) : \l# endVisit(BreakStatement, BlockScope) : \l# endVisit(CaseStatement, BlockScope) : \l# endVisit(CastExpression, BlockScope) : \l# endVisit(CharLiteral, BlockScope) : \l# endVisit(ClassLiteralAccess, BlockScope) : \l# endVisit(Clinit, ClassScope) : \l# endVisit(CompilationUnitDeclaration, CompilationUnitScope) : \l# endVisit(CompoundAssignment, BlockScope) : \l# endVisit(ConditionalExpression, BlockScope) : \l# endVisit(ConstructorDeclaration, ClassScope) : \l# endVisit(ContinueStatement, BlockScope) : \l# endVisit(DoStatement, BlockScope) : \l# endVisit(DoubleLiteral, BlockScope) : \l# endVisit(EmptyStatement, BlockScope) : \l# endVisit(EqualExpression, BlockScope) : \l# endVisit(ExplicitConstructorCall, BlockScope) : \l# endVisit(ExtendedStringLiteral, BlockScope) : \l# endVisit(FalseLiteral, BlockScope) : \l# endVisit(FieldDeclaration, MethodScope) : \l# endVisit(FieldReference, BlockScope) : \l# endVisit(FieldReference, ClassScope) : \l# endVisit(FloatLiteral, BlockScope) : \l# endVisit(ForeachStatement, BlockScope) : \l# endVisit(ForStatement, BlockScope) : \l# endVisit(IfStatement, BlockScope) : \l# endVisit(ImportReference, CompilationUnitScope) : \l# endVisit(Initializer, MethodScope) : \l# endVisit(InstanceOfExpression, BlockScope) : \l# endVisit(IntLiteral, BlockScope) : \l# endVisit(Javadoc, BlockScope) : \l# endVisit(Javadoc, ClassScope) : \l# endVisit(JavadocAllocationExpression, BlockScope) : \l# endVisit(JavadocAllocationExpression, ClassScope) : \l# endVisit(JavadocArgumentExpression, BlockScope) : \l# endVisit(JavadocArgumentExpression, ClassScope) : \l# endVisit(JavadocArrayQualifiedTypeReference, BlockScope) : \l# endVisit(JavadocArrayQualifiedTypeReference, ClassScope) : \l# endVisit(JavadocArraySingleTypeReference, BlockScope) : \l# endVisit(JavadocArraySingleTypeReference, ClassScope) : \l# endVisit(JavadocFieldReference, BlockScope) : \l# endVisit(JavadocFieldReference, ClassScope) : \l# endVisit(JavadocImplicitTypeReference, BlockScope) : \l# endVisit(JavadocImplicitTypeReference, ClassScope) : \l# endVisit(JavadocMessageSend, BlockScope) : \l# endVisit(JavadocMessageSend, ClassScope) : \l# endVisit(JavadocQualifiedTypeReference, BlockScope) : \l# endVisit(JavadocQualifiedTypeReference, ClassScope) : \l# endVisit(JavadocReturnStatement, BlockScope) : \l# endVisit(JavadocReturnStatement, ClassScope) : \l# endVisit(JavadocSingleNameReference, BlockScope) : \l# endVisit(JavadocSingleNameReference, ClassScope) : \l# endVisit(JavadocSingleTypeReference, BlockScope) : \l# endVisit(JavadocSingleTypeReference, ClassScope) : \l# endVisit(LabeledStatement, BlockScope) : \l# endVisit(LocalDeclaration, BlockScope) : \l# endVisit(LongLiteral, BlockScope) : \l# endVisit(MarkerAnnotation, BlockScope) : \l# endVisit(MarkerAnnotation, ClassScope) : \l# endVisit(MemberValuePair, BlockScope) : \l# endVisit(MemberValuePair, ClassScope) : \l# endVisit(MessageSend, BlockScope) : \l# endVisit(MethodDeclaration, ClassScope) : \l# endVisit(StringLiteralConcatenation, BlockScope) : \l# endVisit(NormalAnnotation, BlockScope) : \l# endVisit(NormalAnnotation, ClassScope) : \l# endVisit(NullLiteral, BlockScope) : \l# endVisit(OR_OR_Expression, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, ClassScope) : \l# endVisit(ParameterizedSingleTypeReference, BlockScope) : \l# endVisit(ParameterizedSingleTypeReference, ClassScope) : \l# endVisit(PostfixExpression, BlockScope) : \l# endVisit(PrefixExpression, BlockScope) : \l# endVisit(QualifiedAllocationExpression, BlockScope) : \l# endVisit(QualifiedNameReference, BlockScope) : \l# endVisit(QualifiedNameReference, ClassScope) : \l# endVisit(QualifiedSuperReference, BlockScope) : \l# endVisit(QualifiedSuperReference, ClassScope) : \l# endVisit(QualifiedThisReference, BlockScope) : \l# endVisit(QualifiedThisReference, ClassScope) : \l# endVisit(QualifiedTypeReference, BlockScope) : \l# endVisit(QualifiedTypeReference, ClassScope) : \l# endVisit(ReturnStatement, BlockScope) : \l# endVisit(SingleMemberAnnotation, BlockScope) : \l# endVisit(SingleMemberAnnotation, ClassScope) : \l# endVisit(SingleNameReference, BlockScope) : \l# endVisit(SingleNameReference, ClassScope) : \l# endVisit(SingleTypeReference, BlockScope) : \l# endVisit(SingleTypeReference, ClassScope) : \l# endVisit(StringLiteral, BlockScope) : \l# endVisit(SuperReference, BlockScope) : \l# endVisit(SwitchStatement, BlockScope) : \l# endVisit(SynchronizedStatement, BlockScope) : \l# endVisit(ThisReference, BlockScope) : \l# endVisit(ThisReference, ClassScope) : \l# endVisit(ThrowStatement, BlockScope) : \l# endVisit(TrueLiteral, BlockScope) : \l# endVisit(TryStatement, BlockScope) : \l# endVisit(TypeDeclaration, BlockScope) : \l# endVisit(TypeDeclaration, ClassScope) : \l# endVisit(TypeDeclaration, CompilationUnitScope) : \l# endVisit(TypeParameter, BlockScope) : \l# endVisit(TypeParameter, ClassScope) : \l# endVisit(UnaryExpression, BlockScope) : \l# endVisit(UnionTypeReference, BlockScope) : \l# endVisit(UnionTypeReference, ClassScope) : \l# endVisit(WhileStatement, BlockScope) : \l# endVisit(Wildcard, BlockScope) : \l# endVisit(Wildcard, ClassScope) : \l# endVisit(LambdaExpression, BlockScope) : \l# endVisit(ReferenceExpression, BlockScope) : \l# endVisit(IntersectionCastTypeReference, ClassScope) : \l# endVisit(IntersectionCastTypeReference, BlockScope) : \l# visit(AllocationExpression, BlockScope) : boolean\l# visit(AND_AND_Expression, BlockScope) : boolean\l# visit(AnnotationMethodDeclaration, ClassScope) : boolean\l# visit(Argument, BlockScope) : boolean\l# visit(Argument, ClassScope) : boolean\l# visit(ArrayAllocationExpression, BlockScope) : boolean\l# visit(ArrayInitializer, BlockScope) : boolean\l# visit(ArrayInitializer, ClassScope) : boolean\l# visit(ArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, ClassScope) : boolean\l# visit(ArrayReference, BlockScope) : boolean\l# visit(ArrayTypeReference, BlockScope) : boolean\l# visit(ArrayTypeReference, ClassScope) : boolean\l# visit(AssertStatement, BlockScope) : boolean\l# visit(Assignment, BlockScope) : boolean\l# visit(BinaryExpression, BlockScope) : boolean\l# visit(Block, BlockScope) : boolean\l# visit(BreakStatement, BlockScope) : boolean\l# visit(CaseStatement, BlockScope) : boolean\l# visit(CastExpression, BlockScope) : boolean\l# visit(CharLiteral, BlockScope) : boolean\l# visit(ClassLiteralAccess, BlockScope) : boolean\l# visit(Clinit, ClassScope) : boolean\l# visit(CompilationUnitDeclaration, CompilationUnitScope) : boolean\l# visit(CompoundAssignment, BlockScope) : boolean\l# visit(ConditionalExpression, BlockScope) : boolean\l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(ContinueStatement, BlockScope) : boolean\l# visit(DoStatement, BlockScope) : boolean\l# visit(DoubleLiteral, BlockScope) : boolean\l# visit(EmptyStatement, BlockScope) : boolean\l# visit(EqualExpression, BlockScope) : boolean\l# visit(ExplicitConstructorCall, BlockScope) : boolean\l# visit(ExtendedStringLiteral, BlockScope) : boolean\l# visit(FalseLiteral, BlockScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(FieldReference, BlockScope) : boolean\l# visit(FieldReference, ClassScope) : boolean\l# visit(FloatLiteral, BlockScope) : boolean\l# visit(ForeachStatement, BlockScope) : boolean\l# visit(ForStatement, BlockScope) : boolean\l# visit(IfStatement, BlockScope) : boolean\l# visit(ImportReference, CompilationUnitScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(InstanceOfExpression, BlockScope) : boolean\l# visit(IntLiteral, BlockScope) : boolean\l# visit(Javadoc, BlockScope) : boolean\l# visit(Javadoc, ClassScope) : boolean\l# visit(JavadocAllocationExpression, BlockScope) : boolean\l# visit(JavadocAllocationExpression, ClassScope) : boolean\l# visit(JavadocArgumentExpression, BlockScope) : boolean\l# visit(JavadocArgumentExpression, ClassScope) : boolean\l# visit(JavadocArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(JavadocArrayQualifiedTypeReference, ClassScope) : boolean\l# visit(JavadocArraySingleTypeReference, BlockScope) : boolean\l# visit(JavadocArraySingleTypeReference, ClassScope) : boolean\l# visit(JavadocFieldReference, BlockScope) : boolean\l# visit(JavadocFieldReference, ClassScope) : boolean\l# visit(JavadocImplicitTypeReference, BlockScope) : boolean\l# visit(JavadocImplicitTypeReference, ClassScope) : boolean\l# visit(JavadocMessageSend, BlockScope) : boolean\l# visit(JavadocMessageSend, ClassScope) : boolean\l# visit(JavadocQualifiedTypeReference, BlockScope) : boolean\l# visit(JavadocQualifiedTypeReference, ClassScope) : boolean\l# visit(JavadocReturnStatement, BlockScope) : boolean\l# visit(JavadocReturnStatement, ClassScope) : boolean\l# visit(JavadocSingleNameReference, BlockScope) : boolean\l# visit(JavadocSingleNameReference, ClassScope) : boolean\l# visit(JavadocSingleTypeReference, BlockScope) : boolean\l# visit(JavadocSingleTypeReference, ClassScope) : boolean\l# visit(LabeledStatement, BlockScope) : boolean\l# visit(LocalDeclaration, BlockScope) : boolean\l# visit(LongLiteral, BlockScope) : boolean\l# visit(MarkerAnnotation, BlockScope) : boolean\l# visit(MarkerAnnotation, ClassScope) : boolean\l# visit(MemberValuePair, BlockScope) : boolean\l# visit(MemberValuePair, ClassScope) : boolean\l# visit(MessageSend, BlockScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(StringLiteralConcatenation, BlockScope) : boolean\l# visit(NormalAnnotation, BlockScope) : boolean\l# visit(NormalAnnotation, ClassScope) : boolean\l# visit(NullLiteral, BlockScope) : boolean\l# visit(OR_OR_Expression, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, ClassScope) : boolean\l# visit(ParameterizedSingleTypeReference, BlockScope) : boolean\l# visit(ParameterizedSingleTypeReference, ClassScope) : boolean\l# visit(PostfixExpression, BlockScope) : boolean\l# visit(PrefixExpression, BlockScope) : boolean\l# visit(QualifiedAllocationExpression, BlockScope) : boolean\l# visit(QualifiedNameReference, BlockScope) : boolean\l# visit(QualifiedNameReference, ClassScope) : boolean\l# visit(QualifiedSuperReference, BlockScope) : boolean\l# visit(QualifiedSuperReference, ClassScope) : boolean\l# visit(QualifiedThisReference, BlockScope) : boolean\l# visit(QualifiedThisReference, ClassScope) : boolean\l# visit(QualifiedTypeReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, ClassScope) : boolean\l# visit(ReturnStatement, BlockScope) : boolean\l# visit(SingleMemberAnnotation, BlockScope) : boolean\l# visit(SingleMemberAnnotation, ClassScope) : boolean\l# visit(SingleNameReference, BlockScope) : boolean\l# visit(SingleNameReference, ClassScope) : boolean\l# visit(SingleTypeReference, BlockScope) : boolean\l# visit(SingleTypeReference, ClassScope) : boolean\l# visit(StringLiteral, BlockScope) : boolean\l# visit(SuperReference, BlockScope) : boolean\l# visit(SwitchStatement, BlockScope) : boolean\l# visit(SynchronizedStatement, BlockScope) : boolean\l# visit(ThisReference, BlockScope) : boolean\l# visit(ThisReference, ClassScope) : boolean\l# visit(ThrowStatement, BlockScope) : boolean\l# visit(TrueLiteral, BlockScope) : boolean\l# visit(TryStatement, BlockScope) : boolean\l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l# visit(TypeParameter, BlockScope) : boolean\l# visit(TypeParameter, ClassScope) : boolean\l# visit(UnaryExpression, BlockScope) : boolean\l# visit(UnionTypeReference, BlockScope) : boolean\l# visit(UnionTypeReference, ClassScope) : boolean\l# visit(WhileStatement, BlockScope) : boolean\l# visit(Wildcard, BlockScope) : boolean\l# visit(Wildcard, ClassScope) : boolean\l# visit(LambdaExpression, BlockScope) : boolean\l# visit(ReferenceExpression, BlockScope) : boolean\l# visit(IntersectionCastTypeReference, ClassScope) : boolean\l# visit(IntersectionCastTypeReference, BlockScope) : boolean\l}"
	 ]

	 ClassFile [
		 label = "{ClassFile|- bytes : byte\l+ codeStream : CodeStream\l+ constantPool : ConstantPool\l+ constantPoolOffset : int\l+ contents : byte\l+ contentsOffset : int\l# creatingProblemType : boolean\l+ enclosingClassFile : ClassFile\l+ header : byte\l+ headerOffset : int\l+ innerClassesBindings : Map\l+ bootstrapMethods : List\l+ methodCount : int\l+ methodCountOffset : int\l# isShared : boolean\l+ produceAttributes : int\l+ referenceBinding : SourceTypeBinding\l+ isNestedType : boolean\l+ targetJDK : long\l+ missingTypes : List\l+ visitedTypes : Set\l+ INITIAL_CONTENTS_SIZE : int\l+ INITIAL_HEADER_SIZE : int\l+ INNER_CLASSES_SIZE : int\l|# createProblemType(TypeDeclaration, CompilationResult) : \l# getNewInstance(SourceTypeBinding) : ClassFile\l# ClassFile() : \l# ClassFile(SourceTypeBinding) : \l# addAbstractMethod(AbstractMethodDeclaration, MethodBinding) : \l# addAttributes() : \l# compare(Object, Object) : int\l# addDefaultAbstractMethods() : \l# addFieldAttributes(FieldBinding, int) : int\l# addFieldInfo(FieldBinding) : \l# addFieldInfos() : \l# addMissingAbstractProblemMethod(MethodDeclaration, MethodBinding, CategorizedProblem, CompilationResult) : \l# addProblemClinit(CategorizedProblem) : \l# addProblemConstructor(AbstractMethodDeclaration, MethodBinding, CategorizedProblem) : \l# addProblemConstructor(AbstractMethodDeclaration, MethodBinding, CategorizedProblem, int) : \l# addProblemMethod(AbstractMethodDeclaration, MethodBinding, CategorizedProblem) : \l# addProblemMethod(AbstractMethodDeclaration, MethodBinding, CategorizedProblem, int) : \l# addSpecialMethods() : \l# addSyntheticArrayConstructor(SyntheticMethodBinding) : \l# addSyntheticArrayClone(SyntheticMethodBinding) : \l# addSyntheticFactoryMethod(SyntheticMethodBinding) : \l# addSyntheticConstructorAccessMethod(SyntheticMethodBinding) : \l# addSyntheticEnumValueOfMethod(SyntheticMethodBinding) : \l# addSyntheticEnumValuesMethod(SyntheticMethodBinding) : \l# addSyntheticEnumInitializationMethod(SyntheticMethodBinding) : \l# addSyntheticFieldReadAccessMethod(SyntheticMethodBinding) : \l# addSyntheticFieldWriteAccessMethod(SyntheticMethodBinding) : \l# addSyntheticMethodAccessMethod(SyntheticMethodBinding) : \l# addSyntheticSwitchTable(SyntheticMethodBinding) : \l# completeCodeAttribute(int) : \l# generateTypeAnnotationsOnCodeAttribute() : int\l# completeCodeAttributeForClinit(int) : \l# completeCodeAttributeForClinit(int, int) : \l# completeCodeAttributeForMissingAbstractProblemMethod(MethodBinding, int, int, int) : \l# completeCodeAttributeForProblemMethod(AbstractMethodDeclaration, MethodBinding, int, int, int) : \l# completeCodeAttributeForSyntheticMethod(boolean, SyntheticMethodBinding, int, int) : \l# completeCodeAttributeForSyntheticMethod(SyntheticMethodBinding, int, int) : \l# completeArgumentAnnotationInfo(Argument, List) : \l# completeMethodInfo(MethodBinding, int, int) : \l# dumpLocations(int) : \l# dumpTargetTypeContents(int, AnnotationContext) : \l# fileName() : char\l# generateAnnotation(Annotation, int) : \l# generateAnnotationDefaultAttribute(AnnotationMethodDeclaration, int) : int\l# generateCodeAttributeHeader() : \l# generateConstantValueAttribute(Constant, FieldBinding, int) : int\l# generateDeprecatedAttribute() : int\l# generateElementValue(Expression, TypeBinding, int) : \l# generateElementValue(int, Expression, Constant, TypeBinding) : \l# generateElementValueForNonConstantExpression(Expression, int, TypeBinding) : \l# generateEnclosingMethodAttribute() : int\l# generateExceptionsAttribute(ReferenceBinding) : int\l# generateHierarchyInconsistentAttribute() : int\l# generateInnerClassAttribute(int, ReferenceBinding) : int\l# generateBootstrapMethods(List) : int\l# generateLineNumberAttribute() : int\l# generateLineNumberAttribute(int) : int\l# generateLocalVariableTableAttribute(int, boolean, boolean) : int\l# generateMethodInfoAttributes(MethodBinding) : int\l# generateMethodInfoAttributes(MethodBinding, AnnotationMethodDeclaration) : int\l# generateMethodInfoHeader(MethodBinding) : \l# generateMethodInfoHeader(MethodBinding, int) : \l# addSyntheticDeserializeLambda(SyntheticMethodBinding, SyntheticMethodBinding) : \l# generateMethodInfoHeaderForClinit() : \l# generateMissingAbstractMethods(MethodDeclaration, CompilationResult) : \l# generateMissingTypesAttribute() : \l# compare(Object, Object) : int\l# jdk16packageInfoAnnotation(long, long) : boolean\l# generateRuntimeAnnotations(Annotation, long) : int\l# generateRuntimeAnnotationsForParameters(Argument) : int\l# generateRuntimeTypeAnnotations(AnnotationContext, int, int) : int\l# generateMethodParameters(MethodBinding) : int\l# writeArgumentName(char, int, int) : int\l# generateSignatureAttribute(char) : int\l# generateSourceAttribute(String) : int\l# generateStackMapAttribute(MethodBinding, int, int, int, boolean) : int\l# generateStackMapTableAttribute(MethodBinding, int, int, int, boolean) : int\l# generateSyntheticAttribute() : int\l# generateTypeAnnotation(AnnotationContext, int) : \l# generateTypeAnnotationAttributeForTypeDeclaration() : int\l# generateVarargsAttribute() : int\l# getBytes() : byte\l# getCompoundName() : char\l# getParametersCount(char) : int\l# getReturnType(char) : char\l# i4At(byte, int, int) : int\l# initByteArrays() : \l# initialize(SourceTypeBinding, ClassFile, boolean) : \l# initializeDefaultLocals(StackMapFrame, MethodBinding, int, int) : \l# initializeLocals(boolean, int, StackMapFrame) : \l# outerMostEnclosingClassFile() : ClassFile\l# recordInnerClasses(TypeBinding) : \l# recordInnerClasses(TypeBinding, boolean) : \l# recordBootstrapMethod(FunctionalExpression) : int\l# reset(SourceTypeBinding) : \l# resizeContents(int) : \l# retrieveLocal(int, int) : VerificationTypeInfo\l# scanType(char, int) : int\l# setForMethodInfos() : \l# filterFakeFrames(Set, Map, int) : List\l# compare(Object, Object) : int\l# traverse(MethodBinding, int, byte, int, int, Map, boolean) : List\l# addRealJumpTarget(Set, int) : \l# add(Map, StackMapFrame) : \l# u1At(byte, int, int) : int\l# u2At(byte, int, int) : int\l# u4At(byte, int, int) : long\l# i2At(byte, int, int) : int\l# utf8At(byte, int, int) : char\l}"
	 ]

	 ClassFilePool [
		 label = "{ClassFilePool|+ POOL_SIZE : int\l# classFiles : ClassFile\l|# ClassFilePool() : \l# newInstance() : ClassFilePool\l# acquire(SourceTypeBinding) : ClassFile\l# release(ClassFile) : \l# reset() : \l}"
	 ]

	 CompilationResult [
		 label = "{CompilationResult|+ problems : CategorizedProblem\l+ tasks : CategorizedProblem\l+ problemCount : int\l+ taskCount : int\l+ compilationUnit : ICompilationUnit\l- problemsMap : Map\l- firstErrors : Set\l- maxProblemPerUnit : int\l+ qualifiedReferences : char\l+ simpleNameReferences : char\l+ rootReferences : char\l+ hasAnnotations : boolean\l+ hasFunctionalTypes : boolean\l+ lineSeparatorPositions : int\l+ recoveryScannerData : RecoveryScannerData\l+ compiledTypes : Map\l+ unitIndex : int\l+ hasBeenAccepted : boolean\l+ fileName : char\l+ hasInconsistentToplevelHierarchies : boolean\l+ hasSyntaxError : boolean\l+ packageName : char\l+ checkSecondaryTypes : boolean\l- numberOfErrors : int\l- hasMandatoryErrors : boolean\l- EMPTY_LINE_ENDS : int\l- PROBLEM_COMPARATOR : Comparator\l|# compare(Object, Object) : int\l# CompilationResult(char, int, int, int) : \l# CompilationResult(ICompilationUnit, int, int, int) : \l# computePriority(CategorizedProblem) : int\l# getAllProblems() : CategorizedProblem\l# getClassFiles() : ClassFile\l# getCompilationUnit() : ICompilationUnit\l# getErrors() : CategorizedProblem\l# getFileName() : char\l# getLineSeparatorPositions() : int\l# getProblems() : CategorizedProblem\l# getCUProblems() : CategorizedProblem\l# getTasks() : CategorizedProblem\l# hasErrors() : boolean\l# hasMandatoryErrors() : boolean\l# hasProblems() : boolean\l# hasTasks() : boolean\l# hasWarnings() : boolean\l# quickPrioritize(CategorizedProblem, int, int) : \l# recordPackageName(char) : \l# record(CategorizedProblem, ReferenceContext) : \l# record(CategorizedProblem, ReferenceContext, boolean) : \l# getContext(CategorizedProblem) : ReferenceContext\l# record(char, ClassFile) : \l# recordTask(CategorizedProblem) : \l# removeProblem(CategorizedProblem) : \l# tagAsAccepted() : CompilationResult\l# toString() : String\l}"
	 ]

	 APTProblem [
		 label = "{APTProblem|+ parser : Parser\l+ requestor : ICompilerRequestor\l+ options : CompilerOptions\l+ problemReporter : ProblemReporter\l# out : PrintWriter\l+ stats : CompilerStats\l+ progress : CompilationProgress\l+ remainingIterations : int\l+ unitsToProcess : CompilationUnitDeclaration\l+ totalUnits : int\l- aptProblems : Map\l+ lookupEnvironment : LookupEnvironment\l+ DEBUG : boolean\l+ parseThreshold : int\l+ annotationProcessorManager : AbstractAnnotationProcessorManager\l+ annotationProcessorStartIndex : int\l+ referenceBindings : ReferenceBinding\l+ useSingleThread : boolean\l+ DebugRequestor : IDebugRequestor\l# problem : CategorizedProblem\l# context : ReferenceContext\l|# Compiler(INameEnvironment, IErrorHandlingPolicy, Map, ICompilerRequestor, IProblemFactory) : \l# Compiler(INameEnvironment, IErrorHandlingPolicy, Map, ICompilerRequestor, IProblemFactory, boolean) : \l# Compiler(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory) : \l# Compiler(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory, PrintWriter) : \l# Compiler(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory, PrintWriter, CompilationProgress) : \l# acceptResult(CompilationResult) : \l# accept(IBinaryType, PackageBinding, AccessRestriction) : \l# accept(ICompilationUnit, AccessRestriction) : \l# accept(ISourceType, PackageBinding, AccessRestriction) : \l# addCompilationUnit(ICompilationUnit, CompilationUnitDeclaration) : \l# beginToCompile(ICompilationUnit) : \l# reportProgress(String) : \l# reportWorked(int, int) : \l# compile(ICompilationUnit) : \l# null() : \l# APTProblem(CategorizedProblem, ReferenceContext) : \l# backupAptProblems() : \l# restoreAptProblems() : \l# processCompiledUnits(int) : \l# getUnitToProcess(int) : CompilationUnitDeclaration\l# shouldCleanup(int) : boolean\l# setBinaryTypes(ReferenceBinding) : \l# handleInternalException(Throwable, CompilationUnitDeclaration, CompilationResult) : \l# handleInternalException(AbortCompilation, CompilationUnitDeclaration) : \l# initializeParser() : \l# internalBeginToCompile(ICompilationUnit, int) : \l# process(CompilationUnitDeclaration, int) : \l# processAnnotations() : \l# reset() : \l# resolve(CompilationUnitDeclaration, ICompilationUnit, boolean, boolean, boolean) : CompilationUnitDeclaration\l# resolve(ICompilationUnit, boolean, boolean, boolean) : CompilationUnitDeclaration\l}"
	 ]

	 DefaultErrorHandlingPolicies [
		 label = "{DefaultErrorHandlingPolicies||# exitAfterAllProblems() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l# exitOnFirstError() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l# proceedOnFirstError() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l# proceedWithAllProblems() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l# ignoreAllProblems() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l}"
	 ]

	 ICompilerRequestor [
		 label = "{ICompilerRequestor||# acceptResult(CompilationResult) : \l}"
	 ]

	 IDebugRequestor [
		 label = "{IDebugRequestor||# acceptDebugResult(CompilationResult) : \l# isActive() : boolean\l# activate() : \l# deactivate() : \l# reset() : \l}"
	 ]

	 IErrorHandlingPolicy [
		 label = "{IErrorHandlingPolicy||# proceedOnErrors() : boolean\l# stopOnFirstError() : boolean\l# ignoreAllErrors() : boolean\l}"
	 ]

	 IProblemFactory [
		 label = "{IProblemFactory||# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l# getLocale() : Locale\l# getLocalizedMessage(int, String) : String\l# getLocalizedMessage(int, int, String) : String\l}"
	 ]

	 ProcessTaskManager [
		 label = "{ProcessTaskManager|# compiler : Compiler\l- unitIndex : int\l- processingThread : Thread\l# unitToProcess : CompilationUnitDeclaration\l- caughtException : Throwable\l# currentIndex : int\l# units : CompilationUnitDeclaration\l+ PROCESSED_QUEUE_SIZE : int\l|# ProcessTaskManager(Compiler, int) : \l# addNextUnit(CompilationUnitDeclaration) : \l# removeNextUnit() : CompilationUnitDeclaration\l# run() : \l# shutdown() : \l}"
	 ]

	 ReadManager [
		 label = "{ReadManager|# units : ICompilationUnit\l# nextFileToRead : int\l# filesRead : ICompilationUnit\l# contentsRead : char\l# readyToReadPosition : int\l# nextAvailablePosition : int\l# readingThreads : Thread\l# readInProcessMarker : char\l# sleepingThreadCount : int\l- caughtException : Throwable\l# START_CUSHION : int\l+ THRESHOLD : int\l# CACHE_SIZE : int\l|# ReadManager(ICompilationUnit, int) : \l# getContents(ICompilationUnit) : char\l# run() : \l# shutdown() : \l}"
	 ]

	 BuildContext [
		 label = "{BuildContext||# getContents() : char\l# getFile() : IFile\l# hasAnnotations() : boolean\l# recordAddedGeneratedFiles(IFile) : \l# recordDeletedGeneratedFiles(IFile) : \l# recordDependencies(String) : \l# recordNewProblems(CategorizedProblem) : \l}"
	 ]

	 CompilationParticipant [
		 label = "{CompilationParticipant|+ READY_FOR_BUILD : int\l+ NEEDS_FULL_BUILD : int\l|# aboutToBuild(IJavaProject) : int\l# buildFinished(IJavaProject) : \l# buildStarting(BuildContext, boolean) : \l# cleanStarting(IJavaProject) : \l# isActive(IJavaProject) : boolean\l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# reconcile(ReconcileContext) : \l}"
	 ]

	 IScanner [
		 label = "{IScanner||# getCurrentTokenSource() : char\l# getRawTokenSource() : char\l# getCurrentTokenStartPosition() : int\l# getCurrentTokenEndPosition() : int\l# getLineStart(int) : int\l# getLineEnd(int) : int\l# getLineEnds() : int\l# getLineNumber(int) : int\l# getNextToken() : int\l# getSource() : char\l# resetTo(int, int) : \l# setSource(char) : \l}"
	 ]

	 ITerminalSymbols [
		 label = "{ITerminalSymbols||# TokenNameWHITESPACE() : int\l# TokenNameCOMMENT_LINE() : int\l# TokenNameCOMMENT_BLOCK() : int\l# TokenNameCOMMENT_JAVADOC() : int\l# TokenNameIdentifier() : int\l# TokenNameabstract() : int\l# TokenNameassert() : int\l# TokenNameboolean() : int\l# TokenNamebreak() : int\l# TokenNamebyte() : int\l# TokenNamecase() : int\l# TokenNamecatch() : int\l# TokenNamechar() : int\l# TokenNameclass() : int\l# TokenNamecontinue() : int\l# TokenNamedefault() : int\l# TokenNamedo() : int\l# TokenNamedouble() : int\l# TokenNameelse() : int\l# TokenNameextends() : int\l# TokenNamefalse() : int\l# TokenNamefinal() : int\l# TokenNamefinally() : int\l# TokenNamefloat() : int\l# TokenNamefor() : int\l# TokenNameif() : int\l# TokenNameimplements() : int\l# TokenNameimport() : int\l# TokenNameinstanceof() : int\l# TokenNameint() : int\l# TokenNameinterface() : int\l# TokenNamelong() : int\l# TokenNamenative() : int\l# TokenNamenew() : int\l# TokenNamenull() : int\l# TokenNamepackage() : int\l# TokenNameprivate() : int\l# TokenNameprotected() : int\l# TokenNamepublic() : int\l# TokenNamereturn() : int\l# TokenNameshort() : int\l# TokenNamestatic() : int\l# TokenNamestrictfp() : int\l# TokenNamesuper() : int\l# TokenNameswitch() : int\l# TokenNamesynchronized() : int\l# TokenNamethis() : int\l# TokenNamethrow() : int\l# TokenNamethrows() : int\l# TokenNametransient() : int\l# TokenNametrue() : int\l# TokenNametry() : int\l# TokenNamevoid() : int\l# TokenNamevolatile() : int\l# TokenNamewhile() : int\l# TokenNameIntegerLiteral() : int\l# TokenNameLongLiteral() : int\l# TokenNameFloatingPointLiteral() : int\l# TokenNameDoubleLiteral() : int\l# TokenNameCharacterLiteral() : int\l# TokenNameStringLiteral() : int\l# TokenNamePLUS_PLUS() : int\l# TokenNameMINUS_MINUS() : int\l# TokenNameEQUAL_EQUAL() : int\l# TokenNameLESS_EQUAL() : int\l# TokenNameGREATER_EQUAL() : int\l# TokenNameNOT_EQUAL() : int\l# TokenNameLEFT_SHIFT() : int\l# TokenNameRIGHT_SHIFT() : int\l# TokenNameUNSIGNED_RIGHT_SHIFT() : int\l# TokenNamePLUS_EQUAL() : int\l# TokenNameMINUS_EQUAL() : int\l# TokenNameMULTIPLY_EQUAL() : int\l# TokenNameDIVIDE_EQUAL() : int\l# TokenNameAND_EQUAL() : int\l# TokenNameOR_EQUAL() : int\l# TokenNameXOR_EQUAL() : int\l# TokenNameREMAINDER_EQUAL() : int\l# TokenNameLEFT_SHIFT_EQUAL() : int\l# TokenNameRIGHT_SHIFT_EQUAL() : int\l# TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL() : int\l# TokenNameOR_OR() : int\l# TokenNameAND_AND() : int\l# TokenNamePLUS() : int\l# TokenNameMINUS() : int\l# TokenNameNOT() : int\l# TokenNameREMAINDER() : int\l# TokenNameXOR() : int\l# TokenNameAND() : int\l# TokenNameMULTIPLY() : int\l# TokenNameOR() : int\l# TokenNameTWIDDLE() : int\l# TokenNameDIVIDE() : int\l# TokenNameGREATER() : int\l# TokenNameLESS() : int\l# TokenNameLPAREN() : int\l# TokenNameRPAREN() : int\l# TokenNameLBRACE() : int\l# TokenNameRBRACE() : int\l# TokenNameLBRACKET() : int\l# TokenNameRBRACKET() : int\l# TokenNameSEMICOLON() : int\l# TokenNameQUESTION() : int\l# TokenNameCOLON() : int\l# TokenNameCOMMA() : int\l# TokenNameDOT() : int\l# TokenNameEQUAL() : int\l# TokenNameEOF() : int\l# TokenNameERROR() : int\l# TokenNameenum() : int\l# TokenNameAT() : int\l# TokenNameELLIPSIS() : int\l# TokenNameconst() : int\l# TokenNamegoto() : int\l# TokenNameARROW() : int\l# TokenNameCOLON_COLON() : int\l}"
	 ]

	 ReconcileContext [
		 label = "{ReconcileContext|- operation : ReconcileWorkingCopyOperation\l- workingCopy : CompilationUnit\l|# ReconcileContext(ReconcileWorkingCopyOperation, CompilationUnit) : \l# getAST3() : org\l# getAST4() : org\l# getAST8() : org\l# getASTLevel() : int\l# isResolvingBindings() : boolean\l# getReconcileFlags() : int\l# getDelta() : IJavaElementDelta\l# getProblems(String) : CategorizedProblem\l# getWorkingCopy() : ICompilationUnit\l# resetAST() : \l# putProblems(String, CategorizedProblem) : \l}"
	 ]

	 DocumentElementParser [
		 label = "{DocumentElementParser|# requestor : IDocumentElementRequestor\l- lastFieldEndPosition : int\l- lastFieldBodyEndPosition : int\l- typeStartPosition : int\l- selectorSourcePositions : long\l- typeDims : int\l- extendsDim : int\l- declarationSourceStart : int\l# intArrayStack : int\l# intArrayPtr : int\l|# DocumentElementParser(IDocumentElementRequestor, IProblemFactory, CompilerOptions) : \l# checkComment() : \l# consumeCatchFormalParameter() : \l# consumeClassBodyDeclaration() : \l# consumeClassDeclaration() : \l# consumeClassHeader() : \l# consumeClassHeaderName1() : \l# consumeCompilationUnit() : \l# consumeConstructorDeclaration() : \l# consumeConstructorHeader() : \l# consumeConstructorHeaderName() : \l# consumeDefaultModifiers() : \l# consumeDiet() : \l# consumeEnterCompilationUnit() : \l# consumeEnterVariable() : \l# consumeEnhancedForStatementHeaderInit(boolean) : \l# consumeMethodHeaderNameWithTypeParameters(boolean) : \l# consumeExitVariableWithInitialization() : \l# consumeExitVariableWithoutInitialization() : \l# consumeFieldDeclaration() : \l# consumeFormalParameter(boolean) : \l# consumeInterfaceDeclaration() : \l# consumeInterfaceHeader() : \l# consumeInterfaceHeaderName1() : \l# consumeInternalCompilationUnit() : \l# consumeInternalCompilationUnitWithTypes() : \l# consumeLocalVariableDeclaration() : \l# consumeMethodDeclaration(boolean, boolean) : \l# consumeMethodHeader() : \l# consumeMethodHeaderExtendedDims() : \l# consumeMethodHeaderName(boolean) : \l# consumeModifiers() : \l# consumePackageComment() : \l# consumePackageDeclarationName() : \l# consumePackageDeclarationNameWithModifiers() : \l# consumePushModifiers() : \l# consumePushRealModifiers() : \l# consumeSingleStaticImportDeclarationName() : \l# consumeSingleTypeImportDeclarationName() : \l# consumeStaticImportOnDemandDeclarationName() : \l# consumeStaticInitializer() : \l# consumeStaticOnly() : \l# consumeTypeImportOnDemandDeclarationName() : \l# flushCommentsDefinedPriorTo(int) : int\l# endParse(int) : CompilationUnitDeclaration\l# initialize(boolean) : \l# initialize() : \l# isLocalDeclaration() : boolean\l# parse() : \l# parseCompilationUnit(ICompilationUnit) : \l# parseConstructor(char) : \l# parseField(char) : \l# parseImport(char) : \l# parseInitializer(char) : \l# parseMethod(char) : \l# parsePackage(char) : \l# parseType(char) : \l# problemReporter() : ProblemReporter\l# pushOnIntArrayStack(int) : \l# resetModifiers() : \l# resumeOnSyntaxError() : int\l# returnTypeName(TypeReference) : char\l# toString() : String\l}"
	 ]

	 ExtraFlags [
		 label = "{ExtraFlags|+ HasNonPrivateStaticMemberTypes : int\l+ IsMemberType : int\l+ IsLocalType : int\l+ ParameterTypesStoredAsSignature : int\l|# getExtraFlags(ClassFileReader) : int\l# getExtraFlags(IType) : int\l# getExtraFlags(TypeDeclaration) : int\l}"
	 ]

	 IDocumentElementRequestor [
		 label = "{IDocumentElementRequestor||# acceptImport(int, int, int, char, int, boolean, int) : \l# acceptInitializer(int, int, int, int, int, int, int) : \l# acceptLineSeparatorPositions(int) : \l# acceptPackage(int, int, int, char, int) : \l# acceptProblem(CategorizedProblem) : \l# enterClass(int, int, int, int, int, char, int, int, char, int, int, char, int, int, int) : \l# enterCompilationUnit() : \l# enterConstructor(int, int, int, int, char, int, int, char, int, int, char, int, int, int, char, int, int, int) : \l# enterField(int, int, int, int, char, int, int, int, char, int, int, int, int) : \l# enterInterface(int, int, int, int, int, char, int, int, char, int, int, int) : \l# enterMethod(int, int, int, int, char, int, int, int, char, int, int, char, int, int, char, int, int, int, int, int, char, int, int, int) : \l# exitClass(int, int) : \l# exitCompilationUnit(int) : \l# exitConstructor(int, int) : \l# exitField(int, int) : \l# exitInterface(int, int) : \l# exitMethod(int, int) : \l}"
	 ]

	 FieldInfo [
		 label = "{FieldInfo|+ typeAnnotated : boolean\l+ declarationStart : int\l+ modifiers : int\l+ name : char\l+ nameSourceStart : int\l+ nameSourceEnd : int\l+ superclass : char\l+ superinterfaces : char\l+ typeParameters : TypeParameterInfo\l+ categories : char\l+ secondary : boolean\l+ anonymousMember : boolean\l+ annotations : Annotation\l+ extraFlags : int\l+ node : TypeDeclaration\l+ childrenCategories : HashMap\l+ declarationStart : int\l+ declarationEnd : int\l+ name : char\l+ nameSourceStart : int\l+ nameSourceEnd : int\l+ bounds : char\l+ typeAnnotated : boolean\l+ isConstructor : boolean\l+ isAnnotation : boolean\l+ declarationStart : int\l+ modifiers : int\l+ returnType : char\l+ name : char\l+ nameSourceStart : int\l+ nameSourceEnd : int\l+ parameterTypes : char\l+ parameterNames : char\l+ exceptionTypes : char\l+ typeParameters : TypeParameterInfo\l+ categories : char\l+ annotations : Annotation\l+ declaringPackageName : char\l+ declaringTypeModifiers : int\l+ extraFlags : int\l+ node : AbstractMethodDeclaration\l+ parameterInfos : ParameterInfo\l+ enclosingType : TypeDeclaration\l+ modifiers : int\l+ declarationStart : int\l+ declarationEnd : int\l+ nameSourceStart : int\l+ nameSourceEnd : int\l+ name : char\l+ typeAnnotated : boolean\l+ declarationStart : int\l+ modifiers : int\l+ type : char\l+ name : char\l+ nameSourceStart : int\l+ nameSourceEnd : int\l+ categories : char\l+ annotations : Annotation\l+ node : FieldDeclaration\l|# null() : \l# null() : \l# null() : \l# null() : \l# null() : \l# acceptAnnotationTypeReference(char, int, int) : \l# acceptAnnotationTypeReference(char, int) : \l# acceptConstructorReference(char, int, int) : \l# acceptFieldReference(char, int) : \l# acceptImport(int, int, int, int, char, boolean, int) : \l# acceptLineSeparatorPositions(int) : \l# acceptMethodReference(char, int, int) : \l# acceptPackage(ImportReference) : \l# acceptProblem(CategorizedProblem) : \l# acceptTypeReference(char, int, int) : \l# acceptTypeReference(char, int) : \l# acceptUnknownReference(char, int, int) : \l# acceptUnknownReference(char, int) : \l# enterCompilationUnit() : \l# enterConstructor(MethodInfo) : \l# enterField(FieldInfo) : \l# enterInitializer(int, int) : \l# enterMethod(MethodInfo) : \l# enterType(TypeInfo) : \l# exitCompilationUnit(int) : \l# exitConstructor(int) : \l# exitField(int, int, int) : \l# exitInitializer(int) : \l# exitMethod(int, Expression) : \l# exitType(int) : \l}"
	 ]

	 LocalDeclarationVisitor [
		 label = "{LocalDeclarationVisitor|+ currentPackage : ImportReference\l# declaringTypes : ArrayList\l# requestor : ISourceElementRequestor\l# reportReferenceInfo : boolean\l# typeNames : char\l# superTypeNames : char\l# nestedTypeIndex : int\l# localDeclarationVisitor : LocalDeclarationVisitor\l# sourceEnds : HashtableOfObjectToInt\l# nodesToCategories : Map\l# initialPosition : int\l# eofPosition : int\l|# null() : \l# pushDeclaringType(TypeDeclaration) : \l# popDeclaringType() : \l# peekDeclaringType() : TypeDeclaration\l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# SourceElementNotifier(ISourceElementRequestor, boolean) : \l# getArgumentInfos(Argument) : Object\l# getInterfaceNames(TypeDeclaration) : char\l# getSuperclassName(TypeDeclaration) : char\l# getThrownExceptions(AbstractMethodDeclaration) : char\l# getTypeParameterBounds(TypeParameter) : char\l# getTypeParameterInfos(TypeParameter) : TypeParameterInfo\l# hasDeprecatedAnnotation(Annotation) : boolean\l# notifySourceElementRequestor(AbstractMethodDeclaration, TypeDeclaration, ImportReference) : \l# notifySourceElementRequestor(CompilationUnitDeclaration, int, int, boolean, HashtableOfObjectToInt, Map) : \l# notifySourceElementRequestor(FieldDeclaration, TypeDeclaration) : \l# notifySourceElementRequestor(ImportReference, boolean) : \l# notifySourceElementRequestor(TypeDeclaration, boolean, TypeDeclaration, ImportReference) : \l# quickSort(ASTNode, int, int) : \l# reset() : \l# sourceEnd(TypeDeclaration) : int\l# visitIfNeeded(AbstractMethodDeclaration) : \l# visitIfNeeded(FieldDeclaration, TypeDeclaration) : \l# visitIfNeeded(Initializer) : \l}"
	 ]

	 SourceElementParser [
		 label = "{SourceElementParser|# requestor : ISourceElementRequestor\l# reportReferenceInfo : boolean\l# reportLocalDeclarations : boolean\l# sourceEnds : HashtableOfObjectToInt\l# nodesToCategories : HashMap\l# useSourceJavadocParser : boolean\l# notifier : SourceElementNotifier\l|# SourceElementParser(ISourceElementRequestor, IProblemFactory, CompilerOptions, boolean, boolean) : \l# SourceElementParser(ISourceElementRequestor, IProblemFactory, CompilerOptions, boolean, boolean, boolean) : \l# record(CategorizedProblem, CompilationResult, ReferenceContext, boolean) : \l# acceptJavadocTypeReference(Expression) : \l# addUnknownRef(NameReference) : \l# checkComment() : \l# classInstanceCreation(boolean) : \l# consumeAnnotationAsModifier() : \l# consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() : \l# consumeAnnotationTypeDeclarationHeaderName() : \l# consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() : \l# consumeCatchFormalParameter() : \l# consumeClassHeaderName1() : \l# consumeClassInstanceCreationExpressionWithTypeArguments() : \l# consumeConstructorHeaderName() : \l# consumeConstructorHeaderNameWithTypeParameters() : \l# consumeEnumConstantWithClassBody() : \l# consumeEnumConstantNoClassBody() : \l# consumeEnumHeaderName() : \l# consumeEnumHeaderNameWithTypeParameters() : \l# consumeExitVariableWithInitialization() : \l# consumeExitVariableWithoutInitialization() : \l# consumeFieldAccess(boolean) : \l# consumeFormalParameter(boolean) : \l# consumeTypeElidedLambdaParameter(boolean) : \l# consumeInterfaceHeaderName1() : \l# consumeMemberValuePair() : \l# consumeMarkerAnnotation(boolean) : \l# consumeMethodHeaderName(boolean) : \l# consumeMethodHeaderNameWithTypeParameters(boolean) : \l# consumeMethodInvocationName() : \l# consumeMethodInvocationNameWithTypeArguments() : \l# consumeMethodInvocationPrimary() : \l# consumeMethodInvocationPrimaryWithTypeArguments() : \l# consumeMethodInvocationSuper() : \l# consumeMethodInvocationSuperWithTypeArguments() : \l# consumeNormalAnnotation(boolean) : \l# consumeSingleMemberAnnotation(boolean) : \l# consumeSingleStaticImportDeclarationName() : \l# consumeSingleTypeImportDeclarationName() : \l# consumeStaticImportOnDemandDeclarationName() : \l# consumeTypeImportOnDemandDeclarationName() : \l# convertToMethodDeclaration(ConstructorDeclaration, CompilationResult) : MethodDeclaration\l# endParse(int) : CompilationUnitDeclaration\l# getTypeReference(int) : TypeReference\l# getUnspecifiedReference(boolean) : NameReference\l# getUnspecifiedReferenceOptimized() : NameReference\l# newImportReference(char, long, boolean, int) : ImportReference\l# newQualifiedNameReference(char, long, int, int) : QualifiedNameReference\l# newSingleNameReference(char, long) : SingleNameReference\l# parseCompilationUnit(ICompilationUnit, boolean, IProgressMonitor) : CompilationUnitDeclaration\l# rememberCategories() : \l# reset() : \l# setRequestor(ISourceElementRequestor) : \l}"
	 ]

	 SourceElementRequestorAdapter [
		 label = "{SourceElementRequestorAdapter||# acceptAnnotationTypeReference(char, int, int) : \l# acceptAnnotationTypeReference(char, int) : \l# acceptConstructorReference(char, int, int) : \l# acceptFieldReference(char, int) : \l# acceptImport(int, int, int, int, char, boolean, int) : \l# acceptLineSeparatorPositions(int) : \l# acceptMethodReference(char, int, int) : \l# acceptPackage(ImportReference) : \l# acceptProblem(CategorizedProblem) : \l# acceptTypeReference(char, int, int) : \l# acceptTypeReference(char, int) : \l# acceptUnknownReference(char, int, int) : \l# acceptUnknownReference(char, int) : \l# enterCompilationUnit() : \l# enterConstructor(MethodInfo) : \l# enterField(FieldInfo) : \l# enterInitializer(int, int) : \l# enterMethod(MethodInfo) : \l# enterType(TypeInfo) : \l# exitCompilationUnit(int) : \l# exitConstructor(int) : \l# exitField(int, int, int) : \l# exitInitializer(int) : \l# exitMethod(int, Expression) : \l# exitType(int) : \l}"
	 ]

	 SourceJavadocParser [
		 label = "{SourceJavadocParser|# categoriesPtr : int\l# categories : char\l|# SourceJavadocParser(Parser) : \l# checkDeprecation(int) : boolean\l# parseIdentifierTag(boolean) : boolean\l# parseSimpleTag() : \l}"
	 ]

	 Activator [
		 label = "{Activator|- PLUGIN_ID : String\l# packageAdmin : org\l|# start(BundleContext) : \l# stop(BundleContext) : \l# getPackageAdmin() : org\l}"
	 ]

	 CharOperation [
		 label = "{CharOperation|+ NO_CHAR : char\l+ NO_CHAR_CHAR : char\l+ NO_STRINGS : String\l|# append(char, char) : char\l# append(char, int, char, int, int) : char\l# arrayConcat(char, char) : char\l# charArrayToStringArray(char) : String\l# charToString(char) : String\l# arrayConcat(char, char) : char\l# compareWith(char, char) : int\l# concat(char, char) : char\l# concat(char, char, char) : char\l# concat(char, char, char) : char\l# concat(char, char, char, char, char) : char\l# concat(char, char, char) : char\l# concatWith(char, char, char) : char\l# concatWith(char, char, char) : char\l# concatWith(char, char) : char\l# contains(char, char) : boolean\l# contains(char, char) : boolean\l# deepCopy(char) : char\l# endsWith(char, char) : boolean\l# equals(char, char) : boolean\l# equals(char, char, boolean) : boolean\l# equals(char, char) : boolean\l# equals(char, char, int, int) : boolean\l# equals(char, char, boolean) : boolean\l# fragmentEquals(char, char, int, boolean) : boolean\l# hashCode(char) : int\l# isWhitespace(char) : boolean\l# indexOf(char, char) : int\l# indexOf(char, char, int) : int\l# lastIndexOf(char, char) : int\l# lastIndexOf(char, char, int) : int\l# lastIndexOf(char, char, int, int) : int\l# lastSegment(char, char) : char\l# match(char, char, boolean) : boolean\l# match(char, int, int, char, int, int, boolean) : boolean\l# pathMatch(char, char, boolean, char) : boolean\l# occurencesOf(char, char) : int\l# occurencesOf(char, char, int) : int\l# prefixEquals(char, char) : boolean\l# prefixEquals(char, char, boolean) : boolean\l# replace(char, char, char) : \l# replace(char, char, char) : char\l# replaceOnCopy(char, char, char) : char\l# splitAndTrimOn(char, char) : char\l# splitOn(char, char) : char\l# splitOn(char, char, int, int) : char\l# subarray(char, int, int) : char\l# subarray(char, int, int) : char\l# toLowerCase(char) : char\l# trim(char) : char\l# toString(char) : String\l# toStrings(char) : String\l}"
	 ]

	 InvalidInputException [
		 label = "{InvalidInputException|- serialVersionUID : long\l|# InvalidInputException() : \l# InvalidInputException(String) : \l}"
	 ]

	 IProblem [
		 label = "{IProblem||# getArguments() : String\l# getID() : int\l# getMessage() : String\l# getOriginatingFileName() : char\l# getSourceEnd() : int\l# getSourceLineNumber() : int\l# getSourceStart() : int\l# isError() : boolean\l# isWarning() : boolean\l# setSourceEnd(int) : \l# setSourceLineNumber(int) : \l# setSourceStart(int) : \l# TypeRelated() : int\l# FieldRelated() : int\l# MethodRelated() : int\l# ConstructorRelated() : int\l# ImportRelated() : int\l# Internal() : int\l# Syntax() : int\l# Javadoc() : int\l# IgnoreCategoriesMask() : int\l# Unclassified() : int\l# ObjectHasNoSuperclass() : int\l# UndefinedType() : int\l# NotVisibleType() : int\l# AmbiguousType() : int\l# UsingDeprecatedType() : int\l# InternalTypeNameProvided() : int\l# UnusedPrivateType() : int\l# IncompatibleTypesInEqualityOperator() : int\l# IncompatibleTypesInConditionalOperator() : int\l# TypeMismatch() : int\l# IndirectAccessToStaticType() : int\l# MissingEnclosingInstanceForConstructorCall() : int\l# MissingEnclosingInstance() : int\l# IncorrectEnclosingInstanceReference() : int\l# IllegalEnclosingInstanceSpecification() : int\l# CannotDefineStaticInitializerInLocalType() : int\l# OuterLocalMustBeFinal() : int\l# CannotDefineInterfaceInLocalType() : int\l# IllegalPrimitiveOrArrayTypeForEnclosingInstance() : int\l# EnclosingInstanceInConstructorCall() : int\l# AnonymousClassCannotExtendFinalClass() : int\l# UndefinedName() : int\l# UninitializedLocalVariable() : int\l# VariableTypeCannotBeVoid() : int\l# VariableTypeCannotBeVoidArray() : int\l# CannotAllocateVoidArray() : int\l# RedefinedLocal() : int\l# RedefinedArgument() : int\l# DuplicateFinalLocalInitialization() : int\l# NonBlankFinalLocalAssignment() : int\l# FinalOuterLocalAssignment() : int\l# LocalVariableIsNeverUsed() : int\l# ArgumentIsNeverUsed() : int\l# BytecodeExceeds64KLimit() : int\l# BytecodeExceeds64KLimitForClinit() : int\l# TooManyArgumentSlots() : int\l# TooManyLocalVariableSlots() : int\l# TooManySyntheticArgumentSlots() : int\l# TooManyArrayDimensions() : int\l# BytecodeExceeds64KLimitForConstructor() : int\l# UndefinedField() : int\l# NotVisibleField() : int\l# AmbiguousField() : int\l# UsingDeprecatedField() : int\l# NonStaticFieldFromStaticInvocation() : int\l# ReferenceToForwardField() : int\l# NonStaticAccessToStaticField() : int\l# UnusedPrivateField() : int\l# IndirectAccessToStaticField() : int\l# UnqualifiedFieldAccess() : int\l# FinalFieldAssignment() : int\l# UninitializedBlankFinalField() : int\l# DuplicateBlankFinalFieldInitialization() : int\l# LocalVariableHidingLocalVariable() : int\l# LocalVariableHidingField() : int\l# FieldHidingLocalVariable() : int\l# FieldHidingField() : int\l# ArgumentHidingLocalVariable() : int\l# ArgumentHidingField() : int\l# MissingSerialVersion() : int\l# UndefinedMethod() : int\l# NotVisibleMethod() : int\l# AmbiguousMethod() : int\l# UsingDeprecatedMethod() : int\l# DirectInvocationOfAbstractMethod() : int\l# VoidMethodReturnsValue() : int\l# MethodReturnsVoid() : int\l# MethodRequiresBody() : int\l# ShouldReturnValue() : int\l# MethodButWithConstructorName() : int\l# MissingReturnType() : int\l# BodyForNativeMethod() : int\l# BodyForAbstractMethod() : int\l# NoMessageSendOnBaseType() : int\l# ParameterMismatch() : int\l# NoMessageSendOnArrayType() : int\l# NonStaticAccessToStaticMethod() : int\l# UnusedPrivateMethod() : int\l# IndirectAccessToStaticMethod() : int\l# UndefinedConstructor() : int\l# NotVisibleConstructor() : int\l# AmbiguousConstructor() : int\l# UsingDeprecatedConstructor() : int\l# UnusedPrivateConstructor() : int\l# InstanceFieldDuringConstructorInvocation() : int\l# InstanceMethodDuringConstructorInvocation() : int\l# RecursiveConstructorInvocation() : int\l# ThisSuperDuringConstructorInvocation() : int\l# InvalidExplicitConstructorCall() : int\l# UndefinedConstructorInDefaultConstructor() : int\l# NotVisibleConstructorInDefaultConstructor() : int\l# AmbiguousConstructorInDefaultConstructor() : int\l# UndefinedConstructorInImplicitConstructorCall() : int\l# NotVisibleConstructorInImplicitConstructorCall() : int\l# AmbiguousConstructorInImplicitConstructorCall() : int\l# UnhandledExceptionInDefaultConstructor() : int\l# UnhandledExceptionInImplicitConstructorCall() : int\l# ArrayReferenceRequired() : int\l# NoImplicitStringConversionForCharArrayExpression() : int\l# StringConstantIsExceedingUtf8Limit() : int\l# NonConstantExpression() : int\l# NumericValueOutOfRange() : int\l# IllegalCast() : int\l# InvalidClassInstantiation() : int\l# CannotDefineDimensionExpressionsWithInit() : int\l# MustDefineEitherDimensionExpressionsOrInitializer() : int\l# InvalidOperator() : int\l# CodeCannotBeReached() : int\l# CannotReturnInInitializer() : int\l# InitializerMustCompleteNormally() : int\l# InvalidVoidExpression() : int\l# MaskedCatch() : int\l# DuplicateDefaultCase() : int\l# UnreachableCatch() : int\l# UnhandledException() : int\l# IncorrectSwitchType() : int\l# DuplicateCase() : int\l# DuplicateLabel() : int\l# InvalidBreak() : int\l# InvalidContinue() : int\l# UndefinedLabel() : int\l# InvalidTypeToSynchronized() : int\l# InvalidNullToSynchronized() : int\l# CannotThrowNull() : int\l# AssignmentHasNoEffect() : int\l# PossibleAccidentalBooleanAssignment() : int\l# SuperfluousSemicolon() : int\l# UnnecessaryCast() : int\l# UnnecessaryArgumentCast() : int\l# UnnecessaryInstanceof() : int\l# FinallyMustCompleteNormally() : int\l# UnusedMethodDeclaredThrownException() : int\l# UnusedConstructorDeclaredThrownException() : int\l# InvalidCatchBlockSequence() : int\l# EmptyControlFlowStatement() : int\l# UnnecessaryElse() : int\l# NeedToEmulateFieldReadAccess() : int\l# NeedToEmulateFieldWriteAccess() : int\l# NeedToEmulateMethodAccess() : int\l# NeedToEmulateConstructorAccess() : int\l# InheritedMethodHidesEnclosingName() : int\l# InheritedFieldHidesEnclosingName() : int\l# InheritedTypeHidesEnclosingName() : int\l# IllegalUsageOfQualifiedTypeReference() : int\l# ThisInStaticContext() : int\l# StaticMethodRequested() : int\l# IllegalDimension() : int\l# InvalidTypeExpression() : int\l# ParsingError() : int\l# ParsingErrorNoSuggestion() : int\l# InvalidUnaryExpression() : int\l# InterfaceCannotHaveConstructors() : int\l# ArrayConstantsOnlyInArrayInitializers() : int\l# ParsingErrorOnKeyword() : int\l# ParsingErrorOnKeywordNoSuggestion() : int\l# UnmatchedBracket() : int\l# NoFieldOnBaseType() : int\l# InvalidExpressionAsStatement() : int\l# ExpressionShouldBeAVariable() : int\l# MissingSemiColon() : int\l# InvalidParenthesizedExpression() : int\l# ParsingErrorInsertTokenBefore() : int\l# ParsingErrorInsertTokenAfter() : int\l# ParsingErrorDeleteToken() : int\l# ParsingErrorDeleteTokens() : int\l# ParsingErrorMergeTokens() : int\l# ParsingErrorInvalidToken() : int\l# ParsingErrorMisplacedConstruct() : int\l# ParsingErrorReplaceTokens() : int\l# ParsingErrorNoSuggestionForTokens() : int\l# ParsingErrorUnexpectedEOF() : int\l# ParsingErrorInsertToComplete() : int\l# ParsingErrorInsertToCompleteScope() : int\l# ParsingErrorInsertToCompletePhrase() : int\l# EndOfSource() : int\l# InvalidHexa() : int\l# InvalidOctal() : int\l# InvalidCharacterConstant() : int\l# InvalidEscape() : int\l# InvalidInput() : int\l# InvalidUnicodeEscape() : int\l# InvalidFloat() : int\l# NullSourceString() : int\l# UnterminatedString() : int\l# UnterminatedComment() : int\l# InvalidDigit() : int\l# InterfaceCannotHaveInitializers() : int\l# DuplicateModifierForType() : int\l# IllegalModifierForClass() : int\l# IllegalModifierForInterface() : int\l# IllegalModifierForMemberClass() : int\l# IllegalModifierForMemberInterface() : int\l# IllegalModifierForLocalClass() : int\l# ForbiddenReference() : int\l# IllegalModifierCombinationFinalAbstractForClass() : int\l# IllegalVisibilityModifierForInterfaceMemberType() : int\l# IllegalVisibilityModifierCombinationForMemberType() : int\l# IllegalStaticModifierForMemberType() : int\l# SuperclassMustBeAClass() : int\l# ClassExtendFinalClass() : int\l# DuplicateSuperInterface() : int\l# SuperInterfaceMustBeAnInterface() : int\l# HierarchyCircularitySelfReference() : int\l# HierarchyCircularity() : int\l# HidingEnclosingType() : int\l# DuplicateNestedType() : int\l# CannotThrowType() : int\l# PackageCollidesWithType() : int\l# TypeCollidesWithPackage() : int\l# DuplicateTypes() : int\l# IsClassPathCorrect() : int\l# PublicClassMustMatchFileName() : int\l# MustSpecifyPackage() : int\l# HierarchyHasProblems() : int\l# PackageIsNotExpectedPackage() : int\l# ObjectCannotHaveSuperTypes() : int\l# SuperclassNotFound() : int\l# SuperclassNotVisible() : int\l# SuperclassAmbiguous() : int\l# SuperclassInternalNameProvided() : int\l# SuperclassInheritedNameHidesEnclosingName() : int\l# InterfaceNotFound() : int\l# InterfaceNotVisible() : int\l# InterfaceAmbiguous() : int\l# InterfaceInternalNameProvided() : int\l# InterfaceInheritedNameHidesEnclosingName() : int\l# DuplicateField() : int\l# DuplicateModifierForField() : int\l# IllegalModifierForField() : int\l# IllegalModifierForInterfaceField() : int\l# IllegalVisibilityModifierCombinationForField() : int\l# IllegalModifierCombinationFinalVolatileForField() : int\l# UnexpectedStaticModifierForField() : int\l# FieldTypeNotFound() : int\l# FieldTypeNotVisible() : int\l# FieldTypeAmbiguous() : int\l# FieldTypeInternalNameProvided() : int\l# FieldTypeInheritedNameHidesEnclosingName() : int\l# DuplicateMethod() : int\l# IllegalModifierForArgument() : int\l# DuplicateModifierForMethod() : int\l# IllegalModifierForMethod() : int\l# IllegalModifierForInterfaceMethod() : int\l# IllegalVisibilityModifierCombinationForMethod() : int\l# UnexpectedStaticModifierForMethod() : int\l# IllegalAbstractModifierCombinationForMethod() : int\l# AbstractMethodInAbstractClass() : int\l# ArgumentTypeCannotBeVoid() : int\l# ArgumentTypeCannotBeVoidArray() : int\l# ReturnTypeCannotBeVoidArray() : int\l# NativeMethodsCannotBeStrictfp() : int\l# DuplicateModifierForArgument() : int\l# ArgumentTypeNotFound() : int\l# ArgumentTypeNotVisible() : int\l# ArgumentTypeAmbiguous() : int\l# ArgumentTypeInternalNameProvided() : int\l# ArgumentTypeInheritedNameHidesEnclosingName() : int\l# ExceptionTypeNotFound() : int\l# ExceptionTypeNotVisible() : int\l# ExceptionTypeAmbiguous() : int\l# ExceptionTypeInternalNameProvided() : int\l# ExceptionTypeInheritedNameHidesEnclosingName() : int\l# ReturnTypeNotFound() : int\l# ReturnTypeNotVisible() : int\l# ReturnTypeAmbiguous() : int\l# ReturnTypeInternalNameProvided() : int\l# ReturnTypeInheritedNameHidesEnclosingName() : int\l# ConflictingImport() : int\l# DuplicateImport() : int\l# CannotImportPackage() : int\l# UnusedImport() : int\l# ImportNotFound() : int\l# ImportNotVisible() : int\l# ImportAmbiguous() : int\l# ImportInternalNameProvided() : int\l# ImportInheritedNameHidesEnclosingName() : int\l# DuplicateModifierForVariable() : int\l# IllegalModifierForVariable() : int\l# AbstractMethodMustBeImplemented() : int\l# FinalMethodCannotBeOverridden() : int\l# IncompatibleExceptionInThrowsClause() : int\l# IncompatibleExceptionInInheritedMethodThrowsClause() : int\l# IncompatibleReturnType() : int\l# InheritedMethodReducesVisibility() : int\l# CannotOverrideAStaticMethodWithAnInstanceMethod() : int\l# CannotHideAnInstanceMethodWithAStaticMethod() : int\l# StaticInheritedMethodConflicts() : int\l# MethodReducesVisibility() : int\l# OverridingNonVisibleMethod() : int\l# AbstractMethodCannotBeOverridden() : int\l# OverridingDeprecatedMethod() : int\l# IncompatibleReturnTypeForNonInheritedInterfaceMethod() : int\l# IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod() : int\l# CodeSnippetMissingClass() : int\l# CodeSnippetMissingMethod() : int\l# NonExternalizedStringLiteral() : int\l# CannotUseSuperInCodeSnippet() : int\l# TooManyConstantsInConstantPool() : int\l# TooManyBytesForStringConstant() : int\l# TooManyFields() : int\l# TooManyMethods() : int\l# UseAssertAsAnIdentifier() : int\l# UseEnumAsAnIdentifier() : int\l# Task() : int\l# UndocumentedEmptyBlock() : int\l# JavadocUnexpectedTag() : int\l# JavadocMissingParamTag() : int\l# JavadocMissingParamName() : int\l# JavadocDuplicateParamName() : int\l# JavadocInvalidParamName() : int\l# JavadocMissingReturnTag() : int\l# JavadocDuplicateReturnTag() : int\l# JavadocMissingThrowsTag() : int\l# JavadocMissingThrowsClassName() : int\l# JavadocInvalidThrowsClass() : int\l# JavadocDuplicateThrowsClassName() : int\l# JavadocInvalidThrowsClassName() : int\l# JavadocMissingReference() : int\l# JavadocInvalidReference() : int\l# JavadocInvalidSeeHref() : int\l# JavadocInvalidSeeArgs() : int\l# JavadocMissing() : int\l# JavadocInvalidTag() : int\l# JavadocUndefinedField() : int\l# JavadocNotVisibleField() : int\l# JavadocAmbiguousField() : int\l# JavadocUsingDeprecatedField() : int\l# JavadocUndefinedConstructor() : int\l# JavadocNotVisibleConstructor() : int\l# JavadocAmbiguousConstructor() : int\l# JavadocUsingDeprecatedConstructor() : int\l# JavadocUndefinedMethod() : int\l# JavadocNotVisibleMethod() : int\l# JavadocAmbiguousMethod() : int\l# JavadocUsingDeprecatedMethod() : int\l# JavadocNoMessageSendOnBaseType() : int\l# JavadocParameterMismatch() : int\l# JavadocNoMessageSendOnArrayType() : int\l# JavadocUndefinedType() : int\l# JavadocNotVisibleType() : int\l# JavadocAmbiguousType() : int\l# JavadocUsingDeprecatedType() : int\l# JavadocInternalTypeNameProvided() : int\l# JavadocInheritedMethodHidesEnclosingName() : int\l# JavadocInheritedFieldHidesEnclosingName() : int\l# JavadocInheritedNameHidesEnclosingTypeName() : int\l# JavadocAmbiguousMethodReference() : int\l# JavadocUnterminatedInlineTag() : int\l# JavadocMissingHashCharacter() : int\l# JavadocMalformedSeeReference() : int\l# JavadocEmptyReturnTag() : int\l# JavadocInvalidValueReference() : int\l# JavadocUnexpectedText() : int\l# JavadocMessagePrefix() : int\l# DuplicateTypeVariable() : int\l# IllegalTypeVariableSuperReference() : int\l# TypeVariableReferenceFromStaticContext() : int\l# ObjectCannotBeGeneric() : int\l# NonGenericType() : int\l# IncorrectArityForParameterizedType() : int\l# TypeArgumentMismatch() : int\l# DuplicateMethodErasure() : int\l# ReferenceToForwardTypeVariable() : int\l# BoundsMustBeAnInterface() : int\l# UnsafeRawConstructorInvocation() : int\l# UnsafeRawMethodInvocation() : int\l# UnsafeRawConversion() : int\l# InvalidTypeVariableExceptionType() : int\l# InvalidParameterizedExceptionType() : int\l# IllegalGenericArray() : int\l# UnsafeRawFieldAssignment() : int\l# FinalBoundForTypeVariable() : int\l# UndefinedTypeVariable() : int\l# SuperInterfacesCollide() : int\l# WildcardConstructorInvocation() : int\l# WildcardMethodInvocation() : int\l# WildcardFieldAssignment() : int\l# GenericMethodTypeArgumentMismatch() : int\l# GenericConstructorTypeArgumentMismatch() : int\l# UnsafeGenericCast() : int\l# IllegalInstanceofParameterizedType() : int\l# IllegalInstanceofTypeParameter() : int\l# NonGenericMethod() : int\l# IncorrectArityForParameterizedMethod() : int\l# ParameterizedMethodArgumentTypeMismatch() : int\l# NonGenericConstructor() : int\l# IncorrectArityForParameterizedConstructor() : int\l# ParameterizedConstructorArgumentTypeMismatch() : int\l# TypeArgumentsForRawGenericMethod() : int\l# TypeArgumentsForRawGenericConstructor() : int\l# SuperTypeUsingWildcard() : int\l# GenericTypeCannotExtendThrowable() : int\l# IllegalClassLiteralForTypeVariable() : int\l# UnsafeReturnTypeOverride() : int\l# MethodNameClash() : int\l# RawMemberTypeCannotBeParameterized() : int\l# MissingArgumentsForParameterizedMemberType() : int\l# StaticMemberOfParameterizedType() : int\l# IncompatibleTypesInForeach() : int\l# InvalidTypeForCollection() : int\l# InvalidUsageOfTypeParameters() : int\l# InvalidUsageOfStaticImports() : int\l# InvalidUsageOfForeachStatements() : int\l# InvalidUsageOfTypeArguments() : int\l# InvalidUsageOfEnumDeclarations() : int\l# InvalidUsageOfVarargs() : int\l# InvalidUsageOfAnnotations() : int\l# InvalidUsageOfAnnotationDeclarations() : int\l# AnnotationButConstructorName() : int\l# IllegalExtendedDimensions() : int\l# InvalidFileNameForPackageAnnotations() : int\l# CorruptedSignature() : int\l}"
	 ]

	 ASTVisitor [
		 label = "{ASTVisitor||# acceptProblem(IProblem) : \l# endVisit(AllocationExpression, BlockScope) : \l# endVisit(AND_AND_Expression, BlockScope) : \l# endVisit(AnnotationTypeDeclaration, BlockScope) : \l# endVisit(AnnotationTypeDeclaration, ClassScope) : \l# endVisit(AnnotationTypeDeclaration, CompilationUnitScope) : \l# endVisit(AnnotationTypeMemberDeclaration, ClassScope) : \l# endVisit(Argument, BlockScope) : \l# endVisit(ArrayAllocationExpression, BlockScope) : \l# endVisit(ArrayInitializer, BlockScope) : \l# endVisit(ArrayQualifiedTypeReference, BlockScope) : \l# endVisit(ArrayQualifiedTypeReference, ClassScope) : \l# endVisit(ArrayReference, BlockScope) : \l# endVisit(ArrayTypeReference, BlockScope) : \l# endVisit(ArrayTypeReference, ClassScope) : \l# endVisit(AssertStatement, BlockScope) : \l# endVisit(Assignment, BlockScope) : \l# endVisit(BinaryExpression, BlockScope) : \l# endVisit(Block, BlockScope) : \l# endVisit(BreakStatement, BlockScope) : \l# endVisit(CaseStatement, BlockScope) : \l# endVisit(CastExpression, BlockScope) : \l# endVisit(CharLiteral, BlockScope) : \l# endVisit(ClassLiteralAccess, BlockScope) : \l# endVisit(Clinit, ClassScope) : \l# endVisit(CompilationUnitDeclaration, CompilationUnitScope) : \l# endVisit(CompoundAssignment, BlockScope) : \l# endVisit(ConditionalExpression, BlockScope) : \l# endVisit(ConstructorDeclaration, ClassScope) : \l# endVisit(ContinueStatement, BlockScope) : \l# endVisit(DoStatement, BlockScope) : \l# endVisit(DoubleLiteral, BlockScope) : \l# endVisit(EmptyStatement, BlockScope) : \l# endVisit(EnumConstant, ClassScope) : \l# endVisit(EnumDeclaration, BlockScope) : \l# endVisit(EnumDeclaration, ClassScope) : \l# endVisit(EnumDeclaration, CompilationUnitScope) : \l# endVisit(EqualExpression, BlockScope) : \l# endVisit(ExplicitConstructorCall, BlockScope) : \l# endVisit(ExtendedStringLiteral, BlockScope) : \l# endVisit(FalseLiteral, BlockScope) : \l# endVisit(FieldDeclaration, MethodScope) : \l# endVisit(FieldReference, BlockScope) : \l# endVisit(FloatLiteral, BlockScope) : \l# endVisit(ForeachStatement, BlockScope) : \l# endVisit(ForStatement, BlockScope) : \l# endVisit(IfStatement, BlockScope) : \l# endVisit(ImportReference, CompilationUnitScope) : \l# endVisit(Initializer, MethodScope) : \l# endVisit(InstanceOfExpression, BlockScope) : \l# endVisit(IntLiteral, BlockScope) : \l# endVisit(JavadocArgumentExpression, BlockScope) : \l# endVisit(JavadocArrayQualifiedTypeReference, BlockScope) : \l# endVisit(JavadocArraySingleTypeReference, BlockScope) : \l# endVisit(JavadocFieldReference, BlockScope) : \l# endVisit(JavadocMessageSend, BlockScope) : \l# endVisit(JavadocQualifiedTypeReference, BlockScope) : \l# endVisit(JavadocReturnStatement, BlockScope) : \l# endVisit(JavadocSingleNameReference, BlockScope) : \l# endVisit(JavadocSingleTypeReference, BlockScope) : \l# endVisit(LabeledStatement, BlockScope) : \l# endVisit(LocalDeclaration, BlockScope) : \l# endVisit(LongLiteral, BlockScope) : \l# endVisit(MarkerAnnotation, BlockScope) : \l# endVisit(MarkerAnnotation, ClassScope) : \l# endVisit(MarkerAnnotation, CompilationUnitScope) : \l# endVisit(MemberValuePair, BlockScope) : \l# endVisit(MemberValuePair, ClassScope) : \l# endVisit(MemberValuePair, CompilationUnitScope) : \l# endVisit(MessageSend, BlockScope) : \l# endVisit(MethodDeclaration, ClassScope) : \l# endVisit(StringLiteralConcatenation, BlockScope) : \l# endVisit(NormalAnnotation, BlockScope) : \l# endVisit(NormalAnnotation, ClassScope) : \l# endVisit(NormalAnnotation, CompilationUnitScope) : \l# endVisit(NullLiteral, BlockScope) : \l# endVisit(OR_OR_Expression, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, ClassScope) : \l# endVisit(ParameterizedSingleTypeReference, BlockScope) : \l# endVisit(ParameterizedSingleTypeReference, ClassScope) : \l# endVisit(PostfixExpression, BlockScope) : \l# endVisit(PrefixExpression, BlockScope) : \l# endVisit(QualifiedAllocationExpression, BlockScope) : \l# endVisit(QualifiedNameReference, BlockScope) : \l# endVisit(QualifiedSuperReference, BlockScope) : \l# endVisit(QualifiedThisReference, BlockScope) : \l# endVisit(QualifiedTypeReference, BlockScope) : \l# endVisit(QualifiedTypeReference, ClassScope) : \l# endVisit(ReturnStatement, BlockScope) : \l# endVisit(SingleMemberAnnotation, BlockScope) : \l# endVisit(SingleMemberAnnotation, ClassScope) : \l# endVisit(SingleMemberAnnotation, CompilationUnitScope) : \l# endVisit(SingleNameReference, BlockScope) : \l# endVisit(SingleTypeReference, BlockScope) : \l# endVisit(SingleTypeReference, ClassScope) : \l# endVisit(StringLiteral, BlockScope) : \l# endVisit(SuperReference, BlockScope) : \l# endVisit(SwitchStatement, BlockScope) : \l# endVisit(SynchronizedStatement, BlockScope) : \l# endVisit(ThisReference, BlockScope) : \l# endVisit(ThrowStatement, BlockScope) : \l# endVisit(TrueLiteral, BlockScope) : \l# endVisit(TryStatement, BlockScope) : \l# endVisit(TypeDeclaration, BlockScope) : \l# endVisit(TypeDeclaration, ClassScope) : \l# endVisit(TypeDeclaration, CompilationUnitScope) : \l# endVisit(TypeParameter, BlockScope) : \l# endVisit(TypeParameter, ClassScope) : \l# endVisit(UnaryExpression, BlockScope) : \l# endVisit(WhileStatement, BlockScope) : \l# endVisit(Wildcard, BlockScope) : \l# endVisit(Wildcard, ClassScope) : \l# visit(AllocationExpression, BlockScope) : boolean\l# visit(AND_AND_Expression, BlockScope) : boolean\l# visit(AnnotationTypeDeclaration, BlockScope) : boolean\l# visit(AnnotationTypeDeclaration, ClassScope) : boolean\l# visit(AnnotationTypeDeclaration, CompilationUnitScope) : boolean\l# visit(AnnotationTypeMemberDeclaration, ClassScope) : boolean\l# visit(Argument, BlockScope) : boolean\l# visit(ArrayAllocationExpression, BlockScope) : boolean\l# visit(ArrayInitializer, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, ClassScope) : boolean\l# visit(ArrayReference, BlockScope) : boolean\l# visit(ArrayTypeReference, BlockScope) : boolean\l# visit(ArrayTypeReference, ClassScope) : boolean\l# visit(AssertStatement, BlockScope) : boolean\l# visit(Assignment, BlockScope) : boolean\l# visit(BinaryExpression, BlockScope) : boolean\l# visit(Block, BlockScope) : boolean\l# visit(BreakStatement, BlockScope) : boolean\l# visit(CaseStatement, BlockScope) : boolean\l# visit(CastExpression, BlockScope) : boolean\l# visit(CharLiteral, BlockScope) : boolean\l# visit(ClassLiteralAccess, BlockScope) : boolean\l# visit(Clinit, ClassScope) : boolean\l# visit(CompilationUnitDeclaration, CompilationUnitScope) : boolean\l# visit(CompoundAssignment, BlockScope) : boolean\l# visit(ConditionalExpression, BlockScope) : boolean\l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(ContinueStatement, BlockScope) : boolean\l# visit(DoStatement, BlockScope) : boolean\l# visit(DoubleLiteral, BlockScope) : boolean\l# visit(EmptyStatement, BlockScope) : boolean\l# visit(EnumConstant, ClassScope) : boolean\l# visit(EnumDeclaration, BlockScope) : boolean\l# visit(EnumDeclaration, ClassScope) : boolean\l# visit(EnumDeclaration, CompilationUnitScope) : boolean\l# visit(EqualExpression, BlockScope) : boolean\l# visit(ExplicitConstructorCall, BlockScope) : boolean\l# visit(ExtendedStringLiteral, BlockScope) : boolean\l# visit(FalseLiteral, BlockScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(FieldReference, BlockScope) : boolean\l# visit(FloatLiteral, BlockScope) : boolean\l# visit(ForeachStatement, BlockScope) : boolean\l# visit(ForStatement, BlockScope) : boolean\l# visit(IfStatement, BlockScope) : boolean\l# visit(ImportReference, CompilationUnitScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(InstanceOfExpression, BlockScope) : boolean\l# visit(IntLiteral, BlockScope) : boolean\l# visit(JavadocArgumentExpression, BlockScope) : boolean\l# visit(JavadocArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(JavadocArraySingleTypeReference, BlockScope) : boolean\l# visit(JavadocFieldReference, BlockScope) : boolean\l# visit(JavadocMessageSend, BlockScope) : boolean\l# visit(JavadocQualifiedTypeReference, BlockScope) : boolean\l# visit(JavadocReturnStatement, BlockScope) : boolean\l# visit(JavadocSingleNameReference, BlockScope) : boolean\l# visit(JavadocSingleTypeReference, BlockScope) : boolean\l# visit(LabeledStatement, BlockScope) : boolean\l# visit(LocalDeclaration, BlockScope) : boolean\l# visit(LongLiteral, BlockScope) : boolean\l# visit(MarkerAnnotation, BlockScope) : boolean\l# visit(MarkerAnnotation, ClassScope) : boolean\l# visit(MarkerAnnotation, CompilationUnitScope) : boolean\l# visit(MemberValuePair, BlockScope) : boolean\l# visit(MemberValuePair, ClassScope) : boolean\l# visit(MemberValuePair, CompilationUnitScope) : boolean\l# visit(MessageSend, BlockScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(StringLiteralConcatenation, BlockScope) : boolean\l# visit(NormalAnnotation, BlockScope) : boolean\l# visit(NormalAnnotation, ClassScope) : boolean\l# visit(NormalAnnotation, CompilationUnitScope) : boolean\l# visit(NullLiteral, BlockScope) : boolean\l# visit(OR_OR_Expression, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, ClassScope) : boolean\l# visit(ParameterizedSingleTypeReference, BlockScope) : boolean\l# visit(ParameterizedSingleTypeReference, ClassScope) : boolean\l# visit(PostfixExpression, BlockScope) : boolean\l# visit(PrefixExpression, BlockScope) : boolean\l# visit(QualifiedAllocationExpression, BlockScope) : boolean\l# visit(QualifiedNameReference, BlockScope) : boolean\l# visit(QualifiedSuperReference, BlockScope) : boolean\l# visit(QualifiedThisReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, ClassScope) : boolean\l# visit(ReturnStatement, BlockScope) : boolean\l# visit(SingleMemberAnnotation, BlockScope) : boolean\l# visit(SingleMemberAnnotation, ClassScope) : boolean\l# visit(SingleMemberAnnotation, CompilationUnitScope) : boolean\l# visit(SingleNameReference, BlockScope) : boolean\l# visit(SingleTypeReference, BlockScope) : boolean\l# visit(SingleTypeReference, ClassScope) : boolean\l# visit(StringLiteral, BlockScope) : boolean\l# visit(SuperReference, BlockScope) : boolean\l# visit(SwitchStatement, BlockScope) : boolean\l# visit(SynchronizedStatement, BlockScope) : boolean\l# visit(ThisReference, BlockScope) : boolean\l# visit(ThrowStatement, BlockScope) : boolean\l# visit(TrueLiteral, BlockScope) : boolean\l# visit(TryStatement, BlockScope) : boolean\l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l# visit(TypeParameter, BlockScope) : boolean\l# visit(TypeParameter, ClassScope) : boolean\l# visit(UnaryExpression, BlockScope) : boolean\l# visit(WhileStatement, BlockScope) : boolean\l# visit(Wildcard, BlockScope) : boolean\l# visit(Wildcard, ClassScope) : boolean\l}"
	 ]

	 ClassFile [
		 label = "{ClassFile|+ referenceBinding : SourceTypeBinding\l+ constantPool : ConstantPool\l+ enclosingClassFile : ClassFile\l+ produceDebugAttributes : int\l+ innerClassesBindings : ReferenceBinding\l+ numberOfInnerClasses : int\l+ header : byte\l+ contents : byte\l+ headerOffset : int\l+ contentsOffset : int\l+ constantPoolOffset : int\l+ methodCountOffset : int\l+ methodCount : int\l# creatingProblemType : boolean\l+ INITIAL_CONTENTS_SIZE : int\l+ INITIAL_HEADER_SIZE : int\l+ ownSharedArrays : boolean\l+ INNER_CLASSES_SIZE : int\l+ codeStream : CodeStream\l+ targetJDK : long\l|# ClassFile() : \l# ClassFile(SourceTypeBinding, ClassFile, boolean) : \l# addAbstractMethod(AbstractMethodDeclaration, MethodBinding) : \l# addAttributes() : \l# addDefaultAbstractMethods() : \l# addFieldInfo(FieldBinding) : \l# addFieldInfos() : \l# addInnerClasses(ReferenceBinding) : \l# addProblemClinit(IProblem) : \l# addProblemConstructor(AbstractMethodDeclaration, MethodBinding, IProblem) : \l# addProblemConstructor(AbstractMethodDeclaration, MethodBinding, IProblem, int) : \l# addProblemMethod(AbstractMethodDeclaration, MethodBinding, IProblem) : \l# addProblemMethod(AbstractMethodDeclaration, MethodBinding, IProblem, int) : \l# addSpecialMethods() : \l# generateMissingAbstractMethods(MethodDeclaration, CompilationResult) : \l# addMissingAbstractProblemMethod(MethodDeclaration, MethodBinding, IProblem, CompilationResult) : \l# completeCodeAttributeForMissingAbstractProblemMethod(MethodBinding, int, int, int) : \l# addSyntheticConstructorAccessMethod(SyntheticAccessMethodBinding) : \l# addSyntheticFieldReadAccessMethod(SyntheticAccessMethodBinding) : \l# addSyntheticFieldWriteAccessMethod(SyntheticAccessMethodBinding) : \l# addSyntheticMethodAccessMethod(SyntheticAccessMethodBinding) : \l# buildAllDirectoriesInto(String, String) : String\l# completeCodeAttribute(int) : \l# completeCodeAttributeForClinit(int) : \l# completeCodeAttributeForClinit(int, int, int) : \l# completeCodeAttributeForProblemMethod(AbstractMethodDeclaration, MethodBinding, int, int, int) : \l# completeCodeAttributeForSyntheticAccessMethod(SyntheticAccessMethodBinding, int, int) : \l# completeMethodInfo(int, int) : \l# createProblemType(TypeDeclaration, CompilationResult) : \l# fileName() : char\l# generateCodeAttributeHeader() : \l# generateMethodInfoAttribute(MethodBinding) : int\l# generateMethodInfoHeader(MethodBinding) : \l# generateMethodInfoHeader(MethodBinding, int) : \l# generateMethodInfoHeaderForClinit() : \l# getBytes() : byte\l# getCompoundName() : char\l# initByteArrays() : \l# outerMostEnclosingClassFile() : ClassFile\l# recordEnclosingTypeAttributes(ReferenceBinding) : \l# recordNestedLocalAttribute(ReferenceBinding) : \l# recordNestedMemberAttribute(ReferenceBinding) : \l# resizeContents(int) : \l# searchLineNumber(int, int) : int\l# setForMethodInfos() : \l# writeToDisk(boolean, String, String, byte) : \l}"
	 ]

	 CompilationResult [
		 label = "{CompilationResult|+ problems : IProblem\l+ tasks : IProblem\l+ problemCount : int\l+ taskCount : int\l+ compilationUnit : ICompilationUnit\l- problemsMap : Map\l- firstErrorsMap : Map\l- maxProblemPerUnit : int\l+ qualifiedReferences : char\l+ simpleNameReferences : char\l+ lineSeparatorPositions : int\l+ compiledTypes : Hashtable\l+ unitIndex : int\l+ hasBeenAccepted : boolean\l+ fileName : char\l+ hasInconsistentToplevelHierarchies : boolean\l|# CompilationResult(char, int, int, int) : \l# CompilationResult(ICompilationUnit, int, int, int) : \l# computePriority(IProblem) : int\l# getAllProblems() : IProblem\l# getClassFiles() : ClassFile\l# getCompilationUnit() : ICompilationUnit\l# getFileName() : char\l# getErrors() : IProblem\l# getProblems() : IProblem\l# getTasks() : IProblem\l# hasErrors() : boolean\l# hasProblems() : boolean\l# hasSyntaxError() : boolean\l# hasTasks() : boolean\l# hasWarnings() : boolean\l# quickSort(IProblem, int, int) : \l# quickPrioritize(IProblem, int, int) : \l# record(char, ClassFile) : \l# record(IProblem, ReferenceContext) : \l# recordTask(IProblem) : \l# tagAsAccepted() : CompilationResult\l# toString() : String\l}"
	 ]

	 Compiler [
		 label = "{Compiler|+ parser : Parser\l+ requestor : ICompilerRequestor\l+ options : CompilerOptions\l+ problemReporter : ProblemReporter\l+ unitsToProcess : CompilationUnitDeclaration\l+ totalUnits : int\l+ lookupEnvironment : LookupEnvironment\l+ DEBUG : boolean\l+ parseThreshold : int\l+ DebugRequestor : IDebugRequestor\l|# Compiler(INameEnvironment, IErrorHandlingPolicy, Map, ICompilerRequestor, IProblemFactory) : \l# acceptResult(CompilationResult) : \l# Compiler(INameEnvironment, IErrorHandlingPolicy, Map, ICompilerRequestor, IProblemFactory, boolean) : \l# acceptResult(CompilationResult) : \l# accept(IBinaryType, PackageBinding) : \l# accept(ICompilationUnit) : \l# accept(ISourceType, PackageBinding) : \l# addCompilationUnit(ICompilationUnit, CompilationUnitDeclaration) : \l# beginToCompile(ICompilationUnit) : \l# compile(ICompilationUnit) : \l# handleInternalException(Throwable, CompilationUnitDeclaration, CompilationResult) : \l# handleInternalException(AbortCompilation, CompilationUnitDeclaration) : \l# initializeParser() : \l# process(CompilationUnitDeclaration, int) : \l# reset() : \l# resolve(CompilationUnitDeclaration, ICompilationUnit, boolean, boolean, boolean) : CompilationUnitDeclaration\l# resolve(ICompilationUnit, boolean, boolean, boolean) : CompilationUnitDeclaration\l}"
	 ]

	 ConfigurableOption [
		 label = "{ConfigurableOption|- componentName : String\l- optionName : String\l- id : int\l- category : String\l- name : String\l- description : String\l- currentValueIndex : int\l- defaultValueIndex : int\l- possibleValues : String\l+ NoDiscreteValue : String\l|# ConfigurableOption(String, String, Locale, int) : \l# getCategory() : String\l# getComponentName() : String\l# getCurrentValueIndex() : int\l# getDefaultValueIndex() : int\l# getDescription() : String\l# getID() : int\l# getName() : String\l# getPossibleValues() : String\l# setValueIndex(int) : \l# toString() : String\l# getOptionName() : String\l}"
	 ]

	 DefaultErrorHandlingPolicies [
		 label = "{DefaultErrorHandlingPolicies||# exitAfterAllProblems() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# exitOnFirstError() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# proceedOnFirstError() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# proceedWithAllProblems() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l}"
	 ]

	 ICompilerRequestor [
		 label = "{ICompilerRequestor||# acceptResult(CompilationResult) : \l}"
	 ]

	 IDebugRequestor [
		 label = "{IDebugRequestor||# acceptDebugResu
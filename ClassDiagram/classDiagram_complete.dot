digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 CompletionJavadoc [
		 label = "{CompletionJavadoc|# completionNode : Expression\l|# CompletionJavadoc(int, int) : \l# getCompletionNode() : Expression\l# internalResolve(Scope) : \l# print(int, StringBuffer) : StringBuffer\l# resolve(ClassScope) : \l# resolve(CompilationUnitScope) : \l# resolve(MethodScope) : \l# missingParamTags(Binding, MethodScope) : char\l# missingTypeParameterTags(Binding, Scope) : char\l}"
	 ]

	 CompletionJavadocParser [
		 label = "{CompletionJavadocParser|+ INLINE_ALL_TAGS_LENGTH : int\l+ BLOCK_ALL_TAGS_LENGTH : int\l# levelTags : char\l# levelTagsLength : int\l# cursorLocation : int\l# completionNode : CompletionOnJavadoc\l# pushText : boolean\l# allPossibleTags : boolean\l|# null() : \l# CompletionJavadocParser(CompletionParser) : \l# checkDeprecation(int) : boolean\l# commentParse() : boolean\l# createArgumentReference(char, int, boolean, Object, long, long) : Object\l# createFieldReference(Object) : Object\l# createMethodReference(Object, List) : Object\l# createTypeReference(int) : Object\l# possibleTags(char, boolean) : char\l# getCompletionJavadoc() : CompletionJavadoc\l# getCompletionParser() : CompletionParser\l# initLevelTags() : \l# parseArguments(Object) : Object\l# parseParam() : boolean\l# parseReference() : boolean\l# parseTag(int) : boolean\l# parseThrows() : boolean\l# pushParamName(boolean) : boolean\l# pushText(int, int) : \l# readToken() : int\l# syntaxRecoverQualifiedName(int) : Object\l# syntaxRecoverArgumentType(Object, List, Object) : Object\l# syntaxRecoverEmptyArgumentType(Object) : Object\l# updateDocComment() : \l# verifySpaceOrEndComment() : boolean\l}"
	 ]

	 CompletionNodeDetector [
		 label = "{CompletionNodeDetector|- searchedNode : ASTNode\l- parent : ASTNode\l- result : boolean\l|# CompletionNodeDetector(ASTNode, ASTNode) : \l# containsCompletionNode() : boolean\l# getCompletionNodeParent() : ASTNode\l# endVisit(AllocationExpression, BlockScope) : \l# endVisit(AND_AND_Expression, BlockScope) : \l# endVisit(ArrayAllocationExpression, BlockScope) : \l# endVisit(ArrayInitializer, BlockScope) : \l# endVisit(ArrayQualifiedTypeReference, BlockScope) : \l# endVisit(ArrayQualifiedTypeReference, ClassScope) : \l# endVisit(ArrayReference, BlockScope) : \l# endVisit(ArrayTypeReference, BlockScope) : \l# endVisit(ArrayTypeReference, ClassScope) : \l# endVisit(Assignment, BlockScope) : \l# endVisit(BinaryExpression, BlockScope) : \l# endVisit(CastExpression, BlockScope) : \l# endVisit(CompoundAssignment, BlockScope) : \l# endVisit(ConditionalExpression, BlockScope) : \l# endVisit(EqualExpression, BlockScope) : \l# endVisit(ExplicitConstructorCall, BlockScope) : \l# endVisit(FieldReference, BlockScope) : \l# endVisit(InstanceOfExpression, BlockScope) : \l# endVisit(MessageSend, BlockScope) : \l# endVisit(OR_OR_Expression, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, BlockScope) : \l# endVisit(ParameterizedQualifiedTypeReference, ClassScope) : \l# endVisit(ParameterizedSingleTypeReference, BlockScope) : \l# endVisit(ParameterizedSingleTypeReference, ClassScope) : \l# endVisit(PostfixExpression, BlockScope) : \l# endVisit(PrefixExpression, BlockScope) : \l# endVisit(QualifiedAllocationExpression, BlockScope) : \l# endVisit(QualifiedNameReference, BlockScope) : \l# endVisit(QualifiedSuperReference, BlockScope) : \l# endVisit(QualifiedThisReference, BlockScope) : \l# endVisit(QualifiedTypeReference, BlockScope) : \l# endVisit(QualifiedTypeReference, ClassScope) : \l+ endVisit(ReferenceExpression, BlockScope) : \l# endVisit(SingleNameReference, BlockScope) : \l# endVisit(SingleTypeReference, BlockScope) : \l# endVisit(SingleTypeReference, ClassScope) : \l# endVisit(SuperReference, BlockScope) : \l# endVisit(ThisReference, BlockScope) : \l# endVisit(UnaryExpression, BlockScope) : \l# endVisit(MemberValuePair, BlockScope) : \l# endVisit(MemberValuePair, CompilationUnitScope) : \l# endVisit(LambdaExpression, BlockScope) : \l# visit(AllocationExpression, BlockScope) : boolean\l# visit(AND_AND_Expression, BlockScope) : boolean\l# visit(ArrayAllocationExpression, BlockScope) : boolean\l# visit(ArrayInitializer, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, ClassScope) : boolean\l# visit(ArrayReference, BlockScope) : boolean\l# visit(ArrayTypeReference, BlockScope) : boolean\l# visit(ArrayTypeReference, ClassScope) : boolean\l# visit(Assignment, BlockScope) : boolean\l# visit(BinaryExpression, BlockScope) : boolean\l# visit(CastExpression, BlockScope) : boolean\l# visit(CompoundAssignment, BlockScope) : boolean\l# visit(ConditionalExpression, BlockScope) : boolean\l# visit(EqualExpression, BlockScope) : boolean\l# visit(ExplicitConstructorCall, BlockScope) : boolean\l# visit(FieldReference, BlockScope) : boolean\l# visit(InstanceOfExpression, BlockScope) : boolean\l# visit(MessageSend, BlockScope) : boolean\l# visit(OR_OR_Expression, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, ClassScope) : boolean\l# visit(ParameterizedSingleTypeReference, BlockScope) : boolean\l# visit(ParameterizedSingleTypeReference, ClassScope) : boolean\l# visit(PostfixExpression, BlockScope) : boolean\l# visit(PrefixExpression, BlockScope) : boolean\l# visit(QualifiedAllocationExpression, BlockScope) : boolean\l# visit(QualifiedNameReference, BlockScope) : boolean\l# visit(QualifiedSuperReference, BlockScope) : boolean\l# visit(QualifiedThisReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, ClassScope) : boolean\l+ visit(ReferenceExpression, BlockScope) : boolean\l# visit(SingleNameReference, BlockScope) : boolean\l# visit(SingleTypeReference, BlockScope) : boolean\l# visit(SingleTypeReference, ClassScope) : boolean\l# visit(StringLiteral, BlockScope) : boolean\l# visit(SuperReference, BlockScope) : boolean\l# visit(ThisReference, BlockScope) : boolean\l# visit(UnaryExpression, BlockScope) : boolean\l# visit(MemberValuePair, BlockScope) : boolean\l# visit(MemberValuePair, CompilationUnitScope) : boolean\l# endVisit(ASTNode) : \l# visit(ASTNode) : boolean\l}"
	 ]

	 CompletionNodeFound [
		 label = "{CompletionNodeFound|+ astNode : ASTNode\l+ qualifiedBinding : Binding\l+ scope : Scope\l+ insideTypeAnnotation : boolean\l- serialVersionUID : long\l|# CompletionNodeFound() : \l# CompletionNodeFound(ASTNode, Binding, Scope) : \l# CompletionNodeFound(ASTNode, Binding, Scope, boolean) : \l# CompletionNodeFound(ASTNode, Scope) : \l# CompletionNodeFound(ASTNode, Scope, boolean) : \l}"
	 ]

	 CompletionOnAnnotationMemberValuePair [
		 label = "{CompletionOnAnnotationMemberValuePair|+ completedMemberValuePair : MemberValuePair\l|# CompletionOnAnnotationMemberValuePair(TypeReference, int, MemberValuePair, MemberValuePair) : \l# resolveType(BlockScope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnAnnotationOfType [
		 label = "{CompletionOnAnnotationOfType|+ potentialAnnotatedNode : ASTNode\l+ isParameter : boolean\l|# CompletionOnAnnotationOfType(char, CompilationResult, Annotation) : \l# print(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnArgumentName [
		 label = "{CompletionOnArgumentName|- FAKENAMESUFFIX : char\l+ realName : char\l+ isCatchArgument : boolean\l|# CompletionOnArgumentName(char, long, TypeReference, int) : \l# bind(MethodScope, TypeBinding, boolean) : TypeBinding\l# print(int, StringBuffer) : StringBuffer\l# resolve(BlockScope) : \l}"
	 ]

	 CompletionOnBranchStatementLabel [
		 label = "{CompletionOnBranchStatementLabel|+ BREAK : int\l+ CONTINUE : int\l- kind : int\l+ possibleLabels : char\l|# CompletionOnBranchStatementLabel(int, char, int, int, char) : \l# analyseCode(BlockScope, FlowContext, FlowInfo) : FlowInfo\l# resolve(BlockScope) : \l# printStatement(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnClassLiteralAccess [
		 label = "{CompletionOnClassLiteralAccess|+ completionIdentifier : char\l+ classStart : int\l|# CompletionOnClassLiteralAccess(long, TypeReference) : \l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnExplicitConstructorCall [
		 label = "{CompletionOnExplicitConstructorCall||# CompletionOnExplicitConstructorCall(int) : \l# printStatement(int, StringBuffer) : StringBuffer\l# resolve(BlockScope) : \l}"
	 ]

	 CompletionOnFieldName [
		 label = "{CompletionOnFieldName|- FAKENAMESUFFIX : char\l+ realName : char\l|# CompletionOnFieldName(char, int, int) : \l# printStatement(int, StringBuffer) : StringBuffer\l# resolve(MethodScope) : \l}"
	 ]

	 CompletionOnFieldType [
		 label = "{CompletionOnFieldType|+ isLocalVariable : boolean\l|# CompletionOnFieldType(TypeReference, boolean) : \l# printStatement(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnImportReference [
		 label = "{CompletionOnImportReference||# CompletionOnImportReference(char, long, int) : \l# print(int, StringBuffer, boolean) : StringBuffer\l}"
	 ]

	 CompletionOnJavadoc [
		 label = "{CompletionOnJavadoc||# JAVADOC() : int\l# EXCEPTION() : int\l# TEXT() : int\l# BASE_TYPES() : int\l# ONLY_INLINE_TAG() : int\l# REPLACE_TAG() : int\l# FORMAL_REFERENCE() : int\l# ALL_POSSIBLE_TAGS() : int\l# getCompletionFlags() : int\l# addCompletionFlags(int) : \l}"
	 ]

	 CompletionOnJavadocAllocationExpression [
		 label = "{CompletionOnJavadocAllocationExpression|+ completionFlags : int\l+ separatorPosition : int\l|# CompletionOnJavadocAllocationExpression(JavadocAllocationExpression, int) : \l# CompletionOnJavadocAllocationExpression(JavadocAllocationExpression, int, int) : \l# addCompletionFlags(int) : \l# completeAnException() : boolean\l# completeInText() : boolean\l# completeBaseTypes() : boolean\l# completeFormalReference() : boolean\l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnJavadocFieldReference [
		 label = "{CompletionOnJavadocFieldReference|+ completionFlags : int\l+ separatorPosition : int\l|# CompletionOnJavadocFieldReference(Expression, int, int, int, char) : \l# CompletionOnJavadocFieldReference(JavadocFieldReference, int, char) : \l# CompletionOnJavadocFieldReference(JavadocMessageSend, int) : \l# addCompletionFlags(int) : \l# completeAnException() : boolean\l# completeInText() : boolean\l# completeBaseTypes() : boolean\l# completeFormalReference() : boolean\l# getCompletionFlags() : int\l# internalResolveType(Scope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnJavadocMessageSend [
		 label = "{CompletionOnJavadocMessageSend|+ completionFlags : int\l+ separatorPosition : int\l|# CompletionOnJavadocMessageSend(JavadocMessageSend, int) : \l# CompletionOnJavadocMessageSend(JavadocMessageSend, int, int) : \l# addCompletionFlags(int) : \l# completeAnException() : boolean\l# completeInText() : boolean\l# completeBaseTypes() : boolean\l# completeFormalReference() : boolean\l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnJavadocParamNameReference [
		 label = "{CompletionOnJavadocParamNameReference|+ completionFlags : int\l+ missingParams : char\l+ missingTypeParams : char\l|# CompletionOnJavadocParamNameReference(char, long, int, int) : \l# CompletionOnJavadocParamNameReference(JavadocSingleNameReference) : \l# addCompletionFlags(int) : \l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l# reportError(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnJavadocQualifiedTypeReference [
		 label = "{CompletionOnJavadocQualifiedTypeReference|+ completionFlags : int\l+ completionIdentifier : char\l|# CompletionOnJavadocQualifiedTypeReference(char, char, long, int, int) : \l# CompletionOnJavadocQualifiedTypeReference(JavadocQualifiedTypeReference) : \l# addCompletionFlags(int) : \l# completeAnException() : boolean\l# completeInText() : boolean\l# completeBaseTypes() : boolean\l# completeFormalReference() : boolean\l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnJavadocSingleTypeReference [
		 label = "{CompletionOnJavadocSingleTypeReference|+ completionFlags : int\l|# CompletionOnJavadocSingleTypeReference(char, long, int, int) : \l# CompletionOnJavadocSingleTypeReference(JavadocSingleTypeReference) : \l# addCompletionFlags(int) : \l# completeAnException() : boolean\l# completeInText() : boolean\l# completeBaseTypes() : boolean\l# completeFormalReference() : boolean\l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnJavadocTag [
		 label = "{CompletionOnJavadocTag|+ completionFlags : int\l+ NO_CHAR_CHAR_CHAR : char\l- possibleTags : char\l|# CompletionOnJavadocTag(char, long, int, int, char, boolean) : \l# addCompletionFlags(int) : \l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l# filterPossibleTags(Scope) : \l# getPossibleBlockTags() : char\l# getPossibleInlineTags() : char\l}"
	 ]

	 CompletionOnJavadocTypeParamReference [
		 label = "{CompletionOnJavadocTypeParamReference|+ completionFlags : int\l+ missingParams : char\l|# CompletionOnJavadocTypeParamReference(char, long, int, int) : \l# CompletionOnJavadocTypeParamReference(JavadocSingleTypeReference) : \l# addCompletionFlags(int) : \l# getCompletionFlags() : int\l# printExpression(int, StringBuffer) : StringBuffer\l# reportError(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnKeyword [
		 label = "{CompletionOnKeyword||# getToken() : char\l# getPossibleKeywords() : char\l}"
	 ]

	 CompletionOnKeyword1 [
		 label = "{CompletionOnKeyword1|- possibleKeywords : char\l|# CompletionOnKeyword1(char, long, char) : \l# CompletionOnKeyword1(char, long, char) : \l# getToken() : char\l# getPossibleKeywords() : char\l# aboutToResolve(Scope) : \l# getTypeBinding(Scope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnKeyword2 [
		 label = "{CompletionOnKeyword2|- token : char\l- possibleKeywords : char\l|# CompletionOnKeyword2(char, long, char) : \l# getToken() : char\l# getPossibleKeywords() : char\l# print(int, StringBuffer, boolean) : StringBuffer\l}"
	 ]

	 CompletionOnKeyword3 [
		 label = "{CompletionOnKeyword3|- possibleKeywords : char\l|# CompletionOnKeyword3(char, long, char) : \l# CompletionOnKeyword3(char, long, char) : \l# getToken() : char\l# getPossibleKeywords() : char\l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnLocalName [
		 label = "{CompletionOnLocalName|- FAKENAMESUFFIX : char\l+ realName : char\l|# CompletionOnLocalName(char, int, int) : \l# resolve(BlockScope) : \l# printAsExpression(int, StringBuffer) : StringBuffer\l# printStatement(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnMarkerAnnotationName [
		 label = "{CompletionOnMarkerAnnotationName||# CompletionOnMarkerAnnotationName(TypeReference, int) : \l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnMemberAccess [
		 label = "{CompletionOnMemberAccess|+ isInsideAnnotation : boolean\l|# CompletionOnMemberAccess(char, long, boolean) : \l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnMemberValueName [
		 label = "{CompletionOnMemberValueName||# CompletionOnMemberValueName(char, int, int) : \l# print(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnMessageSend [
		 label = "{CompletionOnMessageSend||# resolveType(BlockScope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnMessageSendName [
		 label = "{CompletionOnMessageSendName||# CompletionOnMessageSendName(char, int, int) : \l# resolveType(BlockScope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnMethodName [
		 label = "{CompletionOnMethodName|+ selectorEnd : int\l|# CompletionOnMethodName(CompilationResult) : \l# print(int, StringBuffer) : StringBuffer\l# resolve(ClassScope) : \l}"
	 ]

	 CompletionOnMethodReturnType [
		 label = "{CompletionOnMethodReturnType||# CompletionOnMethodReturnType(TypeReference, CompilationResult) : \l# resolveStatements() : \l# print(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnMethodTypeParameter [
		 label = "{CompletionOnMethodTypeParameter||# CompletionOnMethodTypeParameter(TypeParameter, CompilationResult) : \l# resolveStatements() : \l# print(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnPackageReference [
		 label = "{CompletionOnPackageReference||# CompletionOnPackageReference(char, long) : \l# print(int, StringBuffer, boolean) : StringBuffer\l}"
	 ]

	 CompletionOnParameterizedQualifiedTypeReference [
		 label = "{CompletionOnParameterizedQualifiedTypeReference|+ K_TYPE : int\l+ K_CLASS : int\l+ K_INTERFACE : int\l+ K_EXCEPTION : int\l- kind : int\l+ completionIdentifier : char\l|# CompletionOnParameterizedQualifiedTypeReference(char, TypeReference, char, long) : \l# CompletionOnParameterizedQualifiedTypeReference(char, TypeReference, char, long, int) : \l# isClass() : boolean\l# isInterface() : boolean\l# isException() : boolean\l# isSuperType() : boolean\l# resolveType(BlockScope, boolean, int) : TypeBinding\l# resolveType(ClassScope, int) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnQualifiedAllocationExpression [
		 label = "{CompletionOnQualifiedAllocationExpression||# resolveType(BlockScope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnQualifiedNameReference [
		 label = "{CompletionOnQualifiedNameReference|+ completionIdentifier : char\l+ isInsideAnnotationAttribute : boolean\l|# CompletionOnQualifiedNameReference(char, char, long, boolean) : \l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnQualifiedTypeReference [
		 label = "{CompletionOnQualifiedTypeReference|+ K_TYPE : int\l+ K_CLASS : int\l+ K_INTERFACE : int\l+ K_EXCEPTION : int\l- kind : int\l+ completionIdentifier : char\l+ isConstructorType : boolean\l|# CompletionOnQualifiedTypeReference(char, char, long) : \l# CompletionOnQualifiedTypeReference(char, char, long, int) : \l# aboutToResolve(Scope) : \l# augmentTypeWithAdditionalDimensions(int, Annotation, boolean) : TypeReference\l# getTypeBinding(Scope) : TypeBinding\l# isClass() : boolean\l# isInterface() : boolean\l# isException() : boolean\l# isSuperType() : boolean\l# setKind(int) : \l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnReferenceExpressionName [
		 label = "{CompletionOnReferenceExpressionName||+ resolveType(BlockScope) : TypeBinding\l+ printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionOnSingleNameReference [
		 label = "{CompletionOnSingleNameReference|+ possibleKeywords : char\l+ canBeExplicitConstructor : boolean\l+ isInsideAnnotationAttribute : boolean\l+ isPrecededByModifiers : boolean\l|# CompletionOnSingleNameReference(char, long, boolean) : \l# CompletionOnSingleNameReference(char, long, char, boolean, boolean) : \l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CompletionOnSingleTypeReference [
		 label = "{CompletionOnSingleTypeReference|+ K_TYPE : int\l+ K_CLASS : int\l+ K_INTERFACE : int\l+ K_EXCEPTION : int\l- kind : int\l+ isCompletionNode : boolean\l+ isConstructorType : boolean\l+ fieldTypeCompletionNode : CompletionOnFieldType\l|# CompletionOnSingleTypeReference(char, long) : \l# CompletionOnSingleTypeReference(char, long, int) : \l# aboutToResolve(Scope) : \l# augmentTypeWithAdditionalDimensions(int, Annotation, boolean) : TypeReference\l# getTypeBinding(Scope) : TypeBinding\l# isClass() : boolean\l# isInterface() : boolean\l# isException() : boolean\l# isSuperType() : boolean\l# printExpression(int, StringBuffer) : StringBuffer\l# resolveTypeEnclosing(BlockScope, ReferenceBinding) : TypeBinding\l# setKind(int) : \l}"
	 ]

	 CompletionOnStringLiteral [
		 label = "{CompletionOnStringLiteral|+ contentStart : int\l+ contentEnd : int\l|# CompletionOnStringLiteral(char, int, int, int, int, int) : \l# CompletionOnStringLiteral(int, int, int, int) : \l# resolveType(ClassScope) : TypeBinding\l# resolveType(BlockScope) : TypeBinding\l# printExpression(int, StringBuffer) : StringBuffer\l}"
	 ]

	 CompletionParser [
		 label = "{CompletionParser|# COMPLETION_PARSER : int\l# COMPLETION_OR_ASSIST_PARSER : int\l# K_BLOCK_DELIMITER : int\l# K_SELECTOR_INVOCATION_TYPE : int\l# K_SELECTOR_QUALIFIER : int\l# K_BETWEEN_CATCH_AND_RIGHT_PAREN : int\l# K_NEXT_TYPEREF_IS_CLASS : int\l# K_NEXT_TYPEREF_IS_INTERFACE : int\l# K_NEXT_TYPEREF_IS_EXCEPTION : int\l# K_BETWEEN_NEW_AND_LEFT_BRACKET : int\l# K_INSIDE_THROW_STATEMENT : int\l# K_INSIDE_RETURN_STATEMENT : int\l# K_CAST_STATEMENT : int\l# K_LOCAL_INITIALIZER_DELIMITER : int\l# K_ARRAY_INITIALIZER : int\l# K_ARRAY_CREATION : int\l# K_UNARY_OPERATOR : int\l# K_BINARY_OPERATOR : int\l# K_ASSISGNMENT_OPERATOR : int\l# K_CONDITIONAL_OPERATOR : int\l# K_BETWEEN_IF_AND_RIGHT_PAREN : int\l# K_BETWEEN_WHILE_AND_RIGHT_PAREN : int\l# K_BETWEEN_FOR_AND_RIGHT_PAREN : int\l# K_BETWEEN_SWITCH_AND_RIGHT_PAREN : int\l# K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN : int\l# K_INSIDE_ASSERT_STATEMENT : int\l# K_SWITCH_LABEL : int\l# K_BETWEEN_CASE_AND_COLON : int\l# K_BETWEEN_DEFAULT_AND_COLON : int\l# K_BETWEEN_LEFT_AND_RIGHT_BRACKET : int\l# K_EXTENDS_KEYWORD : int\l# K_PARAMETERIZED_METHOD_INVOCATION : int\l# K_PARAMETERIZED_ALLOCATION : int\l# K_PARAMETERIZED_CAST : int\l# K_BETWEEN_ANNOTATION_NAME_AND_RPAREN : int\l# K_INSIDE_BREAK_STATEMENT : int\l# K_INSIDE_CONTINUE_STATEMENT : int\l# K_LABEL : int\l# K_MEMBER_VALUE_ARRAY_INITIALIZER : int\l# K_CONTROL_STATEMENT_DELIMITER : int\l# K_INSIDE_ASSERT_EXCEPTION : int\l# K_INSIDE_FOR_CONDITIONAL : int\l# K_BETWEEN_INSTANCEOF_AND_RPAREN : int\l# K_INSIDE_IMPORT_STATEMENT : int\l+ FAKE_TYPE_NAME : char\l+ FAKE_METHOD_NAME : char\l+ FAKE_ARGUMENT_NAME : char\l+ VALUE : char\l+ cursorLocation : int\l+ assistNodeParent : ASTNode\l+ enclosingNode : ASTNode\l# IF : int\l# TRY : int\l# CATCH : int\l# WHILE : int\l# SWITCH : int\l# FOR : int\l# DO : int\l# SYNCHRONIZED : int\l# DEFAULT : int\l# EXPLICIT_RECEIVER : int\l# NO_RECEIVER : int\l# SUPER_RECEIVER : int\l# NAME_RECEIVER : int\l# ALLOCATION : int\l# QUALIFIED_ALLOCATION : int\l# QUESTION : int\l# COLON : int\l# LPAREN_NOT_CONSUMED : int\l# LPAREN_CONSUMED : int\l# ANNOTATION_NAME_COMPLETION : int\l# INSIDE_NAME : int\l# invocationType : int\l# qualifier : int\l# hasUnusedModifiers : boolean\l# canBeExplicitConstructor : int\l# NO : int\l# NEXTTOKEN : int\l# YES : int\l# LabelStackIncrement : int\l# labelStack : char\l# labelPtr : int\l# isAlreadyAttached : boolean\l# shouldStackAssistNode : boolean\l+ record : boolean\l+ skipRecord : boolean\l+ recordFrom : int\l+ recordTo : int\l+ potentialVariableNamesPtr : int\l+ potentialVariableNames : char\l+ potentialVariableNameStarts : int\l+ potentialVariableNameEnds : int\l# pendingAnnotation : CompletionOnAnnotationOfType\l- storeSourceEnds : boolean\l+ sourceEnds : HashtableOfObjectToInt\l- inReferenceExpression : boolean\l- monitor : IProgressMonitor\l- resumeOnSyntaxError : int\l|# CompletionParser(ProblemReporter, boolean) : \l# CompletionParser(ProblemReporter, boolean, IProgressMonitor) : \l# addPotentialName(char, int, int) : \l# startRecordingIdentifiers(int, int) : \l# stopRecordingIdentifiers() : \l# assistIdentifier() : char\l+ assistNodeParent() : ASTNode\l+ enclosingNode() : ASTNode\l# attachOrphanCompletionNode() : \l# becomeSimpleParser() : Object\l# buildMoreAnnotationCompletionContext(MemberValuePair) : \l# buildMoreCompletionContext(Expression) : \l# buildMoreCompletionEnclosingContext(Statement) : Statement\l# buildMoreGenericsCompletionContext(ASTNode, boolean) : \l# buildMoreTryStatementCompletionContext(TypeReference) : \l# bodyEnd(AbstractMethodDeclaration) : int\l# bodyEnd(Initializer) : int\l# checkAndSetModifiers(int) : \l# consumePushCombineModifiers() : \l# checkClassInstanceCreation() : boolean\l# checkClassLiteralAccess() : boolean\l# checkKeyword() : boolean\l# checkInstanceofKeyword() : boolean\l# checkInvocation() : boolean\l# checkLabelStatement() : boolean\l# checkMemberAccess() : boolean\l# checkNameCompletion() : boolean\l# checkParemeterizedMethodName() : boolean\l# checkParemeterizedType() : boolean\l# checkRecoveredMethod() : boolean\l# checkMemberValueName() : boolean\l# checkRecoveredType() : boolean\l# classHeaderExtendsOrImplements(boolean) : \l# completionIdentifierCheck() : \l# consumeArrayCreationExpressionWithInitializer() : \l# consumeArrayCreationExpressionWithoutInitializer() : \l# consumeArrayCreationHeader() : \l# consumeAssignment() : \l# consumeAssignmentOperator(int) : \l# consumeBinaryExpression(int) : \l# consumeBinaryExpressionWithName(int) : \l# consumeCaseLabel() : \l# consumeCastExpressionWithPrimitiveType() : \l# consumeCastExpressionWithGenericsArray() : \l# consumeCastExpressionWithQualifiedGenericsArray() : \l# consumeCastExpressionWithNameArray() : \l# consumeCastExpressionLL1() : \l# consumeCatchFormalParameter() : \l# consumeClassBodyDeclaration() : \l# consumeClassBodyopt() : \l# consumeClassDeclaration() : \l# consumeClassHeaderName1() : \l# consumeClassHeaderExtends() : \l# consumeClassHeaderImplements() : \l# consumeClassInstanceCreationExpressionName() : \l# consumeClassTypeElt() : \l# consumeCompilationUnit() : \l# consumeConditionalExpression(int) : \l# consumeConditionalExpressionWithName(int) : \l# consumeConstructorBody() : \l# consumeConstructorHeader() : \l# consumeConstructorHeaderName() : \l# consumeConstructorHeaderNameWithTypeParameters() : \l# consumeDefaultLabel() : \l# consumeDimWithOrWithOutExpr() : \l# consumeEmptyStatement() : \l+ consumeBlockStatement() : \l# consumeEnhancedForStatement() : \l# consumeEnhancedForStatementHeaderInit(boolean) : \l# consumeEnterAnonymousClassBody(boolean) : \l# consumeEnterVariable() : \l# consumeEnumConstantHeaderName() : \l# consumeEnumConstantNoClassBody() : \l# consumeEnumConstantWithClassBody() : \l# consumeEnumHeaderName() : \l# consumeEnumHeaderNameWithTypeParameters() : \l# consumeEqualityExpression(int) : \l# consumeEqualityExpressionWithName(int) : \l# consumeExitVariableWithInitialization() : \l# consumeExitVariableWithoutInitialization() : \l# consumeExplicitConstructorInvocation(int, int) : \l# consumeFieldAccess(boolean) : \l# consumeForceNoDiet() : \l# consumeFormalParameter(boolean) : \l# consumeGenericTypeWithDiamond() : \l# consumeStatementFor() : \l# consumeStatementIfNoElse() : \l# consumeStatementIfWithElse() : \l# consumeInsideCastExpression() : \l# consumeInsideCastExpressionLL1() : \l# consumeInsideCastExpressionLL1WithBounds() : \l# consumeInsideCastExpressionWithQualifiedGenerics() : \l# consumeInstanceOfExpression() : \l# consumeInstanceOfExpressionWithName() : \l# consumeInterfaceHeaderName1() : \l# consumeInterfaceHeaderExtends() : \l# consumeInterfaceType() : \l# consumeMethodInvocationName() : \l# consumeMethodInvocationNameWithTypeArguments() : \l# consumeMethodInvocationPrimary() : \l# consumeMethodInvocationPrimaryWithTypeArguments() : \l# consumeMethodInvocationSuper() : \l# consumeMethodInvocationSuperWithTypeArguments() : \l# consumeMethodHeaderName(boolean) : \l# consumeMethodHeaderNameWithTypeParameters(boolean) : \l# consumeMethodHeaderRightParen() : \l# consumeMethodHeaderExtendedDims() : \l# consumeAnnotationAsModifier() : \l# consumeAdditionalBound() : \l# consumeAdditionalBound1() : \l# consumeAnnotationName() : \l# consumeAnnotationTypeDeclarationHeaderName() : \l# consumeAnnotationTypeDeclarationHeaderNameWithTypeParameters() : \l# consumeLabel() : \l+ consumeLambdaExpression() : \l# consumeMarkerAnnotation(boolean) : \l# consumeMemberValuePair() : \l# consumeMemberValueAsName() : \l# consumeMethodBody() : \l# consumeMethodHeader() : \l# consumeMethodDeclaration(boolean, boolean) : \l# consumeModifiers() : \l# consumeReferenceType() : \l# consumeRestoreDiet() : \l# consumeSingleMemberAnnotation(boolean) : \l# consumeSingleStaticImportDeclarationName() : \l# consumeSingleTypeImportDeclarationName() : \l# consumeStatementBreakWithLabel() : \l# consumeStatementLabel() : \l# consumeStatementSwitch() : \l# consumeStatementWhile() : \l# consumeStaticImportOnDemandDeclarationName() : \l# consumeStaticInitializer() : \l# consumeNestedMethod() : \l# consumeNormalAnnotation(boolean) : \l# consumePackageDeclarationName() : \l# consumePackageDeclarationNameWithModifiers() : \l# consumePrimaryNoNewArrayName() : \l# consumeQualifiedSuperReceiver() : \l# consumePrimaryNoNewArrayNameThis() : \l# consumePushPosition() : \l# consumeToken(int) : \l# consumeInvocationExpression() : \l# consumeIdentifierOrNew(boolean) : \l# consumeOnlySynchronized() : \l# consumeOnlyTypeArguments() : \l# consumeOnlyTypeArgumentsForCastExpression() : \l# consumeOpenFakeBlock() : \l# consumeRightParen() : \l# consumeReferenceType1() : \l# consumeReferenceType2() : \l# consumeReferenceType3() : \l# consumeTypeArgumentReferenceType1() : \l# consumeTypeArgumentReferenceType2() : \l# consumeTypeArguments() : \l# consumeTypeHeaderNameWithTypeParameters() : \l# consumeTypeImportOnDemandDeclarationName() : \l# consumeImportDeclaration() : \l# consumeTypeParameters() : \l# consumeTypeParameterHeader() : \l# consumeTypeParameter1() : \l# consumeTypeParameterWithExtends() : \l# consumeTypeParameterWithExtendsAndBounds() : \l# consumeTypeParameter1WithExtends() : \l# consumeTypeParameter1WithExtendsAndBounds() : \l# consumeUnionType() : \l# consumeUnionTypeAsClassType() : \l# consumeWildcard() : \l# consumeWildcard1() : \l# consumeWildcard2() : \l# consumeWildcard3() : \l# consumeWildcardBoundsExtends() : \l# consumeWildcardBounds1Extends() : \l# consumeWildcardBounds2Extends() : \l# consumeWildcardBounds3Extends() : \l# consumeUnaryExpression(int) : \l# consumeUnaryExpression(int, boolean) : \l# convertToMethodDeclaration(ConstructorDeclaration, CompilationResult) : MethodDeclaration\l# createAssistImportReference(char, long, int) : ImportReference\l# createAssistPackageReference(char, long) : ImportReference\l# createQualifiedAssistNameReference(char, char, long) : NameReference\l# createQualifiedAssistTypeReference(char, char, long) : TypeReference\l# createParameterizedQualifiedAssistTypeReference(char, TypeReference, char, TypeReference, long) : TypeReference\l# createSingleAssistNameReference(char, long) : NameReference\l# createSingleAssistTypeReference(char, long) : TypeReference\l# createParameterizedSingleAssistTypeReference(TypeReference, char, long) : TypeReference\l# createStringLiteral(char, int, int, int) : StringLiteral\l# augmentTypeWithAdditionalDimensions(TypeReference, int, Annotation, boolean) : TypeReference\l# dietParse(ICompilationUnit, CompilationResult, int) : CompilationUnitDeclaration\l# flushAssistState() : \l# getTypeReferenceForGenericType(int, int, int) : TypeReference\l# getUnspecifiedReference(boolean) : NameReference\l# getUnspecifiedReferenceOptimized() : NameReference\l# isAlreadyPotentialName(int) : boolean\l# indexOfAssistIdentifier(boolean) : int\l# initialize() : \l# initialize(boolean) : \l# copyState(Parser) : \l# initializeForBlockStatements() : \l# initializeScanner() : \l# isAfterArrayType() : boolean\l# isEmptyNameCompletion() : boolean\l# isInsideAnnotation() : boolean\l# isIndirectlyInsideBlock() : boolean\l# isInsideBlock() : boolean\l# isInsideBreakable() : boolean\l# isInsideLoop() : boolean\l# isInsideReturn() : boolean\l# newReferenceExpression() : ReferenceExpression\l# parse(ICompilationUnit, CompilationResult, int) : CompilationUnitDeclaration\l# parseBlockStatements(ConstructorDeclaration, CompilationUnitDeclaration) : \l# parseSomeStatements(int, int, int, CompilationUnitDeclaration) : MethodDeclaration\l# popUntilCompletedAnnotationIfNecessary() : \l# prepareForBlockStatements() : \l# pushOnLabelStack(char) : \l# pushCompletionOnMemberAccessOnExpressionStack(boolean) : \l# recordReference(NameReference) : \l# recoveryExitFromVariable() : \l# recoveryTokenCheck() : \l# createSnapShotParser() : CompletionParser\l# reset() : \l# resetAfterCompletion() : \l# restoreAssistParser(Object) : \l+ resumeOnSyntaxError() : int\l# resumeAfterReco
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 CodeSnippetAllocationExpression [
		 label = "{CodeSnippetAllocationExpression|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l|# CodeSnippetAllocationExpression(EvaluationContext) : \l# generateCode(BlockScope, CodeStream, boolean) : \l# manageEnclosingInstanceAccessIfNecessary(BlockScope, FlowInfo) : \l# manageSyntheticAccessIfNecessary(BlockScope, FlowInfo) : \l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CodeSnippetClassFile [
		 label = "{CodeSnippetClassFile||# CodeSnippetClassFile(org, org, boolean) : \l# createProblemType(TypeDeclaration, CompilationResult) : \l}"
	 ]

	 CodeSnippetCompiler [
		 label = "{CodeSnippetCompiler|# evaluationContext : EvaluationContext\l# codeSnippetStart : int\l# codeSnippetEnd : int\l|# CodeSnippetCompiler(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory, EvaluationContext, int, int) : \l# initializeParser() : \l}"
	 ]

	 CodeSnippetEnvironment [
		 label = "{CodeSnippetEnvironment|# env : INameEnvironment\l# context : EvaluationContext\l|# CodeSnippetEnvironment(INameEnvironment, EvaluationContext) : \l# findType(char) : NameEnvironmentAnswer\l# findType(char, char) : NameEnvironmentAnswer\l# isPackage(char, char) : boolean\l# cleanup() : \l}"
	 ]

	 CodeSnippetEvaluator [
		 label = "{CodeSnippetEvaluator|# DEVELOPMENT_MODE : boolean\l# codeSnippet : char\l# mapper : CodeSnippetToCuMapper\l|# CodeSnippetEvaluator(char, EvaluationContext, INameEnvironment, Map, IRequestor, IProblemFactory) : \l# addEvaluationResultForCompilationProblem(Map, CategorizedProblem, char) : \l# getClassName() : char\l# getCompiler(ICompilerRequestor) : Compiler\l# getMapper() : CodeSnippetToCuMapper\l# getSource() : char\l# getWrapperEnvironment() : INameEnvironment\l}"
	 ]

	 CodeSnippetFieldReference [
		 label = "{CodeSnippetFieldReference|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l|# CodeSnippetFieldReference(char, long, EvaluationContext) : \l# generateAssignment(BlockScope, CodeStream, Assignment, boolean) : \l# generateCode(BlockScope, CodeStream, boolean) : \l# generateCompoundAssignment(BlockScope, CodeStream, Expression, int, int, boolean) : \l# generatePostIncrement(BlockScope, CodeStream, CompoundAssignment, boolean) : \l# manageSyntheticAccessIfNecessary(BlockScope, FlowInfo, boolean) : \l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CodeSnippetMessageSend [
		 label = "{CodeSnippetMessageSend|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l|# CodeSnippetMessageSend(EvaluationContext) : \l# generateCode(BlockScope, CodeStream, boolean) : \l# manageSyntheticAccessIfNecessary(BlockScope, FlowInfo) : \l# resolveType(BlockScope) : TypeBinding\l}"
	 ]

	 CodeSnippetParser [
		 label = "{CodeSnippetParser|# codeSnippetStart : int\l# evaluationContext : EvaluationContext\l# hasRecoveredOnExpression : boolean\l# lastStatement : int\l# lineSeparatorLength : int\l# problemCountBeforeRecovery : int\l|# CodeSnippetParser(ProblemReporter, EvaluationContext, boolean, int, int) : \l# classInstanceCreation(boolean) : \l# consumeClassInstanceCreationExpressionWithTypeArguments() : \l# consumeClassDeclaration() : \l# consumeClassHeaderName1() : \l# consumeEmptyStatement() : \l# consumeEnhancedForStatement() : \l# consumeExpressionStatement() : \l# consumeFieldAccess(boolean) : \l# consumeInternalCompilationUnit() : \l# consumeInternalCompilationUnitWithTypes() : \l# consumeLocalVariableDeclarationStatement() : \l# consumeMethodDeclaration(boolean, boolean) : \l# consumeMethodInvocationName() : \l# consumeMethodInvocationNameWithTypeArguments() : \l# consumeMethodInvocationSuper() : \l# consumeMethodInvocationSuperWithTypeArguments() : \l# consumePrimaryNoNewArrayThis() : \l# consumeStatementBreak() : \l# consumeStatementBreakWithLabel() : \l# consumeStatementCatch() : \l# consumeStatementContinue() : \l# consumeStatementContinueWithLabel() : \l# consumeStatementDo() : \l# consumeStatementFor() : \l# consumeStatementIfNoElse() : \l# consumeStatementIfWithElse() : \l# consumeStatementLabel() : \l# consumeStatementReturn() : \l# consumeStatementSwitch() : \l# consumeStatementSynchronized() : \l# consumeStatementThrow() : \l# consumeStatementTry(boolean, boolean) : \l# consumeStatementWhile() : \l# endParse(int) : CompilationUnitDeclaration\l# getUnspecifiedReference(boolean) : NameReference\l# getUnspecifiedReferenceOptimized() : NameReference\l# ignoreExpressionAssignment() : \l# isTopLevelType() : boolean\l# newMessageSend() : MessageSend\l# newMessageSendWithTypeArguments() : MessageSend\l# recordLastStatementIfNeeded() : \l# reportSyntaxErrors(boolean, int) : \l# resumeOnSyntaxError() : int\l}"
	 ]

	 CodeSnippetQualifiedNameReference [
		 label = "{CodeSnippetQualifiedNameReference|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l|# CodeSnippetQualifiedNameReference(char, long, int, int, EvaluationContext) : \l# checkFieldAccess(BlockScope) : TypeBinding\l# generateCode(BlockScope, CodeStream, boolean) : \l# generateAssignment(BlockScope, CodeStream, Assignment, boolean) : \l# generateCompoundAssignment(BlockScope, CodeStream, Expression, int, int, boolean) : \l# generatePostIncrement(BlockScope, CodeStream, CompoundAssignment, boolean) : \l# generateReadSequence(BlockScope, CodeStream) : FieldBinding\l# generateReceiver(CodeStream) : \l# getOtherFieldBindings(BlockScope) : TypeBinding\l# manageSyntheticAccessIfNecessary(BlockScope, FieldBinding, int, FlowInfo) : \l# reportError(BlockScope) : TypeBinding\l}"
	 ]

	 CodeSnippetReturnStatement [
		 label = "{CodeSnippetReturnStatement|# setResultMethod : MethodBinding\l|# CodeSnippetReturnStatement(Expression, int, int) : \l# analyseCode(BlockScope, FlowContext, FlowInfo) : FlowInfo\l# generateReturnBytecode(CodeStream) : \l# generateStoreSaveValueIfNecessary(CodeStream) : \l# genericTypeArguments() : TypeBinding\l# freshInferenceContext(Scope) : InferenceContext18\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# needValue() : boolean\l# prepareSaveValueLocation(TryStatement) : \l# resolve(BlockScope) : \l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l}"
	 ]

	 CodeSnippetScope [
		 label = "{CodeSnippetScope||# CodeSnippetScope(int, Scope) : \l# CodeSnippetScope(BlockScope) : \l# CodeSnippetScope(BlockScope, int) : \l# canBeSeenByForCodeSnippet(FieldBinding, TypeBinding, InvocationSite, Scope) : boolean\l# canBeSeenByForCodeSnippet(MethodBinding, TypeBinding, InvocationSite, Scope) : boolean\l# canBeSeenByForCodeSnippet(ReferenceBinding, ReferenceBinding) : boolean\l# findExactMethod(ReferenceBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findFieldForCodeSnippet(TypeBinding, char, InvocationSite) : FieldBinding\l# findMethod(ReferenceBinding, char, TypeBinding, InvocationSite, boolean) : MethodBinding\l# findMethodForArray(ArrayBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# getBinding(char, int, InvocationSite, ReferenceBinding) : Binding\l# getConstructor(ReferenceBinding, TypeBinding, InvocationSite) : MethodBinding\l# getFieldForCodeSnippet(TypeBinding, char, InvocationSite) : FieldBinding\l# getImplicitMethod(ReferenceBinding, char, TypeBinding, InvocationSite) : MethodBinding\l}"
	 ]

	 CodeSnippetSingleNameReference [
		 label = "{CodeSnippetSingleNameReference|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l|# CodeSnippetSingleNameReference(char, long, EvaluationContext) : \l# analyseCode(BlockScope, FlowContext, FlowInfo, boolean) : FlowInfo\l# checkFieldAccess(BlockScope) : TypeBinding\l# generateAssignment(BlockScope, CodeStream, Assignment, boolean) : \l# generateCode(BlockScope, CodeStream, boolean) : \l# generateCompoundAssignment(BlockScope, CodeStream, MethodBinding, Expression, int, int, boolean) : \l# generatePostIncrement(BlockScope, CodeStream, CompoundAssignment, boolean) : \l# generateReceiver(CodeStream) : \l# getReceiverType(BlockScope) : TypeBinding\l# manageSyntheticAccessIfNecessary(BlockScope, FlowInfo, boolean) : \l# reportError(BlockScope) : TypeBinding\l}"
	 ]

	 BinaryMethodSkeleton [
		 label = "{BinaryMethodSkeleton|# exceptionTypeNames : char\l# methodDescriptor : char\l# selector : char\l# isConstructor : boolean\l# methods : IBinaryMethod\l|# null() : \l# BinaryMethodSkeleton(char, char, char, boolean) : \l# getAnnotations() : IBinaryAnnotation\l# getArgumentNames() : char\l# getDefaultValue() : Object\l# getExceptionTypeNames() : char\l# getGenericSignature() : char\l# getMethodDescriptor() : char\l# getModifiers() : int\l# getParameterAnnotations(int, char) : IBinaryAnnotation\l# getAnnotatedParametersCount() : int\l# getTypeAnnotations() : IBinaryTypeAnnotation\l# getSelector() : char\l# getTagBits() : long\l# isClinit() : boolean\l# isConstructor() : boolean\l# CodeSnippetSkeleton() : \l# getAnnotations() : IBinaryAnnotation\l# getTypeAnnotations() : IBinaryTypeAnnotation\l# getEnclosingMethod() : char\l# getEnclosingTypeName() : char\l# getFields() : IBinaryField\l# getFileName() : char\l# getGenericSignature() : char\l# getInterfaceNames() : char\l# getJavadocContents() : String\l# getJavadocContents(IProgressMonitor, String) : String\l# getMemberTypes() : IBinaryNestedType\l# getMethods() : IBinaryMethod\l# getModifiers() : int\l# getMissingTypeNames() : char\l# getName() : char\l# getSourceName() : char\l# getSuperclassName() : char\l# getTagBits() : long\l# getURLContents(String, String) : String\l# isAnonymous() : boolean\l# isBinaryType() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# sourceFileName() : char\l# enrichWithExternalAnnotationsFor(ITypeAnnotationWalker, Object, LookupEnvironment) : ITypeAnnotationWalker\l}"
	 ]

	 CodeSnippetSuperReference [
		 label = "{CodeSnippetSuperReference||# CodeSnippetSuperReference(int, int) : \l# genericTypeArguments() : TypeBinding\l# resolveType(BlockScope) : TypeBinding\l# freshInferenceContext(Scope) : InferenceContext18\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l}"
	 ]

	 CodeSnippetThisReference [
		 label = "{CodeSnippetThisReference|# evaluationContext : EvaluationContext\l# delegateThis : FieldBinding\l# isImplicit : boolean\l|# CodeSnippetThisReference(int, int, EvaluationContext, boolean) : \l# checkAccess(BlockScope, ReferenceBinding) : boolean\l# generateCode(BlockScope, CodeStream, boolean) : \l# genericTypeArguments() : TypeBinding\l# freshInferenceContext(Scope) : InferenceContext18\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# printExpression(int, StringBuffer) : StringBuffer\l# resolveType(BlockScope) : TypeBinding\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l}"
	 ]

	 CodeSnippetToCuMapper [
		 label = "{CodeSnippetToCuMapper|+ cuSource : char\l+ lineNumberOffset : int\l+ startPosOffset : int\l# codeSnippet : char\l# snippetPackageName : char\l# snippetImports : char\l# snippetClassName : char\l# snippetVarClassName : char\l# snippetDeclaringTypeName : char\l# localVarNames : char\l# localVarTypeNames : char\l# complianceVersion : long\l|# CodeSnippetToCuMapper(char, char, char, char, char, char, char, int, char, String, long) : \l# buildCUSource(String) : \l# getCompletionRequestor(CompletionRequestor) : CompletionRequestor\l# accept(CompletionProposal) : \l# completionFailure(IProblem) : \l# acceptContext(CompletionContext) : \l# beginReporting() : \l# endReporting() : \l# isIgnored(int) : boolean\l# setIgnored(int, boolean) : \l# isAllowingRequiredProposals(int, int) : boolean\l# setAllowsRequiredProposals(int, int, boolean) : \l# getCUSource(String) : char\l# getEvaluationType(int) : int\l# getImport(int) : char\l# getSelectionRequestor(ISelectionRequestor) : ISelectionRequestor\l# acceptType(char, char, int, boolean, char, int, int) : \l# acceptError(CategorizedProblem) : \l# acceptField(char, char, char, boolean, char, int, int) : \l# acceptMethod(char, char, String, char, char, char, String, char, char, boolean, boolean, char, int, int) : \l# acceptPackage(char) : \l# acceptTypeParameter(char, char, char, boolean, int, int) : \l# acceptMethodTypeParameter(char, char, char, int, int, char, boolean, int, int) : \l}"
	 ]

	 CodeSnippetTypeDeclaration [
		 label = "{CodeSnippetTypeDeclaration||# CodeSnippetTypeDeclaration(CompilationResult) : \l# generateCode(ClassFile) : \l}"
	 ]

	 EvaluationConstants [
		 label = "{EvaluationConstants||# CODE_SNIPPET_CLASS_NAME_PREFIX() : char\l# GLOBAL_VARS_CLASS_NAME_PREFIX() : char\l# PACKAGE_NAME() : char\l# CODE_SNIPPET_NAME() : char\l# ROOT_CLASS_NAME() : char\l# ROOT_FULL_CLASS_NAME() : String\l# SETRESULT_SELECTOR() : char\l# SETRESULT_ARGUMENTS() : char\l# ROOT_COMPOUND_NAME() : char\l# RUN_METHOD() : String\l# RESULT_VALUE_FIELD() : String\l# RESULT_TYPE_FIELD() : String\l# LOCAL_VAR_PREFIX() : char\l# DELEGATE_THIS() : char\l}"
	 ]

	 ForwardingRequestor [
		 label = "{ForwardingRequestor|# VAR_CLASS_COUNTER : int\l# CODE_SNIPPET_COUNTER : int\l# variables : GlobalVariable\l# variableCount : int\l# imports : char\l# packageName : char\l# varsChanged : boolean\l# installedVars : VariablesInfo\l# codeSnippetBinary : IBinaryType\l# lineSeparator : String\l# declaringTypeName : char\l# localVariableModifiers : int\l# localVariableTypeNames : char\l# localVariableNames : char\l# isStatic : boolean\l# isConstructorCall : boolean\l# hasErrors : boolean\l|# EvaluationContext() : \l# allVariables() : GlobalVariable\l# complete(char, int, SearchableEnvironment, CompletionRequestor, Map, IJavaProject, WorkingCopyOwner, IProgressMonitor) : \l# acceptClassFiles(ClassFile, char) : boolean\l# acceptProblem(CategorizedProblem, char, int) : \l# getFileName() : char\l# getContents() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# ignoreOptionalProblems() : boolean\l# deleteVariable(GlobalVariable) : \l# deployCodeSnippetClassIfNeeded(IRequestor) : \l# getBytes() : byte\l# getCompoundName() : char\l# evaluate(char, char, char, int, char, boolean, boolean, INameEnvironment, Map, IRequestor, IProblemFactory) : \l# acceptClassFiles(ClassFile, char) : boolean\l# acceptProblem(CategorizedProblem, char, int) : \l# evaluate(char, INameEnvironment, Map, IRequestor, IProblemFactory) : \l# evaluateImports(INameEnvironment, IRequestor, IProblemFactory) : \l# evaluateVariable(GlobalVariable, INameEnvironment, Map, IRequestor, IProblemFactory) : \l# evaluateVariables(INameEnvironment, Map, IRequestor, IProblemFactory) : \l# compare(Object, Object) : int\l# getCodeSnippetBytes() : byte\l# getCodeSnippetSource() : String\l# getImports() : char\l# getPackageName() : char\l# getRootCodeSnippetBinary() : IBinaryType\l# getVarClassName() : char\l# newVariable(char, char, char) : GlobalVariable\l# select(char, int, int, SearchableEnvironment, ISelectionRequestor, Map, WorkingCopyOwner) : \l# getFileName() : char\l# getContents() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# ignoreOptionalProblems() : boolean\l# setImports(char) : \l# setLineSeparator(String) : \l# setPackageName(char) : \l}"
	 ]

	 EvaluationResult [
		 label = "{EvaluationResult|# NO_PROBLEMS : CategorizedProblem\l# evaluationID : char\l# evaluationType : int\l# problems : CategorizedProblem\l# displayString : char\l# typeName : char\l+ T_VARIABLE : int\l+ T_CODE_SNIPPET : int\l+ T_IMPORT : int\l+ T_PACKAGE : int\l+ T_INTERNAL : int\l|# EvaluationResult(char, int, char, char) : \l# EvaluationResult(char, int, CategorizedProblem) : \l# addProblem(CategorizedProblem) : \l# getEvaluationID() : char\l# getEvaluationType() : int\l# getProblems() : CategorizedProblem\l# getValue() : Object\l# getValueDisplayString() : char\l# getValueTypeName() : char\l# hasErrors() : boolean\l# hasProblems() : boolean\l# hasValue() : boolean\l# hasWarnings() : boolean\l# toString() : String\l}"
	 ]

	 CompilerRequestor [
		 label = "{CompilerRequestor|# context : EvaluationContext\l# environment : INameEnvironment\l# options : Map\l# requestor : IRequestor\l# problemFactory : IProblemFactory\l# addEvaluationResultForCompilationProblem : null\l# hasErrors : boolean\l# getClassName : char\l# getSource : char\l|# Evaluator(EvaluationContext, INameEnvironment, Map, IRequestor, IProblemFactory, Map, CategorizedProblem, char) : \l# evaluationResultsForCompilationProblems(CompilationResult, char) : EvaluationResult\l# getClasses() : ClassFile\l# acceptResult(CompilationResult) : \l# getFileName() : char\l# getContents() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# ignoreOptionalProblems() : boolean\l# getCompiler(ICompilerRequestor) : Compiler\l}"
	 ]

	 GlobalVariable [
		 label = "{GlobalVariable|# typeName : char\l# name : char\l# initializer : char\l# declarationStart : int\l# initializerLineStart : int\l|# GlobalVariable(char, char, char) : \l# getInitializer() : char\l# getName() : char\l# getTypeName() : char\l# toString() : String\l}"
	 ]

	 InstallException [
		 label = "{InstallException|- serialVersionUID : long\l|# InstallException() : \l# InstallException(String) : \l}"
	 ]

	 IRequestor [
		 label = "{IRequestor||# acceptClassFiles(ClassFile, char) : boolean\l# acceptProblem(CategorizedProblem, char, int) : \l}"
	 ]

	 VariablesEvaluator [
		 label = "{VariablesEvaluator||# VariablesEvaluator(EvaluationContext, INameEnvironment, Map, IRequestor, IProblemFactory) : \l# addEvaluationResultForCompilationProblem(Map, CategorizedProblem, char) : \l# getClassName() : char\l# getCompiler(ICompilerRequestor) : Compiler\l# getPackageName() : char\l# getSource() : char\l# numberOfCRs(char) : int\l}"
	 ]

	 VariablesInfo [
		 label = "{VariablesInfo|# variables : GlobalVariable\l# variableCount : int\l# packageName : char\l# className : char\l# classFiles : ClassFile\l|# VariablesInfo(char, char, ClassFile, GlobalVariable, int) : \l# indexOf(GlobalVariable) : int\l# varNamed(char) : GlobalVariable\l}"
	 ]

	 ICodeSnippetRequestor [
		 label = "{ICodeSnippetRequestor||# LOCAL_VAR_PREFIX() : String\l# DELEGATE_THIS() : String\l# RUN_METHOD() : String\l# RESULT_VALUE_FIELD() : String\l# RESULT_TYPE_FIELD() : String\l# VARIABLE() : int\l# CODE_SNIPPET() : int\l# IMPORT() : int\l# PACKAGE() : int\l# INTERNAL() : int\l# acceptClassFiles(byte, String, String) : boolean\l# acceptProblem(IMarker, String, int) : \l}"
	 ]

	 IEvaluationContext [
		 label = "{IEvaluationContext||# allVariables() : IGlobalVariable\l# codeComplete(String, int, ICompletionRequestor) : \l# codeComplete(String, int, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(String, int, CompletionRequestor) : \l# codeComplete(String, int, CompletionRequestor, IProgressMonitor) : \l# codeComplete(String, int, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(String, int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# codeSelect(String, int, int) : IJavaElement\l# codeSelect(String, int, int, WorkingCopyOwner) : IJavaElement\l# deleteVariable(IGlobalVariable) : \l# evaluateCodeSnippet(String, String, String, int, IType, boolean, boolean, ICodeSnippetRequestor, IProgressMonitor) : \l# evaluateCodeSnippet(String, ICodeSnippetRequestor, IProgressMonitor) : \l# evaluateVariable(IGlobalVariable, ICodeSnippetRequestor, IProgressMonitor) : \l# getImports() : String\l# getPackageName() : String\l# getProject() : IJavaProject\l# newVariable(String, String, String) : IGlobalVariable\l# setImports(String) : \l# setPackageName(String) : \l# validateImports(ICodeSnippetRequestor) : \l# codeComplete(String, int, org) : \l}"
	 ]

	 IGlobalVariable [
		 label = "{IGlobalVariable||# getInitializer() : String\l# getName() : String\l# getTypeName() : String\l}"
	 ]

	 EvaluationContextWrapper [
		 label = "{EvaluationContextWrapper|# context : EvaluationContext\l# project : JavaProject\l|# EvaluationContextWrapper(EvaluationContext, JavaProject) : \l# allVariables() : IGlobalVariable\l# checkBuilderState() : \l# codeComplete(String, int, ICompletionRequestor) : \l# codeComplete(String, int, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(String, int, CompletionRequestor) : \l# codeComplete(String, int, CompletionRequestor, IProgressMonitor) : \l# codeComplete(String, int, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(String, int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# codeSelect(String, int, int) : IJavaElement\l# codeSelect(String, int, int, WorkingCopyOwner) : IJavaElement\l# deleteVariable(IGlobalVariable) : \l# evaluateCodeSnippet(String, String, String, int, IType, boolean, boolean, ICodeSnippetRequestor, IProgressMonitor) : \l# evaluateCodeSnippet(String, ICodeSnippetRequestor, IProgressMonitor) : \l# evaluateVariable(IGlobalVariable, ICodeSnippetRequestor, IProgressMonitor) : \l# getBuildNameEnvironment() : INameEnvironment\l# getVarClassName() : char\l# getImports() : String\l# getInfrastructureEvaluationContext() : EvaluationContext\l# getInfrastructureEvaluationRequestor(ICodeSnippetRequestor) : IRequestor\l# getPackageName() : String\l# getProblemFactory() : IProblemFactory\l# getProject() : IJavaProject\l# handleInstallException(InstallException) : \l# newVariable(String, String, String) : IGlobalVariable\l# setImports(String) : \l# setPackageName(String) : \l# validateImports(ICodeSnippetRequestor) : \l# codeComplete(String, int, org) : \l# acceptAnonymousType(char, char, char, char, char, char, int, int, int, int) : \l# acceptClass(char, char, char, int, int, int, int) : \l# acceptError(IProblem) : \l# acceptField(char, char, char, char, char, char, int, int, int, int) : \l# acceptInterface(char, char, char, int, int, int, int) : \l# acceptKeyword(char, int, int, int) : \l# acceptLabel(char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptMethodDeclaration(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptModifier(char, int, int, int) : \l# acceptPackage(char, char, int, int, int) : \l# acceptType(char, char, char, int, int, int) : \l# acceptVariableName(char, char, char, char, int, int, int) : \l}"
	 ]

	 GlobalVariableWrapper [
		 label = "{GlobalVariableWrapper|# variable : GlobalVariable\l|# GlobalVariableWrapper(GlobalVariable) : \l# getInitializer() : String\l# getName() : String\l# getTypeName() : String\l}"
	 ]

	 RequestorWrapper [
		 label = "{RequestorWrapper|# requestor : ICodeSnippetRequestor\l|# RequestorWrapper(ICodeSnippetRequestor) : \l# acceptClassFiles(ClassFile, char) : boolean\l# acceptProblem(CategorizedProblem, char, int) : \l}"
	 ]

	 CodeSnippetTest [
		 label = "{CodeSnippetTest||# CodeSnippetTest(String) : \l# getNoResultRequestor() : IRequestor\l# acceptResult(EvaluationResult) : \l# null() : \l# suite() : Test\l# getCompilerOptions() : Map\l# testCheckedException() : \l# testClass() : Class\l# testEmptyStatement() : \l# testEvaluateEmptyImport() : \l# testEvaluateExistingPackageAndNonExistingTypeImports() : \l# testEvaluateNonExistingPackageAndExistingTypeImports() : \l# testEvaluateNonExistingPackageImport() : \l# testEvaluateNonExistingTypeImport() : \l# testEvaluateValidPackageAndTypeImports() : \l# testEvaluateValidPackageImport() : \l# testEvaluateValidTypeImport() : \l# testFinallyError() : \l# testFinallyOneBlock() : \l# testFinallyTwoBlock() : \l# testFreeReturnAnonymous() : \l# testFreeReturnClassDeclaration() : \l# testFreeReturnExpression() : \l# testFreeReturnInteger() : \l# testFreeReturnLocalVar() : \l# testFreeReturnStatement() : \l# testImportPackage() : \l# testImportType() : \l# testImportTypeAndPackage() : \l# testInnerClassAnonymous() : \l# testInnerClassNamed() : \l# testPackage() : \l# testReturnDisplayStringBoolean() : \l# testReturnDisplayStringCharacter() : \l# testReturnDisplayStringDouble() : \l# testReturnDisplayStringEmptyCodeSnippet() : \l# testReturnDisplayStringFloat() : \l# testReturnDisplayStringInteger() : \l# testReturnDisplayStringLong() : \l# testReturnDisplayStringNoExplicitReturnedValue() : \l# testReturnDisplayStringObject() : \l# testReturnDisplayStringShort() : \l# testReturnDisplayStringString() : \l# testReturnDisplayStringVoid() : \l# testReturnTypeBoolean() : \l# testReturnTypeBooleanArray() : \l# testReturnTypeBooleanObject() : \l# testReturnTypeChar() : \l# testReturnTypeCharacterObject() : \l# testReturnTypeCharArray() : \l# testReturnTypeDouble() : \l# testReturnTypeDoubleArray() : \l# testReturnTypeDoubleObject() : \l# testReturnTypeEmptyCodeSnippet() : \l# testReturnTypeFloat() : \l# testReturnTypeFloatArray() : \l# testReturnTypeFloatObject() : \l# testReturnTypeInt() : \l# testReturnTypeIntegerObject() : \l# testReturnTypeLong() : \l# testReturnTypeLongArray() : \l# testReturnTypeLongObject() : \l# testReturnTypeNoExplicitReturnedValue() : \l# testReturnTypeObject() : \l# testReturnTypeObjectArray() : \l# testReturnTypeShort() : \l# testReturnTypeShortArray() : \l# testReturnTypeShortObject() : \l# testReturnTypesIntArray() : \l# testReturnTypeString() : \l# testReturnTypeStringArray() : \l# testReturnTypeVoid() : \l# testRunMethodInAnonymous() : \l# testRunMethodInAnonymous2() : \l# testRunMethodInAnonymous3() : \l# testRunMethodInAnonymous4() : \l# testRunMethodInAnonymous5() : \l# testRunMethodInAnonymous6() : \l# testRunMethodInAnonymous7() : \l# testRunMethodInAnonymous8() : \l# testFor89632() : \l# testBug345334() : \l# testDiamond() : \l}"
	 ]

	 DebugEvaluationSetup [
		 label = "{DebugEvaluationSetup|# vm : VirtualMachine\l|# DebugEvaluationSetup(long) : \l# setUp() : \l}"
	 ]

	 DebugRequestor [
		 label = "{DebugRequestor|# SOURCE_DIRECTORY : String\l+ jdiStackFrame : JDIStackFrame\l# jdiVM : VirtualMachine\l|# null() : \l# null() : \l# acceptClassFiles(org, char) : boolean\l# DebugEvaluationTest(String) : \l# setupSuite(Class) : Test\l# suite() : Test\l# testClass() : Class\l# compileAndDeploy(String, String) : \l# compileAndDeploy15(String, String) : \l# evaluate(JDIStackFrame, DebugRequestor, char) : \l# getCompilerOptions() : Map\l# initialize(CompilerTestSetup) : \l# removeTempClass(String) : \l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# _test012() : \l# _test013() : \l# _test014() : \l# _test015() : \l# test016() : \l# test017() : \l# test018() : \l# test019() : \l# test020() : \l# test021() : \l# test022() : \l# test023() : \l# test024() : \l# test025() : \l# test026() : \l# test027() : \l# test028() : \l# test029() : \l# test030() : \l# test031() : \l# test032() : \l# test033() : \l# test034() : \l# test035() : \l# test036() : \l# test037() : \l# test038() : \l# test039() : \l# test040() : \l# test041() : \l# test042() : \l# test043() : \l# test044() : \l# test045() : \l# test046() : \l# test047() : \l# test048() : \l# test049() : \l# test050() : \l# test051() : \l# test052() : \l# test053() : \l# test054() : \l# test055() : \l# test056() : \l# test057() : \l# test058() : \l# test059() : \l# test060() : \l# test061() : \l# test062() : \l# testNegative001() : \l# testNegative002() : \l# testNegative003() : \l# testNegative004() : \l# test063() : \l# test065() : \l# test066() : \l# test067() : \l# test068() : \l# test069() : \l# testNegative005() : \l}"
	 ]

	 EvaluationSetup [
		 label = "{EvaluationSetup|+ EVAL_DIRECTORY : String\l+ JRE_PATH : String\l# context : EvaluationContext\l# target : TargetInterface\l# launchedVM : LocalVirtualMachine\l# env : INameEnvironment\l|# EvaluationSetup(long) : \l# setUp() : \l# startReader(String, InputStream, PrintStream) : \l# run() : \l# tearDown() : \l}"
	 ]

	 InstallRequestor [
		 label = "{InstallRequestor|+ resultIndex : int\l+ results : EvaluationResult\l# classPath : String\l+ context : EvaluationContext\l# env : INameEnvironment\l# launchedVM : LocalVirtualMachine\l# target : TargetInterface\l# collectedProblems : ArrayList\l# gotDisplayString : boolean\l# count : int\l|# null() : \l# acceptClassFiles(ClassFile, char) : boolean\l# acceptProblem(CategorizedProblem, char, int) : \l# acceptResult(EvaluationResult) : \l# EvaluationTest(String) : \l# setupSuite(Class) : Test\l# suite(Class) : Test\l# assertEquals(String, char, char) : \l# buildCharArray(String) : char\l# equals(CategorizedProblem, CategorizedProblem) : boolean\l# evaluateWithExpectedDisplayString(Map, char, char) : \l# evaluateWithExpectedDisplayString(char, char) : \l# evaluateWithExpectedImportProblem(char, char, CategorizedProblem) : \l# evaluateWithExpectedImportProblem(char, char, Map, CategorizedProblem) : \l# evaluateWithExpectedProblem(char, CategorizedProblem) : \l# evaluateWithExpectedProblem(char, String) : \l# evaluateWithExpectedProblem(GlobalVariable, CategorizedProblem) : \l# evaluateWithExpectedType(char, char) : \l# evaluateWithExpectedValue(char, char, char) : \l# evaluateWithExpectedValue(GlobalVariable, char, char) : \l# evaluateWithExpectedWarningAndDisplayString(char, CategorizedProblem, char) : \l# acceptResult(EvaluationResult) : \l# failNotEquals(String, char, char) : \l# getCompilerOptions() : Map\l# getEnv() : INameEnvironment\l# getProblemFactory() : IProblemFactory\l# initialize(CompilerTestSetup) : \l# installVariables(int) : \l# acceptResult(EvaluationResult) : \l# isJRockitVM() : boolean\l# newProblem(int, int, int, int, int) : DefaultProblem\l# resetEnv() : \l# stop() : \l}"
	 ]

	 JDIStackFrame [
		 label = "{JDIStackFrame|# jdiVM : VirtualMachine\l# jdiThread : ThreadReference\l# userCode : String\l# breakpointClassName : String\l# breakpointMethodName : String\l# breakpointLine : int\l# timeout : long\l|# JDIStackFrame(VirtualMachine, DebugEvaluationTest, String) : \l# JDIStackFrame(VirtualMachine, DebugEvaluationTest, String, String, String, int) : \l# JDIStackFrame(VirtualMachine, DebugEvaluationTest, String, String, String, int, long) : \l# declaringTypeName() : char\l# getDebuggedThread(DebugEvaluationTest) : ThreadReference\l# getStackFrame() : StackFrame\l# isConstructorCall() : boolean\l# isStatic() : boolean\l# localVariableModifiers() : int\l# localVariableNames() : char\l# localVariableTypeNames() : char\l# run(String) : boolean\l}"
	 ]

	 NegativeCodeSnippetTest [
		 label = "{NegativeCodeSnippetTest||# NegativeCodeSnippetTest(String) : \l# suite() : Test\l# testChangePackage() : \l# testClass() : Class\l# testExpressionInInnerClass() : \l# testExtraClosingCurlyBracket() : \l# testExtraOpenRoundBracket() : \l# testExtraSemiColonInExpression() : \l# testInvalidField() : \l# testInvalidImport() : \l# testInvalidUseOfThisInSnippet() : \l# testInvalidUseOfThisInSnippet2() : \l# testMissingClosingRoundBracket() : \l# testMissingDoubleQuote() : \l# testNonLastExpressionStatement() : \l# testProblemInExpression() : \l# testProblemInExpression2() : \l# testProblemInInnerClass() : \l# testProblemInPreviousStatement() : \l# testProblemInReturnStatement() : \l# testRemoveImport() : \l# testRemoveVariable() : \l# testUnreachableExpression() : \l# testUnusedImport() : \l# testWarning() : \l}"
	 ]

	 NegativeVariableTest [
		 label = "{NegativeVariableTest||# NegativeVariableTest(String) : \l# suite() : Test\l# testClass() : Class\l# testInitializerProblem() : \l# _testInvalidName() : \l# testUnknownType() : \l}"
	 ]

	 NoPbRequestor [
		 label = "{NoPbRequestor||# SanityTestEvaluationContext(String) : \l# suite() : Test\l# testAllVariables() : \l# testClass() : Class\l# testEvaluate() : \l# testEvaluateImports() : \l# acceptResult(EvaluationResult) : \l# testEvaluateVariable() : \l# acceptResult(EvaluationResult) : \l# testEvaluateVariables() : \l# testGetSetImports() : \l# testGetSetPackageName() : \l# testNewDeleteVariable() : \l}"
	 ]

	 SanityTestEvaluationResult [
		 label = "{SanityTestEvaluationResult|# result : EvaluationResult\l|# SanityTestEvaluationResult(String) : \l# setUp() : \l# acceptResult(EvaluationResult) : \l# suite() : Test\l# testClass() : Class\l# testGetEvaluationType() : \l# testGetProblems() : \l# testGetValue() : \l# testGetValueDisplayString() : \l# testGetValueTypeName() : \l# testHasErrors() : \l# testHasProblems() : \l# testHasValue() : \l# testHasWarnings() : \l}"
	 ]

	 SimpleCodeSnippetTest [
		 label = "{SimpleCodeSnippetTest||# getCodeSnippetSource() : char\l# main(String) : \l# runCodeS
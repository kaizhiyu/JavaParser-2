digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 StateInfo [
		 label = "{StateInfo|- DEBUG : boolean\l- DEBUG_PARSECHECK : boolean\l- STACK_INCREMENT : int\l- BEFORE_CODE : int\l- INSERTION_CODE : int\l- INVALID_CODE : int\l- SUBSTITUTION_CODE : int\l- DELETION_CODE : int\l- MERGE_CODE : int\l- MISPLACED_CODE : int\l- SCOPE_CODE : int\l- SECONDARY_CODE : int\l- EOF_CODE : int\l- BUFF_UBOUND : int\l- BUFF_SIZE : int\l- MAX_DISTANCE : int\l- MIN_DISTANCE : int\l- options : CompilerOptions\l- lexStream : LexStream\l- errorToken : int\l- errorTokenStart : int\l- currentToken : int\l- stackLength : int\l- stateStackTop : int\l- stack : int\l- locationStack : int\l- locationStartStack : int\l- tempStackTop : int\l- tempStack : int\l- prevStackTop : int\l- prevStack : int\l- nextStackTop : int\l- nextStack : int\l- scopeStackTop : int\l- scopeIndex : int\l- scopePosition : int\l# list : int\l# buffer : int\l- NIL : int\l# stateSeen : int\l# statePoolTop : int\l# statePool : StateInfo\l- parser : Parser\l- recoveryScanner : RecoveryScanner\l- reportProblem : boolean\l+ symbol : int\l+ location : int\l+ distance : int\l+ misspellIndex : int\l+ code : int\l+ bufferPosition : int\l+ symbol : int\l+ code : int\l+ distance : int\l+ bufferPosition : int\l+ stackPosition : int\l+ numDeletions : int\l+ symbol : int\l# recoveryOnNextStack : boolean\l# state : int\l# next : int\l|# null() : \l# RepairCandidate() : \l# null() : \l# PrimaryRepairInfo() : \l# copy() : PrimaryRepairInfo\l# null() : \l# null() : \l# StateInfo(int, int) : \l# DiagnoseParser(Parser, int, int, int, CompilerOptions) : \l# DiagnoseParser(Parser, int, int, int, int, int, int, CompilerOptions) : \l# problemReporter() : ProblemReporter\l# reallocateStacks() : \l# diagnoseParse(boolean) : \l# displayEscapeCharacters(char, int, int) : char\l# errorRecovery(int, boolean) : RepairCandidate\l# primaryPhase(int) : RepairCandidate\l# mergeCandidate(int, int) : int\l# checkPrimaryDistance(int, int, PrimaryRepairInfo) : PrimaryRepairInfo\l# primaryDiagnosis(PrimaryRepairInfo) : RepairCandidate\l# getTermIndex(int, int, int, int) : int\l# getNtermIndex(int, int, int) : int\l# misspell(int, int) : int\l# scopeTrial(int, int, PrimaryRepairInfo) : PrimaryRepairInfo\l# scopeTrialCheck(int, int, PrimaryRepairInfo, int) : \l# secondaryCheck(int, int, int, int) : boolean\l# secondaryPhase(int) : RepairCandidate\l# misplacementRecovery(int, int, int, SecondaryRepairInfo, boolean) : SecondaryRepairInfo\l# secondaryRecovery(int, int, int, SecondaryRepairInfo, boolean) : SecondaryRepairInfo\l# secondaryDiagnosis(SecondaryRepairInfo) : \l# parseCheck(int, int, int, int) : int\l# reportError(int, int, int, int) : \l# reportError(int, int, int, int, int) : \l# reportPrimaryError(int, int, int, int) : \l# reportSecondaryError(int, int, int, int, int) : \l# getNTermTemplate(int) : int\l# toString() : String\l# atConflictScenario(int) : boolean\l}"
	 ]

	 Token [
		 label = "{Token|+ IS_AFTER_JUMP : int\l+ LBRACE_MISSING : int\l# kind : int\l# name : char\l# start : int\l# end : int\l# line : int\l# flags : int\l- tokenCacheIndex : int\l- tokenCacheEOFIndex : int\l- tokenCache : Token\l- currentIndex : int\l- scanner : Scanner\l- intervalStartToSkip : int\l- intervalEndToSkip : int\l- intervalFlagsToSkip : int\l- previousInterval : int\l- currentInterval : int\l- awaitingColonColon : boolean\l|# null() : \l# toString() : String\l# LexStream(int, Scanner, int, int, int, int, int, int) : \l# readTokenFromScanner() : \l# token(int) : Token\l# getToken() : int\l# previous(int) : int\l# next(int) : int\l# afterEol(int) : boolean\l# reset() : \l# reset(int) : \l# badtoken() : int\l# kind(int) : int\l# name(int) : char\l# line(int) : int\l# start(int) : int\l# end(int) : int\l# flags(int) : int\l# isInsideStream(int) : boolean\l# toString() : String\l# awaitingColonColon() : boolean\l}"
	 ]

	 RangeResult [
		 label = "{RangeResult|+ NO_FLAG : int\l+ LBRACE_MISSING : int\l+ IGNORE : int\l- INITIAL_SIZE : int\l# pos : int\l# intervalStarts : int\l# intervalEnds : int\l# intervalFlags : int\l|# null() : \l# RangeResult() : \l# addInterval(int, int) : \l# addInterval(int, int, int) : \l# getRanges() : int\l# quickSort(int, int, int, int, int) : \l# compare(int, int) : int\l# containsErrorInSignature(AbstractMethodDeclaration) : boolean\l# computeDietRange(TypeDeclaration) : int\l# computeDietRange0(TypeDeclaration, RangeResult) : \l# containsIgnoredBody(AbstractMethodDeclaration) : boolean\l}"
	 ]

	 StateInfo [
		 label = "{StateInfo|- DEBUG : boolean\l- DEBUG_PARSECHECK : boolean\l- EMPTY_STRING : String\l- STACK_INCREMENT : int\l- BEFORE_CODE : int\l- INSERTION_CODE : int\l- INVALID_CODE : int\l- SUBSTITUTION_CODE : int\l- DELETION_CODE : int\l- MERGE_CODE : int\l- MISPLACED_CODE : int\l- SCOPE_CODE : int\l- SECONDARY_CODE : int\l- EOF_CODE : int\l- BUFF_UBOUND : int\l- BUFF_SIZE : int\l- MAX_DISTANCE : int\l- MIN_DISTANCE : int\l- options : CompilerOptions\l- lexStream : LexStream\l- errorToken : int\l- errorTokenStart : int\l- currentToken : int\l- stackLength : int\l- stateStackTop : int\l- stack : int\l- locationStack : int\l- locationStartStack : int\l- tempStackTop : int\l- tempStack : int\l- prevStackTop : int\l- prevStack : int\l- nextStackTop : int\l- nextStack : int\l- scopeStackTop : int\l- scopeIndex : int\l- scopePosition : int\l# list : int\l# buffer : int\l- NIL : int\l# stateSeen : int\l# statePoolTop : int\l# statePool : StateInfo\l- parser : Parser\l+ symbol : int\l+ location : int\l+ distance : int\l+ misspellIndex : int\l+ code : int\l+ bufferPosition : int\l+ symbol : int\l+ code : int\l+ distance : int\l+ bufferPosition : int\l+ stackPosition : int\l+ numDeletions : int\l+ symbol : int\l# recoveryOnNextStack : boolean\l# state : int\l# next : int\l|# null() : \l# RepairCandidate() : \l# null() : \l# PrimaryRepairInfo() : \l# copy() : PrimaryRepairInfo\l# null() : \l# null() : \l# StateInfo(int, int) : \l# DiagnoseParser(Parser, int, int, int, CompilerOptions) : \l# DiagnoseParser(Parser, int, int, int, int, int, int, CompilerOptions) : \l# problemReporter() : ProblemReporter\l# reallocateStacks() : \l# diagnoseParse() : \l# errorRecovery(int, boolean) : RepairCandidate\l# primaryPhase(int) : RepairCandidate\l# mergeCandidate(int, int) : int\l# checkPrimaryDistance(int, int, PrimaryRepairInfo) : PrimaryRepairInfo\l# primaryDiagnosis(PrimaryRepairInfo) : RepairCandidate\l# getTermIndex(int, int, int, int) : int\l# getNtermIndex(int, int, int) : int\l# isBetterSymbol(int, int) : boolean\l# misspell(int, int) : int\l# scopeTrial(int, int, PrimaryRepairInfo) : PrimaryRepairInfo\l# scopeTrialCheck(int, int, PrimaryRepairInfo, int) : \l# secondaryCheck(int, int, int, int) : boolean\l# secondaryPhase(int) : RepairCandidate\l# misplacementRecovery(int, int, int, SecondaryRepairInfo, boolean) : SecondaryRepairInfo\l# secondaryRecovery(int, int, int, SecondaryRepairInfo, boolean) : SecondaryRepairInfo\l# secondaryDiagnosis(SecondaryRepairInfo) : \l# parseCheck(int, int, int, int) : int\l# reportError(int, int, int, int) : \l# reportError(int, int, int, int, int) : \l# reportPrimaryError(int, int, int, int) : \l# reportSecondaryError(int, int, int, int, int) : \l# toString() : String\l}"
	 ]

	 Token [
		 label = "{Token|+ IS_AFTER_JUMP : int\l+ LBRACE_MISSING : int\l# kind : int\l# name : char\l# start : int\l# end : int\l# line : int\l# flags : int\l- tokenCacheIndex : int\l- tokenCacheEOFIndex : int\l- tokenCache : Token\l- currentIndex : int\l- scanner : Scanner\l- intervalStartToSkip : int\l- intervalEndToSkip : int\l- intervalFlagsToSkip : int\l- previousInterval : int\l|# null() : \l# toString() : String\l# LexStream(int, Scanner, int, int, int, int, int, int) : \l# readTokenFromScanner() : \l# token(int) : Token\l# getToken() : int\l# previous(int) : int\l# next(int) : int\l# afterEol(int) : boolean\l# reset() : \l# reset(int) : \l# badtoken() : int\l# kind(int) : int\l# name(int) : char\l# line(int) : int\l# start(int) : in
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AbstractTypeDeclaration [
		 label = "{AbstractTypeDeclaration|# typeName : SimpleName\l# bodyDeclarations : ASTNode\l# internalBodyDeclarationsProperty : ChildListPropertyDescriptor\l# internalNameProperty : ChildPropertyDescriptor\l# internalResolveBinding : ITypeBinding\l|# getBodyDeclarationsProperty() : ChildListPropertyDescriptor\l# getNameProperty() : ChildPropertyDescriptor\l# internalBodyDeclarationPropertyFactory(Class) : ChildListPropertyDescriptor\l# internalNamePropertyFactory(Class) : ChildPropertyDescriptor\l# AbstractTypeDeclaration(AST) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# bodyDeclarations() : List\l# isPackageMemberTypeDeclaration() : boolean\l# isMemberTypeDeclaration() : boolean\l# isLocalTypeDeclaration() : boolean\l# resolveBinding() : ITypeBinding\l# memSize() : int\l}"
	 ]

	 AnnotatableType [
		 label = "{AnnotatableType|# annotations : ASTNode\l# internalAnnotationsProperty : ChildListPropertyDescriptor\l|# internalAnnotationsPropertyFactory(Class) : ChildListPropertyDescriptor\l# getAnnotationsProperty() : ChildListPropertyDescriptor\l# AnnotatableType(AST) : \l# annotations() : List\l}"
	 ]

	 Annotation [
		 label = "{Annotation|# internalTypeNameProperty : ChildPropertyDescriptor\l# typeName : Name\l|# getTypeNameProperty() : ChildPropertyDescriptor\l# internalTypeNamePropertyFactory(Class) : ChildPropertyDescriptor\l# Annotation(AST) : \l# isModifier() : boolean\l# isAnnotation() : boolean\l# getTypeName() : Name\l# setTypeName(Name) : \l# isNormalAnnotation() : boolean\l# isMarkerAnnotation() : boolean\l# isSingleMemberAnnotation() : boolean\l# memSize() : int\l# resolveAnnotationBinding() : IAnnotationBinding\l}"
	 ]

	 AnnotationBinding [
		 label = "{AnnotationBinding|# NoAnnotations : AnnotationBinding\l# NoAnnotationsOnDimensions : AnnotationBinding\l- binding : org\l- bindingResolver : BindingResolver\l- key : String\l|# AnnotationBinding(org, BindingResolver) : \l# getAnnotations() : IAnnotationBinding\l# getAnnotationType() : ITypeBinding\l# getDeclaredMemberValuePairs() : IMemberValuePairBinding\l# getAllMemberValuePairs() : IMemberValuePairBinding\l# getJavaElement() : IJavaElement\l# getKey() : String\l# getRecipientKey() : String\l# getKind() : int\l# getModifiers() : int\l# getName() : String\l# isDeprecated() : boolean\l# isEqualTo(IBinding) : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# toString() : String\l}"
	 ]

	 AnnotationTypeDeclaration [
		 label = "{AnnotationTypeDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ BODY_DECLARATIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# AnnotationTypeDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# internalNameProperty() : ChildPropertyDescriptor\l# internalBodyDeclarationsProperty() : ChildListPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# internalResolveBinding() : ITypeBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 AnnotationTypeMemberDeclaration [
		 label = "{AnnotationTypeMemberDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ DEFAULT_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- memberType : Type\l- memberName : SimpleName\l- optionalDefaultValue : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# AnnotationTypeMemberDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# getDefault() : Expression\l# setDefault(Expression) : \l# resolveBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 AnonymousClassDeclaration [
		 label = "{AnonymousClassDeclaration|+ BODY_DECLARATIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- bodyDeclarations : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# AnonymousClassDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# bodyDeclarations() : List\l# resolveBinding() : ITypeBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ArrayAccess [
		 label = "{ArrayAccess|+ ARRAY_PROPERTY : ChildPropertyDescriptor\l+ INDEX_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- arrayExpression : Expression\l- indexExpression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ArrayAccess(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getArray() : Expression\l# setArray(Expression) : \l# getIndex() : Expression\l# setIndex(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ArrayCreation [
		 label = "{ArrayCreation|+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ DIMENSIONS_PROPERTY : ChildListPropertyDescriptor\l+ INITIALIZER_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- arrayType : ArrayType\l- dimensions : ASTNode\l- optionalInitializer : ArrayInitializer\l|# null() : \l# propertyDescriptors(int) : List\l# ArrayCreation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : ArrayType\l# setType(ArrayType) : \l# dimensions() : List\l# getInitializer() : ArrayInitializer\l# setInitializer(ArrayInitializer) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ArrayInitializer [
		 label = "{ArrayInitializer|+ EXPRESSIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expressions : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# ArrayInitializer(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# expressions() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ArrayType [
		 label = "{ArrayType|+ COMPONENT_TYPE_PROPERTY : ChildPropertyDescriptor\l+ ELEMENT_TYPE_PROPERTY : ChildPropertyDescriptor\l+ DIMENSIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- type : Type\l- dimensions : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# ArrayType(AST) : \l# ArrayType(AST, int) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getComponentType() : Type\l# internalGetType(ChildPropertyDescriptor) : Type\l# setComponentType(Type) : \l# internalSetType(Type, ChildPropertyDescriptor) : \l# getElementType() : Type\l# setElementType(Type) : \l# getDimensions() : int\l# dimensions() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 AssertStatement [
		 label = "{AssertStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ MESSAGE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- optionalMessageExpression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# AssertStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getMessage() : Expression\l# setMessage(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Operator [
		 label = "{Operator|- op : String\l+ ASSIGN : Operator\l+ PLUS_ASSIGN : Operator\l+ MINUS_ASSIGN : Operator\l+ TIMES_ASSIGN : Operator\l+ DIVIDE_ASSIGN : Operator\l+ BIT_AND_ASSIGN : Operator\l+ BIT_OR_ASSIGN : Operator\l+ BIT_XOR_ASSIGN : Operator\l+ REMAINDER_ASSIGN : Operator\l+ LEFT_SHIFT_ASSIGN : Operator\l+ RIGHT_SHIFT_SIGNED_ASSIGN : Operator\l+ RIGHT_SHIFT_UNSIGNED_ASSIGN : Operator\l- CODES : Map\l+ LEFT_HAND_SIDE_PROPERTY : ChildPropertyDescriptor\l+ OPERATOR_PROPERTY : SimplePropertyDescriptor\l+ RIGHT_HAND_SIDE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- assignmentOperator : Assignment\l- leftHandSide : Expression\l- rightHandSide : Expression\l|# null() : \l# Operator(String) : \l# toString() : String\l# toOperator(String) : Operator\l# null() : \l# null() : \l# propertyDescriptors(int) : List\l# Assignment(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getOperator() : Assignment\l# setOperator(Assignment) : \l# getLeftHandSide() : Expression\l# setLeftHandSide(Expression) : \l# getRightHandSide() : Expression\l# setRightHandSide(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 AST [
		 label = "{AST|- AST_CLASS : Class\l+ JLS2 : int\l# JLS2_INTERNAL : int\l+ JLS3 : int\l# JLS3_INTERNAL : int\l+ JLS4 : int\l# JLS4_INTERNAL : int\l+ JLS8 : int\l# RESOLVED_BINDINGS : int\l# apiLevel : int\l- bits : int\l- defaultNodeFlag : int\l- disableEvents : int\l- eventHandler : NodeEventHandler\l- internalASTLock : Object\l- modificationCount : long\l- originalModificationCount : long\l- resolver : BindingResolver\l# rewriter : InternalASTRewrite\l# scanner : Scanner\l- THIS_AST : Object\l|# convertCompilationUnit(int, org, char, Map, boolean, org, int, IProgressMonitor) : CompilationUnit\l# convertCompilationUnit(int, org, Map, boolean, org, int, IProgressMonitor) : CompilationUnit\l# newAST(int) : AST\l# parseCompilationUnit(char) : CompilationUnit\l# parseCompilationUnit(char, String, IJavaProject) : CompilationUnit\l# parseCompilationUnit(IClassFile, boolean) : CompilationUnit\l# parseCompilationUnit(ICompilationUnit, boolean) : CompilationUnit\l# AST() : \l# AST(int) : \l# AST(Map) : \l# apiLevel() : int\l# createInstance(Class) : ASTNode\l# createInstance(int) : ASTNode\l# disableEvents() : \l# getBindingResolver() : BindingResolver\l# getDefaultNodeFlag() : int\l# getEventHandler() : NodeEventHandler\l# hasBindingsRecovery() : boolean\l# hasResolvedBindings() : boolean\l# hasStatementsRecovery() : boolean\l# internalNewName(String) : Name\l# modificationCount() : long\l# modifying() : \l# setArrayComponentType(ArrayType, Type) : \l# newAnnotationTypeDeclaration() : AnnotationTypeDeclaration\l# newAnnotationTypeMemberDeclaration() : AnnotationTypeMemberDeclaration\l# newAnonymousClassDeclaration() : AnonymousClassDeclaration\l# newArrayAccess() : ArrayAccess\l# newArrayCreation() : ArrayCreation\l# newArrayInitializer() : ArrayInitializer\l# newArrayType(Type) : ArrayType\l# newArrayType(Type, int) : ArrayType\l# newAssertStatement() : AssertStatement\l# newAssignment() : Assignment\l# newBlock() : Block\l# newBlockComment() : BlockComment\l# newBooleanLiteral(boolean) : BooleanLiteral\l# newBreakStatement() : BreakStatement\l# newCastExpression() : CastExpression\l# newCatchClause() : CatchClause\l# newCharacterLiteral() : CharacterLiteral\l# newClassInstanceCreation() : ClassInstanceCreation\l# newCompilationUnit() : CompilationUnit\l# newConditionalExpression() : ConditionalExpression\l# newConstructorInvocation() : ConstructorInvocation\l# newContinueStatement() : ContinueStatement\l# newCreationReference() : CreationReference\l# newDoStatement() : DoStatement\l# newEmptyStatement() : EmptyStatement\l# newEnhancedForStatement() : EnhancedForStatement\l# newEnumConstantDeclaration() : EnumConstantDeclaration\l# newEnumDeclaration() : EnumDeclaration\l# newExpressionMethodReference() : ExpressionMethodReference\l# newExpressionStatement(Expression) : ExpressionStatement\l# newDimension() : Dimension\l# newFieldAccess() : FieldAccess\l# newFieldDeclaration(VariableDeclarationFragment) : FieldDeclaration\l# newForStatement() : ForStatement\l# newIfStatement() : IfStatement\l# newImportDeclaration() : ImportDeclaration\l# newInfixExpression() : InfixExpression\l# newInitializer() : Initializer\l# newInstanceofExpression() : InstanceofExpression\l# newJavadoc() : Javadoc\l# newLabeledStatement() : LabeledStatement\l# newLambdaExpression() : LambdaExpression\l# newLineComment() : LineComment\l# newMarkerAnnotation() : MarkerAnnotation\l# newMemberRef() : MemberRef\l# newMemberValuePair() : MemberValuePair\l# newMethodDeclaration() : MethodDeclaration\l# newMethodInvocation() : MethodInvocation\l# newMethodRef() : MethodRef\l# newMethodRefParameter() : MethodRefParameter\l# newModifier(Modifier) : Modifier\l# newModifiers(int) : List\l# newName(String) : Name\l# newName(String) : Name\l# newNameQualifiedType(Name, SimpleName) : NameQualifiedType\l# newNormalAnnotation() : NormalAnnotation\l# newNullLiteral() : NullLiteral\l# newNumberLiteral() : NumberLiteral\l# newNumberLiteral(String) : NumberLiteral\l# newPackageDeclaration() : PackageDeclaration\l# newParameterizedType(Type) : ParameterizedType\l# newParenthesizedExpression() : ParenthesizedExpression\l# newPostfixExpression() : PostfixExpression\l# newPrefixExpression() : PrefixExpression\l# newPrimitiveType(PrimitiveType) : PrimitiveType\l# newQualifiedName(Name, SimpleName) : QualifiedName\l# newQualifiedType(Type, SimpleName) : QualifiedType\l# newReturnStatement() : ReturnStatement\l# newSimpleName(String) : SimpleName\l# newSimpleType(Name) : SimpleType\l# newSingleMemberAnnotation() : SingleMemberAnnotation\l# newSingleVariableDeclaration() : SingleVariableDeclaration\l# newStringLiteral() : StringLiteral\l# newSuperConstructorInvocation() : SuperConstructorInvocation\l# newSuperFieldAccess() : SuperFieldAccess\l# newSuperMethodInvocation() : SuperMethodInvocation\l# newSuperMethodReference() : SuperMethodReference\l# newSwitchCase() : SwitchCase\l# newSwitchStatement() : SwitchStatement\l# newSynchronizedStatement() : SynchronizedStatement\l# newTagElement() : TagElement\l# newTextElement() : TextElement\l# newThisExpression() : ThisExpression\l# newThrowStatement() : ThrowStatement\l# newTryStatement() : TryStatement\l# newTypeDeclaration() : TypeDeclaration\l# newTypeDeclarationStatement(AbstractTypeDeclaration) : TypeDeclarationStatement\l# newTypeDeclarationStatement(TypeDeclaration) : TypeDeclarationStatement\l# newTypeLiteral() : TypeLiteral\l# newTypeMethodReference() : TypeMethodReference\l# newTypeParameter() : TypeParameter\l# newUnionType() : UnionType\l# newIntersectionType() : IntersectionType\l# newVariableDeclarationExpression(VariableDeclarationFragment) : VariableDeclarationExpression\l# newVariableDeclarationFragment() : VariableDeclarationFragment\l# newVariableDeclarationStatement(VariableDeclarationFragment) : VariableDeclarationStatement\l# newWhileStatement() : WhileStatement\l# newWildcardType() : WildcardType\l# postAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postCloneNodeEvent(ASTNode, ASTNode) : \l# postRemoveChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postReplaceChildEvent(ASTNode, ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# preAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preCloneNodeEvent(ASTNode) : \l# preRemoveChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preReplaceChildEvent(ASTNode, ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# recordModifications(CompilationUnit) : \l# reenableEvents() : \l# resolveWellKnownType(String) : ITypeBinding\l# rewrite(IDocument, Map) : TextEdit\l# setBindingResolver(BindingResolver) : \l# setDefaultNodeFlag(int) : \l# setEventHandler(NodeEventHandler) : \l# setFlag(int) : \l# setOriginalModificationCount(long) : \l# supportedOnlyIn2() : \l# unsupportedIn2() : \l}"
	 ]

	 ASTConverter [
		 label = "{ASTConverter|# ast : AST\l- referenceContext : ASTNode\l# commentsTable : Comment\l# compilationUnitSource : char\l# compilationUnitSourceLength : int\l# docParser : DocCommentParser\l# insideComments : boolean\l# monitor : IProgressMonitor\l# pendingNameScopeResolution : Set\l# pendingThisExpressionScopeResolution : Set\l# resolveBindings : boolean\l# scanner : Scanner\l- commentMapper : DefaultCommentMapper\l|# ASTConverter(Map, boolean, IProgressMonitor) : \l# adjustSourcePositionsForParent(org) : \l# buildBodyDeclarations(org, AbstractTypeDeclaration, boolean) : \l# buildBodyDeclarations(org, EnumDeclaration) : \l# buildBodyDeclarations(org, AnonymousClassDeclaration) : \l# checkAndSetMalformed(ASTNode, ASTNode) : \l# internalSetExtraDimensions(SingleVariableDeclaration, int) : \l# internalSetExtraDimensions(VariableDeclarationFragment, int) : \l# internalSetExtraDimensions(MethodDeclaration, int) : \l# internalThownExceptions(MethodDeclaration) : List\l# buildCommentsTable(CompilationUnit, int) : \l# checkAndAddMultipleFieldDeclaration(org, int, List) : \l# checkAndAddMultipleLocalDeclaration(org, int, List) : \l# checkCanceled() : \l# completeRecord(ArrayType, org) : \l# componentType(ArrayType) : Type\l# convert(boolean, org) : ASTNode\l# convert(org) : ClassInstanceCreation\l# convert(org) : Expression\l# convertToAnnotationDeclaration(org) : AnnotationTypeDeclaration\l# convert(org) : ASTNode\l# convertAndSetReceiver(AbstractMethodDeclaration, MethodDeclaration) : \l# convert(org) : SingleVariableDeclaration\l# convert(org) : Annotation\l# convert(org) : ArrayCreation\l# convert(org) : ArrayInitializer\l# convert(org) : ArrayAccess\l# convert(org) : AssertStatement\l# convert(org) : Assignment\l# convert(org) : TypeDeclaration\l# convert(org) : Expression\l# convert(org) : Block\l# convert(org) : BreakStatement\l# convert(org) : SwitchCase\l# convert(org) : CastExpression\l# convert(org) : CharacterLiteral\l# convert(org) : Expression\l# convert(org, char) : CompilationUnit\l# convert(org) : Assignment\l# convert(org) : ConditionalExpression\l# convert(org) : ContinueStatement\l# convert(org) : DoStatement\l# convert(org) : NumberLiteral\l# convert(org) : EmptyStatement\l# convert(org) : EnumConstantDeclaration\l# convert(org) : Expression\l# convert(org) : Statement\l# convert(org) : Expression\l# convert(org) : StringLiteral\l# convert(org) : BooleanLiteral\l# convert(org) : Expression\l# convert(org) : NumberLiteral\l# convert(ForeachStatement) : Statement\l# convert(org) : ForStatement\l# convert(org) : IfStatement\l# convert(org) : InstanceofExpression\l# convert(org) : NumberLiteral\l# convert(org) : NumberLiteral\l# convert(org, BodyDeclaration) : \l# convert(org, PackageDeclaration) : \l# convert(org) : LabeledStatement\l# convert(org) : NumberLiteral\l# convert(org) : NumberLiteral\l# convert(MessageSend) : Expression\l# convert(org) : Expression\l# convert(org) : MarkerAnnotation\l# convert(org) : MemberValuePair\l# convert(org) : Name\l# convert(StringLiteralConcatenation) : InfixExpression\l# convert(org) : NormalAnnotation\l# convert(org) : NullLiteral\l# convert(org) : Expression\l# setInfixSourcePositions(InfixExpression, int) : \l# convert(org) : PostfixExpression\l# convert(org) : PrefixExpression\l# convert(org) : Expression\l# convert(org) : Name\l# convert(org) : Name\l# convert(org) : ThisExpression\l# convert(org) : Expression\l# convert(org) : Expression\l# convert(org) : ReturnStatement\l# convert(org) : SingleMemberAnnotation\l# convert(org) : SimpleName\l# convert(org) : Statement\l# convert(org) : Expression\l# convert(org) : SwitchStatement\l# convert(org) : SynchronizedStatement\l# convert(org) : Expression\l# convert(org) : ThrowStatement\l# convert(org) : BooleanLiteral\l# convert(org) : TryStatement\l# convert(org) : ASTNode\l# convert(org) : TypeParameter\l# convert(org) : Name\l# convert(org) : PrefixExpression\l# convert(org) : WhileStatement\l# convertImport(org) : ImportDeclaration\l# convertPackage(org) : PackageDeclaration\l# convertToArray(Type, int, int, int, org) : ArrayType\l# convertToEnumDeclaration(org) : EnumDeclaration\l# convertToExpression(org) : Expression\l# convertToFieldDeclaration(org) : FieldDeclaration\l# convertToParenthesizedExpression(org) : ParenthesizedExpression\l# convertToVariableDeclarationExpression(org) : VariableDeclarationExpression\l# convertToSingleVariableDeclaration(LocalDeclaration) : SingleVariableDeclaration\l# convertToDimensions(int, int, org) : Dimension\l# convertToVariableDeclarationFragment(org) : VariableDeclarationFragment\l# convertToVariableDeclarationFragment(org) : VariableDeclarationFragment\l# setExtraAnnotatedDimensions(int, int, TypeReference, List, int) : \l# setTypeAnnotationsOnDimension(Dimension, org, int) : \l# setTypeAnnotationsAndSourceRangeOnArray(ArrayType, org) : \l# convertToVariableDeclarationStatement(org) : VariableDeclarationStatement\l# annotateType(AnnotatableType, org) : int\l# annotateTypeParameter(TypeParameter, org) : \l# convertType(TypeReference) : Type\l# createBaseType(TypeReference, long, org, char, int, int, boolean) : Type\l# createQualifiedType(TypeReference, long, org, char, int, Type) : QualifiedType\l# createSimpleType(Name, TypeReference, long, int, int) : SimpleType\l# setSourceRangeAnnotationsAndRecordNodes(TypeReference, AnnotatableType, org, int, int, int) : \l# setSourceRangeAnnotationsAndRecordNodes(TypeReference, AnnotatableType, long, org, int, int, int) : \l# createSimpleName(TypeReference, long, char, int) : SimpleName\l# createComment(int) : Comment\l# createFakeEmptyStatement(org) : Statement\l# createFakeNullLiteral(org) : Expression\l# createModifier(ModifierKeyword) : Modifier\l# getOperatorFor(int) : InfixExpression\l# getPrimitiveTypeCode(char) : PrimitiveType\l# isPrimitiveType(char) : boolean\l# lookupForScopes() : \l# lookupScope(ASTNode) : BlockScope\l# recordName(Name, org) : \l# recordNodes(ASTNode, org) : \l# recordNodes(org, TagElement) : \l# recordPendingNameScopeResolution(Name) : \l# recordPendingThisExpressionScopeResolution(ThisExpression) : \l# trimWhiteSpacesAndComments(org) : \l# trimWhiteSpacesAndComments(ASTNode) : \l# trimWhiteSpacesAndComments(int, int) : int\l# removeLeadingAndTrailingCommentsFromLiteral(ASTNode) : \l# retrieveClosingAngleBracketPosition(int) : int\l# retrieveColonPosition(ASTNode) : \l# retrieveEllipsisStartPosition(int, int) : int\l# retrieveSemiColonPosition(Expression) : int\l# retrieveEndOfElementTypeNamePosition(int, int) : int\l# retrieveEndOfRightParenthesisPosition(int, int) : int\l# retrieveDimensionAndSetPositions(int, int, Dimension) : \l# retrieveIdentifierAndSetPositions(int, int, Name) : \l# retrieveIdentifierEndPosition(int, int) : int\l# retrieveInitAndSetPositions(int, int, Name) : \l# retrieveEndOfPotentialExtendedDimensions(int, int, int) : int\l# retrieveProperRightBracketPosition(int, int, int) : int\l# retrieveProperRightBracketPosition(int, int) : int\l# retrieveRightBraceOrSemiColonPosition(int, int) : int\l# retrieveRightBrace(int, int) : int\l# retrieveStartBlockPosition(int, int) : int\l# retrieveStartingCatchPosition(int, int) : int\l# setAST(AST) : \l# setModifiers(AnnotationTypeDeclaration, org) : \l# setModifiers(AnnotationTypeMemberDeclaration, org) : \l# setModifiers(BodyDeclaration, org, int) : \l# setModifiers(EnumDeclaration, org) : \l# setModifiers(EnumConstantDeclaration, org) : \l# setModifiers(FieldDeclaration, org) : \l# setModifiers(Initializer, org) : \l# setModifiers(MethodDeclaration, AbstractMethodDeclaration) : \l# setModifiers(SingleVariableDeclaration, Argument) : \l# setModifiers(SingleVariableDeclaration, LocalDeclaration) : \l# setModifiers(TypeDeclaration, org) : \l# setModifiers(VariableDeclarationExpression, LocalDeclaration) : \l# setModifiers(VariableDeclarationStatement, LocalDeclaration) : \l# setQualifiedNameNameAndSourceRanges(char, long, org) : QualifiedName\l# setQualifiedNameNameAndSourceRanges(char, long, int, org) : QualifiedName\l# setTypeNameForAnnotation(org, Annotation) : \l# setTypeForField(FieldDeclaration, Type, int) : \l# extractSubArrayType(ArrayType, int, int) : ArrayType\l# setTypeForMethodDeclaration(MethodDeclaration, Type, int) : \l# setTypeForMethodDeclaration(AnnotationTypeMemberDeclaration, Type, int) : \l# setTypeForSingleVariableDeclaration(SingleVariableDeclaration, Type, int) : \l# setTypeForVariableDeclarationExpression(VariableDeclarationExpression, Type, int) : \l# setTypeForVariableDeclarationStatement(VariableDeclarationStatement, Type, int) : \l# updateInnerPositions(Type, int) : \l}"
	 ]

	 ASTMatcher [
		 label = "{ASTMatcher|- matchDocTags : boolean\l|# ASTMatcher() : \l# ASTMatcher(boolean) : \l# safeSubtreeListMatch(List, List) : boolean\l# safeSubtreeMatch(Object, Object) : boolean\l# safeEquals(Object, Object) : boolean\l# componentType(ArrayType) : Type\l# match(AnnotationTypeDeclaration, Object) : boolean\l# match(AnnotationTypeMemberDeclaration, Object) : boolean\l# match(AnonymousClassDeclaration, Object) : boolean\l# match(ArrayAccess, Object) : boolean\l# match(ArrayCreation, Object) : boolean\l# match(ArrayInitializer, Object) : boolean\l# match(ArrayType, Object) : boolean\l# match(AssertStatement, Object) : boolean\l# match(Assignment, Object) : boolean\l# match(Block, Object) : boolean\l# match(BlockComment, Object) : boolean\l# match(BooleanLiteral, Object) : boolean\l# match(BreakStatement, Object) : boolean\l# match(CastExpression, Object) : boolean\l# match(CatchClause, Object) : boolean\l# match(CharacterLiteral, Object) : boolean\l# match(ClassInstanceCreation, Object) : boolean\l# match(CompilationUnit, Object) : boolean\l# match(ConditionalExpression, Object) : boolean\l# match(ConstructorInvocation, Object) : boolean\l# match(ContinueStatement, Object) : boolean\l# match(CreationReference, Object) : boolean\l# match(Dimension, Object) : boolean\l# match(DoStatement, Object) : boolean\l# match(EmptyStatement, Object) : boolean\l# match(EnhancedForStatement, Object) : boolean\l# match(EnumConstantDeclaration, Object) : boolean\l# match(EnumDeclaration, Object) : boolean\l# match(ExpressionMethodReference, Object) : boolean\l# match(ExpressionStatement, Object) : boolean\l# match(FieldAccess, Object) : boolean\l# match(FieldDeclaration, Object) : boolean\l# match(ForStatement, Object) : boolean\l# match(IfStatement, Object) : boolean\l# match(ImportDeclaration, Object) : boolean\l# match(InfixExpression, Object) : boolean\l# match(Initializer, Object) : boolean\l# match(InstanceofExpression, Object) : boolean\l# match(IntersectionType, Object) : boolean\l# match(Javadoc, Object) : boolean\l# compareDeprecatedComment(Javadoc, Javadoc) : boolean\l# match(LabeledStatement, Object) : boolean\l# match(LambdaExpression, Object) : boolean\l# match(LineComment, Object) : boolean\l# match(MarkerAnnotation, Object) : boolean\l# match(MemberRef, Object) : boolean\l# match(MemberValuePair, Object) : boolean\l# match(MethodRef, Object) : boolean\l# match(MethodRefParameter, Object) : boolean\l# match(MethodDeclaration, Object) : boolean\l# match(MethodInvocation, Object) : boolean\l# match(Modifier, Object) : boolean\l# match(NameQualifiedType, Object) : boolean\l# match(NormalAnnotation, Object) : boolean\l# match(NullLiteral, Object) : boolean\l# match(NumberLiteral, Object) : boolean\l# match(PackageDeclaration, Object) : boolean\l# match(ParameterizedType, Object) : boolean\l# match(ParenthesizedExpression, Object) : boolean\l# match(PostfixExpression, Object) : boolean\l# match(PrefixExpression, Object) : boolean\l# match(PrimitiveType, Object) : boolean\l# match(QualifiedName, Object) : boolean\l# match(QualifiedType, Object) : boolean\l# match(ReturnStatement, Object) : boolean\l# match(SimpleName, Object) : boolean\l# match(SimpleType, Object) : boolean\l# match(SingleMemberAnnotation, Object) : boolean\l# match(SingleVariableDeclaration, Object) : boolean\l# match(StringLiteral, Object) : boolean\l# match(SuperConstructorInvocation, Object) : boolean\l# match(SuperFieldAccess, Object) : boolean\l# match(SuperMethodInvocation, Object) : boolean\l# match(SuperMethodReference, Object) : boolean\l# match(SwitchCase, Object) : boolean\l# match(SwitchStatement, Object) : boolean\l# match(SynchronizedStatement, Object) : boolean\l# match(TagElement, Object) : boolean\l# match(TextElement, Object) : boolean\l# match(ThisExpression, Object) : boolean\l# match(ThrowStatement, Object) : boolean\l# match(TryStatement, Object) : boolean\l# match(TypeDeclaration, Object) : boolean\l# match(TypeDeclarationStatement, Object) : boolean\l# match(TypeLiteral, Object) : boolean\l# match(TypeMethodReference, Object) : boolean\l# match(TypeParameter, Object) : boolean\l# match(UnionType, Object) : boolean\l# match(VariableDeclarationExpression, Object) : boolean\l# match(VariableDeclarationFragment, Object) : boolean\l# match(VariableDeclarationStatement, Object) : boolean\l# match(WhileStatement, Object) : boolean\l# match(WildcardType, Object) : boolean\l}"
	 ]

	 Cursor [
		 label = "{Cursor|+ ANONYMOUS_CLASS_DECLARATION : int\l+ ARRAY_ACCESS : int\l+ ARRAY_CREATION : int\l+ ARRAY_INITIALIZER : int\l+ ARRAY_TYPE : int\l+ ASSERT_STATEMENT : int\l+ ASSIGNMENT : int\l+ BLOCK : int\l+ BOOLEAN_LITERAL : int\l+ BREAK_STATEMENT : int\l+ CAST_EXPRESSION : int\l+ CATCH_CLAUSE : int\l+ CHARACTER_LITERAL : int\l+ CLASS_INSTANCE_CREATION : int\l+ COMPILATION_UNIT : int\l+ CONDITIONAL_EXPRESSION : int\l+ CONSTRUCTOR_INVOCATION : int\l+ CONTINUE_STATEMENT : int\l+ DO_STATEMENT : int\l+ EMPTY_STATEMENT : int\l+ EXPRESSION_STATEMENT : int\l+ FIELD_ACCESS : int\l+ FIELD_DECLARATION : int\l+ FOR_STATEMENT : int\l+ IF_STATEMENT : int\l+ IMPORT_DECLARATION : int\l+ INFIX_EXPRESSION : int\l+ INITIALIZER : int\l+ JAVADOC : int\l+ LABELED_STATEMENT : int\l+ METHOD_DECLARATION : int\l+ METHOD_INVOCATION : int\l+ NULL_LITERAL : int\l+ NUMBER_LITERAL : int\l+ PACKAGE_DECLARATION : int\l+ PARENTHESIZED_EXPRESSION : int\l+ POSTFIX_EXPRESSION : int\l+ PREFIX_EXPRESSION : int\l+ PRIMITIVE_TYPE : int\l+ QUALIFIED_NAME : int\l+ RETURN_STATEMENT : int\l+ SIMPLE_NAME : int\l+ SIMPLE_TYPE : int\l+ SINGLE_VARIABLE_DECLARATION : int\l+ STRING_LITERAL : int\l+ SUPER_CONSTRUCTOR_INVOCATION : int\l+ SUPER_FIELD_ACCESS : int\l+ SUPER_METHOD_INVOCATION : int\l+ SWITCH_CASE : int\l+ SWITCH_STATEMENT : int\l+ SYNCHRONIZED_STATEMENT : int\l+ THIS_EXPRESSION : int\l+ THROW_STATEMENT : int\l+ TRY_STATEMENT : int\l+ TYPE_DECLARATION : int\l+ TYPE_DECLARATION_STATEMENT : int\l+ TYPE_LITERAL : int\l+ VARIABLE_DECLARATION_EXPRESSION : int\l+ VARIABLE_DECLARATION_FRAGMENT : int\l+ VARIABLE_DECLARATION_STATEMENT : int\l+ WHILE_STATEMENT : int\l+ INSTANCEOF_EXPRESSION : int\l+ LINE_COMMENT : int\l+ BLOCK_COMMENT : int\l+ TAG_ELEMENT : int\l+ TEXT_ELEMENT : int\l+ MEMBER_REF : int\l+ METHOD_REF : int\l+ METHOD_REF_PARAMETER : int\l+ ENHANCED_FOR_STATEMENT : int\l+ ENUM_DECLARATION : int\l+ ENUM_CONSTANT_DECLARATION : int\l+ TYPE_PARAMETER : int\l+ PARAMETERIZED_TYPE : int\l+ QUALIFIED_TYPE : int\l+ WILDCARD_TYPE : int\l+ NORMAL_ANNOTATION : int\l+ MARKER_ANNOTATION : int\l+ SINGLE_MEMBER_ANNOTATION : int\l+ MEMBER_VALUE_PAIR : int\l+ ANNOTATION_TYPE_DECLARATION : int\l+ ANNOTATION_TYPE_MEMBER_DECLARATION : int\l+ MODIFIER : int\l+ UNION_TYPE : int\l+ DIMENSION : int\l+ LAMBDA_EXPRESSION : int\l+ INTERSECTION_TYPE : int\l+ NAME_QUALIFIED_TYPE : int\l+ CREATION_REFERENCE : int\l+ EXPRESSION_METHOD_REFERENCE : int\l+ SUPER_METHOD_REFERENCE : int\l+ TYPE_METHOD_REFERENCE : int\l# ast : AST\l- parent : ASTNode\l- UNMODIFIABLE_EMPTY_MAP : Map\l- property1 : Object\l- property2 : Object\l- startPosition : int\l- length : int\l+ MALFORMED : int\l+ ORIGINAL : int\l+ PROTECT : int\l+ RECOVERED : int\l# typeAndFlags : int\l- location : StructuralPropertyDescriptor\l# CYCLE_RISK : boolean\l# NO_CYCLE_RISK : boolean\l# MANDATORY : boolean\l# OPTIONAL : boolean\l# store : ArrayList\l# propertyDescriptor : ChildListPropertyDescriptor\l- position : int\l- cursors : List\l# internalStructuralPropertiesForType : List\l# getNodeType0 : int\l# subtreeMatch0 : boolean\l# clone0 : ASTNode\l# accept0 : null\l# HEADERS : int\l# BASE_NODE_SIZE : int\l# treeSize : int\l# memSize : int\l|# nodeClassForType(int) : Class\l# null() : \l# null() : \l# hasNext() : boolean\l# next() : Object\l# remove() : \l# update(int, int) : \l# NodeList(ChildListPropertyDescriptor) : \l# size() : int\l# get(int) : Object\l# set(int, Object) : Object\l# add(int, Object) : \l# remove(int) : Object\l# newCursor() : Cursor\l# releaseCursor(Cursor) : \l# updateCursors(int, int) : \l# memSize() : int\l# listSize() : int\l# ASTNode(AST) : \l# getAST() : AST\l# getParent() : ASTNode\l# getLocationInParent() : StructuralPropertyDescriptor\l# getRoot() : ASTNode\l# getStructuralProperty(StructuralPropertyDescriptor) : Object\l# setStructuralProperty(StructuralPropertyDescriptor, Object) : \l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# structuralPropertiesForType(int) : List\l# createPropertyList(Class, List) : \l# addProperty(StructuralPropertyDescriptor, List) : \l# reapPropertyList(List) : List\l# unsupportedIn2() : \l# unsupportedIn2_3() : \l# unsupportedIn2_3_4() : \l# supportedOnlyIn2() : \l# supportedOnlyIn2_3_4() : \l# setParent(ASTNode, StructuralPropertyDescriptor) : \l# delete() : \l# checkNewChild(ASTNode, ASTNode, boolean, Class) : \l# preReplaceChild(ASTNode, ASTNode, ChildPropertyDescriptor) : \l# postReplaceChild(ASTNode, ASTNode, ChildPropertyDescriptor) : \l# preValueChange(SimplePropertyDescriptor) : \l# postValueChange(SimplePropertyDescriptor) : \l# checkModifiable() : \l# preLazyInit() : \l# postLazyInit(ASTNode, ChildPropertyDescriptor) : \l# getProperty(String) : Object\l# setProperty(String, Object) : \l# properties() : Map\l# getFlags() : int\l# setFlags(int) : \l# getNodeType() : int\l# setNodeType(int) : \l# equals(Object) : boolean\l# hashCode() : int\l# subtreeMatch(ASTMatcher, Object, ASTMatcher, Object) : boolean\l# copySubtree(AST, ASTNode) : ASTNode\l# copySubtrees(AST, List) : List\l# clone(AST, AST) : ASTNode\l# accept(ASTVisitor, ASTVisitor) : \l# acceptChild(ASTVisitor, ASTNode) : \l# acceptChildren(ASTVisitor, ASTNode) : \l# getStartPosition() : int\l# getLength() : int\l# setSourceRange(int, int) : \l# toString() : String\l# standardToString() : String\l# appendDebugString(StringBuffer) : \l# appendPrintString(StringBuffer) : \l# stringSize(String) : int\l# subtreeBytes() : int\l}"
	 ]

	 ASTParser [
		 label = "{ASTParser|+ K_EXPRESSION : int\l+ K_STATEMENTS : int\l+ K_CLASS_BODY_DECLARATIONS : int\l+ K_COMPILATION_UNIT : int\l- apiLevel : int\l- astKind : int\l- compilerOptions : Map\l- focalPointPosition : int\l- rawSource : char\l- typeRoot : ITypeRoot\l- sourceOffset : int\l- sourceLength : int\l- workingCopyOwner : WorkingCopyOwner\l- project : IJavaProject\l- unitName : String\l- classpaths : String\l- sourcepaths : String\l- sourcepathsEncodings : String\l- bits : int\l|# newParser(int) : ASTParser\l# ASTParser(int) : \l# getClasspath() : List\l# initializeDefaults() : \l# setBindingsRecovery(boolean) : \l# setEnvironment(String, String, String, boolean) : \l# setCompilerOptions(Map) : \l# setResolveBindings(boolean) : \l# setFocalPosition(int) : \l# setKind(int) : \l# setSource(char) : \l# setSource(ICompilationUnit) : \l# setSource(IClassFile) : \l# setSource(ITypeRoot) : \l# setSourceRange(int, int) : \l# setStatementsRecovery(boolean) : \l# setIgnoreMethodBodies(boolean) : \l# setWorkingCopyOwner(WorkingCopyOwner) : \l# setUnitName(String) : \l# setProject(IJavaProject) : \l# createAST(IProgressMonitor) : ASTNode\l# createASTs(ICompilationUnit, String, ASTRequestor, IProgressMonitor) : \l# createASTs(String, String, String, FileASTRequestor, IProgressMonitor) : \l# createBindings(IJavaElement, IProgressMonitor) : IBinding\l# internalCreateAST(IProgressMonitor) : ASTNode\l# internalCreateASTForKind() : ASTNode\l# propagateErrors(ASTNode, CategorizedProblem, RecoveryScannerData) : \l# rootNodeToCompilationUnit(AST, CompilationUnit, ASTNode, RecordedParsingInformation, RecoveryScannerData) : \l}"
	 ]

	 ASTRecoveryPropagator [
		 label = "{ASTRecoveryPropagator|- NOTHING : int\l# endingTokens : HashtableOfObjectToIntArray\l- problems : CategorizedProblem\l- usedOrIrrelevantProblems : boolean\l- data : RecoveryScannerData\l- blockDepth : int\l- lastEnd : int\l- insertedTokensKind : int\l- insertedTokensPosition : int\l- insertedTokensFlagged : boolean\l- removedTokensFlagged : boolean\l- replacedTokensFlagged : boolean\l- stack : Vector\l|# null() : \l# ASTRecoveryPropagator(CategorizedProblem, RecoveryScannerData) : \l# endVisit(Block) : \l# visit(Block) : boolean\l# visitNode(ASTNode) : boolean\l# endVisitNode(ASTNode) : \l# flagNodeWithInsertedTokens() : \l# flagNodesWithInsertedTokensAtEnd(ASTNode) : boolean\l# flagNodesWithInsertedTokensInside(ASTNode) : boolean\l# markIncludedProblems(int, int) : boolean\l# endVisit(ExpressionStatement) : \l# endVisit(ForStatement) : \l# endVisit(VariableDeclarationStatement) : \l# endVisit(NormalAnnotation) : \l# endVisit(SingleMemberAnnotation) : \l}"
	 ]

	 ASTRequestor [
		 label = "{ASTRequestor|# compilationUnitResolver : CompilationUnitResolver\l|# ASTRequestor() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# createBindings(String) : IBinding\l}"
	 ]

	 ASTSyntaxErrorPropagator [
		 label = "{ASTSyntaxErrorPropagator|- problems : CategorizedProblem\l|# ASTSyntaxErrorPropagator(CategorizedProblem) : \l# checkAndTagAsMalformed(ASTNode) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(CompilationUnit) : boolean\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(Initializer) : boolean\l}"
	 ]

	 ASTVisitor [
		 label = "{ASTVisitor|- visitDocTags : boolean\l|# ASTVisitor() : \l# ASTVisitor(boolean) : \l# preVisit(ASTNode) : \l# preVisit2(ASTNode) : boolean\l# postVisit(ASTNode) : \l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnnotationTypeMemberDeclaration) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(ArrayAccess) : boolean\l# visit(ArrayCreation) : boolean\l# visit(ArrayInitializer) : boolean\l# visit(ArrayType) : boolean\l# visit(AssertStatement) : boolean\l# visit(Assignment) : boolean\l# visit(Block) : boolean\l# visit(BlockComment) : boolean\l# visit(BooleanLiteral) : boolean\l# visit(BreakStatement) : boolean\l# visit(CastExpression) : boolean\l# visit(CatchClause) : boolean\l# visit(CharacterLiteral) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(CompilationUnit) : boolean\l# visit(ConditionalExpression) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(ContinueStatement) : boolean\l# visit(CreationReference) : boolean\l# visit(Dimension) : boolean\l# visit(DoStatement) : boolean\l# visit(EmptyStatement) : boolean\l# visit(EnhancedForStatement) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(ExpressionMethodReference) : boolean\l# visit(ExpressionStatement) : boolean\l# visit(FieldAccess) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(ForStatement) : boolean\l# visit(IfStatement) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(InfixExpression) : boolean\l# visit(Initializer) : boolean\l# visit(InstanceofExpression) : boolean\l# visit(IntersectionType) : boolean\l# visit(Javadoc) : boolean\l# visit(LabeledStatement) : boolean\l# visit(LambdaExpression) : boolean\l# visit(LineComment) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(MemberRef) : boolean\l# visit(MemberValuePair) : boolean\l# visit(MethodRef) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(MethodInvocation) : boolean\l# visit(Modifier) : boolean\l# visit(NameQualifiedType) : boolean\l# visit(NormalAnnotation) : boolean\l# visit(NullLiteral) : boolean\l# visit(NumberLiteral) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ParameterizedType) : boolean\l# visit(ParenthesizedExpression) : boolean\l# visit(PostfixExpression) : boolean\l# visit(PrefixExpression) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(QualifiedType) : boolean\l# visit(ReturnStatement) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(StringLiteral) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(SuperFieldAccess) : boolean\l# visit(SuperMethodInvocation) : boolean\l# visit(SuperMethodReference) : boolean\l# visit(SwitchCase) : boolean\l# visit(SwitchStatement) : boolean\l# visit(SynchronizedStatement) : boolean\l# visit(TagElement) : boolean\l# visit(TextElement) : boolean\l# visit(ThisExpression) : boolean\l# visit(ThrowStatement) : boolean\l# visit(TryStatement) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(TypeLiteral) : boolean\l# visit(TypeMethodReference) : boolean\l# visit(TypeParameter) : boolean\l# visit(UnionType) : boolean\l# visit(VariableDeclarationExpression) : boolean\l# visit(VariableDeclarationStatement) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(WhileStatement) : boolean\l# visit(WildcardType) : boolean\l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# endVisit(ArrayAccess) : \l# endVisit(ArrayCreation) : \l# endVisit(ArrayInitializer) : \l# endVisit(ArrayType) : \l# endVisit(AssertStatement) : \l# endVisit(Assignment) : \l# endVisit(Block) : \l# endVisit(BlockComment) : \l# endVisit(BooleanLiteral) : \l# endVisit(BreakStatement) : \l# endVisit(CastExpression) : \l# endVisit(CatchClause) : \l# endVisit(CharacterLiteral) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(CompilationUnit) : \l# endVisit(ConditionalExpression) : \l# endVisit(ConstructorInvocation) : \l# endVisit(ContinueStatement) : \l# endVisit(CreationReference) : \l# endVisit(DoStatement) : \l# endVisit(EmptyStatement) : \l# endVisit(EnhancedForStatement) : \l# endVisit(EnumConstantDeclaration) : \l# endVisit(EnumDeclaration) : \l# endVisit(ExpressionMethodReference) : \l# endVisit(ExpressionStatement) : \l# endVisit(Dimension) : \l# endVisit(FieldAccess) : \l# endVisit(FieldDeclaration) : \l# endVisit(ForStatement) : \l# endVisit(IfStatement) : \l# endVisit(ImportDeclaration) : \l# endVisit(InfixExpression) : \l# endVisit(InstanceofExpression) : \l# endVisit(Initializer) : \l# endVisit(Javadoc) : \l# endVisit(LabeledStatement) : \l# endVisit(LambdaExpression) : \l# endVisit(LineComment) : \l# endVisit(MarkerAnnotation) : \l# endVisit(MemberRef) : \l# endVisit(MemberValuePair) : \l# endVisit(MethodRef) : \l# endVisit(MethodRefParameter) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodInvocation) : \l# endVisit(Modifier) : \l# endVisit(NameQualifiedType) : \l# endVisit(NormalAnnotation) : \l# endVisit(NullLiteral) : \l# endVisit(NumberLiteral) : \l# endVisit(PackageDeclaration) : \l# endVisit(ParameterizedType) : \l# endVisit(ParenthesizedExpression) : \l# endVisit(PostfixExpression) : \l# endVisit(PrefixExpression) : \l# endVisit(PrimitiveType) : \l# endVisit(QualifiedName) : \l# endVisit(QualifiedType) : \l# endVisit(ReturnStatement) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleMemberAnnotation) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(StringLiteral) : \l# endVisit(SuperConstructorInvocation) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(SuperMethodReference) : \l# endVisit(SwitchCase) : \l# endVisit(SwitchStatement) : \l# endVisit(SynchronizedStatement) : \l# endVisit(TagElement) : \l# endVisit(TextElement) : \l# endVisit(ThisExpression) : \l# endVisit(ThrowStatement) : \l# endVisit(TryStatement) : \l# endVisit(TypeDeclaration) : \l# endVisit(TypeDeclarationStatement) : \l# endVisit(TypeLiteral) : \l# endVisit(TypeMethodReference) : \l# endVisit(TypeParameter) : \l# endVisit(UnionType) : \l# endVisit(IntersectionType) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(VariableDeclarationStatement) : \l# endVisit(VariableDeclarationFragment) : \l# endVisit(WhileStatement) : \l# endVisit(WildcardType) : \l}"
	 ]

	 BindingComparator [
		 label = "{BindingComparator||# isEqual(TypeVariableBinding, TypeVariableBinding) : boolean\l# isEqual(Binding, Binding, HashSet) : boolean\l# isEqual(org, org) : boolean\l# isEqual(org, org, HashSet) : boolean\l# isEqual(VariableBinding, VariableBinding) : boolean\l# isEqual(FieldBinding, FieldBinding) : boolean\l# isEqual(org, org) : boolean\l# isEqual(org, org, HashSet) : boolean\l# isEqual(org, org, HashSet) : boolean\l# isEqual(org, org) : boolean\l}"
	 ]

	 BindingResolver [
		 label = "{BindingResolver||# BindingResolver() : \l# findDeclaringNode(IBinding) : ASTNode\l# findDeclaringNode(String) : ASTNode\l# findDeclaringNode(IAnnotationBinding) : ASTNode\l# getCorrespondingNode(ASTNode) : org\l# getMethodBinding(org) : IMethodBinding\l# getMemberValuePairBinding(ElementValuePair) : IMemberValuePairBinding\l# getPackageBinding(org) : IPackageBinding\l# getTypeBinding(org) : ITypeBinding\l# getTypeBinding(VariableDeclaration) : ITypeBinding\l# getTypeBinding(Type) : ITypeBinding\l# getTypeBinding(RecoveredTypeBinding, int) : ITypeBinding\l# getVariableBinding(org) : IVariableBinding\l# getWorkingCopyOwner() : WorkingCopyOwner\l# getAnnotationInstance(org) : IAnnotationBinding\l# isResolvedTypeInferredFromExpectedType(MethodInvocation) : boolean\l# isResolvedTypeInferredFromExpectedType(SuperMethodInvocation) : boolean\l# isResolvedTypeInferredFromExpectedType(ClassInstanceCreation) : boolean\l# lookupEnvironment() : LookupEnvironment\l# recordScope(ASTNode, BlockScope) : \l# resolveBoxing(Expression) : boolean\l# resolveUnboxing(Expression) : boolean\l# resolveConstantExpressionValue(Expression) : Object\l# resolveConstructor(ClassInstanceCreation) : IMethodBinding\l# resolveConstructor(ConstructorInvocation) : IMethodBinding\l# resolveConstructor(EnumConstantDeclaration) : IMethodBinding\l# resolveConstructor(SuperConstructorInvocation) : IMethodBinding\l# resolveExpressionType(Expression) : ITypeBinding\l# resolveField(FieldAccess) : IVariableBinding\l# resolveField(SuperFieldAccess) : IVariableBinding\l# resolveImport(ImportDeclaration) : IBinding\l# resolveMember(AnnotationTypeMemberDeclaration) : IMethodBinding\l# resolveMethod(MethodDeclaration) : IMethodBinding\l# resolveMethod(MethodReference) : IMethodBinding\l# resolveMethod(LambdaExpression) : IMethodBinding\l# resolveMethod(MethodInvocation) : IMethodBinding\l# resolveMethod(SuperMethodInvocation) : IMethodBinding\l# resolveName(Name) : IBinding\l# resolvePackage(PackageDeclaration) : IPackageBinding\l# resolveReference(MemberRef) : IBinding\l# resolveMemberValuePair(MemberValuePair) : IMemberValuePairBinding\l# resolveReference(MethodRef) : IBinding\l# resolveType(AnnotationTypeDeclaration) : ITypeBinding\l# resolveType(AnonymousClassDeclaration) : ITypeBinding\l# resolveType(EnumDeclaration) : ITypeBinding\l# resolveType(Type) : ITypeBinding\l# resolveType(TypeDeclaration) : ITypeBinding\l# resolveTypeParameter(TypeParameter) : ITypeBinding\l# resolveVariable(EnumConstantDeclaration) : IVariableBinding\l# resolveVariable(VariableDeclaration) : IVariableBinding\l# resolveWellKnownType(String) : ITypeBinding\l# resolveAnnotation(Annotation) : IAnnotationBinding\l# resolveArrayType(ITypeBinding, int) : ITypeBinding\l# scope() : CompilationUnitScope\l# store(ASTNode, org) : \l# updateKey(ASTNode, ASTNode) : \l}"
	 ]

	 Block [
		 label = "{Block|+ STATEMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- statements : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# Block(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# statements() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 BlockComment [
		 label = "{BlockComment|- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# BlockComment(AST) : \l# internalStructuralPropertiesForType(int) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 BodyDeclaration [
		 label = "{BodyDeclaration|# optionalDocComment : Javadoc\l- modifierFlags : int\l# modifiers : ASTNode\l# internalModifiersProperty : SimplePropertyDescriptor\l# internalModifiers2Property : ChildListPropertyDescriptor\l# internalJavadocProperty : ChildPropertyDescriptor\l|# getModifiersProperty() : ChildListPropertyDescriptor\l# getJavadocProperty() : ChildPropertyDescriptor\l# internalJavadocPropertyFactory(Class) : ChildPropertyDescriptor\l# internalModifiersPropertyFactory(Class) : SimplePropertyDescriptor\l# internalModifiers2PropertyFactory(Class) : ChildListPropertyDescriptor\l# BodyDeclaration(AST) : \l# getJavadoc() : Javadoc\l# setJavadoc(Javadoc) : \l# getModifiers() : int\l# setModifiers(int) : \l# internalSetModifiers(int) : \l# modifiers() : List\l# memSize() : int\l}"
	 ]

	 BooleanLiteral [
		 label = "{BooleanLiteral|+ BOOLEAN_VALUE_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- value : boolean\l|# null() : \l# propertyDescriptors(int) : List\l# BooleanLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# booleanValue() : boolean\l# setBooleanValue(boolean) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 BreakStatement [
		 label = "{BreakStatement|+ LABEL_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalLabel : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# BreakStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getLabel() : SimpleName\l# setLabel(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 CastExpression [
		 label = "{CastExpression|+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- type : Type\l- expression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# CastExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 CatchClause [
		 label = "{CatchClause|+ EXCEPTION_PROPERTY : ChildPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- body : Block\l- exceptionDecl : SingleVariableDeclaration\l|# null() : \l# propertyDescriptors(int) : List\l# CatchClause(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getException() : SingleVariableDeclaration\l# setException(SingleVariableDeclaration) : \l# getBody() : Block\l# setBody(Block) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 CharacterLiteral [
		 label = "{CharacterLiteral|+ ESCAPED_VALUE_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- escapedValue : String\l|# null() : \l# propertyDescriptors(int) : List\l# CharacterLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getEscapedValue() : String\l# setEscapedValue(String) : \l# internalSetEscapedValue(String) : \l# charValue() : char\l# setCharValue(char) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ChildListPropertyDescriptor [
		 label = "{ChildListPropertyDescriptor|# elementType : Class\l# cycleRisk : boolean\l|# ChildListPropertyDescriptor(Class, String, Class, boolean) : \l# getElementType() : Class\l# cycleRisk() : boolean\l}"
	 ]

	 ChildPropertyDescriptor [
		 label = "{ChildPropertyDescriptor|- childClass : Class\l- mandatory : boolean\l# cycleRisk : boolean\l|# ChildPropertyDescriptor(Class, String, Class, boolean, boolean) : \l# getChildType() : Class\l# isMandatory() : boolean\l# cycleRisk() : boolean\l}"
	 ]

	 ClassInstanceCreation [
		 label = "{ClassInstanceCreation|+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ ANONYMOUS_CLASS_DECLARATION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- optionalExpression : Expression\l- typeArguments : ASTNode\l- typeName : Name\l- type : Type\l- arguments : ASTNode\l- optionalAnonymousClassDeclaration : AnonymousClassDeclaration\l|# null() : \l# propertyDescriptors(int) : List\l# ClassInstanceCreation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# typeArguments() : List\l# getName() : Name\l# internalGetName() : Name\l# setName(Name) : \l# internalSetName(Name) : \l# getType() : Type\l# setType(Type) : \l# arguments() : List\l# getAnonymousClassDeclaration() : AnonymousClassDeclaration\l# setAnonymousClassDeclaration(AnonymousClassDeclaration) : \l# resolveConstructorBinding() : IMethodBinding\l# isResolvedTypeInferredFromExpectedType() : boolean\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Comment [
		 label = "{Comment|- alternateRoot : ASTNode\l|# Comment(AST) : \l# isBlockComment() : boolean\l# isLineComment() : boolean\l# isDocComment() : boolean\l# getAlternateRoot() : ASTNode\l# setAlternateRoot(ASTNode) : \l# memSize() : int\l}"
	 ]

	 CompilationUnit [
		 label = "{CompilationUnit|- EMPTY_MESSAGES : Message\l- EMPTY_PROBLEMS : IProblem\l+ IMPORTS_PROPERTY : ChildListPropertyDescriptor\l+ PACKAGE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l+ TYPES_PROPERTY : ChildListPropertyDescriptor\l- commentMapper : DefaultCommentMapper\l- typeRoot : ITypeRoot\l- imports : ASTNode\l- lineEndTable : int\l- messages : Message\l- optionalCommentList : List\l# optionalCommentTable : Comment\l- optionalPackageDeclaration : PackageDeclaration\l- problems : IProblem\l- statementsRecoveryData : Object\l- types : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# CompilationUnit(AST) : \l# accept0(ASTVisitor) : \l# clone0(AST) : ASTNode\l# getColumnNumber(int) : int\l# findDeclaringNode(IBinding) : ASTNode\l# findDeclaringNode(String) : ASTNode\l# getCommentList() : List\l# getCommentMapper() : DefaultCommentMapper\l# getExtendedLength(ASTNode) : int\l# getExtendedStartPosition(ASTNode) : int\l# getJavaElement() : IJavaElement\l# getMessages() : Message\l# getNodeType0() : int\l# getPackage() : PackageDeclaration\l# getPosition(int, int) : int\l# getProblems() : IProblem\l# getStatementsRecoveryData() : Object\l# getTypeRoot() : ITypeRoot\l# imports() : List\l# firstLeadingCommentIndex(ASTNode) : int\l# lastTrailingCommentIndex(ASTNode) : int\l# initCommentMapper(Scanner) : \l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalStructuralPropertiesForType(int) : List\l# lineNumber(int) : int\l# getLineNumber(int) : int\l# memSize() : int\l# recordModifications() : \l# rewrite(IDocument, Map) : TextEdit\l# setCommentTable(Comment) : \l# setTypeRoot(ITypeRoot) : \l# setLineEndTable(int) : \l# setPackage(PackageDeclaration) : \l# setProblems(IProblem) : \l# setStatementsRecoveryData(Object) : \l# subtreeMatch0(ASTMatcher, Object) : boolean\l# treeSize() : int\l# types() : List\l}"
	 ]

	 Requestor [
		 label = "{Requestor|+ RESOLVE_BINDING : int\l+ PARTIAL : int\l+ STATEMENT_RECOVERY : int\l+ IGNORE_METHOD_BODIES : int\l+ BINDING_RECOVERY : int\l+ INCLUDE_RUNNING_VM_BOOTCLASSPATH : int\l+ list : int\l+ length : int\l# requestedSources : HashtableOfObject\l# requestedKeys : HashtableOfObject\l# bindingTables : DefaultBindingResolver\l# hasCompilationAborted : boolean\l# abortProblem : CategorizedProblem\l- monitor : IProgressMonitor\l# fromJavaProject : boolean\l# bindings : IBinding\l|# null() : \l# add(int) : \l# CompilationUnitResolver(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory, IProgressMonitor, boolean) : \l# accept(ISourceType, PackageBinding, AccessRestriction) : \l# accept(org, AccessRestriction) : \l# beginToCompile(org, String) : \l# createBinding(String) : IBinding\l# convert(CompilationUnitDeclaration, char, int, Map, boolean, WorkingCopyOwner, DefaultBindingResolver, int, IProgressMonitor, boolean) : CompilationUnit\l# getCompilerOptions(Map, boolean) : CompilerOptions\l# getHandlingPolicy() : IErrorHandlingPolicy\l# stopOnFirstError() : boolean\l# proceedOnErrors() : boolean\l# ignoreAllErrors() : boolean\l# getRequestor() : ICompilerRequestor\l# acceptResult(CompilationResult) : \l# initializeParser() : \l# process(CompilationUnitDeclaration, int) : \l# handleInternalException(Throwable, CompilationUnitDeclaration, CompilationResult) : \l# handleInternalException(AbortCompilation, CompilationUnitDeclaration) : \l# parse(ICompilationUnit, ASTRequestor, int, Map, int, IProgressMonitor) : \l# parse(String, String, FileASTRequestor, int, Map, int, IProgressMonitor) : \l# parse(org, NodeSearcher, Map, int) : CompilationUnitDeclaration\l# resolve(ICompilationUnit, String, ASTRequestor, int, Map, IJavaProject, WorkingCopyOwner, int, IProgressMonitor) : \l# resolve(String, String, String, FileASTRequestor, int, Map, List, int, IProgressMonitor) : \l# resolve(org, IJavaProject, List, NodeSearcher, Map, WorkingCopyOwner, int, IProgressMonitor) : CompilationUnitDeclaration\l# resolve(IJavaElement, int, Map, IJavaProject, WorkingCopyOwner, int, IProgressMonitor) : IBinding\l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# removeUnresolvedBindings(CompilationUnitDeclaration) : \l# removeUnresolvedBindings(org) : \l# resolve(ICompilationUnit, String, ASTRequestor, int, Map, WorkingCopyOwner, int) : \l# resolve(String, String, String, FileASTRequestor, int, Map, int) : \l# reportBinding(Object, ASTRequestor, WorkingCopyOwner, CompilationUnitDeclaration) : \l# reportBinding(Object, FileASTRequestor, CompilationUnitDeclaration) : \l# resolve(CompilationUnitDeclaration, org, NodeSearcher, boolean, boolean, boolean) : CompilationUnitDeclaration\l# resolve(org, boolean, boolean, boolean) : CompilationUnitDeclaration\l# resolvedRequestedSourcesAndKeys(int) : boolean\l# resolve(CompilationUnitDeclaration, org, boolean, boolean, boolean) : CompilationUnitDeclaration\l# worked(int) : \l}"
	 ]

	 ConditionalExpression [
		 label = "{ConditionalExpression|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ THEN_EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ ELSE_EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- conditionExpression : Expression\l- thenExpression : Expression\l- elseExpression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ConditionalExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getThenExpression() : Expression\l# setThenExpression(Expression) : \l# getElseExpression() : Expression\l# setElseExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ConstructorInvocation [
		 label = "{ConstructorInvocation|+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- typeArguments : ASTNode\l- arguments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# ConstructorInvocation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# typeArguments() : List\l# arguments() : List\l# resolveConstructorBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ContinueStatement [
		 label = "{ContinueStatement|+ LABEL_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalLabel : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# ContinueStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getLabel() : SimpleName\l# setLabel(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 CreationReference [
		 label = "{CreationReference|+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- type : Type\l|# null() : \l# propertyDescriptors(int) : List\l# CreationReference(AST) : \l# internalTypeArgumentsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# typeArguments() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 DefaultASTVisitor [
		 label = "{DefaultASTVisitor||# DefaultASTVisitor() : \l# DefaultASTVisitor(boolean) : \l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# endVisit(ArrayAccess) : \l# endVisit(ArrayCreation) : \l# endVisit(ArrayInitializer) : \l# endVisit(ArrayType) : \l# endVisit(AssertStatement) : \l# endVisit(Assignment) : \l# endVisit(Block) : \l# endVisit(BlockComment) : \l# endVisit(BooleanLiteral) : \l# endVisit(BreakStatement) : \l# endVisit(CastExpression) : \l# endVisit(CatchClause) : \l# endVisit(CharacterLiteral) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(CompilationUnit) : \l# endVisit(ConditionalExpression) : \l# endVisit(ConstructorInvocation) : \l# endVisit(ContinueStatement) : \l# endVisit(CreationReference) : \l# endVisit(Dimension) : \l# endVisit(DoStatement) : \l# endVisit(EmptyStatement) : \l# endVisit(EnhancedForStatement) : \l# endVisit(EnumConstantDeclaration) : \l# endVisit(EnumDeclaration) : \l# endVisit(ExpressionMethodReference) : \l# endVisit(ExpressionStatement) : \l# endVisit(FieldAccess) : \l# endVisit(FieldDeclaration) : \l# endVisit(ForStatement) : \l# endVisit(IfStatement) : \l# endVisit(ImportDeclaration) : \l# endVisit(InfixExpression) : \l# endVisit(Initializer) : \l# endVisit(InstanceofExpression) : \l# endVisit(IntersectionType) : \l# endVisit(Javadoc) : \l# endVisit(LabeledStatement) : \l# endVisit(LambdaExpression) : \l# endVisit(LineComment) : \l# endVisit(MarkerAnnotation) : \l# endVisit(MemberRef) : \l# endVisit(MemberValuePair) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodInvocation) : \l# endVisit(MethodRef) : \l# endVisit(MethodRefParameter) : \l# endVisit(Modifier) : \l# endVisit(NameQualifiedType) : \l# endVisit(NormalAnnotation) : \l# endVisit(NullLiteral) : \l# endVisit(NumberLiteral) : \l# endVisit(PackageDeclaration) : \l# endVisit(ParameterizedType) : \l# endVisit(ParenthesizedExpression) : \l# endVisit(PostfixExpression) : \l# endVisit(PrefixExpression) : \l# endVisit(PrimitiveType) : \l# endVisit(QualifiedName) : \l# endVisit(QualifiedType) : \l# endVisit(ReturnStatement) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleMemberAnnotation) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(StringLiteral) : \l# endVisit(SuperConstructorInvocation) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(SuperMethodReference) : \l# endVisit(SwitchCase) : \l# endVisit(SwitchStatement) : \l# endVisit(SynchronizedStatement) : \l# endVisit(TagElement) : \l# endVisit(TextElement) : \l# endVisit(ThisExpression) : \l# endVisit(ThrowStatement) : \l# endVisit(TryStatement) : \l# endVisit(TypeDeclaration) : \l# endVisit(TypeDeclarationStatement) : \l# endVisit(TypeLiteral) : \l# endVisit(TypeMethodReference) : \l# endVisit(TypeParameter) : \l# endVisit(UnionType) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(VariableDeclarationFragment) : \l# endVisit(VariableDeclarationStatement) : \l# endVisit(WhileStatement) : \l# endVisit(WildcardType) : \l# endVisitNode(ASTNode) : \l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnnotationTypeMemberDeclaration) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(ArrayAccess) : boolean\l# visit(ArrayCreation) : boolean\l# visit(ArrayInitializer) : boolean\l# visit(ArrayType) : boolean\l# visit(AssertStatement) : boolean\l# visit(Assignment) : boolean\l# visit(Block) : boolean\l# visit(BlockComment) : boolean\l# visit(BooleanLiteral) : boolean\l# visit(BreakStatement) : boolean\l# visit(CastExpression) : boolean\l# visit(CatchClause) : boolean\l# visit(CharacterLiteral) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(CompilationUnit) : boolean\l# visit(ConditionalExpression) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(ContinueStatement) : boolean\l# visit(CreationReference) : boolean\l# visit(Dimension) : boolean\l# visit(DoStatement) : boolean\l# visit(EmptyStatement) : boolean\l# visit(EnhancedForStatement) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(ExpressionMethodReference) : boolean\l# visit(ExpressionStatement) : boolean\l# visit(FieldAccess) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(ForStatement) : boolean\l# visit(IfStatement) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(InfixExpression) : boolean\l# visit(Initializer) : boolean\l# visit(InstanceofExpression) : boolean\l# visit(IntersectionType) : boolean\l# visit(Javadoc) : boolean\l# visit(LabeledStatement) : boolean\l# visit(LambdaExpression) : boolean\l# visit(LineComment) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(MemberRef) : boolean\l# visit(MemberValuePair) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(MethodInvocation) : boolean\l# visit(MethodRef) : boolean\l# visit(Modifier) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(NameQualifiedType) : boolean\l# visit(NormalAnnotation) : boolean\l# visit(NullLiteral) : boolean\l# visit(NumberLiteral) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ParameterizedType) : boolean\l# visit(ParenthesizedExpression) : boolean\l# visit(PostfixExpression) : boolean\l# visit(PrefixExpression) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(QualifiedType) : boolean\l# visit(ReturnStatement) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(StringLiteral) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(SuperFieldAccess) : boolean\l# visit(SuperMethodInvocation) : boolean\l# visit(SuperMethodReference) : boolean\l# visit(SwitchCase) : boolean\l# visit(SwitchStatement) : boolean\l# visit(SynchronizedStatement) : boolean\l# visit(TagElement) : boolean\l# visit(TextElement) : boolean\l# visit(ThisExpression) : boolean\l# visit(ThrowStatement) : boolean\l# visit(TryStatement) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(TypeLiteral) : boolean\l# visit(TypeMethodReference) : boolean\l# visit(TypeParameter) : boolean\l# visit(UnionType) : boolean\l# visit(VariableDeclarationExpression) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(VariableDeclarationStatement) : boolean\l# visit(WhileStatement) : boolean\l# visit(WildcardType) : boolean\l# visitNode(ASTNode) : boolean\l}"
	 ]

	 AnnotationIdentityBinding [
		 label = "{AnnotationIdentityBinding|# bindingKeysToBindings : Map\l# compilerBindingsToASTBindings : Map\l# compilerAnnotationBindingsToASTBindings : Map\l# astNodesToBlockScope : Map\l# bindingsToAstNodes : Map\l# bindingTables : BindingTables\l# newAstToOldAst : Map\l- scope : CompilationUnitScope\l# workingCopyOwner : WorkingCopyOwner\l# isRecoveringBindings : boolean\l# fromJavaProject : boolean\l# internalInstance : org\l|# null() : \l# BindingTables() : \l# DefaultBindingResolver(CompilationUnitScope, WorkingCopyOwner, BindingTables, boolean, boolean) : \l# DefaultBindingResolver(LookupEnvironment, WorkingCopyOwner, BindingTables, boolean, boolean) : \l# findDeclaringNode(IBinding) : ASTNode\l# findDeclaringNode(String) : ASTNode\l# getBinding(org) : IBinding\l# getBindingsToNodesMap() : Util\l# get(Binding) : org\l# getCorrespondingNode(ASTNode) : org\l# getMethodBinding(org) : IMethodBinding\l# getMethodOrLambdaBinding(org, org, IBinding) : IMethodBinding\l# getMemberValuePairBinding(ElementValuePair) : IMemberValuePairBinding\l# getPackageBinding(org) : IPackageBinding\l# getTypeCount(ParameterizedQualifiedTypeReference) : int\l# getTypeBinding(VariableDeclaration) : ITypeBinding\l# getTypeBinding(Type) : ITypeBinding\l# getTypeBinding(org) : ITypeBinding\l# internalGetTypeBinding(org, IBinding) : ITypeBinding\l# getTypeBinding(RecoveredTypeBinding, int) : ITypeBinding\l# getVariableBinding(org, VariableDeclaration) : IVariableBinding\l# getWorkingCopyOwner() : WorkingCopyOwner\l# getVariableBinding(org) : IVariableBinding\l# null() : \l# AnnotationIdentityBinding(org) : \l+ equals(Object) : boolean\l+ hashCode() : int\l# getAnnotationInstance(org) : IAnnotationBinding\l# isResolvedTypeInferredFromExpectedType(MethodInvocation) : boolean\l# isResolvedTypeInferredFromExpectedType(SuperMethodInvocation) : boolean\l# isResolvedTypeInferredFromExpectedType(ClassInstanceCreation) : boolean\l# lookupEnvironment() : LookupEnvironment\l# recordScope(ASTNode, BlockScope) : \l# resolveBoxing(Expression) : boolean\l# resolveUnboxing(Expression) : boolean\l# resolveConstantExpressionValue(Expression) : Object\l# resolveConstructor(ClassInstanceCreation) : IMethodBinding\l# resolveConstructor(ConstructorInvocation) : IMethodBinding\l# resolveConstructor(EnumConstantDeclaration) : IMethodBinding\l# resolveConstructor(SuperConstructorInvocation) : IMethodBinding\l# resolveExpressionType(Expression) : ITypeBinding\l# resolveField(FieldAccess) : IVariableBinding\l# resolveField(SuperFieldAccess) : IVariableBinding\l# resolveImport(ImportDeclaration) : IBinding\l# resolveMember(AnnotationTypeMemberDeclaration) : IMethodBinding\l# resolveMethod(LambdaExpression) : IMethodBinding\l# getDeclaringMember(org, Scope) : IBinding\l# resolveMethod(MethodDeclaration) : IMethodBinding\l# resolveMethod(MethodInvocation) : IMethodBinding\l# resolveMethod(MethodReference) : IMethodBinding\l# resolveMethod(SuperMethodInvocation) : IMethodBinding\l# resolveTypeBindingForName(Name) : ITypeBinding\l# resolveName(Name) : IBinding\l# resolvePackage(PackageDeclaration) : IPackageBinding\l# resolveReference(MemberRef) : IBinding\l# resolveMemberValuePair(org) : IMemberValuePairBinding\l# resolveReference(MethodRef) : IBinding\l# resolveType(AnnotationTypeDeclaration) : ITypeBinding\l# resolveType(AnonymousClassDeclaration) : ITypeBinding\l# resolveType(EnumDeclaration) : ITypeBinding\l# resolveType(Type) : ITypeBinding\l# getTypeAnnotations(int, ArrayBinding, boolean) : org\l# resolveType(TypeDeclaration) : ITypeBinding\l# resolveTypeParameter(TypeParameter) : ITypeBinding\l# resolveVariable(EnumConstantDeclaration) : IVariableBinding\l# resolveVariable(VariableDeclaration) : IVariableBinding\l# resolveWellKnownType(String) : ITypeBinding\l# resolveAnnotation(Annotation) : IAnnotationBinding\l# scope() : CompilationUnitScope\l# store(ASTNode, org) : \l# updateKey(ASTNode, ASTNode) : \l# resolveArrayType(ITypeBinding, int) : ITypeBinding\l# insertAnnotations(org, int) : org\l}"
	 ]

	 CommentMapperVisitor [
		 label = "{CommentMapperVisitor|# comments : Comment\l# scanner : Scanner\l# leadingPtr : int\l# leadingNodes : ASTNode\l# leadingIndexes : long\l# trailingPtr : int\l# trailingNodes : ASTNode\l# trailingIndexes : long\l# STORAGE_INCREMENT : int\l# topSiblingParent : ASTNode\l# siblings : ASTNode\l# parentLineRange : int\l# siblingPtr : int\l|# DefaultCommentMapper(Comment) : \l# hasSameTable(Comment) : boolean\l# getComment(int) : Comment\l# getCommentIndex(int, int, int) : int\l# getExtendedStartPosition(ASTNode) : int\l# getLineNumber(int, int) : int\l# getExtendedEnd(ASTNode) : int\l# getExtendedLength(ASTNode) : int\l# firstLeadingCommentIndex(ASTNode) : int\l# lastTrailingCommentIndex(ASTNode) : int\l# initialize(CompilationUnit, Scanner) : \l# storeLeadingComments(ASTNode, int, int) : int\l# storeTrailingComments(ASTNode, int, boolean, int) : int\l# null() : \l# visitNode(ASTNode) : boolean\l# endVisitNode(ASTNode) : \l# visit(Modifier) : boolean\l# visit(CompilationUnit) : boolean\l}"
	 ]

	 DefaultValuePairBinding [
		 label = "{DefaultValuePairBinding|- method : org\l|# DefaultValuePairBinding(org, BindingResolver) : \l# getMethodBinding() : IMethodBinding\l# getName() : String\l# getValue() : Object\l# isDefault() : boolean\l# isDeprecated() : boolean\l}"
	 ]

	 Dimension [
		 label = "{Dimension|+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- annotations : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# Dimension(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# annotations() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 DocCommentParser [
		 label = "{DocCommentParser|- docComment : Javadoc\l- ast : AST\l|# DocCommentParser(AST, Scanner, boolean) : \l# parse(int) : Javadoc\l# parse(int, int) : Javadoc\l# setComment(int, int) : \l# toString() : String\l# createArgumentReference(char, int, boolean, Object, long, long) : Object\l# createFieldReference(Object) : Object\l# createMethodReference(Object, List) : Object\l# createTag() : \l# createTypeReference(int) : Object\l# parseIdentifierTag(boolean) : boolean\l# parseReturn() : boolean\l# parseTag(int) : boolean\l# pushParamName(boolean) : boolean\l# pushSeeRef(Object) : boolean\l# pushText(int, int) : \l# pushThrowName(Object) : boolean\l# refreshInlineTagPosition(int) : \l# updateDocComment() : \l}"
	 ]

	 DoStatement [
		 label = "{DoStatement|+ BODY_PROPERTY : ChildPropertyDescriptor\l+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- body : Statement\l- expression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# DoStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getBody() : Statement\l# setBody(Statement) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 EmptyStatement [
		 label = "{EmptyStatement|- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# EmptyStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# treeSize() : int\l}"
	 ]

	 EnhancedForStatement [
		 label = "{EnhancedForStatement|+ PARAMETER_PROPERTY : ChildPropertyDescriptor\l+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- parameter : SingleVariableDeclaration\l- expression : Expression\l- body : Statement\l|# null() : \l# propertyDescriptors(int) : List\l# EnhancedForStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getParameter() : SingleVariableDeclaration\l# setParameter(SingleVariableDeclaration) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getBody() : Statement\l# setBody(Statement) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 EnumConstantDeclaration [
		 label = "{EnumConstantDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ ANONYMOUS_CLASS_DECLARATION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- constantName : SimpleName\l- arguments : ASTNode\l- optionalAnonymousClassDeclaration : AnonymousClassDeclaration\l|# null() : \l# propertyDescriptors(int) : List\l# EnumConstantDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# arguments() : List\l# getAnonymousClassDeclaration() : AnonymousClassDeclaration\l# setAnonymousClassDeclaration(AnonymousClassDeclaration) : \l# resolveConstructorBinding() : IMethodBinding\l# resolveVariable() : IVariableBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 EnumDeclaration [
		 label = "{EnumDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ SUPER_INTERFACE_TYPES_PROPERTY : ChildListPropertyDescriptor\l+ ENUM_CONSTANTS_PROPERTY : ChildListPropertyDescriptor\l+ BODY_DECLARATIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- superInterfaceTypes : ASTNode\l- enumConstants : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# EnumDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# internalNameProperty() : ChildPropertyDescriptor\l# internalBodyDeclarationsProperty() : ChildListPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# superInterfaceTypes() : List\l# enumConstants() : List\l# internalResolveBinding() : ITypeBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Expression [
		 label = "{Expression||# Expression(AST) : \l# resolveConstantExpressionValue() : Object\l# resolveTypeBinding() : ITypeBinding\l# resolveBoxing() : boolean\l# resolveUnboxing() : boolean\l}"
	 ]

	 ExpressionMethodReference [
		 label = "{ExpressionMethodReference|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- expression : Expression\l- methodName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# ExpressionMethodReference(AST) : \l# internalTypeArgumentsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# typeArguments() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ExpressionStatement [
		 label = "{ExpressionStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ExpressionStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 FieldAccess [
		 label = "{FieldAccess|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- fieldName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# FieldAccess(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# resolveFieldBinding() : IVariableBinding\l# treeSize() : int\l}"
	 ]

	 FieldDeclaration [
		 label = "{FieldDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ FRAGMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- baseType : Type\l- variableDeclarationFragments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# FieldDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# fragments() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 FileASTRequestor [
		 label = "{FileASTRequestor|# compilationUnitResolver : CompilationUnitResolver\l|# acceptAST(String, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# createBindings(String) : IBinding\l}"
	 ]

	 ForStatement [
		 label = "{ForStatement|+ INITIALIZERS_PROPERTY : ChildListPropertyDescriptor\l+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ UPDATERS_PROPERTY : ChildListPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- initializers : ASTNode\l- optionalConditionExpression : Expression\l- updaters : ASTNode\l- body : Statement\l|# null() : \l# propertyDescriptors(int) : List\l# ForStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# initializers() : List\l# getExpression() : Expression\l# setExpression(Expression) : \l# updaters() : List\l# getBody() : Statement\l# setBody(Statement) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 IAnnotationBinding [
		 label = "{IAnnotationBinding||# getAllMemberValuePairs() : IMemberValuePairBinding\l# getAnnotationType() : ITypeBinding\l# getDeclaredMemberValuePairs() : IMemberValuePairBinding\l# getName() : String\l}"
	 ]

	 IBinding [
		 label = "{IBinding||# PACKAGE() : int\l# TYPE() : int\l# VARIABLE() : int\l# METHOD() : int\l# ANNOTATION() : int\l# MEMBER_VALUE_PAIR() : int\l# getAnnotations() : IAnnotationBinding\l# getKind() : int\l# getName() : String\l# getModifiers() : int\l# isDeprecated() : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# getJavaElement() : IJavaElement\l# getKey() : String\l# equals(Object) : boolean\l# isEqualTo(IBinding) : boolean\l# toString() : String\l}"
	 ]

	 IDocElement [
		 label = "{IDocElement||}"
	 ]

	 IExtendedModifier [
		 label = "{IExtendedModifier||# isModifier() : boolean\l# isAnnotation() : boolean\l}"
	 ]

	 IfStatement [
		 label = "{IfStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ THEN_STATEMENT_PROPERTY : ChildPropertyDescriptor\l+ ELSE_STATEMENT_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- thenStatement : Statement\l- optionalElseStatement : Statement\l|# null() : \l# propertyDescriptors(int) : List\l# IfStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getThenStatement() : Statement\l# setThenStatement(Statement) : \l# getElseStatement() : Statement\l# setElseStatement(Statement) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 IMemberValuePairBinding [
		 label = "{IMemberValuePairBinding||# getName() : String\l# getMethodBinding() : IMethodBinding\l# getValue() : Object\l# isDefault() : boolean\l}"
	 ]

	 IMethodBinding [
		 label = "{IMethodBinding||# isConstructor() : boolean\l# isDefaultConstructor() : boolean\l# getName() : String\l# getDeclaringClass() : ITypeBinding\l# getDeclaringMember() : IBinding\l# getDefaultValue() : Object\l# getParameterAnnotations(int) : IAnnotationBinding\l# getParameterTypes() : ITypeBinding\l# getDeclaredReceiverType() : ITypeBinding\l# getReturnType() : ITypeBinding\l# getExceptionTypes() : ITypeBinding\l# getTypeParameters() : ITypeBinding\l# isAnnotationMember() : boolean\l# isGenericMethod() : boolean\l# isParameterizedMethod() : boolean\l# getTypeArguments() : ITypeBinding\l# getMethodDeclaration() : IMethodBinding\l# isRawMethod() : boolean\l# isSubsignature(IMethodBinding) : boolean\l# isVarargs() : boolean\l# overrides(IMethodBinding) : boolean\l}"
	 ]

	 ImportDeclaration [
		 label = "{ImportDeclaration|+ NAME_PROPERTY : ChildPropertyDescriptor\l+ ON_DEMAND_PROPERTY : SimplePropertyDescriptor\l+ STATIC_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- importName : Name\l- onDemand : boolean\l- isStatic : boolean\l|# null() : \l# propertyDescriptors(int) : List\l# ImportDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getName() : Name\l# setName(Name) : \l# isOnDemand() : boolean\l# setOnDemand(boolean) : \l# isStatic() : boolean\l# setStatic(boolean) : \l# resolveBinding() : IBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Operator [
		 label = "{Operator|- token : String\l+ TIMES : Operator\l+ DIVIDE : Operator\l+ REMAINDER : Operator\l+ PLUS : Operator\l+ MINUS : Operator\l+ LEFT_SHIFT : Operator\l+ RIGHT_SHIFT_SIGNED : Operator\l+ RIGHT_SHIFT_UNSIGNED : Operator\l+ LESS : Operator\l+ GREATER : Operator\l+ LESS_EQUALS : Operator\l+ GREATER_EQUALS : Operator\l+ EQUALS : Operator\l+ NOT_EQUALS : Operator\l+ XOR : Operator\l+ OR : Operator\l+ AND : Operator\l+ CONDITIONAL_OR : Operator\l+ CONDITIONAL_AND : Operator\l- CODES : Map\l+ LEFT_OPERAND_PROPERTY : ChildPropertyDescriptor\l+ OPERATOR_PROPERTY : SimplePropertyDescriptor\l+ RIGHT_OPERAND_PROPERTY : ChildPropertyDescriptor\l+ EXTENDED_OPERANDS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- operator : InfixExpression\l- leftOperand : Expression\l- rightOperand : Expression\l- extendedOperands : ASTNode\l|# null() : \l# Operator(String) : \l# toString() : String\l# null() : \l# toOperator(String) : Operator\l# null() : \l# propertyDescriptors(int) : List\l# InfixExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getOperator() : InfixExpression\l# setOperator(InfixExpression) : \l# getLeftOperand() : Expression\l# setLeftOperand(Expression) : \l# getRightOperand() : Expression\l# setRightOperand(Expression) : \l# hasExtendedOperands() : boolean\l# extendedOperands() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Initializer [
		 label = "{Initializer|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- body : Block\l|# null() : \l# propertyDescriptors(int) : List\l# Initializer(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getBody() : Block\l# setBody(Block) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 InstanceofExpression [
		 label = "{InstanceofExpression|+ LEFT_OPERAND_PROPERTY : ChildPropertyDescriptor\l+ RIGHT_OPERAND_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- leftOperand : Expression\l- rightOperand : Type\l|# null() : \l# propertyDescriptors(int) : List\l# InstanceofExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getLeftOperand() : Expression\l# setLeftOperand(Expression) : \l# getRightOperand() : Type\l# setRightOperand(Type) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 InternalASTRewrite [
		 label = "{InternalASTRewrite|- root : CompilationUnit\l# eventStore : RewriteEventStore\l# nodeStore : NodeInfoStore\l# clonedNodes : Hashtable\l# cloneDepth : int\l|# InternalASTRewrite(CompilationUnit) : \l# rewriteAST(IDocument, Map) : TextEdit\l# computeSourceRange(ASTNode) : SourceRange\l# markAsMoveOrCopyTarget(ASTNode, ASTNode) : \l# getRootNode() : CompilationUnit\l# toString() : String\l# preValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# postValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# preAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preRemoveChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preReplaceChildEvent(ASTNode, ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preCloneNodeEvent(ASTNode) : \l# postCloneNodeEvent(ASTNode, ASTNode) : \l# getNodeEvent(ASTNode, StructuralPropertyDescriptor) : NodeRewriteEvent\l# getListEvent(ASTNode, StructuralPropertyDescriptor) : ListRewriteEvent\l}"
	 ]

	 IntersectionType [
		 label = "{IntersectionType|+ TYPES_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- types : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# IntersectionType(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# types() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 IPackageBinding [
		 label = "{IPackageBinding||# getName() : String\l# isUnnamed() : boolean\l# getNameComponents() : String\l}"
	 ]

	 ITypeBinding [
		 label = "{ITypeBinding||# createArrayType(int) : ITypeBinding\l# getBinaryName() : String\l# getBound() : ITypeBinding\l# getGenericTypeOfWildcardType() : ITypeBinding\l# getRank() : int\l# getComponentType() : ITypeBinding\l# getDeclaredFields() : IVariableBinding\l# getDeclaredMethods() : IMethodBinding\l# getDeclaredModifiers() : int\l# getDeclaredTypes() : ITypeBinding\l# getDeclaringClass() : ITypeBinding\l# getDeclaringMethod() : IMethodBinding\l# getDeclaringMember() : IBinding\l# getDimensions() : int\l# getElementType() : ITypeBinding\l# getErasure() : ITypeBinding\l# getFunctionalInterfaceMethod() : IMethodBinding\l# getInterfaces() : ITypeBinding\l# getModifiers() : int\l# getName() : String\l# getPackage() : IPackageBinding\l# getQualifiedName() : String\l# getSuperclass() : ITypeBinding\l# getTypeAnnotations() : IAnnotationBinding\l# getTypeAnnotationsOnDimensions() : IAnnotationBinding\l# getTypeArguments() : ITypeBinding\l# getTypeBounds() : ITypeBinding\l# getTypeDeclaration() : ITypeBinding\l# getTypeParameters() : ITypeBinding\l# getWildcard() : ITypeBinding\l# isAnnotation() : boolean\l# isAnonymous() : boolean\l# isArray() : boolean\l# isAssignmentCompatible(ITypeBinding) : boolean\l# isCapture() : boolean\l# isCastCompatible(ITypeBinding) : boolean\l# isClass() : boolean\l# isEnum() : boolean\l# isFromSource() : boolean\l# isGenericType() : boolean\l# isInterface() : boolean\l# isIntersectionType() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isNested() : boolean\l# isNullType() : boolean\l# isParameterizedType() : boolean\l# isPrimitive() : boolean\l# isRawType() : boolean\l# isSubTypeCompatible(ITypeBinding) : boolean\l# isTopLevel() : boolean\l# isTypeVariable() : boolean\l# isUpperbound() : boolean\l# isWildcardType() : boolean\l}"
	 ]

	 IVariableBinding [
		 label = "{IVariableBinding||# isField() : boolean\l# isEnumConstant() : boolean\l# isParameter() : boolean\l# getName() : String\l# getDeclaringClass() : ITypeBinding\l# getType() : ITypeBinding\l# getVariableId() : int\l# getConstantValue() : Object\l# getDeclaringMethod() : IMethodBinding\l# getVariableDeclaration() : IVariableBinding\l# isEffectivelyFinal() : boolean\l}"
	 ]

	 Javadoc [
		 label = "{Javadoc|+ COMMENT_PROPERTY : SimplePropertyDescriptor\l+ TAGS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- MINIMAL_DOC_COMMENT : String\l- comment : String\l- tags : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# Javadoc(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getComment() : String\l# setComment(String) : \l# tags() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 LabeledStatement [
		 label = "{LabeledStatement|+ LABEL_PROPERTY : ChildPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- labelName : SimpleName\l- body : Statement\l|# null() : \l# propertyDescriptors(int) : List\l# LabeledStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getLabel() : SimpleName\l# setLabel(SimpleName) : \l# getBody() : Statement\l# setBody(Statement) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 LambdaExpression [
		 label = "{LambdaExpression|+ PARENTHESES_PROPERTY : SimplePropertyDescriptor\l+ PARAMETERS_PROPERTY : ChildListPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- hasParentheses : boolean\l- parameters : ASTNode\l- body : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# LambdaExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# hasParentheses() : boolean\l# setParentheses(boolean) : \l# parameters() : List\l# getBody() : ASTNode\l# setBody(ASTNode) : \l# resolveMethodBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 LineComment [
		 label = "{LineComment|- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# LineComment(AST) : \l# internalStructuralPropertiesForType(int) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MarkerAnnotation [
		 label = "{MarkerAnnotation|+ TYPE_NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# MarkerAnnotation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalTypeNameProperty() : ChildPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MemberRef [
		 label = "{MemberRef|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalQualifier : Name\l- memberName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# MemberRef(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# resolveBinding() : IBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MemberValuePair [
		 label = "{MemberValuePair|+ NAME_PROPERTY : ChildPropertyDescriptor\l+ VALUE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- name : SimpleName\l- value : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# MemberValuePair(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getName() : SimpleName\l# resolveMemberValuePairBinding() : IMemberValuePairBinding\l# setName(SimpleName) : \l# getValue() : Expression\l# setValue(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MemberValuePairBinding [
		 label = "{MemberValuePairBinding|# NoPair : MemberValuePairBinding\l- NoValue : Object\l- EmptyArray : Object\l- internalPair : ElementValuePair\l# value : Object\l# bindingResolver : BindingResolver\l|# appendValue(Object, StringBuffer) : \l# buildDOMValue(Object, BindingResolver) : Object\l# MemberValuePairBinding(ElementValuePair, BindingResolver) : \l# getAnnotations() : IAnnotationBinding\l# getJavaElement() : IJavaElement\l# getKey() : String\l# getKind() : int\l# getMethodBinding() : IMethodBinding\l# getModifiers() : int\l# getName() : String\l# getValue() : Object\l# init() : \l# internalName() : char\l# isDefault() : boolean\l# isDeprecated() : boolean\l# isEqualTo(IBinding) : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# toString() : String\l}"
	 ]

	 Message [
		 label = "{Message|- message : String\l- startPosition : int\l- length : int\l|# Message(String, int) : \l# Message(String, int, int) : \l# getMessage() : String\l# getSourcePosition() : int\l# getStartPosition() : int\l# getLength() : int\l}"
	 ]

	 LambdaMethod [
		 label = "{LambdaMethod|- VALID_MODIFIERS : int\l- NO_TYPE_BINDINGS : ITypeBinding\l# binding : org\l# resolver : BindingResolver\l- parameterTypes : ITypeBinding\l- exceptionTypes : ITypeBinding\l- name : String\l- declaringClass : ITypeBinding\l- returnType : ITypeBinding\l- key : String\l- typeParameters : ITypeBinding\l- typeArguments : ITypeBinding\l- annotations : IAnnotationBinding\l- parameterAnnotations : IAnnotationBinding\l- implementation : MethodBinding\l- declaringMember : IBinding\l|# MethodBinding(BindingResolver, org) : \l# isAnnotationMember() : boolean\l# isConstructor() : boolean\l# isDefaultConstructor() : boolean\l# getName() : String\l# getAnnotations() : IAnnotationBinding\l# getDeclaringClass() : ITypeBinding\l+ getDeclaringMember() : IBinding\l# getParameterAnnotations(int) : IAnnotationBinding\l# getParameterTypes() : ITypeBinding\l# getDeclaredReceiverType() : ITypeBinding\l# getReturnType() : ITypeBinding\l# filterTypeAnnotations(org) : IAnnotationBinding\l# getDefaultValue() : Object\l# getExceptionTypes() : ITypeBinding\l# getJavaElement() : IJavaElement\l# getUnresolvedJavaElement() : JavaElement\l# getKind() : int\l# getModifiers() : int\l# isDeprecated() : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# isVarargs() : boolean\l# getKey() : String\l# isEqualTo(IBinding) : boolean\l# getTypeParameters() : ITypeBinding\l# isGenericMethod() : boolean\l# getTypeArguments() : ITypeBinding\l# isParameterizedMethod() : boolean\l# isRawMethod() : boolean\l# isSubsignature(IMethodBinding) : boolean\l# getMethodDeclaration() : IMethodBinding\l# overrides(IMethodBinding) : boolean\l# toString() : String\l# null() : \l# LambdaMethod(DefaultBindingResolver, org, org, IBinding) : \l# getModifiers() : int\l# getKey() : String\l+ getParameterTypes() : ITypeBinding\l+ getParameterAnnotations(int) : IAnnotationBinding\l# getAnnotations() : IAnnotationBinding\l+ getDeclaringMember() : IBinding\l+ getMethodDeclaration() : IMethodBinding\l+ toString() : String\l}"
	 ]

	 MethodDeclaration [
		 label = "{MethodDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ CONSTRUCTOR_PROPERTY : SimplePropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ RETURN_TYPE_PROPERTY : ChildPropertyDescriptor\l+ RETURN_TYPE2_PROPERTY : ChildPropertyDescriptor\l+ EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l+ EXTRA_DIMENSIONS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PARAMETERS_PROPERTY : ChildListPropertyDescriptor\l+ PARAMETERS_PROPERTY : ChildListPropertyDescriptor\l+ RECEIVER_TYPE_PROPERTY : ChildPropertyDescriptor\l+ RECEIVER_QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ THROWN_EXCEPTIONS_PROPERTY : ChildListPropertyDescriptor\l+ THROWN_EXCEPTION_TYPES_PROPERTY : ChildListPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- isConstructor : boolean\l- methodName : SimpleName\l- optionalReceiverType : Type\l- optionalReceiverQualifier : SimpleName\l- parameters : ASTNode\l- returnType : Type\l- returnType2Initialized : boolean\l- typeParameters : ASTNode\l- extraArrayDimensions : int\l- extraDimensions : ASTNode\l- thrownExceptions : ASTNode\l- thrownExceptionTypes : ASTNode\l- optionalBody : Block\l|# null() : \l# propertyDescriptors(int) : List\l# MethodDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# isConstructor() : boolean\l# setConstructor(boolean) : \l# typeParameters() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# getReceiverType() : Type\l# setReceiverType(Type) : \l# getReceiverQualifier() : SimpleName\l# setReceiverQualifier(SimpleName) : \l# parameters() : List\l# isVarargs() : boolean\l# thrownExceptions() : List\l# internalThrownExceptions() : List\l# thrownExceptionTypes() : List\l# getReturnType() : Type\l# internalGetReturnType() : Type\l# setReturnType(Type) : \l# internalSetReturnType(Type) : \l# getReturnType2() : Type\l# setReturnType2(Type) : \l# getExtraDimensions() : int\l# setExtraDimensions(int) : \l# extraDimensions() : List\l# getBody() : Block\l# setBody(Block) : \l# resolveBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MethodInvocation [
		 label = "{MethodInvocation|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- optionalExpression : Expression\l- typeArguments : ASTNode\l- methodName : SimpleName\l- arguments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# MethodInvocation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# isResolvedTypeInferredFromExpectedType() : boolean\l# setExpression(Expression) : \l# typeArguments() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# arguments() : List\l# resolveMethodBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MethodRef [
		 label = "{MethodRef|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ PARAMETERS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalQualifier : Name\l- methodName : SimpleName\l- parameters : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# MethodRef(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# parameters() : List\l# resolveBinding() : IBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 MethodReference [
		 label = "{MethodReference|# typeArguments : ASTNode\l# internalTypeArgumentsProperty : ChildListPropertyDescriptor\l|# internalTypeArgumentsFactory(Class) : ChildListPropertyDescriptor\l# getTypeArgumentsProperty() : ChildListPropertyDescriptor\l# MethodReference(AST) : \l# typeArguments() : List\l# resolveMethodBinding() : IMethodBinding\l}"
	 ]

	 MethodRefParameter [
		 label = "{MethodRefParameter|+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ VARARGS_PROPERTY : SimplePropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- type : Type\l- variableArity : boolean\l- optionalParameterName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# MethodRefParameter(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# isVarargs() : boolean\l# setVarargs(boolean) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ModifierKeyword [
		 label = "{ModifierKeyword|+ ABSTRACT_KEYWORD : ModifierKeyword\l+ FINAL_KEYWORD : ModifierKeyword\l- KEYWORDS : Map\l+ NATIVE_KEYWORD : ModifierKeyword\l+ PRIVATE_KEYWORD : ModifierKeyword\l+ PROTECTED_KEYWORD : ModifierKeyword\l+ PUBLIC_KEYWORD : ModifierKeyword\l+ STATIC_KEYWORD : ModifierKeyword\l+ STRICTFP_KEYWORD : ModifierKeyword\l+ SYNCHRONIZED_KEYWORD : ModifierKeyword\l+ TRANSIENT_KEYWORD : ModifierKeyword\l+ VOLATILE_KEYWORD : ModifierKeyword\l+ DEFAULT_KEYWORD : ModifierKeyword\l- flagValue : int\l- keyword : String\l+ ABSTRACT : int\l+ FINAL : int\l+ KEYWORD_PROPERTY : SimplePropertyDescriptor\l+ NATIVE : int\l+ NONE : int\l+ PRIVATE : int\l- PROPERTY_DESCRIPTORS : List\l+ PROTECTED : int\l+ PUBLIC : int\l+ STATIC : int\l+ STRICTFP : int\l+ SYNCHRONIZED : int\l+ TRANSIENT : int\l+ VOLATILE : int\l+ DEFAULT : int\l- modifierKeyword : ModifierKeyword\l|# null() : \l# null() : \l# fromFlagValue(int) : ModifierKeyword\l# toKeyword(String) : ModifierKeyword\l# ModifierKeyword(String, int) : \l# toFlagValue() : int\l# toString() : String\l# null() : \l# isAbstract(int) : boolean\l# isFinal(int) : boolean\l# isNative(int) : boolean\l# isPrivate(int) : boolean\l# isProtected(int) : boolean\l# isPublic(int) : boolean\l# isStatic(int) : boolean\l# isStrictfp(int) : boolean\l# isSynchronized(int) : boolean\l# isTransient(int) : boolean\l# isVolatile(int) : boolean\l# isDefault(int) : boolean\l# propertyDescriptors(int) : List\l# Modifier(AST) : \l# accept0(ASTVisitor) : \l# clone0(AST) : ASTNode\l# getKeyword() : ModifierKeyword\l# getNodeType0() : int\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalStructuralPropertiesForType(int) : List\l# isAbstract() : boolean\l# isAnnotation() : boolean\l# isFinal() : boolean\l# isModifier() : boolean\l# isNative() : boolean\l# isPrivate() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isStrictfp() : boolean\l# isSynchronized() : boolean\l# isTransient() : boolean\l# isVolatile() : boolean\l# isDefault() : boolean\l# memSize() : int\l# setKeyword(ModifierKeyword) : \l# subtreeMatch0(ASTMatcher, Object) : boolean\l# treeSize() : int\l}"
	 ]

	 Name [
		 label = "{Name|# BASE_NAME_NODE_SIZE : int\l# index : int\l# appendName : null\l|# Name(AST) : \l# isSimpleName() : boolean\l# isQualifiedName() : boolean\l# resolveBinding() : IBinding\l# getFullyQualifiedName(StringBuffer) : String\l}"
	 ]

	 NameEnvironmentWithProgress [
		 label = "{NameEnvironmentWithProgress|# monitor : IProgressMonitor\l|# NameEnvironmentWithProgress(Classpath, String, IProgressMonitor) : \l# checkCanceled() : \l# findType(char, char) : NameEnvironmentAnswer\l# findType(char) : NameEnvironmentAnswer\l# isPackage(char, char) : boolean\l# setMonitor(IProgressMonitor) : \l}"
	 ]

	 NameQualifiedType [
		 label = "{NameQualifiedType|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- qualifier : Name\l- name : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# NameQualifiedType(AST) : \l# internalAnnotationsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# clone0(AST) : ASTNode\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 NodeEventHandler [
		 label = "{NodeEventHandler||# NodeEventHandler() : \l# preRemoveChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postRemoveChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preReplaceChildEvent(ASTNode, ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postReplaceChildEvent(ASTNode, ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# postAddChildEvent(ASTNode, ASTNode, StructuralPropertyDescriptor) : \l# preValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# postValueChangeEvent(ASTNode, SimplePropertyDescriptor) : \l# preCloneNodeEvent(ASTNode) : \l# postCloneNodeEvent(ASTNode, ASTNode) : \l}"
	 ]

	 NodeFinderVisitor [
		 label = "{NodeFinderVisitor|- fStart : int\l- fEnd : int\l- fCoveringNode : ASTNode\l- fCoveredNode : ASTNode\l- fCoveringNode : ASTNode\l- fCoveredNode : ASTNode\l|# null() : \l# NodeFinderVisitor(int, int) : \l# preVisit2(ASTNode) : boolean\l# getCoveredNode() : ASTNode\l# getCoveringNode() : ASTNode\l# perform(ASTNode, int, int) : ASTNode\l# perform(ASTNode, ISourceRange) : ASTNode\l# perform(ASTNode, int, int, ITypeRoot) : ASTNode\l# NodeFinder(ASTNode, int, int) : \l# getCoveredNode() : ASTNode\l# getCoveringNode() : ASTNode\l}"
	 ]

	 NodeSearcher [
		 label = "{NodeSearcher|+ found : org\l+ enclosingType : TypeDeclaration\l+ position : int\l|# NodeSearcher(int) : \l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l}"
	 ]

	 NormalAnnotation [
		 label = "{NormalAnnotation|+ TYPE_NAME_PROPERTY : ChildPropertyDescriptor\l+ VALUES_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- values : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# NormalAnnotation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalTypeNameProperty() : ChildPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# values() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 NullLiteral [
		 label = "{NullLiteral|- PROPERTY_DESCRIPTORS : List\l|# null() : \l# propertyDescriptors(int) : List\l# NullLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 NumberLiteral [
		 label = "{NumberLiteral|+ TOKEN_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- tokenValue : String\l|# null() : \l# propertyDescriptors(int) : List\l# NumberLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getToken() : String\l# setToken(String) : \l# internalSetToken(String) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 PackageBinding [
		 label = "{PackageBinding|- NO_NAME_COMPONENTS : String\l- UNNAMED : String\l- PACKAGE_NAME_SEPARATOR : char\l- binding : org\l- name : String\l- resolver : BindingResolver\l- components : String\l|# PackageBinding(org, BindingResolver) : \l# getAnnotations() : IAnnotationBinding\l# getName() : String\l# isUnnamed() : boolean\l# getNameComponents() : String\l# getKind() : int\l# getModifiers() : int\l# isDeprecated() : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# getJavaElement() : IJavaElement\l# getKey() : String\l# isEqualTo(IBinding) : boolean\l# computeNameAndComponents() : \l# toString() : String\l}"
	 ]

	 PackageDeclaration [
		 label = "{PackageDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l# optionalDocComment : Javadoc\l- annotations : ASTNode\l- packageName : Name\l|# null() : \l# propertyDescriptors(int) : List\l# PackageDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# annotations() : List\l# getJavadoc() : Javadoc\l# setJavadoc(Javadoc) : \l# getName() : Name\l# setName(Name) : \l# resolveBinding() : IPackageBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ParameterizedType [
		 label = "{ParameterizedType|# index : int\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- type : Type\l- typeArguments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# ParameterizedType(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# typeArguments() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ParenthesizedExpression [
		 label = "{ParenthesizedExpression|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ParenthesizedExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Operator [
		 label = "{Operator|- token : String\l+ INCREMENT : Operator\l+ DECREMENT : Operator\l- CODES : Map\l+ OPERATOR_PROPERTY : SimplePropertyDescriptor\l+ OPERAND_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- operator : PostfixExpression\l- operand : Expression\l|# null() : \l# Operator(String) : \l# toString() : String\l# null() : \l# toOperator(String) : Operator\l# null() : \l# propertyDescriptors(int) : List\l# PostfixExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getOperator() : PostfixExpression\l# setOperator(PostfixExpression) : \l# getOperand() : Expression\l# setOperand(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Operator [
		 label = "{Operator|- token : String\l+ INCREMENT : Operator\l+ DECREMENT : Operator\l+ PLUS : Operator\l+ MINUS : Operator\l+ COMPLEMENT : Operator\l+ NOT : Operator\l- CODES : Map\l+ OPERATOR_PROPERTY : SimplePropertyDescriptor\l+ OPERAND_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- operator : PrefixExpression\l- operand : Expression\l|# null() : \l# Operator(String) : \l# toString() : String\l# null() : \l# toOperator(String) : Operator\l# null() : \l# propertyDescriptors(int) : List\l# PrefixExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getOperator() : PrefixExpression\l# setOperator(PrefixExpression) : \l# getOperand() : Expression\l# setOperand(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Code [
		 label = "{Code|- name : String\l+ INT : Code\l+ CHAR : Code\l+ BOOLEAN : Code\l+ SHORT : Code\l+ LONG : Code\l+ FLOAT : Code\l+ DOUBLE : Code\l+ BYTE : Code\l+ VOID : Code\l- typeCode : PrimitiveType\l- CODES : Map\l+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ PRIMITIVE_TYPE_CODE_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l|# null() : \l# Code(String) : \l# toString() : String\l# null() : \l# toCode(String) : PrimitiveType\l# null() : \l# propertyDescriptors(int) : List\l# PrimitiveType(AST) : \l# internalAnnotationsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getPrimitiveTypeCode() : PrimitiveType\l# setPrimitiveTypeCode(PrimitiveType) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 QualifiedName [
		 label = "{QualifiedName|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- qualifier : Name\l- name : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# QualifiedName(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# appendName(StringBuffer) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 QualifiedType [
		 label = "{QualifiedType|# index : int\l+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- qualifier : Type\l- name : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# QualifiedType(AST) : \l# internalAnnotationsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Type\l# setQualifier(Type) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 RecoveredTypeBinding [
		 label = "{RecoveredTypeBinding|- variableDeclaration : VariableDeclaration\l- currentType : Type\l- resolver : BindingResolver\l- dimensions : int\l- innerTypeBinding : RecoveredTypeBinding\l- typeArguments : ITypeBinding\l- binding : org\l|# RecoveredTypeBinding(BindingResolver, VariableDeclaration) : \l# RecoveredTypeBinding(BindingResolver, org) : \l# RecoveredTypeBinding(BindingResolver, Type) : \l# RecoveredTypeBinding(BindingResolver, RecoveredTypeBinding, int) : \l# createArrayType(int) : ITypeBinding\l# getBinaryName() : String\l# getBound() : ITypeBinding\l# getGenericTypeOfWildcardType() : ITypeBinding\l# getRank() : int\l# getComponentType() : ITypeBinding\l# getDeclaredFields() : IVariableBinding\l# getDeclaredMethods() : IMethodBinding\l# getDeclaredModifiers() : int\l# getDeclaredTypes() : ITypeBinding\l# getDeclaringClass() : ITypeBinding\l# getDeclaringMethod() : IMethodBinding\l+ getDeclaringMember() : IBinding\l# getDimensions() : int\l# getElementType() : ITypeBinding\l# getErasure() : ITypeBinding\l+ getFunctionalInterfaceMethod() : IMethodBinding\l# getInterfaces() : ITypeBinding\l# getModifiers() : int\l# getName() : String\l# getInternalName() : String\l# getPackage() : IPackageBinding\l# getQualifiedName() : String\l# getReferenceBinding() : ReferenceBinding\l# getSuperclass() : ITypeBinding\l# getTypeArguments() : ITypeBinding\l# getTypeBounds() : ITypeBinding\l# getTypeDeclaration() : ITypeBinding\l# getTypeParameters() : ITypeBinding\l# getWildcard() : ITypeBinding\l# isAnnotation() : boolean\l# isAnonymous() : boolean\l# isArray() : boolean\l# isAssignmentCompatible(ITypeBinding) : boolean\l# isCapture() : boolean\l# isCastCompatible(ITypeBinding) : boolean\l# isClass() : boolean\l# isEnum() : boolean\l# isFromSource() : boolean\l# isGenericType() : boolean\l# isInterface() : boolean\l# isIntersectionType() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isNested() : boolean\l# isNullType() : boolean\l# isParameterizedType() : boolean\l# isPrimitive() : boolean\l# isRawType() : boolean\l# isSubTypeCompatible(ITypeBinding) : boolean\l# isTopLevel() : boolean\l# isTypeVariable() : boolean\l# isUpperbound() : boolean\l# isWildcardType() : boolean\l# getAnnotations() : IAnnotationBinding\l# getJavaElement() : IJavaElement\l# getKey() : String\l# getKind() : int\l# isDeprecated() : boolean\l# isEqualTo(IBinding) : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# getTypeNameFrom(Type) : String\l# getType() : Type\l# getTypeAnnotations() : IAnnotationBinding\l+ getTypeAnnotationsOnDimensions() : IAnnotationBinding\l}"
	 ]

	 RecoveredVariableBinding [
		 label = "{RecoveredVariableBinding|- variableDeclaration : VariableDeclaration\l- resolver : BindingResolver\l|# RecoveredVariableBinding(BindingResolver, VariableDeclaration) : \l# getConstantValue() : Object\l# getDeclaringClass() : ITypeBinding\l# getDeclaringMethod() : IMethodBinding\l# getName() : String\l# getType() : ITypeBinding\l# getVariableDeclaration() : IVariableBinding\l# getVariableId() : int\l# isEnumConstant() : boolean\l# isField() : boolean\l# isParameter() : boolean\l# getAnnotations() : IAnnotationBinding\l# getJavaElement() : IJavaElement\l# getKey() : String\l# getKind() : int\l# getModifiers() : int\l# isDeprecated() : boolean\l# isEqualTo(IBinding) : boolean\l# isRecovered() : boolean\l# isSynthetic() : boolean\l# isEffectivelyFinal() : boolean\l}"
	 ]

	 ReturnStatement [
		 label = "{ReturnStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalExpression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ReturnStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SimpleName [
		 label = "{SimpleName|+ IDENTIFIER_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- MISSING_IDENTIFIER : String\l- identifier : String\l|# null() : \l# propertyDescriptors(int) : List\l# SimpleName(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getIdentifier() : String\l# setIdentifier(String) : \l# internalSetIdentifier(String) : \l# isDeclaration() : boolean\l# appendName(StringBuffer) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SimplePropertyDescriptor [
		 label = "{SimplePropertyDescriptor|- valueType : Class\l- mandatory : boolean\l|# SimplePropertyDescriptor(Class, String, Class, boolean) : \l# getValueType() : Class\l# isMandatory() : boolean\l}"
	 ]

	 SimpleType [
		 label = "{SimpleType|+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- typeName : Name\l|# null() : \l# propertyDescriptors(int) : List\l# SimpleType(AST) : \l# internalAnnotationsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getName() : Name\l# setName(Name) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SingleMemberAnnotation [
		 label = "{SingleMemberAnnotation|+ TYPE_NAME_PROPERTY : ChildPropertyDescriptor\l+ VALUE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- value : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# SingleMemberAnnotation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalTypeNameProperty() : ChildPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getValue() : Expression\l# setValue(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SingleVariableDeclaration [
		 label = "{SingleVariableDeclaration|+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ VARARGS_ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ VARARGS_PROPERTY : SimplePropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l+ EXTRA_DIMENSIONS2_PROPERTY : ChildListPropertyDescriptor\l+ INITIALIZER_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- modifiers : ASTNode\l- modifierFlags : int\l- type : Type\l- varargsAnnotations : ASTNode\l- variableArity : boolean\l|# null() : \l# propertyDescriptors(int) : List\l# SingleVariableDeclaration(AST) : \l# internalNameProperty() : ChildPropertyDescriptor\l# internalExtraDimensionsProperty() : SimplePropertyDescriptor\l# internalExtraDimensions2Property() : ChildListPropertyDescriptor\l# internalInitializerProperty() : ChildPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# modifiers() : List\l# getModifiers() : int\l# setModifiers(int) : \l# internalSetModifiers(int) : \l# getType() : Type\l# setType(Type) : \l# isVarargs() : boolean\l# setVarargs(boolean) : \l# varargsAnnotations() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Statement [
		 label = "{Statement|- optionalLeadingComment : String\l|# Statement(AST) : \l# getLeadingComment() : String\l# setLeadingComment(String) : \l# copyLeadingComment(Statement) : \l# memSize() : int\l}"
	 ]

	 StringLiteral [
		 label = "{StringLiteral|+ ESCAPED_VALUE_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- escapedValue : String\l|# null() : \l# propertyDescriptors(int) : List\l# StringLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getEscapedValue() : String\l# setEscapedValue(String) : \l# internalSetEscapedValue(String) : \l# getLiteralValue() : String\l# setLiteralValue(String) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 StructuralPropertyDescriptor [
		 label = "{StructuralPropertyDescriptor|- propertyId : String\l- nodeClass : Class\l|# StructuralPropertyDescriptor(Class, String) : \l# getId() : String\l# getNodeClass() : Class\l# isSimpleProperty() : boolean\l# isChildProperty() : boolean\l# isChildListProperty() : boolean\l# toString() : String\l}"
	 ]

	 SuperConstructorInvocation [
		 label = "{SuperConstructorInvocation|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- optionalExpression : Expression\l- typeArguments : ASTNode\l- arguments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# SuperConstructorInvocation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# typeArguments() : List\l# arguments() : List\l# resolveConstructorBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SuperFieldAccess [
		 label = "{SuperFieldAccess|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalQualifier : Name\l- fieldName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# SuperFieldAccess(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# getName() : SimpleName\l# resolveFieldBinding() : IVariableBinding\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SuperMethodInvocation [
		 label = "{SuperMethodInvocation|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- optionalQualifier : Name\l- typeArguments : ASTNode\l- methodName : SimpleName\l- arguments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# SuperMethodInvocation(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# isResolvedTypeInferredFromExpectedType() : boolean\l# setQualifier(Name) : \l# typeArguments() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# arguments() : List\l# resolveMethodBinding() : IMethodBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SuperMethodReference [
		 label = "{SuperMethodReference|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- optionalQualifier : Name\l- methodName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# SuperMethodReference(AST) : \l# internalTypeArgumentsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# typeArguments() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SwitchCase [
		 label = "{SwitchCase|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalExpression : Expression\l- expressionInitialized : boolean\l|# null() : \l# propertyDescriptors(int) : List\l# SwitchCase(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# isDefault() : boolean\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SwitchStatement [
		 label = "{SwitchStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ STATEMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- statements : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# SwitchStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# statements() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 SynchronizedStatement [
		 label = "{SynchronizedStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- body : Block\l|# null() : \l# propertyDescriptors(int) : List\l# SynchronizedStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getBody() : Block\l# setBody(Block) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TagElement [
		 label = "{TagElement|+ TAG_NAME_PROPERTY : SimplePropertyDescriptor\l+ FRAGMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l+ TAG_AUTHOR : String\l+ TAG_CODE : String\l+ TAG_DEPRECATED : String\l+ TAG_DOCROOT : String\l+ TAG_EXCEPTION : String\l+ TAG_INHERITDOC : String\l+ TAG_LINK : String\l+ TAG_LINKPLAIN : String\l+ TAG_LITERAL : String\l+ TAG_PARAM : String\l+ TAG_RETURN : String\l+ TAG_SEE : String\l+ TAG_SERIAL : String\l+ TAG_SERIALDATA : String\l+ TAG_SERIALFIELD : String\l+ TAG_SINCE : String\l+ TAG_THROWS : String\l+ TAG_VALUE : String\l+ TAG_VERSION : String\l- optionalTagName : String\l- fragments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# TagElement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getTagName() : String\l# setTagName(String) : \l# fragments() : List\l# isNested() : boolean\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TextElement [
		 label = "{TextElement|+ TEXT_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- text : String\l|# null() : \l# propertyDescriptors(int) : List\l# TextElement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetObjectProperty(SimplePropertyDescriptor, boolean, Object) : Object\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getText() : String\l# setText(String) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ThisExpression [
		 label = "{ThisExpression|+ QUALIFIER_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- optionalQualifier : Name\l|# null() : \l# propertyDescriptors(int) : List\l# ThisExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getQualifier() : Name\l# setQualifier(Name) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 ThrowStatement [
		 label = "{ThrowStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l|# null() : \l# propertyDescriptors(int) : List\l# ThrowStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TryStatement [
		 label = "{TryStatement|+ RESOURCES_PROPERTY : ChildListPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l+ CATCH_CLAUSES_PROPERTY : ChildListPropertyDescriptor\l+ FINALLY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_4_0 : List\l- resources : ASTNode\l- body : Block\l- catchClauses : ASTNode\l- optionalFinallyBody : Block\l|# null() : \l# propertyDescriptors(int) : List\l# TryStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getBody() : Block\l# setBody(Block) : \l# catchClauses() : List\l# getFinally() : Block\l# setFinally(Block) : \l# resources() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 Type [
		 label = "{Type||# Type(AST) : \l# isPrimitiveType() : boolean\l# isSimpleType() : boolean\l# isArrayType() : boolean\l# isNameQualifiedType() : boolean\l# isParameterizedType() : boolean\l# isQualifiedType() : boolean\l# isUnionType() : boolean\l# isIntersectionType() : boolean\l# isWildcardType() : boolean\l# isAnnotatable() : boolean\l# resolveBinding() : ITypeBinding\l}"
	 ]

	 LocalTypeBinding [
		 label = "{LocalTypeBinding|- EXPRESSION : StringLiteral\l# NO_METHOD_BINDINGS : IMethodBinding\l- NO_NAME : String\l# NO_TYPE_BINDINGS : ITypeBinding\l# NO_VARIABLE_BINDINGS : IVariableBinding\l- VALID_MODIFIERS : int\l# binding : org\l- prototype : TypeBinding\l- key : String\l# resolver : BindingResolver\l- fields : IVariableBinding\l- annotations : IAnnotationBinding\l- typeAnnotations : IAnnotationBinding\l- typeAnnotationsOnDimensions : IAnnotationBinding\l- methods : IMethodBinding\l- members : ITypeBinding\l- interfaces : ITypeBinding\l- typeArguments : ITypeBinding\l- bounds : ITypeBinding\l- typeParameters : ITypeBinding\l- declaringMember : IBinding\l|# createTypeBinding(BindingResolver, org, IBinding) : TypeBinding\l# TypeBinding(BindingResolver, org) : \l# createArrayType(int) : ITypeBinding\l# getAnnotations() : IAnnotationBinding\l# resolveAnnotationBindings(org, boolean) : IAnnotationBinding\l# resolveAnnotationBindingsOnDimensions(org) : IAnnotationBinding\l# getBinaryName() : String\l# getBound() : ITypeBinding\l# getGenericTypeOfWildcardType() : ITypeBinding\l# getRank() : int\l# getComponentType() : ITypeBinding\l# getDeclaredFields() : IVariableBinding\l# getDeclaredMethods() : IMethodBinding\l# getDeclaredModifiers() : int\l# getDeclaredTypes() : ITypeBinding\l# getDeclaringMethod() : IMethodBinding\l# getDeclaringClass() : ITypeBinding\l+ getDeclaringMember() : IBinding\l# getDimensions() : int\l# getElementType() : ITypeBinding\l# getTypeDeclaration() : ITypeBinding\l# getErasure() : ITypeBinding\l+ getFunctionalInterfaceMethod() : IMethodBinding\l# getInterfaces() : ITypeBinding\l# getIntersectingTypes() : ITypeBinding\l# getJavaElement() : IJavaElement\l# getUnresolvedJavaElement() : JavaElement\l# getUnresolvedJavaElement(org) : JavaElement\l# getKey() : String\l# getKind() : int\l# getModifiers() : int\l# getName() : String\l# getPackage() : IPackageBinding\l# getQualifiedName() : String\l# getSuperclass() : ITypeBinding\l# getTypeArguments() : ITypeBinding\l# getTypeBounds() : ITypeBinding\l# getTypeParameters() : ITypeBinding\l# getWildcard() : ITypeBinding\l# isGenericType() : boolean\l# isAnnotation() : boolean\l# isAnonymous() : boolean\l# isArray() : boolean\l# isAssignmentCompatible(ITypeBinding) : boolean\l# isCapture() : boolean\l# isCastCompatible(ITypeBinding) : boolean\l# isClass() : boolean\l# isDeprecated() : boolean\l# isEnum() : boolean\l# isEqualTo(IBinding) : boolean\l# isFromSource() : boolean\l# isInterface() : boolean\l# isIntersectionType() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isNested() : boolean\l# isNullType() : boolean\l# isParameterizedType() : boolean\l# isPrimitive() : boolean\l# isRawType() : boolean\l# isRecovered() : boolean\l# isSubTypeCompatible(ITypeBinding) : boolean\l# isSynthetic() : boolean\l# isTopLevel() : boolean\l# isTypeVariable() : boolean\l# isUpperbound() : boolean\l# isWildcardType() : boolean\l# toString() : String\l# getTypeAnnotations() : IAnnotationBinding\l# getTypeAnnotationsOnDimensions() : IAnnotationBinding\l# null() : \l# LocalTypeBinding(BindingResolver, org, IBinding) : \l+ getDeclaringMember() : IBinding\l}"
	 ]

	 TypeDeclaration [
		 label = "{TypeDeclaration|+ JAVADOC_PROPERTY : ChildPropertyDescriptor\l+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ INTERFACE_PROPERTY : SimplePropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ SUPERCLASS_PROPERTY : ChildPropertyDescriptor\l+ SUPER_INTERFACES_PROPERTY : ChildListPropertyDescriptor\l+ SUPERCLASS_TYPE_PROPERTY : ChildPropertyDescriptor\l+ SUPER_INTERFACE_TYPES_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PARAMETERS_PROPERTY : ChildListPropertyDescriptor\l+ BODY_DECLARATIONS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- isInterface : boolean\l- typeParameters : ASTNode\l- optionalSuperclassName : Name\l- superInterfaceNames : ASTNode\l- optionalSuperclassType : Type\l- superInterfaceTypes : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# TypeDeclaration(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalJavadocProperty() : ChildPropertyDescriptor\l# internalModifiers2Property() : ChildListPropertyDescriptor\l# internalModifiersProperty() : SimplePropertyDescriptor\l# internalNameProperty() : ChildPropertyDescriptor\l# internalBodyDeclarationsProperty() : ChildListPropertyDescriptor\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# isInterface() : boolean\l# setInterface(boolean) : \l# typeParameters() : List\l# getSuperclass() : Name\l# internalGetSuperclass() : Name\l# getSuperclassType() : Type\l# setSuperclass(Name) : \l# internalSetSuperclass(Name) : \l# setSuperclassType(Type) : \l# superInterfaces() : List\l# internalSuperInterfaces() : List\l# superInterfaceTypes() : List\l# getFields() : FieldDeclaration\l# getMethods() : MethodDeclaration\l# getTypes() : TypeDeclaration\l# internalResolveBinding() : ITypeBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TypeDeclarationStatement [
		 label = "{TypeDeclarationStatement|+ TYPE_DECLARATION_PROPERTY : ChildPropertyDescriptor\l+ DECLARATION_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- typeDecl : AbstractTypeDeclaration\l|# null() : \l# propertyDescriptors(int) : List\l# typeDeclProperty() : ChildPropertyDescriptor\l# TypeDeclarationStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getDeclaration() : AbstractTypeDeclaration\l# setDeclaration(AbstractTypeDeclaration) : \l# getTypeDeclaration() : TypeDeclaration\l# internalGetTypeDeclaration() : TypeDeclaration\l# setTypeDeclaration(TypeDeclaration) : \l# internalSetTypeDeclaration(TypeDeclaration) : \l# resolveBinding() : ITypeBinding\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TypeLiteral [
		 label = "{TypeLiteral|+ TYPE_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- type : Type\l|# null() : \l# propertyDescriptors(int) : List\l# TypeLiteral(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TypeMethodReference [
		 label = "{TypeMethodReference|+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ TYPE_ARGUMENTS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS_8_0 : List\l- type : Type\l- methodName : SimpleName\l|# null() : \l# propertyDescriptors(int) : List\l# TypeMethodReference(AST) : \l# internalTypeArgumentsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getType() : Type\l# setType(Type) : \l# typeArguments() : List\l# getName() : SimpleName\l# setName(SimpleName) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 TypeParameter [
		 label = "{TypeParameter|+ MODIFIERS_PROPERTY : ChildListPropertyDescriptor\l+ NAME_PROPERTY : ChildPropertyDescriptor\l+ TYPE_BOUNDS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- typeVariableName : SimpleName\l- typeBounds : ASTNode\l- modifiers : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# TypeParameter(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getName() : SimpleName\l# resolveBinding() : ITypeBinding\l# setName(SimpleName) : \l# typeBounds() : List\l# modifiers() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 UnionType [
		 label = "{UnionType|+ TYPES_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- types : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# UnionType(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# types() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 VariableBinding [
		 label = "{VariableBinding|- VALID_MODIFIERS : int\l- binding : org\l- declaringClass : ITypeBinding\l- key : String\l- name : String\l- resolver : BindingResolver\l- type : ITypeBinding\l- annotations : IAnnotationBinding\l|# VariableBinding(BindingResolver, org) : \l# getAnnotations() : IAnnotationBinding\l# getConstantValue() : Object\l# getDeclaringClass() : ITypeBinding\l# getDeclaringMethod() : IMethodBinding\l# getJavaElement() : IJavaElement\l# getKey() : String\l# getKind() : int\l# getModifiers() : int\l# getName() : String\l# getType() : ITypeBinding\l# getUnresolvedJavaElement() : JavaElement\l# getVariableDeclaration() : IVariableBinding\l# getVariableId() : int\l# isParameter() : boolean\l# isDeprecated() : boolean\l# isEnumConstant() : boolean\l# isEqualTo(IBinding) : boolean\l# isField() : boolean\l# isSynthetic() : boolean\l# isRecovered() : boolean\l# isEffectivelyFinal() : boolean\l# toString() : String\l}"
	 ]

	 VariableDeclaration [
		 label = "{VariableDeclaration|# variableName : SimpleName\l# extraArrayDimensions : int\l# extraDimensions : ASTNode\l# optionalInitializer : Expression\l# internalNameProperty : ChildPropertyDescriptor\l# internalExtraDimensionsProperty : SimplePropertyDescriptor\l# internalExtraDimensions2Property : ChildListPropertyDescriptor\l# internalInitializerProperty : ChildPropertyDescriptor\l|# internalNamePropertyFactory(Class) : ChildPropertyDescriptor\l# internalExtraDimensionsPropertyFactory(Class) : SimplePropertyDescriptor\l# internalExtraDimensions2PropertyFactory(Class) : ChildListPropertyDescriptor\l# internalInitializerPropertyFactory(Class) : ChildPropertyDescriptor\l# getNameProperty() : ChildPropertyDescriptor\l# getExtraDimensionsProperty() : SimplePropertyDescriptor\l# getExtraDimensions2Property() : ChildListPropertyDescriptor\l# getInitializerProperty() : ChildPropertyDescriptor\l# VariableDeclaration(AST) : \l# getName() : SimpleName\l# setName(SimpleName) : \l# getExtraDimensions() : int\l# setExtraDimensions(int) : \l# internalSetExtraDimensions(int) : \l# extraDimensions() : List\l# getInitializer() : Expression\l# setInitializer(Expression) : \l# resolveBinding() : IVariableBinding\l}"
	 ]

	 VariableDeclarationExpression [
		 label = "{VariableDeclarationExpression|+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ FRAGMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- modifiers : ASTNode\l- modifierFlags : int\l- baseType : Type\l- variableDeclarationFragments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# VariableDeclarationExpression(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# modifiers() : List\l# getModifiers() : int\l# setModifiers(int) : \l# internalSetModifiers(int) : \l# getType() : Type\l# setType(Type) : \l# fragments() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 VariableDeclarationFragment [
		 label = "{VariableDeclarationFragment|+ NAME_PROPERTY : ChildPropertyDescriptor\l+ EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l+ EXTRA_DIMENSIONS2_PROPERTY : ChildListPropertyDescriptor\l+ INITIALIZER_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l|# null() : \l# propertyDescriptors(int) : List\l# VariableDeclarationFragment(AST) : \l# internalNameProperty() : ChildPropertyDescriptor\l# internalExtraDimensionsProperty() : SimplePropertyDescriptor\l# internalExtraDimensions2Property() : ChildListPropertyDescriptor\l# internalInitializerProperty() : ChildPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 VariableDeclarationStatement [
		 label = "{VariableDeclarationStatement|+ MODIFIERS_PROPERTY : SimplePropertyDescriptor\l+ MODIFIERS2_PROPERTY : ChildListPropertyDescriptor\l+ TYPE_PROPERTY : ChildPropertyDescriptor\l+ FRAGMENTS_PROPERTY : ChildListPropertyDescriptor\l- PROPERTY_DESCRIPTORS_2_0 : List\l- PROPERTY_DESCRIPTORS_3_0 : List\l- modifiers : ASTNode\l- modifierFlags : int\l- baseType : Type\l- variableDeclarationFragments : ASTNode\l|# null() : \l# propertyDescriptors(int) : List\l# VariableDeclarationStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetIntProperty(SimplePropertyDescriptor, boolean, int) : int\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# modifiers() : List\l# getModifiers() : int\l# setModifiers(int) : \l# internalSetModifiers(int) : \l# getType() : Type\l# setType(Type) : \l# fragments() : List\l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 WhileStatement [
		 label = "{WhileStatement|+ EXPRESSION_PROPERTY : ChildPropertyDescriptor\l+ BODY_PROPERTY : ChildPropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- expression : Expression\l- body : Statement\l|# null() : \l# propertyDescriptors(int) : List\l# WhileStatement(AST) : \l# internalStructuralPropertiesForType(int) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# getExpression() : Expression\l# setExpression(Expression) : \l# getBody() : Statement\l# setBody(Statement) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 WildcardType [
		 label = "{WildcardType|+ ANNOTATIONS_PROPERTY : ChildListPropertyDescriptor\l+ BOUND_PROPERTY : ChildPropertyDescriptor\l+ UPPER_BOUND_PROPERTY : SimplePropertyDescriptor\l- PROPERTY_DESCRIPTORS : List\l- PROPERTY_DESCRIPTORS_8_0 : List\l- optionalBound : Type\l- isUpperBound : boolean\l|# null() : \l# propertyDescriptors(int) : List\l# WildcardType(AST) : \l# internalAnnotationsProperty() : ChildListPropertyDescriptor\l# internalStructuralPropertiesForType(int) : List\l# internalGetSetBooleanProperty(SimplePropertyDescriptor, boolean, boolean) : boolean\l# internalGetChildListProperty(ChildListPropertyDescriptor) : List\l# internalGetSetChildProperty(ChildPropertyDescriptor, boolean, ASTNode) : ASTNode\l# getNodeType0() : int\l# clone0(AST) : ASTNode\l# subtreeMatch0(ASTMatcher, Object) : boolean\l# accept0(ASTVisitor) : \l# isUpperBound() : boolean\l# getBound() : Type\l# setBound(Type, boolean) : \l# setBound(Type) : \l# setUpperBound(boolean) : \l# memSize() : int\l# treeSize() : int\l}"
	 ]

	 NaiveASTFlattener [
		 label = "{NaiveASTFlattener|- JLS2 : int\l- JLS3 : int\l- JLS4 : int\l# buffer : StringBuffer\l- indent : int\l|# NaiveASTFlattener() : \l# getName(ClassInstanceCreation) : Name\l# getResult() : String\l# getReturnType(MethodDeclaration) : Type\l# getSuperclass(TypeDeclaration) : Name\l# getTypeDeclaration(TypeDeclarationStatement) : TypeDeclaration\l# thrownExceptions(MethodDeclaration) : List\l# printIndent() : \l# printModifiers(int) : \l# printModifiers(List) : \l# visitReferenceTypeArguments(List) : \l# visitTypeAnnotations(AnnotatableType) : \l# visitAnnotationsList(List) : \l# reset() : \l# superInterfaces(TypeDeclaration) : List\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnnotationTypeMemberDeclaration) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(ArrayAccess) : boolean\l# visit(ArrayCreation) : boolean\l# visit(ArrayInitializer) : boolean\l# visit(ArrayType) : boolean\l# visit(AssertStatement) : boolean\l# visit(Assignment) : boolean\l# visit(Block) : boolean\l# visit(BlockComment) : boolean\l# visit(BooleanLiteral) : boolean\l# visit(BreakStatement) : boolean\l# visit(CastExpression) : boolean\l# visit(CatchClause) : boolean\l# visit(CharacterLiteral) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(CompilationUnit) : boolean\l# visit(ConditionalExpression) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(ContinueStatement) : boolean\l# visit(CreationReference) : boolean\l# visit(Dimension) : boolean\l# visit(DoStatement) : boolean\l# visit(EmptyStatement) : boolean\l# visit(EnhancedForStatement) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(ExpressionMethodReference) : boolean\l# visit(ExpressionStatement) : boolean\l# visit(FieldAccess) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(ForStatement) : boolean\l# visit(IfStatement) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(InfixExpression) : boolean\l# visit(Initializer) : boolean\l# visit(InstanceofExpression) : boolean\l# visit(IntersectionType) : boolean\l# visit(Javadoc) : boolean\l# visit(LabeledStatement) : boolean\l# visit(LambdaExpression) : boolean\l# visit(LineComment) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(MemberRef) : boolean\l# visit(MemberValuePair) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(MethodInvocation) : boolean\l# visit(MethodRef) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(Modifier) : boolean\l# visit(NameQualifiedType) : boolean\l# visit(NormalAnnotation) : boolean\l# visit(NullLiteral) : boolean\l# visit(NumberLiteral) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ParameterizedType) : boolean\l# visit(ParenthesizedExpression) : boolean\l# visit(PostfixExpression) : boolean\l# visit(PrefixExpression) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(QualifiedType) : boolean\l# visit(ReturnStatement) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(StringLiteral) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(SuperFieldAccess) : boolean\l# visit(SuperMethodInvocation) : boolean\l# visit(SuperMethodReference) : boolean\l# visit(SwitchCase) : boolean\l# visit(SwitchStatement) : boolean\l# visit(SynchronizedStatement) : boolean\l# visit(TagElement) : boolean\l# visit(TextElement) : boolean\l# visit(ThisExpression) : boolean\l# visit(ThrowStatement) : boolean\l# visit(TryStatement) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(TypeLiteral) : boolean\l# visit(TypeMethodReference) : boolean\l# visit(TypeParameter) : boolean\l# visit(UnionType) : boolean\l# visit(VariableDeclarationExpression) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(VariableDeclarationStatement) : boolean\l# visit(WhileStatement) : boolean\l# visit(WildcardType) : boolean\l# visitComponentType(ArrayType) : \l}"
	 ]

	 SourceRangeVerifier [
		 label = "{SourceRangeVerifier|+ DEBUG : boolean\l+ DEBUG_THROW : boolean\l- bugs : StringBuffer\l|# process(ASTNode) : String\l# preVisit2(ASTNode) : boolean\l# checkChild(ASTNode, ASTNode, ASTNode) : boolean\l}"
	 ]

	 StandAloneASTParserTest [
		 label = "{StandAloneASTParserTest|- JLS_LATEST : int\l|# StandAloneASTParserTest(String) : \l# runConversion(int, String, boolean, boolean, boolean, String) : ASTNode\l# test1() : \l# test2() : \l# acceptBinding(String, IBinding) : \l# test3() : \l# acceptBinding(String, IBinding) : \l# acceptAST(String, CompilationUnit) : \l# test4() : \l# test5() : \l# test6() : \l# acceptBinding(String, IBinding) : \l# acceptAST(String, CompilationUnit) : \l# testBug415066_001() : \l# acceptBinding(String, IBinding) : \l# acceptAST(String, CompilationUnit) : \l# testBug415066_002() : \l# acceptBinding(String, IBinding) : \l# acceptAST(String, CompilationUnit) : \l# test7() : \l# testBug461250() : \l# testBug465048() : \l# testBug480545() : \l}"
	 ]

	 Visitor [
		 label = "{Visitor|- AST_INTERNAL_JLS2 : int\l# AST_INTERNAL_JLS3 : int\l# AST_INTERNAL_JLS4 : int\l# testLevel : int\l# path : String\l# source : String\l# markerStartStart : String\l# markerStartEnd : String\l# markerEndStart : String\l# markerEndEnd : String\l# astStarts : int\l# bindings : HashMap\l+ result : String\l+ source : String\l# found : ArrayList\l|# astInternalJLS2() : int\l# AbstractASTTests(String) : \l# setUpSuite() : \l# null() : \l# MarkerInfo(String) : \l# MarkerInfo(String, String) : \l# MarkerInfo(String, String, String, String, String) : \l# MarkerInfo(String, String, String, String, String, String) : \l# indexOfASTStart(int) : int\l# indexOfASTStart(int, int) : int\l# removeMarkerFromSource(String, int, int) : \l# setStartAndEnd(int) : \l# null() : \l# acceptBinding(String, IBinding) : \l# getBindings(String) : IBinding\l# null() : \l# ASTResult(String, String) : \l# assertASTNodeEquals(String, ASTNode) : \l# assertASTNodesEqual(String, List) : \l# assertBindingKeyEquals(String, String) : \l# assertBindingKeysEqual(String, String) : \l# assertBindingEquals(String, IBinding) : \l# assertBindingsEqual(String, IBinding) : \l# assertBindingsEqual(String, String, IBinding) : \l# assertASTResult(String, ASTResult) : \l# createASTParser() : ASTParser\l# buildAST(MarkerInfo, IClassFile, boolean) : ASTNode\l# buildAST(ICompilationUnit) : ASTNode\l# buildAST(String, ICompilationUnit) : ASTNode\l# buildAST(MarkerInfo, IClassFile) : ASTNode\l# buildAST(String, ICompilationUnit, boolean) : ASTNode\l# buildAST(int, String, ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# buildAST(String, ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# buildAST(String, ICompilationUnit, boolean, boolean) : ASTNode\l# buildAST(String, ICompilationUnit, int) : ASTNode\l# buildASTs(String, ICompilationUnit, int) : ASTNode\l# buildASTs(String, ICompilationUnit) : ASTNode\l# buildASTs(String, ICompilationUnit, boolean) : ASTNode\l# buildASTs(int, String, ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# buildASTs(String, ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# buildMarkedAST(String, String) : ASTResult\l# buildMarkedAST(String, String, boolean, boolean, boolean, int) : ASTResult\l# buildMarkedAST(String, String, boolean, boolean, boolean, MarkedASTFlattener) : ASTResult\l# createMarkerInfos(String) : MarkerInfo\l# createVariableBindings(String, String) : IVariableBinding\l# createMethodBindings(String, String) : IMethodBinding\l# createMethodBindings(String, String, IJavaProject) : IMethodBinding\l# createTypeBindings(String, String) : ITypeBinding\l# createTypeBindings(String, String, IJavaProject) : ITypeBinding\l# createWorkingCopies(String, WorkingCopyOwner) : ICompilationUnit\l# createWorkingCopies(MarkerInfo, WorkingCopyOwner) : ICompilationUnit\l# findNode(CompilationUnit, MarkerInfo) : ASTNode\l# findNodes(CompilationUnit, MarkerInfo) : ASTNode\l# preVisit(ASTNode) : \l# newWorkingCopyOwner(IProblemRequestor) : WorkingCopyOwner\l# getProblemRequestor(ICompilationUnit) : IProblemRequestor\l# resolveASTs(ICompilationUnit, String, ASTRequestor, IJavaProject, WorkingCopyOwner) : \l# resolveBinding(ASTNode) : IBinding\l# resolveBindings(String, IJavaProject, WorkingCopyOwner) : IBinding\l# resolveBindings(String, ICompilationUnit) : IBinding\l# resolveBindings(String, ICompilationUnit, boolean) : IBinding\l# buildAST(IClassFile) : ASTNode\l}"
	 ]

	 JavaCoreJavadocAnalyzer [
		 label = "{JavaCoreJavadocAnalyzer|- PATH_JAVA_CORE_JAVA : String\l- ORG_ECLIPSE_JDT_CORE_SOURCE : String\l- ORG_ECLIPSE_JDT_CORE : String\l- REFERENCE_FILE_SCHEMA : String\l# JLS3_INTERNAL : int\l# OPTION_BEGIN : String\l# DEFAULT_BEGIN : String\l# END : String\l- javadoc : String\l- analyzed : boolean\l- optionID : String\l|# APIDocumentationTests(String) : \l# suite() : Test\l# null() : \l# null() : \l# reset(String) : \l# analyze() : \l# getOptionID() : String\l# getDefaultValue() : String\l# isDeprecated() : boolean\l# testJavaCoreAPI() : \l# visit(FieldDeclaration) : boolean\l}"
	 ]

	 MyVisitor [
		 label = "{MyVisitor|# workingCopy : ICompilationUnit\l+ asts : ArrayList\l# _result : ITypeBinding\l# _result : ITypeBinding\l# _result : ITypeBinding\l# memberPairBindings : List\l|# setUpSuite() : \l# ASTConverter15JLS4Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# componentType(ArrayType) : Type\l# test234609() : \l# test234609b() : \l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# visit(QualifiedName) : boolean\l# test0136() : \l# visit(QualifiedName) : boolean\l# test0137() : \l# test0138() : \l# visit(ParameterizedType) : boolean\l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0228() : \l# test0229() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0235() : \l# test0236() : \l# test0237() : \l# test0238() : \l# test0238_2() : \l# test0239() : \l# test0239_2() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# _test0270() : \l# _test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# testBug187430() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# _test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# replaceNodeInParent(Expression, Expression) : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# acceptBinding(String, IBinding) : \l# test0335() : \l# acceptBinding(String, IBinding) : \l# test0336() : \l# acceptBinding(String, IBinding) : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test341() : \l# test342() : \l# test343() : \l# test344() : \l# checkAnnotationBinding(Annotation) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(NormalAnnotation) : boolean\l# allMemberValuePairs() : List\l# test0345() : \l# test0346() : \l# test0347() : \l# _test0348() : \l# test0348a() : \l# test0348b() : \l# test0349() : \l# testBug348024() : \l# testBug420458() : \l}"
	 ]

	 MyVisitor [
		 label = "{MyVisitor|# workingCopy : ICompilationUnit\l+ asts : ArrayList\l# _result : ITypeBinding\l# _result : ITypeBinding\l# _result : ITypeBinding\l# memberPairBindings : List\l|# setUpSuite() : \l# ASTConverter15JLS8Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# test234609() : \l# test234609b() : \l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# visit(QualifiedName) : boolean\l# test0136() : \l# visit(QualifiedName) : boolean\l# test0137() : \l# test0138() : \l# visit(ParameterizedType) : boolean\l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0228() : \l# test0229() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0235() : \l# test0236() : \l# test0237() : \l# test0238() : \l# test0238_2() : \l# test0239() : \l# test0239_2() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# _test0270() : \l# _test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# testBug187430() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# _test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# replaceNodeInParent(Expression, Expression) : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# acceptBinding(String, IBinding) : \l# test0335() : \l# acceptBinding(String, IBinding) : \l# test0336() : \l# acceptBinding(String, IBinding) : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test341() : \l# test342() : \l# test343() : \l# test344() : \l# checkAnnotationBinding(Annotation) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(NormalAnnotation) : boolean\l# allMemberValuePairs() : List\l# test0345() : \l# test0346() : \l# test0347() : \l# _test0348() : \l# test0348a() : \l# test0348b() : \l# test0349() : \l# testBug348024() : \l}"
	 ]

	 MyVisitor [
		 label = "{MyVisitor|# workingCopy : ICompilationUnit\l+ asts : ArrayList\l# _result : ITypeBinding\l# _result : ITypeBinding\l# _result : ITypeBinding\l# memberPairBindings : List\l|# setUpSuite() : \l# ASTConverter15Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# assertArrayEquals(int, int) : \l# componentType(ArrayType) : Type\l# test234609() : \l# test234609b() : \l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# visit(QualifiedName) : boolean\l# test0136() : \l# visit(QualifiedName) : boolean\l# test0137() : \l# test0138() : \l# visit(ParameterizedType) : boolean\l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0228() : \l# test0229() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0235() : \l# test0236() : \l# test0237() : \l# test0238() : \l# test0238_2() : \l# test0239() : \l# test0239_2() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# _test0270() : \l# _test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# testBug187430() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# _test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# replaceNodeInParent(Expression, Expression) : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# acceptBinding(String, IBinding) : \l# test0335() : \l# acceptBinding(String, IBinding) : \l# test0336() : \l# acceptBinding(String, IBinding) : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test341() : \l# test342() : \l# test343() : \l# test344() : \l# checkAnnotationBinding(Annotation) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(NormalAnnotation) : boolean\l# allMemberValuePairs() : List\l# test0345() : \l# test0346() : \l# test0347() : \l# _test0348() : \l# test0348a() : \l# test0348b() : \l# test0350() : \l# test0351() : \l# test0351a() : \l# test0352() : \l# test0353() : \l# testBug353474() : \l# testBug353474a() : \l# testBug376440() : \l# testBug398520() : \l# testBug404489() : \l# testBug460422() : \l# testBug474922_001() : \l# testBug474922_002() : \l# testBug474922_003() : \l# testBug474922_004() : \l# testBug474922_005() : \l# testBug474922_006() : \l# testBug474922_007() : \l# testBug484220_001() : \l# testBug484220_002() : \l}"
	 ]

	 ASTConverter16Test [
		 label = "{ASTConverter16Test|# workingCopy : ICompilationUnit\l|# setUpSuite() : \l# ASTConverter16Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# test0001() : \l}"
	 ]

	 InferredTypeFromExpectedVisitor [
		 label = "{InferredTypeFromExpectedVisitor|# workingCopy : ICompilationUnit\l# buf : StringBuffer\l|# setUpSuite() : \l# ASTConverter17Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# visit(MethodInvocation) : boolean\l# test0016() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test0017() : \l# test0018() : \l# visit(ClassInstanceCreation) : boolean\l# toString() : String\l# test0019() : \l# test0020() : \l# test402673a() : \l# test402673b() : \l# test403444() : \l# test0021() : \l# test0022() : \l}"
	 ]

	 BindingRequestor [
		 label = "{BindingRequestor|# workingCopy : ICompilationUnit\l# _result : ITypeBinding\l# _result : ITypeBinding\l|# setUpSuite() : \l# ASTConverter18Test(String) : \l# null() : \l# suite() : Test\l# tearDown() : \l# test0001() : \l# test413569() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0021() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test399793a() : \l# test399793b() : \l# test399793c() : \l# test399793d() : \l# test399794() : \l# test399793e() : \l# test402665a() : \l# testBug403132() : \l# testParameterizedReceiverType() : \l# testBug403410() : \l# test402674() : \l# testBug399791() : \l# testBug404489a() : \l# testBug404489b() : \l# testBug399792() : \l# testBug406505() : \l# testBug412726() : \l# test417017a() : \l# test417017b() : \l# test417017c() : \l# test417017d() : \l# test417017e() : \l# test417017f() : \l# testBug413942() : \l# testBug409586() : \l# testExtendedDimensions() : \l# testBug417669() : \l# testBug414113() : \l# testBug420660() : \l# testBug420660a() : \l# testBug423872() : \l# testBug424138_001() : \l# testBug424138_002() : \l# testBug424138_003() : \l# test423584() : \l# testBug418979_001() : \l# testBug418979_002() : \l# testBug418979_003() : \l# test416559() : \l# testBug420458() : \l# testBug425741() : \l# testBug416560_001() : \l# testBug416560_002() : \l# testBug416560_003() : \l# testBug425743() : \l# testBug427357() : \l# testBug426459() : \l# testBug426459a() : \l# test428526() : \l# test428526a() : \l# testBug425183a() : \l# testBug432051() : \l# acceptBinding(String, IBinding) : \l# testBug426977() : \l# test406805() : \l# test406805a() : \l# test406805b() : \l# test406805d() : \l# test436347() : \l# testBug433879() : \l# testBug433879a() : \l# testBug433879b() : \l# testBug433879c() : \l# testBug433879d() : \l# testBug432175() : \l# testBug435348() : \l# testBug432614() : \l# testBug447062() : \l# acceptBinding(String, IBinding) : \l# testBug425601_001() : \l# testBug425601_002() : \l# testBug440000_001() : \l# testBug459344_001() : \l# testBug460186() : \l# testBug443232() : \l# test429813() : \l# test429813a() : \l# testBug463942_001() : \l# testBug470794_001() : \l}"
	 ]

	 ASTConverterAST3Test [
		 label = "{ASTConverterAST3Test||# setUpSuite() : \l# ASTConverterAST3Test(String) : \l# null() : \l# suite() : Test\l# internalSetExtraDimensions(VariableDeclarationFragment, int) : \l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# test0136() : \l# test0137() : \l# test0138() : \l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# test0228() : \l# test0229() : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0234_2() : \l# test0235() : \l# test0237() : \l# test0238() : \l# test0239() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# test0270() : \l# test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# test0335() : \l# test0336() : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test0341() : \l# test0342() : \l# test0343() : \l# test0344() : \l# test0345() : \l# test0346() : \l# test0347() : \l# test0348() : \l# test0349() : \l# test0350() : \l# test0351() : \l# test0352() : \l# test0353() : \l# test0354() : \l# test0355() : \l# test0356() : \l# test0357() : \l# test0358() : \l# test0359() : \l# test0360() : \l# test0361() : \l# test0362() : \l# test0363() : \l# test0364() : \l# test0365() : \l# test0366() : \l# test0367() : \l# test0368() : \l# test0369() : \l# test0370() : \l# test0371() : \l# test0372() : \l# test0373() : \l# test0374() : \l# test0375() : \l# test0376() : \l# test0377() : \l# test0378() : \l# test0379() : \l# test0380() : \l# test0381() : \l# test0382() : \l# test0383() : \l# test0384() : \l# test0385() : \l# test0386() : \l# test0387() : \l# test0388() : \l# test0389() : \l# test0390() : \l# test0391() : \l# test0392() : \l# test0393() : \l# test0394() : \l# test0395() : \l# test0396() : \l# test0397() : \l# test0398() : \l# test0399() : \l# test0400() : \l}"
	 ]

	 ASTConverterAST4Test [
		 label = "{ASTConverterAST4Test||# setUpSuite() : \l# ASTConverterAST4Test(String) : \l# null() : \l# suite() : Test\l# internalSetExtraDimensions(VariableDeclarationFragment, int) : \l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# test0136() : \l# test0137() : \l# test0138() : \l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# test0228() : \l# test0229() : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0234_2() : \l# test0235() : \l# test0237() : \l# test0238() : \l# test0239() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# test0270() : \l# test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# test0335() : \l# test0336() : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test0341() : \l# test0342() : \l# test0343() : \l# test0344() : \l# test0345() : \l# test0346() : \l# test0347() : \l# test0348() : \l# test0349() : \l# test0350() : \l# test0351() : \l# test0352() : \l# test0353() : \l# test0354() : \l# test0355() : \l# test0356() : \l# test0357() : \l# test0358() : \l# test0359() : \l# test0360() : \l# test0361() : \l# test0362() : \l# test0363() : \l# test0364() : \l# test0365() : \l# test0366() : \l# test0367() : \l# test0368() : \l# test0369() : \l# test0370() : \l# test0371() : \l# test0372() : \l# test0373() : \l# test0374() : \l# test0375() : \l# test0376() : \l# test0377() : \l# test0378() : \l# test0379() : \l# test0380() : \l# test0381() : \l# test0382() : \l# test0383() : \l# test0384() : \l# test0385() : \l# test0386() : \l# test0387() : \l# test0388() : \l# test0389() : \l# test0390() : \l# test0391() : \l# test0392() : \l# test0393() : \l# test0394() : \l# test0395() : \l# test0396() : \l# test0397() : \l# test0398() : \l# test0399() : \l# test0400() : \l}"
	 ]

	 ASTConverterAST8Test [
		 label = "{ASTConverterAST8Test||# setUpSuite() : \l# ASTConverterAST8Test(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# test0136() : \l# test0137() : \l# test0138() : \l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# test0228() : \l# test0229() : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0234_2() : \l# test0235() : \l# test0237() : \l# test0238() : \l# test0239() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# test0270() : \l# test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# test0335() : \l# test0336() : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test0341() : \l# test0342() : \l# test0343() : \l# test0344() : \l# test0345() : \l# test0346() : \l# test0347() : \l# test0348() : \l# test0349() : \l# test0350() : \l# test0351() : \l# test0352() : \l# test0353() : \l# test0354() : \l# test0355() : \l# test0356() : \l# test0357() : \l# test0358() : \l# test0359() : \l# test0360() : \l# test0361() : \l# test0362() : \l# test0363() : \l# test0364() : \l# test0365() : \l# test0366() : \l# test0367() : \l# test0368() : \l# test0369() : \l# test0370() : \l# test0371() : \l# test0372() : \l# test0373() : \l# test0374() : \l# test0375() : \l# test0376() : \l# test0377() : \l# test0378() : \l# test0379() : \l# test0380() : \l# test0381() : \l# test0382() : \l# test0383() : \l# test0384() : \l# test0385() : \l# test0386() : \l# test0387() : \l# test0388() : \l# test0389() : \l# test0390() : \l# test0391() : \l# test0392() : \l# test0393() : \l# test0394() : \l# test0395() : \l# test0396() : \l# test0397() : \l# test0398() : \l# test0399() : \l# test0400() : \l}"
	 ]

	 BindingsCollector [
		 label = "{BindingsCollector|- DEBUG : boolean\l+ arrayList : ArrayList\l|# null() : \l# BindingsCollector() : \l# collectBindings(ASTNode, IBinding) : \l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# endVisit(ArrayAccess) : \l# endVisit(ArrayCreation) : \l# endVisit(ArrayInitializer) : \l# endVisit(ArrayType) : \l# endVisit(Assignment) : \l# endVisit(BooleanLiteral) : \l# endVisit(CastExpression) : \l# endVisit(CharacterLiteral) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(ConditionalExpression) : \l# endVisit(ConstructorInvocation) : \l# endVisit(EnumConstantDeclaration) : \l# endVisit(EnumDeclaration) : \l# endVisit(FieldAccess) : \l# endVisit(ImportDeclaration) : \l# endVisit(InfixExpression) : \l# endVisit(InstanceofExpression) : \l# endVisit(MemberRef) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodInvocation) : \l# endVisit(MethodRef) : \l# endVisit(NullLiteral) : \l# endVisit(NumberLiteral) : \l# endVisit(PackageDeclaration) : \l# endVisit(ParameterizedType) : \l# endVisit(ParenthesizedExpression) : \l# endVisit(PostfixExpression) : \l# endVisit(PrefixExpression) : \l# endVisit(PrimitiveType) : \l# endVisit(QualifiedName) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(StringLiteral) : \l# endVisit(SuperConstructorInvocation) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(ThisExpression) : \l# endVisit(TypeDeclaration) : \l# endVisit(TypeLiteral) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(VariableDeclarationFragment) : \l# getBindings() : List\l# setUpSuite() : \l# ASTConverterBindingsTest(String) : \l# suite() : Test\l# test0001() : \l# checkBindingEqualityForProject(String) : \l}"
	 ]

	 ASTConverterBugsTest [
		 label = "{ASTConverterBugsTest||# setUpSuite() : \l# ASTConverterBugsTest(String) : \l# suite() : Test\l# checkParameterAnnotations(String, String, IMethodBinding) : \l# runConversion(ICompilationUnit, boolean) : ASTNode\l# runConversion(ICompilationUnit, int, boolean) : ASTNode\l# runConversion(IClassFile, int, boolean) : ASTNode\l# runConversion(char, String, IJavaProject) : ASTNode\l# runConversion(char, String, IJavaProject, boolean) : ASTNode\l# runConversion(char, String, IJavaProject, Map, boolean) : ASTNode\l# runConversion(char, String, IJavaProject, Map) : ASTNode\l# runConversion(ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# resolveASTs(ICompilationUnit, String, ASTRequestor, IJavaProject, WorkingCopyOwner) : \l# testBug186410() : \l# testBug186410b() : \l# testBug209150a() : \l# testBug209150b() : \l# testBug209150c() : \l# testBug212100a() : \l# acceptBinding(String, IBinding) : \l# testBug212100b() : \l# acceptBinding(String, IBinding) : \l# testBug212834() : \l# testBug212857() : \l# testBug212857a() : \l# testBug212857b() : \l# testBug212857c() : \l# testBug212857d() : \l# testBug212857e() : \l# testBug213509() : \l# testBug213509_invocation() : \l# testBug214002() : \l# testBug214002b() : \l# testBug212434a() : \l# testBug214647() : \l# testBug214647b() : \l# testBug215759a() : \l# testBug215759b() : \l# testBug218824a() : \l# testBug215137a() : \l# testBug215137b() : \l# testBug215137c() : \l# testBug215137d() : \l# testBug223838() : \l# testBug223838a() : \l# testBug226357() : \l# testBug274898a() : \l# testBug274898b() : \l# testBug277204a() : \l# testBug277204b() : \l# testBug277204c() : \l# testBug277204d() : \l# testBug277204e() : \l}"
	 ]

	 ASTConverterBugsTestJLS3 [
		 label = "{ASTConverterBugsTestJLS3||# ASTConverterBugsTestJLS3(String) : \l# suite() : Test\l# testBug130778a() : \l# testBug130778b() : \l# testBug130778c() : \l# testBug130778d() : \l# testBug130778e() : \l# testBug130778f() : \l# testBug130778g() : \l# testBug130778h() : \l# testBug130778i() : \l# testBug130778j() : \l# testBug130778k() : \l# testBug130778l() : \l# testBug130778m() : \l# testBug130778n() : \l# testBug130778o() : \l# testBug130778p() : \l# testBug130778q() : \l# testBug130778r() : \l# testBug130778s() : \l# testBug130778t() : \l# testBug130778u() : \l# testBug130778v() : \l# testBug130778x() : \l# testbug388137() : \l# testBug405908() : \l}"
	 ]

	 ASTConverterBugsTestJLS4 [
		 label = "{ASTConverterBugsTestJLS4||# ASTConverterBugsTestJLS4(String) : \l# suite() : Test\l}"
	 ]

	 ASTConverterBugsTestJLS8 [
		 label = "{ASTConverterBugsTestJLS8||# ASTConverterBugsTestJLS8(String) : \l# suite() : Test\l# testBug130778a() : \l# testBug130778b() : \l# testBug130778c() : \l# testBug130778d() : \l# testBug130778e() : \l# testBug130778f() : \l# testBug130778g() : \l# testBug130778h() : \l# testBug130778i() : \l# testBug130778j() : \l# testBug130778k() : \l# testBug130778l() : \l# testBug130778m() : \l# testBug130778n() : \l# testBug130778o() : \l# testBug130778p() : \l# _testBug130778q() : \l# testBug130778r() : \l# testBug130778s() : \l# testBug130778t() : \l# testBug130778u() : \l# testBug130778v() : \l# testBug130778x() : \l}"
	 ]

	 ASTConverterJavadocFlattener [
		 label = "{ASTConverterJavadocFlattener|- buffer : StringBuffer\l- indent : int\l- comment : String\l|# ASTConverterJavadocFlattener(String) : \l# componentType(ArrayType) : Type\l# getResult() : String\l# reset() : \l# visit(ArrayType) : boolean\l# visit(BlockComment) : boolean\l# visit(Javadoc) : boolean\l# printIndent() : \l# visit(LineComment) : boolean\l# visit(MemberRef) : boolean\l# visit(MethodRef) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(TagElement) : boolean\l# visit(TextElement) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l}"
	 ]

	 ASTConverterJavadocTest [
		 label = "{ASTConverterJavadocTest|# COPY_DIR : boolean\l# TEST_COUNTERS : int\l# UNICODE : boolean\l# unix : boolean\l# UNIX_SUPPORT : String\l# DOC_COMMENT_SUPPORT : String\l# docCommentSupport : String\l- LINE_COMMENT : int\l- BLOCK_COMMENT : int\l- DOC_COMMENT : int\l# comments : List\l- chars : String\l# allTags : List\l# sourceUnit : ICompilationUnit\l# resolveBinding : boolean\l# packageBinding : boolean\l# astLevel : int\l# savedLevel : int\l# prefix : String\l# debug : boolean\l# problems : StringBuffer\l# compilerOption : String\l# failures : List\l# stopOnFailure : boolean\l# savedOptions : Map\l|# ASTConverterJavadocTest(String, String, String) : \l# ASTConverterJavadocTest(String) : \l# getName() : String\l# suite() : Test\l# buildSuite(TestSuite, String) : \l# copyDirectory(File, File) : \l# setUp() : \l# tearDown() : \l# tearDownSuite() : \l# runConversion(char, String, IJavaProject) : ASTNode\l# runConversion(char, String, IJavaProject, Map) : ASTNode\l# getNextChar(char, int) : char\l# setSourceComment(char) : \l# getUnicodeSource(char) : char\l# getUnixSource(char) : char\l# allTags(Javadoc) : int\l# addFailure(String) : \l# assumeTrue(String, boolean) : \l# assumeNull(String, Object) : \l# assumeNotNull(String, Object) : \l# assumeEquals(String, int, int) : \l# assumeEquals(String, Object, Object) : \l# verifyPositions(Javadoc, char) : \l# verifyPositions(TagElement, char) : \l# verifyNamePositions(int, Name, char) : \l# verifyBindings(Javadoc) : \l# verifyBindings(TagElement) : \l# verifyNameBindings(Name) : \l# verifyComments(String) : \l# verifyWorkingCopiesComments() : \l# verifyComments(ICompilationUnit) : CompilationUnit\l# verifyComments(String, char) : CompilationUnit\l# verifyComments(String, char, Map) : CompilationUnit\l# test000() : \l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# verifyMapper(String, int, int) : \l# test100() : \l# test101() : \l# test102() : \l# test103() : \l# test104() : \l# test105() : \l# test106() : \l# test107() : \l# test108() : \l# testBug54776() : \l# testBug55221a() : \l# testBug55221b() : \l# testBug55221c() : \l# testBug55221d() : \l# testBug55223a() : \l# testBug55223b() : \l# testBug48489() : \l# testBug50898() : \l# testBug51226() : \l# testBug51241() : \l# testBug51363() : \l# testBug51476() : \l# testBug51478() : \l# testBug51508() : \l# testBug51650() : \l# testBug51770() : \l# testBug52908() : \l# testBug52908a() : \l# testBug52908unicode() : \l# testBug53276() : \l# testBug53075() : \l# testBug53757() : \l# testBug51600() : \l# testBug51617() : \l# testBug54424() : \l# testBug63044() : \l# testBug51660() : \l# testBug65174() : \l# testBug65253() : \l# testBug65288() : \l# testBug68017() : \l# testBug68025() : \l# testBug69272() : \l# testBug69275() : \l# testBug69302() : \l# testBug68726() : \l# testBug70892_JLS2() : \l# testBug70892_JLS3() : \l# testBug51911() : \l# testBug73348() : \l# testBug77644() : \l# testBug79809() : \l# testBug79809b() : \l# testBug79904() : \l# testBug80221() : \l# testBug80257() : \l# testBug83804() : \l# testBug83804a() : \l# testBug84049() : \l# testBug87845() : \l# testBug93880_15a() : \l# testBug93880_15b() : \l# testBug93880_15c() : \l# testBug93880_15d() : \l# testBug93880_15e() : \l# testBug93880_14a() : \l# testBug93880_14b() : \l# testBug93880_14c() : \l# testBug93880_14d() : \l# testBug93880_14e() : \l# testBug94150() : \l# testBug99507() : \l# testBug99507b() : \l# testBug100041() : \l# testBug100041b() : \l# testBug100041c() : \l# testBug103304() : \l# testBug106581() : \l# testBug108622() : \l# testBug113108a() : \l# testBug113108b() : \l# testBug113108c() : \l# testBug125676() : \l# testBug125903() : \l# testBug130752() : \l# testBug130752b() : \l# testBug130752c() : \l# testBug165525() : \l# testBug228648() : \l# test109() : \l# testBug336821() : \l# testBug347100() : \l# testBug481143a() : \l# testBug481143b() : \l# testBug481143c() : \l}"
	 ]

	 ASTConverterRecoveryTest [
		 label = "{ASTConverterRecoveryTest||# ASTConverterRecoveryTest(String) : \l# null() : \l# suite() : Test\l# setUpSuite() : \l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# _test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l}"
	 ]

	 ASTConverterTest [
		 label = "{ASTConverterTest||# setUpSuite() : \l# ASTConverterTest(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l# test0013() : \l# test0014() : \l# test0015() : \l# test0016() : \l# test0017() : \l# test0018() : \l# test0019() : \l# test0020() : \l# test0021() : \l# test0022() : \l# test0023() : \l# test0024() : \l# test0025() : \l# test0026() : \l# test0027() : \l# test0028() : \l# test0029() : \l# test0030() : \l# test0031() : \l# test0032() : \l# test0033() : \l# test0034() : \l# test0035() : \l# test0036() : \l# test0037() : \l# test0038() : \l# test0039() : \l# test0040() : \l# test0041() : \l# test0042() : \l# test0043() : \l# test0044() : \l# test0045() : \l# test0046() : \l# test0047() : \l# test0048() : \l# test0049() : \l# test0050() : \l# test0051() : \l# test0052() : \l# test0053() : \l# test0054() : \l# test0055() : \l# test0056() : \l# test0057() : \l# test0058() : \l# test0059() : \l# test0060() : \l# test0061() : \l# test0062() : \l# test0063() : \l# test0064() : \l# test0065() : \l# test0066() : \l# test0067() : \l# test0068() : \l# test0069() : \l# test0070() : \l# test0071() : \l# test0072() : \l# test0073() : \l# test0074() : \l# test0075() : \l# test0076() : \l# test0077() : \l# test0078() : \l# test0079() : \l# test0080() : \l# test0081() : \l# test0082() : \l# test0083() : \l# test0084() : \l# test0085() : \l# test0086() : \l# test0087() : \l# test0088() : \l# test0089() : \l# test0090() : \l# test0091() : \l# test0092() : \l# test0093() : \l# test0094() : \l# test0095() : \l# test0096() : \l# test0097() : \l# test0098() : \l# test0099() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l# test0113() : \l# test0114() : \l# test0115() : \l# test0116() : \l# test0117() : \l# test0118() : \l# test0119() : \l# test0120() : \l# test0121() : \l# test0122() : \l# test0123() : \l# test0124() : \l# test0125() : \l# test0126() : \l# test0127() : \l# test0128() : \l# test0129() : \l# test0130() : \l# test0131() : \l# test0132() : \l# test0133() : \l# test0134() : \l# test0135() : \l# test0136() : \l# test0137() : \l# test0138() : \l# test0139() : \l# test0140() : \l# test0141() : \l# test0142() : \l# test0143() : \l# test0144() : \l# test0145() : \l# test0146() : \l# test0147() : \l# test0148() : \l# test0149() : \l# test0150() : \l# test0151() : \l# test0152() : \l# test0153() : \l# test0154() : \l# test0155() : \l# test0156() : \l# test0157() : \l# test0158() : \l# test0159() : \l# test0160() : \l# test0161() : \l# test0162() : \l# test0163() : \l# test0164() : \l# test0165() : \l# test0166() : \l# test0167() : \l# test0168() : \l# test0169() : \l# test0170() : \l# test0171() : \l# test0172() : \l# test0173() : \l# test0174() : \l# test0175() : \l# test0176() : \l# test0177() : \l# test0178() : \l# test0179() : \l# test0180() : \l# test0181() : \l# test0182() : \l# test0183() : \l# test0184() : \l# test0185() : \l# test0186() : \l# test0187() : \l# test0188() : \l# test0189() : \l# test0190() : \l# test0191() : \l# test0192() : \l# test0193() : \l# test0194() : \l# test0195() : \l# test0196() : \l# test0197() : \l# test0198() : \l# test0199() : \l# test0200() : \l# test0201() : \l# test0202() : \l# test0203() : \l# test0204() : \l# test0205() : \l# test0206() : \l# test0207() : \l# test0208() : \l# test0209() : \l# test0210() : \l# test0211() : \l# test0212() : \l# test0213() : \l# test0214() : \l# test0215() : \l# test0216() : \l# test0217() : \l# test0218() : \l# test0219() : \l# test0220() : \l# test0221() : \l# test0222() : \l# test0223() : \l# test0224() : \l# test0225() : \l# test0226() : \l# test0227() : \l# test0228() : \l# test0229() : \l# test0230() : \l# test0231() : \l# test0232() : \l# test0233() : \l# test0234() : \l# test0234_2() : \l# test0235() : \l# test0236() : \l# test0237() : \l# test0238() : \l# test0239() : \l# test0240() : \l# test0241() : \l# test0242() : \l# test0243() : \l# test0244() : \l# test0245() : \l# test0246() : \l# test0247() : \l# test0248() : \l# test0249() : \l# test0250() : \l# test0251() : \l# test0252() : \l# test0253() : \l# test0254() : \l# test0255() : \l# test0256() : \l# test0257() : \l# test0258() : \l# test0259() : \l# test0260() : \l# test0261() : \l# test0262() : \l# test0263() : \l# test0264() : \l# test0265() : \l# test0266() : \l# test0267() : \l# test0268() : \l# test0269() : \l# test0270() : \l# test0271() : \l# test0272() : \l# test0273() : \l# test0274() : \l# test0275() : \l# test0276() : \l# test0277() : \l# test0278() : \l# test0279() : \l# test0280() : \l# test0281() : \l# test0282() : \l# test0283() : \l# test0284() : \l# test0285() : \l# test0286() : \l# test0287() : \l# test0288() : \l# test0289() : \l# test0290() : \l# test0291() : \l# test0292() : \l# test0293() : \l# test0294() : \l# test0295() : \l# test0296() : \l# test0297() : \l# test0298() : \l# test0299() : \l# test0300() : \l# test0301() : \l# test0302() : \l# test0303() : \l# test0304() : \l# test0305() : \l# test0306() : \l# test0307() : \l# test0308() : \l# test0309() : \l# test0310() : \l# test0311() : \l# test0312() : \l# test0313() : \l# test0314() : \l# test0315() : \l# test0316() : \l# test0317() : \l# test0318() : \l# test0319() : \l# test0320() : \l# test0321() : \l# test0322() : \l# test0323() : \l# test0324() : \l# test0325() : \l# test0326() : \l# test0327() : \l# test0328() : \l# test0329() : \l# test0330() : \l# test0331() : \l# test0332() : \l# test0333() : \l# test0334() : \l# test0335() : \l# test0336() : \l# test0337() : \l# test0338() : \l# test0339() : \l# test0340() : \l# test0341() : \l# test0342() : \l# test0343() : \l# test0344() : \l# test0345() : \l# test0346() : \l# test0347() : \l# test0348() : \l# test0349() : \l# test0350() : \l# test0351() : \l# test0352() : \l# test0353() : \l# test0354() : \l# test0355() : \l# test0356() : \l# test0357() : \l# test0358() : \l# test0359() : \l# test0360() : \l# test0361() : \l# test0362() : \l# test0363() : \l# test0364() : \l# test0365() : \l# test0366() : \l# test0367() : \l# test0368() : \l# test0369() : \l# test0370() : \l# test0371() : \l# test0372() : \l# test0373() : \l# test0374() : \l# test0375() : \l# test0376() : \l# test0377() : \l# test0378() : \l# test0379() : \l# test0380() : \l# test0381() : \l# test0382() : \l# test0383() : \l# test0384() : \l# test0385() : \l# test0386() : \l# test0387() : \l# test0388() : \l# test0389() : \l# test0390() : \l# test0391() : \l# test0392() : \l# test0393() : \l# test0394() : \l# test0395() : \l# test0396() : \l# test0397() : \l# test0398() : \l# test0399() : \l# test0400() : \l# testBug446746_0001() : \l# testBug446746_0002() : \l}"
	 ]

	 Change14FieldAccessASTVisitor [
		 label = "{Change14FieldAccessASTVisitor|# counter : int\l|# setUpSuite() : \l# ASTConverterTest2(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0401() : \l# test0402() : \l# test0403() : \l# test0404() : \l# test0405() : \l# test0406() : \l# test0407() : \l# test0408() : \l# test0409() : \l# test0410() : \l# test0411() : \l# test0412() : \l# test0413() : \l# test0414() : \l# test0415() : \l# test0416() : \l# test0417() : \l# test0418() : \l# test0419() : \l# test0420() : \l# test0421() : \l# test0422() : \l# test0423() : \l# test0424() : \l# test0425() : \l# test0426() : \l# test0427() : \l# test0428() : \l# test0429() : \l# test0430() : \l# test0431() : \l# test0432() : \l# test0433() : \l# test0434() : \l# test0435() : \l# test0436() : \l# test0437() : \l# test0438() : \l# test0439() : \l# test0440() : \l# test0441() : \l# test0442() : \l# test0443() : \l# test0444() : \l# test0445() : \l# test0446() : \l# test0447() : \l# test0448() : \l# test0449() : \l# test0450() : \l# test0451() : \l# test0452() : \l# test0453() : \l# test0454() : \l# test0455() : \l# test0456() : \l# test0457() : \l# test0458() : \l# test0459() : \l# test0460() : \l# test0461() : \l# test0462() : \l# test0463() : \l# test0464() : \l# test0465() : \l# test0466() : \l# test0467() : \l# test0468() : \l# test0469() : \l# test0470() : \l# test0471() : \l# test0472() : \l# test0473() : \l# test0474() : \l# test0475() : \l# test0476() : \l# test0477() : \l# test0478() : \l# test0479() : \l# test0480() : \l# test0481() : \l# test0482() : \l# test0483() : \l# test0484() : \l# test0485() : \l# test0486() : \l# test0487() : \l# test0488() : \l# test0489() : \l# test0490() : \l# test0491() : \l# test0492() : \l# test0493() : \l# test0494() : \l# test0495() : \l# test0496() : \l# test0497() : \l# test0498() : \l# test0499() : \l# test0500() : \l# test0501() : \l# test0502a() : \l# test0502b() : \l# test0502c() : \l# test0502d() : \l# test0502e() : \l# test0502f() : \l# test0502g() : \l# test0502h() : \l# test0502i() : \l# test0502j() : \l# test0503a() : \l# test0503b() : \l# test0503c() : \l# test0503d() : \l# test0503e() : \l# test0503f() : \l# test0503g() : \l# test0503h() : \l# test0503i() : \l# test0504() : \l# test0505() : \l# test0506() : \l# test0507() : \l# test0508() : \l# test0509() : \l# test0510() : \l# test0511() : \l# test0512() : \l# test0513() : \l# test0514() : \l# test0515() : \l# test0516() : \l# test0517() : \l# test0518() : \l# test0519() : \l# test0520() : \l# test0521() : \l# test0522() : \l# test0523() : \l# test0524() : \l# test0525() : \l# test0526() : \l# test0527() : \l# test0528() : \l# test0529() : \l# test0530() : \l# test0531() : \l# test0532() : \l# test0533() : \l# test0534() : \l# test0535() : \l# test0536() : \l# test0537a() : \l# test0537b() : \l# test0537c() : \l# test0538a() : \l# test0538b() : \l# test0538c() : \l# test0538d() : \l# test0538e() : \l# test0538f() : \l# test0538g() : \l# test0538h() : \l# isActive() : boolean\l# test0539() : \l# test0540() : \l# test0541() : \l# Change14FieldAccessASTVisitor() : \l# endVisit(QualifiedName) : \l# test0542() : \l# test0543() : \l# test0544() : \l# test0545() : \l# test0546() : \l# test0547() : \l# test0548() : \l# test0549() : \l# test0550() : \l# test0551() : \l# test0552() : \l# test0553() : \l# test0554() : \l# test0555() : \l# test0556() : \l# test0557() : \l# test0558() : \l# test0559() : \l# test0560() : \l# test0561() : \l# test0562() : \l# test0563() : \l# test0564() : \l# test0565() : \l# test0566() : \l# test0567() : \l# test0569() : \l# test0570() : \l# test0571() : \l# test0572() : \l# test0573() : \l# test0574() : \l# test0575() : \l# test0576() : \l# test0577() : \l# test0578() : \l# test0579() : \l# test0606() : \l# visit(MethodDeclaration) : boolean\l# test0607() : \l# test0608() : \l# test0609() : \l# test0610() : \l}"
	 ]

	 TestASTRequestor [
		 label = "{TestASTRequestor|# counter : int\l+ asts : ArrayList\l|# setUpSuite() : \l# ASTConverterTestAST3_2(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0401() : \l# test0402() : \l# test0403() : \l# test0404() : \l# test0405() : \l# test0406() : \l# test0407() : \l# test0408() : \l# test0409() : \l# test0410() : \l# test0411() : \l# test0412() : \l# test0413() : \l# test0414() : \l# test0415() : \l# test0416() : \l# test0417() : \l# test0418() : \l# test0419() : \l# test0420() : \l# test0421() : \l# test0422() : \l# test0423() : \l# test0424() : \l# test0425() : \l# test0426() : \l# test0427() : \l# test0428() : \l# test0429() : \l# test0430() : \l# test0431() : \l# test0432() : \l# test0433() : \l# test0434() : \l# test0435() : \l# test0436() : \l# test0437() : \l# test0438() : \l# test0439() : \l# test0440() : \l# test0441() : \l# test0442() : \l# test0443() : \l# test0444() : \l# test0445() : \l# test0446() : \l# test0447() : \l# test0448() : \l# test0449() : \l# test0450() : \l# test0451() : \l# test0452() : \l# test0453() : \l# test0454() : \l# test0455() : \l# test0456() : \l# test0457() : \l# test0458() : \l# test0459() : \l# test0460() : \l# test0461() : \l# test0462() : \l# test0463() : \l# test0464() : \l# test0465() : \l# test0466() : \l# test0467() : \l# test0468() : \l# test0469() : \l# test0470() : \l# test0471() : \l# test0472() : \l# test0473() : \l# test0474() : \l# test0475() : \l# test0476() : \l# test0477() : \l# test0478() : \l# test0479() : \l# test0480() : \l# test0481() : \l# test0482() : \l# test0483() : \l# test0484() : \l# test0485() : \l# test0486() : \l# test0487() : \l# test0488() : \l# test0489() : \l# test0490() : \l# test0491() : \l# test0492() : \l# test0493() : \l# test0494() : \l# test0495() : \l# test0496() : \l# test0497() : \l# test0498() : \l# test0499() : \l# test0500() : \l# test0501() : \l# test0502a() : \l# test0502b() : \l# test0502c() : \l# test0502d() : \l# test0502e() : \l# test0502f() : \l# test0502g() : \l# test0502h() : \l# test0502i() : \l# test0502j() : \l# test0503a() : \l# test0503b() : \l# test0503c() : \l# test0503d() : \l# test0503e() : \l# test0503f() : \l# test0503g() : \l# test0503h() : \l# test0503i() : \l# test0504() : \l# test0505() : \l# test0506() : \l# test0507() : \l# test0508() : \l# test0509() : \l# test0510() : \l# test0511() : \l# test0512() : \l# test0513() : \l# test0514() : \l# test0515() : \l# test0516() : \l# test0517() : \l# test0518() : \l# test0519() : \l# test0520() : \l# test0521() : \l# test0522() : \l# test0523() : \l# test0524() : \l# test0525() : \l# test0526() : \l# test0527() : \l# test0528() : \l# test0529() : \l# test0530() : \l# test0531() : \l# test0532() : \l# test0533() : \l# test0534() : \l# test0535() : \l# test0536() : \l# test0537a() : \l# test0537b() : \l# test0537c() : \l# test0538a() : \l# test0538b() : \l# test0538c() : \l# test0538d() : \l# test0538e() : \l# test0538f() : \l# test0538g() : \l# test0538h() : \l# isActive() : boolean\l# test0539() : \l# test0540() : \l# test0541() : \l# Change14FieldAccessASTVisitor() : \l# endVisit(QualifiedName) : \l# test0542() : \l# test0543() : \l# test0544() : \l# test0545() : \l# test0546() : \l# test0547() : \l# test0548() : \l# test0549() : \l# test0550() : \l# test0551() : \l# test0552() : \l# test0553() : \l# test0554() : \l# test0555() : \l# test0556() : \l# test0557() : \l# test0558() : \l# test0559() : \l# test0560() : \l# test0561() : \l# test0562() : \l# test0563() : \l# test0564() : \l# test0565() : \l# test0566() : \l# test0567() : \l# test0568() : \l# test0570() : \l# test0571() : \l# test0572() : \l# test0573() : \l# test0574() : \l# test0575() : \l# test0576() : \l# test0578() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0579() : \l# test0580() : \l# test0581() : \l# test0582() : \l# test0583() : \l# test0584() : \l# test0585() : \l# test0586() : \l# test0587() : \l# test0588() : \l# test0589() : \l# test0590() : \l# test0591() : \l# test0592() : \l# test0593() : \l# test0594() : \l# test0595() : \l# test0596() : \l# test0597() : \l# test0598() : \l# test0599() : \l# endVisit(MethodDeclaration) : \l# test0600() : \l# test0601() : \l# test0602() : \l# visit(StringLiteral) : boolean\l# test0603() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0604() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0605() : \l# test0606() : \l# test0607() : \l# test0608() : \l# test0609() : \l# test0610() : \l# test0611() : \l# test0612() : \l# test0613() : \l# test0614() : \l# test0615() : \l# test0616() : \l# test0617() : \l# test0618() : \l# test0619() : \l# test0620() : \l# visit(CharacterLiteral) : boolean\l# test0621() : \l# test0622() : \l# visit(CharacterLiteral) : boolean\l# test0623() : \l# visit(ConstructorInvocation) : boolean\l# visit(ClassInstanceCreation) : boolean\l# test0624() : \l# visit(TypeDeclaration) : boolean\l# visit(CompilationUnit) : boolean\l# test0625() : \l# test0626() : \l# test0627() : \l# test0628() : \l# test0629() : \l# test0630() : \l# test0631() : \l# test0632() : \l# test0633() : \l# test0634() : \l# test0635() : \l# test0636() : \l# test0637() : \l# test0638() : \l# test0639() : \l# test0641() : \l# test0642() : \l# test0643() : \l# test0644() : \l# test0645() : \l# test0646() : \l# test0647() : \l# test0648() : \l# test0649() : \l# test0650() : \l# test0651() : \l# _test0652() : \l# test0653() : \l# test0654() : \l# test0655() : \l# test0656() : \l# test0657() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# _test0658() : \l# test0659() : \l# test0660() : \l# test0661() : \l# test0662() : \l# test0663() : \l# test0664() : \l# test0665() : \l# test0666() : \l# test0666_2() : \l# test0667() : \l# test0667_2() : \l# test0668() : \l# test0669() : \l# test0670() : \l# test0671() : \l# test0672() : \l# test0673() : \l# test0674() : \l# test0675() : \l# test0676() : \l# test0677() : \l# test0678() : \l# _test0679() : \l# test0680() : \l# test0681() : \l# test0682() : \l# test0683() : \l# test0684() : \l# test0685() : \l# test0686() : \l# test0687() : \l# test0688() : \l# test0689() : \l# test0690() : \l# test0691() : \l# test0692() : \l# test0693() : \l# test0694() : \l# test0695() : \l# visit(EnumDeclaration) : boolean\l# test0696() : \l# visit(AnnotationTypeDeclaration) : boolean\l# test0697() : \l# test0698a() : \l# test0698b() : \l# test0699() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0700() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0701() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0702() : \l# test0703() : \l# test0704() : \l# test0705() : \l# test0706() : \l# test0707() : \l# test0708() : \l# test0709() : \l# visit(ParenthesizedExpression) : boolean\l# test0710() : \l# test0711() : \l# test0712() : \l# test0713() : \l# test0714() : \l# test0715() : \l# test0716() : \l# test0717() : \l# visit(MethodDeclaration) : boolean\l# test0718() : \l# test0719() : \l# test0720() : \l# test0721() : \l# test0722() : \l# test0723() : \l}"
	 ]

	 TestASTRequestor [
		 label = "{TestASTRequestor|# counter : int\l+ asts : ArrayList\l|# setUpSuite() : \l# ASTConverterTestAST4_2(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0401() : \l# test0402() : \l# test0403() : \l# test0404() : \l# test0405() : \l# test0406() : \l# test0407() : \l# test0408() : \l# test0409() : \l# test0410() : \l# test0411() : \l# test0412() : \l# test0413() : \l# test0414() : \l# test0415() : \l# test0416() : \l# test0417() : \l# test0418() : \l# test0419() : \l# test0420() : \l# test0421() : \l# test0422() : \l# test0423() : \l# test0424() : \l# test0425() : \l# test0426() : \l# test0427() : \l# test0428() : \l# test0429() : \l# test0430() : \l# test0431() : \l# test0432() : \l# test0433() : \l# test0434() : \l# test0435() : \l# test0436() : \l# test0437() : \l# test0438() : \l# test0439() : \l# test0440() : \l# test0441() : \l# test0442() : \l# test0443() : \l# test0444() : \l# test0445() : \l# test0446() : \l# test0447() : \l# test0448() : \l# test0449() : \l# test0450() : \l# test0451() : \l# test0452() : \l# test0453() : \l# test0454() : \l# test0455() : \l# test0456() : \l# test0457() : \l# test0458() : \l# test0459() : \l# test0460() : \l# test0461() : \l# test0462() : \l# test0463() : \l# test0464() : \l# test0465() : \l# test0466() : \l# test0467() : \l# test0468() : \l# test0469() : \l# test0470() : \l# test0471() : \l# test0472() : \l# test0473() : \l# test0474() : \l# test0475() : \l# test0476() : \l# test0477() : \l# test0478() : \l# test0479() : \l# test0480() : \l# test0481() : \l# test0482() : \l# test0483() : \l# test0484() : \l# test0485() : \l# test0486() : \l# test0487() : \l# test0488() : \l# test0489() : \l# test0490() : \l# test0491() : \l# test0492() : \l# test0493() : \l# test0494() : \l# test0495() : \l# test0496() : \l# test0497() : \l# test0498() : \l# test0499() : \l# test0500() : \l# test0501() : \l# test0502a() : \l# test0502b() : \l# test0502c() : \l# test0502d() : \l# test0502e() : \l# test0502f() : \l# test0502g() : \l# test0502h() : \l# test0502i() : \l# test0502j() : \l# test0503a() : \l# test0503b() : \l# test0503c() : \l# test0503d() : \l# test0503e() : \l# test0503f() : \l# test0503g() : \l# test0503h() : \l# test0503i() : \l# test0504() : \l# test0505() : \l# test0506() : \l# test0507() : \l# test0508() : \l# test0509() : \l# test0510() : \l# test0511() : \l# test0512() : \l# test0513() : \l# test0514() : \l# test0515() : \l# test0516() : \l# test0517() : \l# test0518() : \l# test0519() : \l# test0520() : \l# test0521() : \l# test0522() : \l# test0523() : \l# test0524() : \l# test0525() : \l# test0526() : \l# test0527() : \l# test0528() : \l# test0529() : \l# test0530() : \l# test0531() : \l# test0532() : \l# test0533() : \l# test0534() : \l# test0535() : \l# test0536() : \l# test0537a() : \l# test0537b() : \l# test0537c() : \l# test0538a() : \l# test0538b() : \l# test0538c() : \l# test0538d() : \l# test0538e() : \l# test0538f() : \l# test0538g() : \l# test0538h() : \l# isActive() : boolean\l# test0539() : \l# test0540() : \l# test0541() : \l# Change14FieldAccessASTVisitor() : \l# endVisit(QualifiedName) : \l# test0542() : \l# test0543() : \l# test0544() : \l# test0545() : \l# test0546() : \l# test0547() : \l# test0548() : \l# test0549() : \l# test0550() : \l# test0551() : \l# test0552() : \l# test0553() : \l# test0554() : \l# test0555() : \l# test0556() : \l# test0557() : \l# test0558() : \l# test0559() : \l# test0560() : \l# test0561() : \l# test0562() : \l# test0563() : \l# test0564() : \l# test0565() : \l# test0566() : \l# test0567() : \l# test0568() : \l# test0570() : \l# test0571() : \l# test0572() : \l# test0573() : \l# test0574() : \l# test0575() : \l# test0576() : \l# test0578() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0579() : \l# test0580() : \l# test0581() : \l# test0582() : \l# test0583() : \l# test0584() : \l# test0585() : \l# test0586() : \l# test0587() : \l# test0588() : \l# test0589() : \l# test0590() : \l# test0591() : \l# test0592() : \l# test0593() : \l# test0594() : \l# test0595() : \l# test0596() : \l# test0597() : \l# test0598() : \l# test0599() : \l# endVisit(MethodDeclaration) : \l# test0600() : \l# test0601() : \l# test0602() : \l# visit(StringLiteral) : boolean\l# test0603() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0604() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0605() : \l# test0606() : \l# test0607() : \l# test0608() : \l# test0609() : \l# test0610() : \l# test0611() : \l# test0612() : \l# test0613() : \l# test0614() : \l# test0615() : \l# test0616() : \l# test0617() : \l# test0618() : \l# test0619() : \l# test0620() : \l# visit(CharacterLiteral) : boolean\l# test0621() : \l# test0622() : \l# visit(CharacterLiteral) : boolean\l# test0623() : \l# visit(ConstructorInvocation) : boolean\l# visit(ClassInstanceCreation) : boolean\l# test0624() : \l# visit(TypeDeclaration) : boolean\l# visit(CompilationUnit) : boolean\l# test0625() : \l# test0626() : \l# test0627() : \l# test0628() : \l# test0629() : \l# test0630() : \l# test0631() : \l# test0632() : \l# test0633() : \l# test0634() : \l# test0635() : \l# test0636() : \l# test0637() : \l# test0638() : \l# test0639() : \l# test0641() : \l# test0642() : \l# test0643() : \l# test0644() : \l# test0645() : \l# test0646() : \l# test0647() : \l# test0648() : \l# test0649() : \l# test0650() : \l# test0651() : \l# _test0652() : \l# test0653() : \l# test0654() : \l# test0655() : \l# test0656() : \l# test0657() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# _test0658() : \l# test0659() : \l# test0660() : \l# test0661() : \l# test0662() : \l# test0663() : \l# test0664() : \l# test0665() : \l# test0666() : \l# test0666_2() : \l# test0667() : \l# test0667_2() : \l# test0668() : \l# test0669() : \l# test0670() : \l# test0671() : \l# test0672() : \l# test0673() : \l# test0674() : \l# test0675() : \l# test0676() : \l# test0677() : \l# test0678() : \l# _test0679() : \l# test0680() : \l# test0681() : \l# test0682() : \l# test0683() : \l# test0684() : \l# test0685() : \l# test0686() : \l# test0687() : \l# test0688() : \l# test0689() : \l# test0690() : \l# test0691() : \l# test0692() : \l# test0693() : \l# test0694() : \l# test0695() : \l# visit(EnumDeclaration) : boolean\l# test0696() : \l# visit(AnnotationTypeDeclaration) : boolean\l# test0697() : \l# test0698a() : \l# test0698b() : \l# test0699() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0700() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0701() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0702() : \l# test0703() : \l# test0704() : \l# test0705() : \l# test0706() : \l# test0707() : \l# test0708() : \l# test0709() : \l# visit(ParenthesizedExpression) : boolean\l# test0710() : \l# test0711() : \l# test0712() : \l# test0713() : \l# test0714() : \l# test0715() : \l# test0716() : \l# test0717() : \l# visit(MethodDeclaration) : boolean\l# test0718() : \l# test0719() : \l# test0720() : \l# test0721() : \l# test0722() : \l# test0723() : \l# test0724() : \l# test0725() : \l}"
	 ]

	 TestASTRequestor [
		 label = "{TestASTRequestor|# counter : int\l+ asts : ArrayList\l|# setUpSuite() : \l# ASTConverterTestAST8_2(String) : \l# null() : \l# suite() : Test\l# internalThrownExceptions(MethodDeclaration) : List\l# componentType(ArrayType) : Type\l# test0401() : \l# test0402() : \l# test0403() : \l# test0404() : \l# test0405() : \l# test0406() : \l# test0407() : \l# test0408() : \l# test0409() : \l# test0410() : \l# test0411() : \l# test0412() : \l# test0413() : \l# test0414() : \l# test0415() : \l# test0416() : \l# test0417() : \l# test0418() : \l# test0419() : \l# test0420() : \l# test0421() : \l# test0422() : \l# test0423() : \l# test0424() : \l# test0425() : \l# test0426() : \l# test0427() : \l# test0428() : \l# test0429() : \l# test0430() : \l# test0431() : \l# test0432() : \l# test0433() : \l# test0434() : \l# test0435() : \l# test0436() : \l# test0437() : \l# test0438() : \l# test0439() : \l# test0440() : \l# test0441() : \l# test0442() : \l# test0443() : \l# test0444() : \l# test0445() : \l# test0446() : \l# test0447() : \l# test0448() : \l# test0449() : \l# test0450() : \l# test0451() : \l# test0452() : \l# test0453() : \l# test0454() : \l# test0455() : \l# test0456() : \l# test0457() : \l# test0458() : \l# test0459() : \l# test0460() : \l# test0461() : \l# test0462() : \l# test0463() : \l# test0464() : \l# test0465() : \l# test0466() : \l# test0467() : \l# test0468() : \l# test0469() : \l# test0470() : \l# test0471() : \l# test0472() : \l# test0473() : \l# test0474() : \l# test0475() : \l# test0476() : \l# test0477() : \l# test0478() : \l# test0479() : \l# test0480() : \l# test0481() : \l# test0482() : \l# test0483() : \l# test0484() : \l# test0485() : \l# test0486() : \l# test0487() : \l# test0488() : \l# test0489() : \l# test0490() : \l# test0491() : \l# test0492() : \l# test0493() : \l# test0494() : \l# test0495() : \l# test0496() : \l# test0497() : \l# test0498() : \l# test0499() : \l# test0500() : \l# test0501() : \l# test0502a() : \l# test0502b() : \l# test0502c() : \l# test0502d() : \l# test0502e() : \l# test0502f() : \l# test0502g() : \l# test0502h() : \l# test0502i() : \l# test0502j() : \l# test0503a() : \l# test0503b() : \l# test0503c() : \l# test0503d() : \l# test0503e() : \l# test0503f() : \l# test0503g() : \l# test0503h() : \l# test0503i() : \l# test0504() : \l# test0505() : \l# test0506() : \l# test0507() : \l# test0508() : \l# test0509() : \l# test0510() : \l# test0511() : \l# test0512() : \l# test0513() : \l# test0514() : \l# test0515() : \l# test0516() : \l# test0517() : \l# test0518() : \l# test0519() : \l# test0520() : \l# test0521() : \l# test0522() : \l# test0523() : \l# test0524() : \l# test0525() : \l# test0526() : \l# test0527() : \l# test0528() : \l# test0529() : \l# test0530() : \l# test0531() : \l# test0532() : \l# test0533() : \l# test0534() : \l# test0535() : \l# test0536() : \l# test0537a() : \l# test0537b() : \l# test0537c() : \l# test0538a() : \l# test0538b() : \l# test0538c() : \l# test0538d() : \l# test0538e() : \l# test0538f() : \l# test0538g() : \l# test0538h() : \l# isActive() : boolean\l# test0539() : \l# test0540() : \l# test0541() : \l# Change14FieldAccessASTVisitor() : \l# endVisit(QualifiedName) : \l# test0542() : \l# test0543() : \l# test0544() : \l# test0545() : \l# test0546() : \l# test0547() : \l# test0548() : \l# test0549() : \l# test0550() : \l# test0551() : \l# test0552() : \l# test0553() : \l# test0554() : \l# test0555() : \l# test0556() : \l# test0557() : \l# test0558() : \l# test0559() : \l# test0560() : \l# test0561() : \l# test0562() : \l# test0563() : \l# test0564() : \l# test0565() : \l# test0566() : \l# test0567() : \l# test0568() : \l# test0570() : \l# test0571() : \l# test0572() : \l# test0573() : \l# test0574() : \l# test0575() : \l# test0576() : \l# test0578() : \l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(FieldAccess) : boolean\l# visit(SuperFieldAccess) : boolean\l# test0579() : \l# test0580() : \l# test0581() : \l# test0582() : \l# test0583() : \l# test0584() : \l# test0585() : \l# test0586() : \l# test0587() : \l# test0588() : \l# test0589() : \l# test0590() : \l# test0591() : \l# test0592() : \l# test0593() : \l# test0594() : \l# test0595() : \l# test0596() : \l# test0597() : \l# test0598() : \l# test0599() : \l# endVisit(MethodDeclaration) : \l# test0600() : \l# test0601() : \l# test0602() : \l# visit(StringLiteral) : boolean\l# test0603() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0604() : \l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# test0605() : \l# test0606() : \l# test0607() : \l# test0608() : \l# test0609() : \l# test0610() : \l# test0611() : \l# test0612() : \l# test0613() : \l# test0614() : \l# test0615() : \l# test0616() : \l# test0617() : \l# test0618() : \l# test0619() : \l# test0620() : \l# visit(CharacterLiteral) : boolean\l# test0621() : \l# test0622() : \l# visit(CharacterLiteral) : boolean\l# test0623() : \l# visit(ConstructorInvocation) : boolean\l# visit(ClassInstanceCreation) : boolean\l# test0624() : \l# visit(TypeDeclaration) : boolean\l# visit(CompilationUnit) : boolean\l# test0625() : \l# test0626() : \l# test0627() : \l# test0628() : \l# test0629() : \l# test0630() : \l# test0631() : \l# test0632() : \l# test0633() : \l# test0634() : \l# test0635() : \l# test0636() : \l# test0637() : \l# test0638() : \l# test0639() : \l# test0641() : \l# _test0642() : \l# test0643() : \l# test0644() : \l# test0645() : \l# test0646() : \l# test0647() : \l# test0648() : \l# test0649() : \l# test0650() : \l# test0651() : \l# _test0652() : \l# test0653() : \l# test0654() : \l# test0655() : \l# test0656() : \l# test0657() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# _test0658() : \l# test0659() : \l# test0660() : \l# test0661() : \l# test0662() : \l# test0663() : \l# test0664() : \l# test0665() : \l# test0666() : \l# test0666_2() : \l# test0667() : \l# test0667_2() : \l# test0668() : \l# test0669() : \l# test0670() : \l# test0671() : \l# test0672() : \l# test0673() : \l# test0674() : \l# test0675() : \l# test0676() : \l# test0677() : \l# test0678() : \l# _test0679() : \l# test0680() : \l# test0681() : \l# test0682() : \l# test0683() : \l# test0684() : \l# test0685() : \l# test0686() : \l# test0687() : \l# test0688() : \l# test0689() : \l# test0690() : \l# test0691() : \l# test0692() : \l# test0693() : \l# test0694() : \l# test0695() : \l# visit(EnumDeclaration) : boolean\l# test0696() : \l# visit(AnnotationTypeDeclaration) : boolean\l# test0697() : \l# test0698a() : \l# test0698b() : \l# test0699() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0700() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0701() : \l# acceptBinding(String, IBinding) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test0702() : \l# test0703() : \l# test0704() : \l# test0705() : \l# test0706() : \l# test0707() : \l# test0708() : \l# test0709() : \l# visit(ParenthesizedExpression) : boolean\l# test0710() : \l# test0711() : \l# test0712() : \l# test0713() : \l# test0714() : \l# test0715() : \l# test0716() : \l# test0717() : \l# visit(MethodDeclaration) : boolean\l# test0718() : \l# test0719() : \l# test0720() : \l# test0721() : \l# test0722() : \l# test0723() : \l# test0724() : \l# test0725() : \l# testBug443942() : \l# isActive() : boolean\l}"
	 ]

	 NodeCounter [
		 label = "{NodeCounter|# JLS3_INTERNAL : int\l# JLS4_INTERNAL : int\l# ast : AST\l# N1 : SimpleName\l# N2 : SimpleName\l# N3 : SimpleName\l# N4 : SimpleName\l# E1 : Expression\l# E2 : Expression\l# T1 : Type\l# T1S : String\l# T2 : Type\l# T2S : String\l# PT1 : ParameterizedType\l# PT1S : String\l# S1 : Statement\l# S2 : Statement\l# B1 : Block\l# V1 : SingleVariableDeclaration\l# V2 : SingleVariableDeclaration\l# R1 : AnnotatableType\l# Q1 : Name\l# W1 : VariableDeclarationFragment\l# W2 : VariableDeclarationFragment\l# FD1 : FieldDeclaration\l# FD2 : FieldDeclaration\l# PD1 : PackageDeclaration\l# ID1 : ImportDeclaration\l# ID2 : ImportDeclaration\l# TD1 : TypeDeclaration\l# TD2 : TypeDeclaration\l# ACD1 : AnonymousClassDeclaration\l# JD1 : Javadoc\l# JD2 : Javadoc\l# JD2S : String\l# TP1 : TypeParameter\l# TP1S : String\l# TP2 : TypeParameter\l# TP2S : String\l# TAG1 : TagElement\l# TAG2 : TagElement\l# TEXT1 : TextElement\l# MBREF1 : MemberRef\l# MTHREF1 : MethodRef\l# MPARM1 : MethodRefParameter\l# LC1 : LineComment\l# BC1 : BlockComment\l# MVP1 : MemberValuePair\l# MVP2 : MemberValuePair\l# ANO1 : MarkerAnnotation\l# ANO2 : SingleMemberAnnotation\l# MOD1 : Modifier\l# MOD2 : Modifier\l# EC1 : EnumConstantDeclaration\l# EC2 : EnumConstantDeclaration\l# T3 : Type\l# T4 : Type\l# b : StringBuffer\l# API_LEVEL : int\l+ receiverNode : Object\l+ otherNode : Object\l+ result : boolean\l+ superMatch : boolean\l+ superMatchResult : boolean\l+ matchCalls : int\l+ count : int\l|# suite() : Test\l# ASTMatcherTest(String, int) : \l# setUp() : \l# tearDown() : \l# getName() : String\l# null() : \l# TestMatcher() : \l# TestMatcher(boolean) : \l# standardBody(ASTNode, Object, boolean) : boolean\l# match(AnnotationTypeDeclaration, Object) : boolean\l# match(AnnotationTypeMemberDeclaration, Object) : boolean\l# match(AnonymousClassDeclaration, Object) : boolean\l# match(ArrayAccess, Object) : boolean\l# match(ArrayCreation, Object) : boolean\l# match(ArrayInitializer, Object) : boolean\l# match(ArrayType, Object) : boolean\l# match(AssertStatement, Object) : boolean\l# match(Assignment, Object) : boolean\l# match(Block, Object) : boolean\l# match(BlockComment, Object) : boolean\l# match(BooleanLiteral, Object) : boolean\l# match(BreakStatement, Object) : boolean\l# match(CastExpression, Object) : boolean\l# match(CatchClause, Object) : boolean\l# match(CharacterLiteral, Object) : boolean\l# match(ClassInstanceCreation, Object) : boolean\l# match(CompilationUnit, Object) : boolean\l# match(ConditionalExpression, Object) : boolean\l# match(ConstructorInvocation, Object) : boolean\l# match(ContinueStatement, Object) : boolean\l# match(UnionType, Object) : boolean\l# match(DoStatement, Object) : boolean\l# match(EmptyStatement, Object) : boolean\l# match(EnhancedForStatement, Object) : boolean\l# match(EnumConstantDeclaration, Object) : boolean\l# match(EnumDeclaration, Object) : boolean\l# match(ExpressionStatement, Object) : boolean\l# match(FieldAccess, Object) : boolean\l# match(FieldDeclaration, Object) : boolean\l# match(ForStatement, Object) : boolean\l# match(IfStatement, Object) : boolean\l# match(ImportDeclaration, Object) : boolean\l# match(InfixExpression, Object) : boolean\l# match(Initializer, Object) : boolean\l# match(Javadoc, Object) : boolean\l# match(LabeledStatement, Object) : boolean\l# match(LineComment, Object) : boolean\l# match(MarkerAnnotation, Object) : boolean\l# match(MemberRef, Object) : boolean\l# match(MemberValuePair, Object) : boolean\l# match(MethodDeclaration, Object) : boolean\l# match(MethodInvocation, Object) : boolean\l# match(MethodRef, Object) : boolean\l# match(MethodRefParameter, Object) : boolean\l# match(Modifier, Object) : boolean\l# match(NormalAnnotation, Object) : boolean\l# match(NullLiteral, Object) : boolean\l# match(NumberLiteral, Object) : boolean\l# match(PackageDeclaration, Object) : boolean\l# match(NameQualifiedType, Object) : boolean\l# match(ParameterizedType, Object) : boolean\l# match(ParenthesizedExpression, Object) : boolean\l# match(PostfixExpression, Object) : boolean\l# match(PrefixExpression, Object) : boolean\l# match(PrimitiveType, Object) : boolean\l# match(QualifiedName, Object) : boolean\l# match(QualifiedType, Object) : boolean\l# match(ReturnStatement, Object) : boolean\l# match(SimpleName, Object) : boolean\l# match(SimpleType, Object) : boolean\l# match(SingleMemberAnnotation, Object) : boolean\l# match(SingleVariableDeclaration, Object) : boolean\l# match(StringLiteral, Object) : boolean\l# match(SuperConstructorInvocation, Object) : boolean\l# match(SuperFieldAccess, Object) : boolean\l# match(SuperMethodInvocation, Object) : boolean\l# match(SuperMethodReference, Object) : boolean\l# match(SwitchCase, Object) : boolean\l# match(SwitchStatement, Object) : boolean\l# match(SynchronizedStatement, Object) : boolean\l# match(TagElement, Object) : boolean\l# match(TextElement, Object) : boolean\l# match(ThisExpression, Object) : boolean\l# match(ThrowStatement, Object) : boolean\l# match(TryStatement, Object) : boolean\l# match(TypeDeclaration, Object) : boolean\l# match(TypeDeclarationStatement, Object) : boolean\l# match(TypeLiteral, Object) : boolean\l# match(TypeParameter, Object) : boolean\l# match(VariableDeclarationExpression, Object) : boolean\l# match(VariableDeclarationFragment, Object) : boolean\l# match(VariableDeclarationStatement, Object) : boolean\l# match(WhileStatement, Object) : boolean\l# match(WildcardType, Object) : boolean\l# match(Dimension, Object) : boolean\l# match(InstanceofExpression, Object) : boolean\l# match(LambdaExpression, Object) : boolean\l# match(CreationReference, Object) : boolean\l# match(ExpressionMethodReference, Object) : boolean\l# match(TypeMethodReference, Object) : boolean\l# match(IntersectionType, Object) : boolean\l# null() : \l# NodeCounter(boolean) : \l# preVisit(ASTNode) : \l# nodeCount(ASTNode, boolean) : int\l# basicMatch(ASTNode) : \l# testSimpleName() : \l# testQualifiedName() : \l# testPrimitiveType() : \l# testSimpleType() : \l# testUnionType() : \l# testArrayType() : \l# testNameQualifiedType() : \l# testParameterizedType() : \l# testQualifiedType() : \l# testWildcardType() : \l# testAnonymousClassDeclaration() : \l# testArrayAccess() : \l# testArrayCreation() : \l# testArrayInitializer() : \l# testAssertStatement() : \l# testAssignment() : \l# testBlock() : \l# testBlockComment() : \l# testBooleanLiteral() : \l# testBreakStatement() : \l# testCastExpression() : \l# testCatchClause() : \l# testCharacterLiteral() : \l# testClassInstanceCreation() : \l# testCompilationUnit() : \l# testConditionalExpression() : \l# testConstructorInvocation() : \l# testContinueStatement() : \l# testCreationReference() : \l# testDoStatement() : \l# testEmptyStatement() : \l# testEnhancedForStatement() : \l# testEnumConstantDeclaration() : \l# testEnumDeclaration() : \l# testExpressionMethodReference() : \l# testExpressionStatement() : \l# testFieldAccess() : \l# testFieldDeclaration() : \l# testForStatement() : \l# testIfStatement() : \l# testImportDeclaration() : \l# testInfixExpression() : \l# testInitializer() : \l# testJavadoc() : \l# testLabeledStatement() : \l# testLineComment() : \l# testMemberRef() : \l# testMethodDeclaration() : \l# testMethodInvocation() : \l# testMethodRef() : \l# testMethodRefParameter() : \l# testNullLiteral() : \l# testNumberLiteral() : \l# testPackageDeclaration() : \l# testParenthesizedExpression() : \l# testPostfixExpression() : \l# testPrefixExpression() : \l# testReturnStatement() : \l# testSingleVariableDeclaration() : \l# testStringLiteral() : \l# testSuperConstructorInvocation() : \l# testSuperFieldAccess() : \l# testSuperMethodInvocation() : \l# testSuperMethodReference() : \l# testSwitchCase() : \l# testSwitchStatement() : \l# testSynchronizedStatement() : \l# testTagElement() : \l# testTextElement() : \l# testThisExpression() : \l# testThrowStatement() : \l# testTryStatement() : \l# testTryStatementWithResources() : \l# testTypeDeclaration() : \l# testTypeDeclarationStatement() : \l# testTypeLiteral() : \l# testTypeParameter() : \l# testVariableDeclarationFragment() : \l# testVariableDeclarationExpression() : \l# testVariableDeclarationStatement() : \l# testWhileStatement() : \l# testAnnotationTypeDeclaration() : \l# testAnnotationTypeMemberDeclaration() : \l# testNormalAnnotation() : \l# testMarkerAnnotation() : \l# testSingleMemberAnnotation() : \l# testSingleVariableDeclarationVarargsAnnotation() : \l# testQualifiedTypeAnnotation() : \l# testParameterizedQualifiedTypeAnnotation() : \l# testTypeAnnotations1() : \l# testTypeAnnotations2() : \l# testTypeAnnotations3() : \l# testTypeAnnotations4() : \l# testTypeAnnotations5() : \l# testTypeAnnotations6() : \l# testTypeAnnotations7() : \l# testTypeAnnotations8() : \l# testTypeAnnotations9() : \l# testTypeAnnotations10() : \l# testTypeAnnotations11() : \l# testTypeAnnotations12() : \l# testTypeMethodReference() : \l# testLambdaExpressions1() : \l# testLambdaExpressions2() : \l# testLambdaExpressions3() : \l# testLambdaExpressions4() : \l# testIntersectionType() : \l}"
	 ]

	 ASTModelBridgeTests [
		 label = "{ASTModelBridgeTests|# workingCopy : ICompilationUnit\l# JLS3_INTERNAL : int\l|# checkSourceRange(int, int, String, String) : \l# ASTModelBridgeTests(String) : \l# suite() : Test\l# null() : \l# assertFindElement(String, String) : \l# buildAST(String) : ASTNode\l# buildBindingKey(String) : String\l# createBindings(String, IJavaElement) : IBinding\l# createBinaryBindings(String, IJavaElement) : IBinding\l# setUpSuite() : \l# setUpJavaProject() : \l# setUpWorkingCopy() : \l# acceptProblem(IProblem) : \l# beginReporting() : \l# endReporting() : \l# isActive() : boolean\l# tearDownSuite() : \l# tearDownJavaProject() : \l# testAnnotation1() : \l# testAnnotation2() : \l# testAnnotation3() : \l# testAnnotation4() : \l# testAnnotation5() : \l# testAnnotation6() : \l# testAnnotation7() : \l# testAnnotation8() : \l# testAnnotation9() : \l# testAnnotation10() : \l# testAnnotation11() : \l# testAnnotation12() : \l# testAnnotation13() : \l# testAnnotation14() : \l# testAnnotation15() : \l# testAnonymousType() : \l# testAnonymousType2() : \l# testArrayType1() : \l# testArrayType2() : \l# testBinaryMethod() : \l# testBinaryMemberTypeConstructor() : \l# testBinaryType() : \l# testBinaryType2() : \l# testBinaryType3() : \l# testBinaryMemberTypeFromAnonymousClassFile1() : \l# testBinaryMemberTypeFromAnonymousClassFile2() : \l# testCreateBindings01() : \l# testCreateBindings23() : \l# testCreateBindings02() : \l# testCreateBindings03() : \l# testCreateBindings04() : \l# testCreateBindings05() : \l# testCreateBindings06() : \l# testCreateBindings07() : \l# testCreateBindings08() : \l# testCreateBindings09() : \l# testCreateBindings10() : \l# testCreateBindings11() : \l# testCreateBindings12() : \l# testCreateBindings13() : \l# testCreateBindings14() : \l# testCreateBindings14a() : \l# testCreateBindings14b() : \l# testCreateBindings15() : \l# testCreateBindings16() : \l# testCreateBindings17() : \l# testCreateBindings18() : \l# testCreateBindings19() : \l# testCreateBindings20() : \l# testCreateBindings21() : \l# testCreateBindings22() : \l# testCreateBindings24() : \l# testCreateBindings25() : \l# testCreateBindings26() : \l# testCreateBinding27() : \l# testCreateBinding28() : \l# testField1() : \l# testField2() : \l# testFindElement01() : \l# testFindElement02() : \l# testFindElement03() : \l# testFindElement04() : \l# testFindElement05() : \l# testFindElement06() : \l# testFindElement07() : \l# testFindElement08() : \l# testFindElement09() : \l# testFindElement10() : \l# testFindElement11() : \l# testFindElement12() : \l# testFindElement13() : \l# testLocalType() : \l# testLocalType2() : \l# testLocalVariable1() : \l# testLocalVariable2() : \l# testLocalVariable3() : \l# testLocalVariable4() : \l# testLocalVariable5() : \l# testLocalVariable6() : \l# visit(VariableDeclarationFragment) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# testLocalVariable7() : \l# visit(VariableDeclarationFragment) : boolean\l# testMemberType() : \l# testMethod01() : \l# testMethod02() : \l# testMethod03() : \l# testMethod04() : \l# testMethod05() : \l# testMethod06() : \l# testMethod07() : \l# testMethod08() : \l# testMethod09() : \l# testMethod10() : \l# testMethod11() : \l# testMethod12() : \l# testMethod13() : \l# testMethod14() : \l# testPackage1() : \l# testPackage2() : \l# testParameterizedBinaryType() : \l# testParameterizedBinaryMethod() : \l# testRawBinaryType() : \l# testRecoveredTypeBinding1() : \l# testRecoveredTypeBinding2() : \l# testTopLevelType1() : \l# testTopLevelType2() : \l# testTopLevelType3() : \l# testTypeParameter() : \l# testTypeParameter2() : \l# testTypeParameter3() : \l# testTypeParameter4() : \l# testWildCard() : \l# test157847a() : \l# test157847b() : \l# test157847c() : \l# test320802() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l}"
	 ]

	 ASTNodeFinderTest [
		 label = "{ASTNodeFinderTest|# workingCopy : ICompilationUnit\l|# setUpSuite() : \l# ASTNodeFinderTest(String) : \l# tearDown() : \l# null() : \l# suite() : Test\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l}"
	 ]

	 ASTNodesCollectorVisitor [
		 label = "{ASTNodesCollectorVisitor|- detachedAstNodes : Set\l|# ASTNodesCollectorVisitor() : \l# add(ASTNode) : \l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# detachedListElement(List) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(CompilationUnit) : \l# endVisit(EnumConstantDeclaration) : \l# endVisit(EnumDeclaration) : \l# endVisit(FieldAccess) : \l# endVisit(FieldDeclaration) : \l# endVisit(ImportDeclaration) : \l# endVisit(MemberRef) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodInvocation) : \l# endVisit(MethodRef) : \l# endVisit(PackageDeclaration) : \l# endVisit(QualifiedName) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(ThisExpression) : \l# endVisit(TypeDeclaration) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(VariableDeclarationFragment) : \l# endVisit(VariableDeclarationStatement) : \l# getDetachedAstNodes() : Set\l}"
	 ]

	 ASTParserTest [
		 label = "{ASTParserTest|# ast : AST\l# parser : ASTParser\l# API_LEVEL : int\l|# suite() : Test\l# ASTParserTest(String, int) : \l# setUp() : \l# tearDown() : \l# getName() : String\l# testKConstants() : \l# testSetting() : \l}"
	 ]

	 ASTPositionsTest [
		 label = "{ASTPositionsTest|# workingCopy : ICompilationUnit\l|# setUpSuite() : \l# ASTPositionsTest(String) : \l# null() : \l# suite() : Test\l# sanityCheck(String, CompilationUnit) : \l# tearDown() : \l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l}"
	 ]

	 Protector [
		 label = "{Protector|# ast : AST\l# parser : ASTParser\l# API_LEVEL : int\l# shouldBeProtected : boolean\l# shouldBeProtected : boolean\l|# suite() : Test\l# ASTStructuralPropertyTest(String) : \l# ASTStructuralPropertyTest(String, int) : \l# setUp() : \l# tearDown() : \l# getName() : String\l# testLocationInParent() : \l# postVisit(ASTNode) : \l# testStructuralProperties() : \l# postVisit(ASTNode) : \l# testProtect() : \l# Slammer(boolean) : \l# postVisit(ASTNode) : \l# Protector(boolean) : \l# preVisit(ASTNode) : \l# testDelete() : \l# postVisit(ASTNode) : \l# testCreateInstance() : \l# testNodeClassForType() : \l}"
	 ]

	 PositionAssigner [
		 label = "{PositionAssigner|# JLS3_INTERNAL : int\l# ast : AST\l# API_LEVEL : int\l- compulsory : boolean\l- nodeType : Class\l- propertyName : String\l+ sample : ASTNode\l|# null() : \l# CheckPositionsMatcher() : \l# checkPositions(Object, Object) : \l# match(AnnotationTypeDeclaration, Object) : boolean\l# match(AnnotationTypeMemberDeclaration, Object) : boolean\l# match(AnonymousClassDeclaration, Object) : boolean\l# match(ArrayAccess, Object) : boolean\l# match(ArrayCreation, Object) : boolean\l# match(ArrayInitializer, Object) : boolean\l# match(ArrayType, Object) : boolean\l# match(AssertStatement, Object) : boolean\l# match(Assignment, Object) : boolean\l# match(Block, Object) : boolean\l# match(BlockComment, Object) : boolean\l# match(BooleanLiteral, Object) : boolean\l# match(BreakStatement, Object) : boolean\l# match(CastExpression, Object) : boolean\l# match(CatchClause, Object) : boolean\l# match(CharacterLiteral, Object) : boolean\l# match(ClassInstanceCreation, Object) : boolean\l# match(CompilationUnit, Object) : boolean\l# match(ConditionalExpression, Object) : boolean\l# match(ConstructorInvocation, Object) : boolean\l# match(ContinueStatement, Object) : boolean\l# match(DoStatement, Object) : boolean\l# match(EmptyStatement, Object) : boolean\l# match(EnhancedForStatement, Object) : boolean\l# match(EnumConstantDeclaration, Object) : boolean\l# match(ExpressionStatement, Object) : boolean\l# match(FieldAccess, Object) : boolean\l# match(FieldDeclaration, Object) : boolean\l# match(ForStatement, Object) : boolean\l# match(IfStatement, Object) : boolean\l# match(ImportDeclaration, Object) : boolean\l# match(InfixExpression, Object) : boolean\l# match(Initializer, Object) : boolean\l# match(InstanceofExpression, Object) : boolean\l# match(Javadoc, Object) : boolean\l# match(LabeledStatement, Object) : boolean\l# match(LineComment, Object) : boolean\l# match(MarkerAnnotation, Object) : boolean\l# match(MemberRef, Object) : boolean\l# match(MemberValuePair, Object) : boolean\l# match(MethodDeclaration, Object) : boolean\l# match(MethodInvocation, Object) : boolean\l# match(MethodRef, Object) : boolean\l# match(MethodRefParameter, Object) : boolean\l# match(Modifier, Object) : boolean\l# match(NormalAnnotation, Object) : boolean\l# match(NullLiteral, Object) : boolean\l# match(NumberLiteral, Object) : boolean\l# match(PackageDeclaration, Object) : boolean\l# match(ParameterizedType, Object) : boolean\l# match(ParenthesizedExpression, Object) : boolean\l# match(PostfixExpression, Object) : boolean\l# match(PrefixExpression, Object) : boolean\l# match(PrimitiveType, Object) : boolean\l# match(QualifiedName, Object) : boolean\l# match(QualifiedType, Object) : boolean\l# match(ReturnStatement, Object) : boolean\l# match(SimpleName, Object) : boolean\l# match(SimpleType, Object) : boolean\l# match(SingleMemberAnnotation, Object) : boolean\l# match(SingleVariableDeclaration, Object) : boolean\l# match(StringLiteral, Object) : boolean\l# match(SuperConstructorInvocation, Object) : boolean\l# match(SuperFieldAccess, Object) : boolean\l# match(SuperMethodInvocation, Object) : boolean\l# match(SwitchCase, Object) : boolean\l# match(SwitchStatement, Object) : boolean\l# match(SynchronizedStatement, Object) : boolean\l# match(TagElement, Object) : boolean\l# match(TextElement, Object) : boolean\l# match(ThisExpression, Object) : boolean\l# match(ThrowStatement, Object) : boolean\l# match(TryStatement, Object) : boolean\l# match(TypeDeclaration, Object) : boolean\l# match(TypeDeclarationStatement, Object) : boolean\l# match(TypeLiteral, Object) : boolean\l# match(TypeParameter, Object) : boolean\l# match(VariableDeclarationExpression, Object) : boolean\l# match(VariableDeclarationFragment, Object) : boolean\l# match(VariableDeclarationStatement, Object) : boolean\l# match(WhileStatement, Object) : boolean\l# match(WildcardType, Object) : boolean\l# suite() : Test\l# ASTTest(String) : \l# ASTTest(String, int) : \l# setUp() : \l# tearDown() : \l# getName() : String\l# setExtraDimensions(VariableDeclarationFragment, int) : \l# testExampleSnippets() : \l# null() : \l# Property(String, boolean, Class, AST, boolean) : \l# counterExamples(AST) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# isCompulsory() : boolean\l# get() : ASTNode\l# set(ASTNode) : \l# toString() : String\l# genericPropertyTest(ASTNode, Property) : \l# genericPropertyListTest(ASTNode, List, Property) : \l# testAST() : \l# testWellKnownBindings() : \l# testSimpleName() : \l# testQualifiedName() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testNameFactories() : \l# testNullLiteral() : \l# testBooleanLiteral() : \l# testStringLiteral() : \l# testStringLiteralUnicode() : \l# testCharacterLiteral() : \l# testNumberLiteral() : \l# testSimpleType() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testPrimitiveType() : \l# getArrayComponentType(ArrayType) : Type\l# setArrayComponentType(ArrayType, Type) : \l# testArrayType() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testParameterizedType() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testQualifiedType() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testWildcardType() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testPackageDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testImportDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testCompilationUnit() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# testCompilationUnitLineNumberTable() : \l# testTypeDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testEnumDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testEnumConstantDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testTypeParameter() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# testSingleVariableDeclaration() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testVariableDeclarationFragment() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testMethodDeclaration() : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testInitializer() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testJavadoc() : \l# sample(AST, boolean) : ASTNode\l# counterExamples(AST) : ASTNode\l# testBlockComment() : \l# testLineComment() : \l# testTagElement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# counterExamples(AST) : ASTNode\l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# testTextElement() : \l# testMemberRef() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testMethodRef() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# testMethodRefParameter() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testBlock() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testMethodInvocation() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testExpressionStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testVariableDeclarationStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testTypeDeclarationStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testVariableDeclarationExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testFieldDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testAssignment() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testBreakStatement() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testContinueStatement() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testIfStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testWhileStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testDoStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testTryStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testCatchClause() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testEmptyStatement() : \l# tLeadingComment(Statement) : \l# tJavadocComment(BodyDeclaration) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# allModifiers() : Modifier\l# tModifiers(BodyDeclaration) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# tAlternateRoot(Comment) : \l# tClientProperties(ASTNode) : \l# testReturnStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testThrowStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testAssertStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testSwitchStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testSwitchCase() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testSynchronizedStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testLabeledStatement() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# assignSourceRanges(ASTNode) : \l# PositionAssigner() : \l# preVisit(ASTNode) : \l# postVisit(ASTNode) : \l# testClone() : \l# testNullResolve() : \l# visit(SimpleName) : boolean\l# visit(QualifiedName) : boolean\l# visit(SimpleType) : boolean\l# visit(ArrayType) : boolean\l# visit(ParameterizedType) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedType) : boolean\l# visit(WildcardType) : boolean\l# visit(Assignment) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# testForStatement() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testEnhancedForStatement() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testConstructorInvocation() : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testSuperConstructorInvocation() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testThisExpression() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testFieldAccess() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testSuperFieldAccess() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testSuperMethodInvocation() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testTypeLiteral() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testCastExpression() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testPrefixExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testPostfixExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testInfixExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testInstanceofExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testConditionalExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testArrayAccess() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testArrayInitializer() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testClassInstanceCreation() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testAnonymousClassDeclaration() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testArrayCreation() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testParenthesizedExpression() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testAnnotationTypeDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testAnnotationTypeMemberDeclaration() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testNormalAnnotation() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# testMarkerAnnotation() : \l# testSingleMemberAnnotation() : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# testMemberValuePair() : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# sample(AST, boolean) : ASTNode\l# wrap() : ASTNode\l# unwrap() : \l# get() : ASTNode\l# set(ASTNode) : \l# tAnnotationName(Annotation) : \l# sample(AST, boolean) : ASTNode\l# get() : ASTNode\l# set(ASTNode) : \l# testModifiers() : \l# testSubtreeBytes() : \l# testNodeTypeConstants() : \l}"
	 ]

	 TestVisitor [
		 label = "{TestVisitor|# ast : AST\l# N1 : SimpleName\l# N1S : String\l# N2 : SimpleName\l# N2S : String\l# N3 : SimpleName\l# N3S : String\l# N4 : SimpleName\l# N4S : String\l# E1 : Expression\l# E1S : String\l# E2 : Expression\l# E2S : String\l# T1 : Type\l# T1S : String\l# T2 : Type\l# T2S : String\l# PT1 : ParameterizedType\l# PT1S : String\l# S1 : Statement\l# S1S : String\l# S2 : Statement\l# B1 : Block\l# B1S : String\l# S2S : String\l# V1 : SingleVariableDeclaration\l# V1S : String\l# V2 : SingleVariableDeclaration\l# V2S : String\l# W1 : VariableDeclarationFragment\l# W1S : String\l# W2 : VariableDeclarationFragment\l# W2S : String\l# FD1 : FieldDeclaration\l# FD1S : String\l# FD2 : FieldDeclaration\l# FD2S : String\l# PD1 : PackageDeclaration\l# PD1S : String\l# ID1 : ImportDeclaration\l# ID1S : String\l# ID2 : ImportDeclaration\l# ID2S : String\l# TD1 : TypeDeclaration\l# TD1S : String\l# TD2 : TypeDeclaration\l# TD2S : String\l# JD1 : Javadoc\l# JD1S : String\l# TAG1 : TagElement\l# TAG1S : String\l# TEXT1 : TextElement\l# TEXT1S : String\l# MBREF1 : MemberRef\l# MBREF1S : String\l# MTHREF1 : MethodRef\l# MTHREF1S : String\l# MPARM1 : MethodRefParameter\l# MPARM1S : String\l# LC1 : LineComment\l# LC1S : String\l# BC1 : BlockComment\l# BC1S : String\l# ACD1 : AnonymousClassDeclaration\l# ACD1S : String\l# TP1 : TypeParameter\l# TP1S : String\l# TP2 : TypeParameter\l# TP2S : String\l# MVP1 : MemberValuePair\l# MVP1S : String\l# MVP2 : MemberValuePair\l# MVP2S : String\l# MOD1 : Modifier\l# MOD1S : String\l# MOD2 : Modifier\l# MOD2S : String\l# ANO1 : Annotation\l# ANO1S : String\l# ANO2 : Annotation\l# ANO2S : String\l# EC1 : EnumConstantDeclaration\l# EC1S : String\l# EC2 : EnumConstantDeclaration\l# EC2S : String\l# T3 : Type\l# T3S : String\l# T4 : Type\l# T4S : String\l# b : StringBuffer\l# API_LEVEL : int\l# visitTheKids : boolean\l# visitDocTags : boolean\l|# suite() : Test\l# ASTVisitorTest(String, int) : \l# ASTVisitorTest(String) : \l# getName() : String\l# setUp() : \l# tearDown() : \l# null() : \l# TestVisitor() : \l# TestVisitor(boolean) : \l# isVisitingChildren() : boolean\l# setVisitingChildren(boolean) : \l# visit(SimpleName) : boolean\l# endVisit(SimpleName) : \l# visit(QualifiedName) : boolean\l# endVisit(QualifiedName) : \l# visit(SimpleType) : boolean\l# endVisit(SimpleType) : \l# visit(ArrayType) : boolean\l# endVisit(ArrayType) : \l# visit(PrimitiveType) : boolean\l# endVisit(PrimitiveType) : \l# visit(NameQualifiedType) : boolean\l# endVisit(NameQualifiedType) : \l# visit(ParameterizedType) : boolean\l# endVisit(ParameterizedType) : \l# visit(QualifiedType) : boolean\l# endVisit(QualifiedType) : \l# visit(UnionType) : boolean\l# endVisit(UnionType) : \l# visit(WildcardType) : boolean\l# endVisit(WildcardType) : \l# visit(ArrayAccess) : boolean\l# endVisit(ArrayAccess) : \l# visit(ArrayCreation) : boolean\l# endVisit(ArrayCreation) : \l# visit(ArrayInitializer) : boolean\l# endVisit(ArrayInitializer) : \l# visit(AssertStatement) : boolean\l# endVisit(AssertStatement) : \l# visit(Assignment) : boolean\l# endVisit(Assignment) : \l# visit(Block) : boolean\l# endVisit(Block) : \l# visit(BooleanLiteral) : boolean\l# endVisit(BooleanLiteral) : \l# visit(BreakStatement) : boolean\l# endVisit(BreakStatement) : \l# visit(CastExpression) : boolean\l# endVisit(CastExpression) : \l# visit(CatchClause) : boolean\l# endVisit(CatchClause) : \l# visit(CharacterLiteral) : boolean\l# endVisit(CharacterLiteral) : \l# visit(ClassInstanceCreation) : boolean\l# endVisit(ClassInstanceCreation) : \l# visit(AnonymousClassDeclaration) : boolean\l# endVisit(AnonymousClassDeclaration) : \l# visit(CompilationUnit) : boolean\l# endVisit(CompilationUnit) : \l# visit(ConditionalExpression) : boolean\l# endVisit(ConditionalExpression) : \l# visit(ConstructorInvocation) : boolean\l# endVisit(ConstructorInvocation) : \l# visit(ContinueStatement) : boolean\l# endVisit(ContinueStatement) : \l# visit(DoStatement) : boolean\l# endVisit(DoStatement) : \l# visit(EmptyStatement) : boolean\l# endVisit(EmptyStatement) : \l# visit(EnhancedForStatement) : boolean\l# endVisit(EnhancedForStatement) : \l# visit(EnumConstantDeclaration) : boolean\l# endVisit(EnumConstantDeclaration) : \l# visit(EnumDeclaration) : boolean\l# endVisit(EnumDeclaration) : \l# visit(ExpressionStatement) : boolean\l# endVisit(ExpressionStatement) : \l# visit(FieldAccess) : boolean\l# endVisit(FieldAccess) : \l# visit(FieldDeclaration) : boolean\l# endVisit(FieldDeclaration) : \l# visit(ForStatement) : boolean\l# endVisit(ForStatement) : \l# visit(IfStatement) : boolean\l# endVisit(IfStatement) : \l# visit(ImportDeclaration) : boolean\l# endVisit(ImportDeclaration) : \l# visit(InfixExpression) : boolean\l# endVisit(InfixExpression) : \l# visit(InstanceofExpression) : boolean\l# endVisit(InstanceofExpression) : \l# visit(Initializer) : boolean\l# endVisit(Initializer) : \l# visit(Javadoc) : boolean\l# endVisit(Javadoc) : \l# visit(BlockComment) : boolean\l# endVisit(BlockComment) : \l# visit(CreationReference) : boolean\l# endVisit(CreationReference) : \l# visit(ExpressionMethodReference) : boolean\l# endVisit(ExpressionMethodReference) : \l# visit(LineComment) : boolean\l# endVisit(LineComment) : \l# visit(TagElement) : boolean\l# endVisit(TagElement) : \l# visit(TextElement) : boolean\l# endVisit(TextElement) : \l# visit(MemberRef) : boolean\l# endVisit(MemberRef) : \l# visit(MethodRef) : boolean\l# endVisit(MethodRef) : \l# visit(MethodRefParameter) : boolean\l# endVisit(MethodRefParameter) : \l# visit(LabeledStatement) : boolean\l# endVisit(LabeledStatement) : \l# visit(MethodDeclaration) : boolean\l# endVisit(MethodDeclaration) : \l# visit(MethodInvocation) : boolean\l# endVisit(MethodInvocation) : \l# visit(NullLiteral) : boolean\l# endVisit(NullLiteral) : \l# visit(NumberLiteral) : boolean\l# endVisit(NumberLiteral) : \l# visit(PackageDeclaration) : boolean\l# endVisit(PackageDeclaration) : \l# visit(ParenthesizedExpression) : boolean\l# endVisit(ParenthesizedExpression) : \l# visit(PostfixExpression) : boolean\l# endVisit(PostfixExpression) : \l# visit(PrefixExpression) : boolean\l# endVisit(PrefixExpression) : \l# visit(ReturnStatement) : boolean\l# endVisit(ReturnStatement) : \l# visit(SingleVariableDeclaration) : boolean\l# endVisit(SingleVariableDeclaration) : \l# visit(StringLiteral) : boolean\l# endVisit(StringLiteral) : \l# visit(SuperConstructorInvocation) : boolean\l# endVisit(SuperConstructorInvocation) : \l# visit(SuperFieldAccess) : boolean\l# endVisit(SuperFieldAccess) : \l# visit(SuperMethodInvocation) : boolean\l# endVisit(SuperMethodInvocation) : \l# visit(SuperMethodReference) : boolean\l# endVisit(SuperMethodReference) : \l# visit(SwitchCase) : boolean\l# endVisit(SwitchCase) : \l# visit(SwitchStatement) : boolean\l# endVisit(SwitchStatement) : \l# visit(SynchronizedStatement) : boolean\l# endVisit(SynchronizedStatement) : \l# visit(ThisExpression) : boolean\l# endVisit(ThisExpression) : \l# visit(ThrowStatement) : boolean\l# endVisit(ThrowStatement) : \l# visit(TryStatement) : boolean\l# endVisit(TryStatement) : \l# visit(TypeDeclaration) : boolean\l# endVisit(TypeDeclaration) : \l# visit(TypeDeclarationStatement) : boolean\l# endVisit(TypeDeclarationStatement) : \l# visit(TypeLiteral) : boolean\l# endVisit(TypeLiteral) : \l# visit(TypeMethodReference) : boolean\l# endVisit(TypeMethodReference) : \l# visit(TypeParameter) : boolean\l# endVisit(TypeParameter) : \l# visit(VariableDeclarationExpression) : boolean\l# endVisit(VariableDeclarationExpression) : \l# visit(VariableDeclarationFragment) : boolean\l# endVisit(VariableDeclarationFragment) : \l# visit(VariableDeclarationStatement) : boolean\l# endVisit(VariableDeclarationStatement) : \l# visit(WhileStatement) : boolean\l# endVisit(WhileStatement) : \l# visit(AnnotationTypeDeclaration) : boolean\l# endVisit(AnnotationTypeDeclaration) : \l# visit(AnnotationTypeMemberDeclaration) : boolean\l# endVisit(AnnotationTypeMemberDeclaration) : \l# visit(NormalAnnotation) : boolean\l# endVisit(NormalAnnotation) : \l# visit(MarkerAnnotation) : boolean\l# endVisit(MarkerAnnotation) : \l# visit(SingleMemberAnnotation) : boolean\l# endVisit(SingleMemberAnnotation) : \l# visit(MemberValuePair) : boolean\l# endVisit(MemberValuePair) : \l# visit(Modifier) : boolean\l# endVisit(Modifier) : \l# visit(Dimension) : boolean\l# endVisit(Dimension) : \l# preVisit(ASTNode) : \l# postVisit(ASTNode) : \l# testSimpleName() : \l# testQualifiedName() : \l# testPrimitiveType() : \l# testSimpleType() : \l# testArrayType() : \l# testNameQualifiedType() : \l# testParameterizedType() : \l# testQualifiedType() : \l# testWildcardType() : \l# testUnionType() : \l# testArrayAccess() : \l# testArrayCreation() : \l# testArrayInitializer() : \l# testAssertStatement() : \l# testAssignment() : \l# testBlock() : \l# testBlockComment() : \l# testBooleanLiteral() : \l# testBreakStatement() : \l# testCastExpression() : \l# testCatchClause() : \l# testCharacterLiteral() : \l# testClassInstanceCreation() : \l# testAnonymousClassDeclaration() : \l# testCompilationUnit() : \l# testConditionalExpression() : \l# testConstructorInvocation() : \l# testContinueStatement() : \l# testCreationReference() : \l# testDoStatement() : \l# testEmptyStatement() : \l# testEnumConstantDeclaration() : \l# testEnumDeclaration() : \l# testExpressionMethodReference() : \l# testExpressionStatement() : \l# testExtraDimension() : \l# testFieldAccess() : \l# testFieldDeclaration() : \l# testForStatement() : \l# testEnhancedForStatement() : \l# testIfStatement() : \l# testImportDeclaration() : \l# testInfixExpression() : \l# testInstanceofExpression() : \l# testInitializer() : \l# testJavadoc() : \l# testLabeledStatement() : \l# testLineComment() : \l# testMemberRef() : \l# testMethodDeclaration() : \l# testMethodInvocation() : \l# testMethodRef() : \l# testMethodRefParameter() : \l# testModifier() : \l# testNormalAnnotation() : \l# testMemberValuePair() : \l# testMarkerAnnotation() : \l# testSingleMemberAnnotation() : \l# testAnnotationTypeDeclaration() : \l# testAnnotationTypeMemberDeclaration() : \l# testNullLiteral() : \l# testNumberLiteral() : \l# testPackageDeclaration() : \l# testParenthesizedExpression() : \l# testPostfixExpression() : \l# testPrefixExpression() : \l# testReturnStatement() : \l# testStringLiteral() : \l# testSuperConstructorInvocation() : \l# testSuperFieldAccess() : \l# testSuperMethodInvocation() : \l# testSuperMethodReference() : \l# testSwitchCase() : \l# testSwitchStatement() : \l# testSynchronizedStatement() : \l# testTagElement() : \l# testTextElement() : \l# testThisExpression() : \l# testThrowStatement() : \l# testTryStatement() : \l# testTypeDeclaration() : \l# testTypeDeclarationStatement() : \l# testTypeLiteral() : \l# testTypeMethodReference() : \l# testSingleVariableDeclaration() : \l# testVariableDeclarationFragment() : \l# testVariableDeclarationExpression() : \l# testVariableDeclarationStatement() : \l# testWhileStatement() : \l# testPrePost() : \l# preVisit(ASTNode) : \l# postVisit(ASTNode) : \l# testTraverseAndModify() : \l# visit(MethodDeclaration) : boolean\l# testTraverseAndModify_2() : \l# visit(MethodDeclaration) : boolean\l# testTraverseAndModify_3() : \l# visit(SimpleName) : boolean\l# testTraverseAndModify_4() : \l# visit(NumberLiteral) : boolean\l}"
	 ]

	 BindingRequestor [
		 label = "{BindingRequestor|# JLS3_INTERNAL : int\l+ asts : ArrayList\l- bindingKeys : ArrayList\l# index : int\l- foundKeys : ArrayList\l# markerInfos : MarkerInfo\l+ owner : WorkingCopyOwner\l# createdBindingKeys : ArrayList\l# constantValue : Object\l# _result : ITypeBinding\l# _result : ITypeBinding\l|# null() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# null() : \l# BindingResolver(MarkerInfo) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# getBindingKeys() : String\l# getFoundKeys() : String\l# BatchASTCreationTests(String) : \l# suite() : Test\l# null() : \l# setUpSuite() : \l# tearDownSuite() : \l# assertRequestedBindingFound(String, String) : \l# assertRequestedBindingsFound(String, String) : \l# assertBindingCreated(String, String) : \l# assertBindingsCreated(String, String) : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# getCreatedKeys() : String\l# createASTs(ICompilationUnit, TestASTRequestor) : \l# createWorkingCopies(String) : ICompilationUnit\l# createWorkingCopies(String, boolean) : ICompilationUnit\l# acceptProblem(IProblem) : \l# beginReporting() : \l# endReporting() : \l# isActive() : boolean\l# resolveASTs(ICompilationUnit, TestASTRequestor) : \l# requestBindings(String, String) : BindingResolver\l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# test016() : \l# test017() : \l# test018() : \l# test019() : \l# test020() : \l# test021() : \l# test022() : \l# test023() : \l# test024() : \l# test025() : \l# test026() : \l# test027() : \l# test028() : \l# test029() : \l# test030() : \l# test031() : \l# test032() : \l# test033() : \l# test034() : \l# test035() : \l# test036() : \l# test037() : \l# test038() : \l# test039() : \l# test040() : \l# test041() : \l# test042() : \l# test043() : \l# test044() : \l# test045() : \l# test046() : \l# test047() : \l# test048() : \l# test049() : \l# test050() : \l# test051() : \l# test052() : \l# test053() : \l# test054() : \l# test055() : \l# test056() : \l# test057() : \l# test058() : \l# test059() : \l# test060() : \l# test061() : \l# test062() : \l# test063() : \l# test063a() : \l# test064() : \l# test065() : \l# test066() : \l# test067() : \l# test068() : \l# test069() : \l# test070() : \l# test071() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# test072() : \l# test073() : \l# test074_Bug155003() : \l# test075_Bug155003() : \l# test076_Bug155003() : \l# test077_Bug163647() : \l# test078() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test079() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test080() : \l# acceptAST(ICompilationUnit, CompilationUnit) : \l# acceptBinding(String, IBinding) : \l# test081() : \l# acceptBinding(String, IBinding) : \l# test082() : \l# acceptBinding(String, IBinding) : \l# test083() : \l# test084() : \l# test085() : \l# test086() : \l# test087() : \l# test088() : \l# testIgnoreMethodBodies1() : \l# testIgnoreMethodBodies2() : \l}"
	 ]

	 BindingsCollectorVisitor [
		 label = "{BindingsCollectorVisitor|- hashMap : HashMap\l- set : HashSet\l|# BindingsCollectorVisitor() : \l# collectBindings(ASTNode, IBinding) : \l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# endVisit(ArrayAccess) : \l# endVisit(ArrayCreation) : \l# endVisit(ArrayInitializer) : \l# endVisit(ArrayType) : \l# endVisit(Assignment) : \l# endVisit(BooleanLiteral) : \l# endVisit(CastExpression) : \l# endVisit(CharacterLiteral) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(ConditionalExpression) : \l# endVisit(ConstructorInvocation) : \l# endVisit(EnumConstantDeclaration) : \l# endVisit(EnumDeclaration) : \l# endVisit(FieldAccess) : \l# endVisit(ImportDeclaration) : \l# endVisit(InfixExpression) : \l# endVisit(InstanceofExpression) : \l# endVisit(MemberRef) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodInvocation) : \l# endVisit(MethodRef) : \l# endVisit(NullLiteral) : \l# endVisit(NumberLiteral) : \l# endVisit(PackageDeclaration) : \l# endVisit(ParameterizedType) : \l# endVisit(ParenthesizedExpression) : \l# endVisit(PostfixExpression) : \l# endVisit(PrefixExpression) : \l# endVisit(PrimitiveType) : \l# endVisit(QualifiedName) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(StringLiteral) : \l# endVisit(SuperConstructorInvocation) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(ThisExpression) : \l# endVisit(TypeDeclaration) : \l# endVisit(TypeLiteral) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(VariableDeclarationFragment) : \l# getBindingsMap() : HashMap\l# getUnresolvedNodesSet() : HashSet\l}"
	 ]

	 CompatibilityRulesTests [
		 label = "{CompatibilityRulesTests||# CompatibilityRulesTests(String) : \l# suite() : Test\l# null() : \l# setUpSuite() : \l# tearDownSuite() : \l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# test016() : \l# test017() : \l# test018() : \l# test019() : \l# test020() : \l# test021() : \l# test022() : \l# test023() : \l# test024() : \l# test025() : \l# test026() : \l# test027() : \l# test028() : \l# test029() : \l# test030() : \l# test031() : \l# test032() : \l# test033() : \l# test034() : \l# test035() : \l# test036() : \l# test037() : \l# test038() : \l# test039() : \l# test040() : \l# test041() : \l# test042() : \l# test043() : \l# test044() : \l# test045() : \l}"
	 ]

	 NullBindingVerifier [
		 label = "{NullBindingVerifier|# JLS3_INTERNAL : int\l# JLS4_INTERNAL : int\l# ast : AST\l+ TEST_SUITES : List\l+ PROJECT_SETUP : boolean\l|# getJLS3() : int\l# getJLS4() : int\l# ConverterTestSetup(String) : \l# getConverterJCLPath() : IPath\l# getConverterJCLPath(String) : IPath\l# getConverterJCLSourcePath() : IPath\l# getConverterJCLSourcePath(String) : IPath\l# getConverterJCLRootSourcePath() : IPath\l# tearDownSuite() : \l# setUpJCLClasspathVariables(String, boolean) : \l# setUpSuite() : \l# assertExtraDimensionsEqual(String, List, String) : \l# convertAnnotationsList(List) : String\l# runConversion(ICompilationUnit, boolean, boolean) : ASTNode\l# runConversion(ICompilationUnit, boolean) : ASTNode\l# runConversion(ICompilationUnit, int, boolean) : ASTNode\l# runConversion(IClassFile, int, boolean) : ASTNode\l# runConversion(char, String, IJavaProject) : ASTNode\l# runConversion(char, String, IJavaProject, boolean) : ASTNode\l# runConversion(int, ICompilationUnit, boolean) : ASTNode\l# runConversion(int, ICompilationUnit, boolean, boolean) : ASTNode\l# runConversion(int, ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# null() : \l# endVisit(ArrayAccess) : \l# endVisit(ArrayCreation) : \l# endVisit(ArrayInitializer) : \l# endVisit(Assignment) : \l# endVisit(BooleanLiteral) : \l# endVisit(CastExpression) : \l# endVisit(CharacterLiteral) : \l# endVisit(ClassInstanceCreation) : \l# endVisit(ConditionalExpression) : \l# endVisit(FieldAccess) : \l# endVisit(InfixExpression) : \l# endVisit(InstanceofExpression) : \l# endVisit(MarkerAnnotation) : \l# endVisit(MethodInvocation) : \l# endVisit(NormalAnnotation) : \l# endVisit(NullLiteral) : \l# endVisit(NumberLiteral) : \l# endVisit(ParenthesizedExpression) : \l# endVisit(PostfixExpression) : \l# endVisit(PrefixExpression) : \l# endVisit(SingleMemberAnnotation) : \l# endVisit(StringLiteral) : \l# endVisit(SuperFieldAccess) : \l# endVisit(SuperMethodInvocation) : \l# endVisit(ThisExpression) : \l# endVisit(TypeLiteral) : \l# endVisit(VariableDeclarationExpression) : \l# endVisit(AnnotationTypeDeclaration) : \l# endVisit(AnnotationTypeMemberDeclaration) : \l# endVisit(AnonymousClassDeclaration) : \l# endVisit(ArrayType) : \l# endVisit(EnumDeclaration) : \l# endVisit(ImportDeclaration) : \l# endVisit(MemberRef) : \l# endVisit(MethodDeclaration) : \l# endVisit(MethodRef) : \l# endVisit(PackageDeclaration) : \l# endVisit(ParameterizedType) : \l# endVisit(PrimitiveType) : \l# endVisit(QualifiedName) : \l# endVisit(QualifiedType) : \l# endVisit(SimpleName) : \l# endVisit(SimpleType) : \l# endVisit(SingleVariableDeclaration) : \l# endVisit(TypeDeclaration) : \l# endVisit(TypeDeclarationStatement) : \l# endVisit(TypeParameter) : \l# endVisit(VariableDeclarationFragment) : \l# endVisit(WildcardType) : \l# runJLS3Conversion(ICompilationUnit, boolean, boolean) : ASTNode\l# runJLS3Conversion(ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# runJLS4Conversion(ICompilationUnit, boolean, boolean) : ASTNode\l# runJLS4Conversion(ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# runJLS8Conversion(ICompilationUnit, boolean, boolean) : ASTNode\l# runJLS8Conversion(ICompilationUnit, boolean, boolean, boolean) : ASTNode\l# runConversion(int, ICompilationUnit, int, boolean) : ASTNode\l# runConversion(int, IClassFile, int, boolean) : ASTNode\l# runConversion(int, char, String, IJavaProject) : ASTNode\l# runConversion(int, char, String, IJavaProject, boolean) : ASTNode\l# runConversion(int, char, String, IJavaProject, Map, boolean) : ASTNode\l# runConversion(int, char, String, IJavaProject, Map) : ASTNode\l# runConversion(char, String, IJavaProject, Map, boolean) : ASTNode\l# runConversion(char, String, IJavaProject, Map) : ASTNode\l# getASTNodeToCompare(org) : ASTNode\l# getASTNode(org, int, int, int) : ASTNode\l# getASTNode(org, int, int) : ASTNode\l# getASTNode(org, int) : ASTNode\l# checkSourceRange(int, int, String, String) : \l# checkSourceRange(ASTNode, String, String) : \l# checkSourceRange(ASTNode, String, char) : \l# checkSourceRange(ASTNode, String, char, boolean) : \l# isMalformed(ASTNode) : boolean\l# isRecovered(ASTNode) : boolean\l# isOriginal(ASTNode) : boolean\l# assertProblemsSize(CompilationUnit, int) : \l# assertProblemsSize(CompilationUnit, int, String) : \l# checkProblemMessages(String, IProblem, int) : \l}"
	 ]

	 DefaultMarkedNodeLabelProviderOptions [
		 label = "{DefaultMarkedNodeLabelProviderOptions||# NO_OPTIONS() : int\l# ALL_OPTIONS() : int\l# NODE_TYPE() : int\l# NODE_POSITION() : int\l# NODE_EXTENDED_POSITION() : int\l# NODE_FLAGS() : int\l# BINDING_KIND() : int\l# BINDING_KEY() : int\l# BINDING_FLAGS() : int\l# NODE_OPTIONS() : int\l# BINDING_OPTIONS() : int\l}"
	 ]

	 GetKeyVisitor [
		 label = "{GetKeyVisitor||# visit(ClassInstanceCreation) : boolean\l}"
	 ]

	 MarkedNodeLabelProvider [
		 label = "{MarkedNodeLabelProvider|- options : int\l+ getText : String\l- AST_DELIMITER : String\l- DETAILS_DELIMITER : String\l- PROBLEMS_DELIMITER : String\l- NO_PROBLEM : String\l- NO_CORRESPONDING_NODE : String\l- reportAST : boolean\l- reportProblems : boolean\l- source : String\l- unit : CompilationUnit\l- markerInfo : AbstractASTTests\l- markerFromNode : Map\l- nodeFromMarker : Map\l- markerPositonInBuffer : Map\l- foundNodeFromMarker : boolean\l- markedNodesBuffer : StringBuffer\l- labelProvider : MarkedNodeLabelProvider\l|# null() : \l# DefaultMarkedNodeLabelProvider(int) : \l# appendBinding(ASTNode, StringBuffer) : \l# appendBindingFlags(IBinding, StringBuffer) : \l# appendBindingKey(IBinding, StringBuffer) : \l# appendBindingKind(IBinding, StringBuffer) : \l# appendFlags(ASTNode, StringBuffer) : \l# appendNodeExtendedPosition(ASTNode, StringBuffer) : \l# appendNodePosition(ASTNode, StringBuffer) : \l# appendNodeType(ASTNode, StringBuffer) : \l# getText(ASTNode) : String\l# resolveBinding(ASTNode) : IBinding\l# null(ASTNode) : \l# MarkedASTFlattener(boolean, boolean, MarkedNodeLabelProvider) : \l# getResult() : String\l# postVisit(ASTNode) : \l# preVisit(ASTNode) : \l# process(CompilationUnit, AbstractASTTests) : \l}"
	 ]

	 Result [
		 label = "{Result|# JLS3_INTERNAL : int\l# length : long\l# time : long\l# unitName : String\l- INCREMENTS : int\l- RESOLVE_BINDINGS : boolean\l# compilationUnits : ICompilationUnit\l|# null() : \l# Result(String, long, long) : \l# compareTo(Object) : int\l# suite() : Test\l# ProfilingASTConvertionTest(String) 
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AbortIncrementalBuildException [
		 label = "{AbortIncrementalBuildException|# qualifiedTypeName : String\l- serialVersionUID : long\l|# AbortIncrementalBuildException(String) : \l}"
	 ]

	 AbstractImageBuilder [
		 label = "{AbstractImageBuilder|# javaBuilder : JavaBuilder\l# newState : State\l# nameEnvironment : NameEnvironment\l# sourceLocations : ClasspathMultiDirectory\l# notifier : BuildNotifier\l# compiler : Compiler\l# workQueue : WorkQueue\l# problemSourceFiles : ArrayList\l# compiledAllAtOnce : boolean\l- inCompiler : boolean\l# keepStoringProblemMarkers : boolean\l# filesWithAnnotations : SimpleSet\l+ MAX_AT_ONCE : int\l+ JAVA_PROBLEM_MARKER_ATTRIBUTE_NAMES : String\l+ JAVA_TASK_MARKER_ATTRIBUTE_NAMES : String\l+ S_ERROR : Integer\l+ S_WARNING : Integer\l+ S_INFO : Integer\l+ P_HIGH : Integer\l+ P_NORMAL : Integer\l+ P_LOW : Integer\l# processAnnotationResults : null\l|# AbstractImageBuilder(JavaBuilder, boolean, State) : \l# acceptResult(CompilationResult) : \l# acceptSecondaryType(ClassFile) : \l# addAllSourceFiles(ArrayList) : \l# visit(IResourceProxy) : boolean\l# cleanUp() : \l# compile(SourceFile) : \l# compile(SourceFile, SourceFile, boolean) : \l# copyResource(IResource, IResource) : \l# createProblemFor(IResource, IMember, String, String) : \l# deleteGeneratedFiles(IFile) : \l# findSourceFile(IFile, boolean) : SourceFile\l# finishedWith(String, CompilationResult, char, ArrayList, ArrayList) : \l# createFolder(IPath, IContainer) : IContainer\l# fromIFile(IFile) : ICompilationUnit\l# initializeAnnotationProcessorManager(Compiler) : \l# internalException(CoreException) : RuntimeException\l# isExcludedFromProject(IPath) : boolean\l# newCompiler() : Compiler\l# notifyParticipants(SourceFile, CompilationParticipantResult) : CompilationParticipantResult\l# processAnnotations(CompilationParticipantResult) : \l# recordParticipantResult(CompilationParticipantResult) : \l# storeProblemsFor(SourceFile, CategorizedProblem) : \l# storeTasksFor(SourceFile, CategorizedProblem) : \l# updateProblemsFor(SourceFile, CompilationResult) : \l# updateTasksFor(SourceFile, CompilationResult) : \l# writeClassFile(ClassFile, SourceFile, boolean) : char\l# writeClassFileContents(ClassFile, IFile, String, boolean, SourceFile) : \l}"
	 ]

	 AdditionalTypeCollection [
		 label = "{AdditionalTypeCollection|# definedTypeNames : char\l|# AdditionalTypeCollection(char, char, char, char) : \l}"
	 ]

	 BatchImageBuilder [
		 label = "{BatchImageBuilder|# incrementalBuilder : IncrementalImageBuilder\l# secondaryTypes : ArrayList\l# typeLocatorsWithUndefinedTypes : StringSet\l|# BatchImageBuilder(JavaBuilder, boolean) : \l# build() : \l# acceptSecondaryType(ClassFile) : \l# cleanOutputFolders(boolean) : \l# visit(IResource) : boolean\l# visit(IResourceProxy) : boolean\l# cleanUp() : \l# compile(SourceFile, SourceFile, boolean) : \l# copyExtraResourcesBack(ClasspathMultiDirectory, boolean) : \l# visit(IResourceProxy) : boolean\l# findOriginalResource(IPath) : IResource\l# printStats() : \l# processAnnotationResults(CompilationParticipantResult) : \l# rebuildTypesAffectedBySecondaryTypes() : \l# storeProblemsFor(SourceFile, CategorizedProblem) : \l# toString() : String\l}"
	 ]

	 BuildNotifier [
		 label = "{BuildNotifier|# monitor : IProgressMonitor\l# cancelling : boolean\l# percentComplete : float\l# progressPerCompilationUnit : float\l# newErrorCount : int\l# fixedErrorCount : int\l# newWarningCount : int\l# fixedWarningCount : int\l# workDone : int\l# totalWork : int\l# previousSubtask : String\l+ NewErrorCount : int\l+ FixedErrorCount : int\l+ NewWarningCount : int\l+ FixedWarningCount : int\l|# resetProblemCounters() : \l# BuildNotifier(IProgressMonitor, IProject) : \l# aboutToCompile(SourceFile) : \l# begin() : \l# checkCancel() : \l# checkCancelWithinCompiler() : \l# compiled(SourceFile) : \l# done() : \l# problemsMessage() : String\l# setCancelling(boolean) : \l# setProgressPerCompilationUnit(float) : \l# subTask(String) : \l# updateProblemCounts(CategorizedProblem) : \l# updateProblemCounts(IMarker, CategorizedProblem) : \l# updateProgress(float) : \l# updateProgressDelta(float) : \l}"
	 ]

	 ClasspathDirectory [
		 label = "{ClasspathDirectory|# binaryFolder : IContainer\l# isOutputFolder : boolean\l# directoryCache : SimpleLookupTable\l# missingPackageHolder : String\l# accessRuleSet : AccessRuleSet\l|# ClasspathDirectory(IContainer, boolean, AccessRuleSet) : \l# cleanup() : \l# directoryList(String) : String\l# doesFileExist(String, String, String) : boolean\l# equals(Object) : boolean\l# findClass(String, String, String) : NameEnvironmentAnswer\l# getProjectRelativePath() : IPath\l# hashCode() : int\l# isExcluded(IResource) : boolean\l# isOutputFolder() : boolean\l# isPackage(String) : boolean\l# reset() : \l# toString() : String\l# debugPathString() : String\l}"
	 ]

	 PackageCacheEntry [
		 label = "{PackageCacheEntry|# lastModified : long\l# fileSize : long\l# packageSet : SimpleSet\l# PackageCache : SimpleLookupTable\l# zipFilename : String\l# resource : IFile\l# zipFile : ZipFile\l# annotationZipFile : ZipFile\l# lastModified : long\l# closeZipFileAtEnd : boolean\l# knownPackageNames : SimpleSet\l# accessRuleSet : AccessRuleSet\l# externalAnnotationPath : String\l|# null() : \l# PackageCacheEntry(long, long, SimpleSet) : \l# findPackageSet(ClasspathJar) : SimpleSet\l# ClasspathJar(IFile, AccessRuleSet, IPath) : \l# ClasspathJar(String, long, AccessRuleSet, IPath) : \l# ClasspathJar(ZipFile, AccessRuleSet, IPath) : \l# cleanup() : \l# equals(Object) : boolean\l# findClass(String, String, String) : NameEnvironmentAnswer\l# getProjectRelativePath() : IPath\l# hashCode() : int\l# isPackage(String) : boolean\l# lastModified() : long\l# toString() : String\l# debugPathString() : String\l}"
	 ]

	 ClasspathLocation [
		 label = "{ClasspathLocation|+ findClass : NameEnvironmentAnswer\l+ getProjectRelativePath : IPath\l+ isPackage : boolean\l+ debugPathString : String\l|# forSourceFolder(IContainer, IContainer, char, char, boolean) : ClasspathLocation\l# forBinaryFolder(IContainer, boolean, AccessRuleSet) : ClasspathLocation\l# forLibrary(String, long, AccessRuleSet, IPath) : ClasspathLocation\l# forLibrary(String, AccessRuleSet, IPath) : ClasspathLocation\l# forLibrary(IFile, AccessRuleSet, IPath, String, String, String) : ClasspathLocation\l# isOutputFolder(String) : boolean\l# cleanup() : \l# reset() : \l}"
	 ]

	 ClasspathMultiDirectory [
		 label = "{ClasspathMultiDirectory|# sourceFolder : IContainer\l# inclusionPatterns : char\l# exclusionPatterns : char\l# hasIndependentOutputFolder : boolean\l+ ignoreOptionalProblems : boolean\l|# ClasspathMultiDirectory(IContainer, IContainer, char, char, boolean) : \l# equals(Object) : boolean\l# isExcluded(IResource) : boolean\l# toString() : String\l}"
	 ]

	 CompilationParticipantResult [
		 label = "{CompilationParticipantResult|# sourceFile : SourceFile\l# hasAnnotations : boolean\l# addedFiles : IFile\l# deletedFiles : IFile\l# problems : CategorizedProblem\l# dependencies : String\l|# CompilationParticipantResult(SourceFile) : \l# getContents() : char\l# getFile() : IFile\l# hasAnnotations() : boolean\l# recordAddedGeneratedFiles(IFile) : \l# recordDeletedGeneratedFiles(IFile) : \l# recordDependencies(String) : \l# recordNewProblems(CategorizedProblem) : \l# reset(boolean) : \l# toString() : String\l}"
	 ]

	 ICompilationUnitLocator [
		 label = "{ICompilationUnitLocator||# fromIFile(IFile) : ICompilationUnit\l}"
	 ]

	 ImageBuilderInternalException [
		 label = "{ImageBuilderInternalException|- serialVersionUID : long\l# coreException : CoreException\l|# ImageBuilderInternalException(CoreException) : \l# getThrowable() : CoreException\l# printStackTrace() : \l}"
	 ]

	 IncrementalImageBuilder [
		 label = "{IncrementalImageBuilder|# sourceFiles : ArrayList\l# previousSourceFiles : ArrayList\l# qualifiedStrings : StringSet\l# simpleStrings : StringSet\l# rootStrings : StringSet\l# secondaryTypesToRemove : SimpleLookupTable\l# hasStructuralChanges : boolean\l# compileLoop : int\l# makeOutputFolderConsistent : boolean\l+ MaxCompileLoop : int\l|# IncrementalImageBuilder(JavaBuilder, State) : \l# IncrementalImageBuilder(JavaBuilder) : \l# IncrementalImageBuilder(BatchImageBuilder) : \l# build(SimpleLookupTable) : boolean\l# buildAfterBatchBuild() : \l# addAffectedSourceFiles() : \l# addAffectedSourceFiles(StringSet, StringSet, StringSet, StringSet) : \l# addDependentsOf(IPath, boolean) : \l# addDependentsOf(IPath, boolean, StringSet, StringSet, StringSet) : \l# checkForClassFileChanges(IResourceDelta, ClasspathMultiDirectory, int) : boolean\l# cleanUp() : \l# compile(SourceFile, SourceFile, boolean) : \l# deleteGeneratedFiles(IFile) : \l# findAffectedSourceFiles(IResourceDelta, ClasspathLocation, IProject) : boolean\l# findAffectedSourceFiles(IResourceDelta, int, StringSet) : \l# findSourceFiles(IResourceDelta) : boolean\l# findSourceFiles(IResourceDelta, ClasspathMultiDirectory, int) : boolean\l# finishedWith(String, CompilationResult, char, ArrayList, ArrayList) : \l# processAnnotationResults(CompilationParticipantResult) : \l# removeClassFile(IPath, IContainer) : \l# removeSecondaryTypes() : \l# resetCollections() : \l# updateProblemsFor(SourceFile, CompilationResult) : \l# updateTasksFor(SourceFile, CompilationResult) : \l# writeClassFileContents(ClassFile, IFile, String, boolean, SourceFile) : \l# writeClassFileCheck(IFile, String, byte) : boolean\l# toString() : String\l}"
	 ]

	 JavaBuilder [
		 label = "{JavaBuilder|# currentProject : IProject\l# javaProject : JavaProject\l# workspaceRoot : IWorkspaceRoot\l# participants : CompilationParticipant\l# nameEnvironment : NameEnvironment\l# binaryLocationsPerProject : SimpleLookupTable\l+ lastState : State\l# notifier : BuildNotifier\l# extraResourceFileFilters : char\l# extraResourceFolderFilters : String\l+ SOURCE_ID : String\l+ DEBUG : boolean\l+ SHOW_STATS : boolean\l# builtProjects : ArrayList\l|# getProblemsFor(IResource) : IMarker\l# getTasksFor(IResource) : IMarker\l# buildStarting() : \l# buildFinished() : \l# removeProblemsFor(IResource) : \l# removeTasksFor(IResource) : \l# removeProblemsAndTasksFor(IResource) : \l# readState(IProject, DataInputStream) : State\l# writeState(Object, DataOutputStream) : \l# build(int, Map, IProgressMonitor) : IProject\l# buildAll() : \l# buildDeltas(SimpleLookupTable) : \l# clean(IProgressMonitor) : \l# createInconsistentBuildMarker(CoreException) : \l# cleanup() : \l# clearLastState() : \l# filterExtraResource(IResource) : boolean\l# findDeltas() : SimpleLookupTable\l# getLastState(IProject) : State\l# getRequiredProjects(boolean) : IProject\l# hasBuildpathErrors() : boolean\l# hasClasspathChanged() : boolean\l# hasJavaBuilder(IProject) : boolean\l# hasStructuralDelta() : boolean\l# initializeBuilder(int, boolean) : int\l# isClasspathBroken(JavaProject, boolean) : boolean\l# isWorthBuilding() : boolean\l# mustPropagateStructuralChanges() : \l# printLocations(ClasspathLocation, ClasspathLocation) : \l# recordNewState(State) : \l# toString() : String\l}"
	 ]

	 MissingSourceFileException [
		 label = "{MissingSourceFileException|# missingSourceFile : String\l- serialVersionUID : long\l|# MissingSourceFileException(String) : \l}"
	 ]

	 NameEnvironment [
		 label = "{NameEnvironment|# isIncrementalBuild : boolean\l# sourceLocations : ClasspathMultiDirectory\l# binaryLocations : ClasspathLocation\l# notifier : BuildNotifier\l# initialTypeNames : SimpleSet\l# additionalUnits : SimpleLookupTable\l|# NameEnvironment(IWorkspaceRoot, JavaProject, SimpleLookupTable, BuildNotifier) : \l# NameEnvironment(IJavaProject) : \l# computeClasspathLocations(IWorkspaceRoot, JavaProject, SimpleLookupTable) : \l# cleanup() : \l# createOutputFolder(IContainer) : \l# createParentFolder(IContainer) : \l# findClass(String, char) : NameEnvironmentAnswer\l# findType(char) : NameEnvironmentAnswer\l# findType(char, char) : NameEnvironmentAnswer\l# isPackage(char, char) : boolean\l# isPackage(String) : boolean\l# setNames(String, SourceFile) : \l}"
	 ]

	 NameSet [
		 label = "{NameSet|+ names : char\l+ elementSize : int\l+ threshold : int\l|# NameSet(int) : \l# add(char) : char\l# rehash() : \l# toString() : String\l}"
	 ]

	 ProblemFactory [
		 label = "{ProblemFactory|# factories : SimpleLookupTable\l|# ProblemFactory(Locale) : \l# getProblemFactory(Locale) : ProblemFactory\l}"
	 ]

	 QualifiedNameSet [
		 label = "{QualifiedNameSet|+ qualifiedNames : char\l+ elementSize : int\l+ threshold : int\l|# QualifiedNameSet(int) : \l# add(char) : char\l# rehash() : \l# toString() : String\l}"
	 ]

	 ReferenceCollection [
		 label = "{ReferenceCollection|# qualifiedNameReferences : char\l# simpleNameReferences : char\l# rootReferences : char\l# WellKnownQualifiedNames : char\l# WellKnownSimpleNames : char\l# EmptyQualifiedNames : char\l# EmptySimpleNames : char\l# MaxQualifiedNames : int\l# InternedQualifiedNames : QualifiedNameSet\l# MaxSimpleNames : int\l# InternedSimpleNames : NameSet\l|# ReferenceCollection(char, char, char) : \l# addDependencies(String) : \l# includes(char) : boolean\l# includes(char) : boolean\l# includes(char, char) : boolean\l# includes(char, char, char) : boolean\l# insideRoot(char) : boolean\l# null() : \l# internQualifiedNames(StringSet) : char\l# internQualifiedNames(char) : char\l# internQualifiedNames(char, boolean) : char\l# internSimpleNames(StringSet) : char\l# internSimpleNames(StringSet, boolean) : char\l# internSimpleNames(char, boolean) : char\l}"
	 ]

	 SourceFile [
		 label = "{SourceFile|+ resource : IFile\l# sourceLocation : ClasspathMultiDirectory\l# initialTypeName : String\l# updateClassFile : boolean\l|# SourceFile(IFile, ClasspathMultiDirectory) : \l# SourceFile(IFile, ClasspathMultiDirectory, boolean) : \l# equals(Object) : boolean\l# extractTypeName() : String\l# getContents() : char\l# getFileName() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# hashCode() : int\l# ignoreOptionalProblems() : boolean\l# typeLocator() : String\l# toString() : String\l}"
	 ]

	 State [
		 label = "{State|# javaProjectName : String\l+ sourceLocations : ClasspathMultiDirectory\l# binaryLocations : ClasspathLocation\l# references : SimpleLookupTable\l+ typeLocators : SimpleLookupTable\l# buildNumber : int\l# lastStructuralBuildTime : long\l# structuralBuildTimes : SimpleLookupTable\l- knownPackageNames : String\l- previousStructuralBuildTime : long\l- structurallyChangedTypes : StringSet\l+ MaxStructurallyChangedTypes : int\l+ VERSION : byte\l# SOURCE_FOLDER : byte\l# BINARY_FOLDER : byte\l# EXTERNAL_JAR : byte\l# INTERNAL_JAR : byte\l|# State() : \l# State(JavaBuilder) : \l# computeStructuralBuildTime(long) : long\l# copyFrom(State) : \l# getDefinedTypeNamesFor(String) : char\l# getReferences() : SimpleLookupTable\l# getStructurallyChangedTypes(State) : StringSet\l# isDuplicateLocator(String, String) : boolean\l# isKnownPackage(String) : boolean\l# isKnownType(String) : boolean\l# isSourceFolderEmpty(IContainer) : boolean\l# record(String, char, char, char, char, ArrayList) : \l# recordLocatorForType(String, String) : \l# recordStructuralDependency(IProject, State) : \l# removeLocator(String) : \l# removePackage(IResourceDelta) : \l# removeQualifiedTypeName(String) : \l# read(IProject, DataInputStream) : State\l# readName(DataInputStream) : char\l# readNames(DataInputStream) : char\l# readRestriction(DataInputStream) : AccessRuleSet\l# tagAsNoopBuild() : \l# wasNoopBuild() : boolean\l# tagAsStructurallyChanged() : \l# wasStructurallyChanged(IProject, State) : boolean\l# wasStructurallyChanged(String) : \l# write(DataOutputStream) : \l# writeName(char, DataOutputStream) : \l# writeNames(char, DataOutputStream) : \l# writeRestriction(AccessRuleSet, DataOutputStream) : \l# toString() : String\l}"
	 ]

	 StringSet [
		 label = "{StringSet|+ values : String\l+ elementSize : int\l+ threshold : int\l|# StringSet(int) : \l# add(String) : boolean\l# clear() : \l# includes(String) : boolean\l# rehash() : \l# toString() : String\l}"
	 ]

	 WorkQueue [
		 label = "{WorkQueue|- needsCompileList : SimpleSet\l- compiledList : SimpleSet\l|# WorkQueue() : \l# add(SourceFile) : \l# addAll(SourceFile) : \l# clear() : \l# finished(SourceFile) : \l# isCompiled(SourceFile) : boolean\l# isWaiting(SourceFile) : boolean\l# toString() : String\l}"
	 ]

	 AbstractMethodTests [
		 label = "{AbstractMethodTests|- COMPARATOR : Comparator\l|# compare(Object, Object) : int\l# AbstractMethodTests(String) : \l# suite() : Test\l# test001() : \l# test002() : \l# test003() : \l# getResourceOuput(IResource) : String\l}"
	 ]

	 AnnotationDependencyTests [
		 label = "{AnnotationDependencyTests|- srcRoot : IPath\l- projectPath : IPath\l|# AnnotationDependencyTests(String) : \l# suite() : Test\l# setUp() : \l# tearDown() : \l# addAnnotationType() : \l# setupProjectForNullAnnotations() : \l# testTypeAnnotationDependency() : \l# testFieldAnnotationDependency() : \l# testMethodAnnotationDependency() : \l# testInnerTypeAnnotationDependency() : \l# testUnrelatedTypeAnnotationDependency() : \l# testPackageInfoDependency() : \l# testTypeAnnotationDependency2() : \l# testTypeAnnotationDependency3() : \l# testTypeAnnotationDependency4() : \l# testTypeAnnotationDependency5() : \l# testTypeAnnotationDependency6() : \l# testTypeAnnotationDependency7() : \l# testTypeAnnotationDependency8() : \l# testTypeAnnotationDependency9() : \l# testTypeAnnotationDependency10() : \l# testTypeAnnotationDependency11() : \l# testTypeAnnotationDependency12() : \l# testTypeAnnotationDependency13() : \l# testTypeAnnotationDependency14() : \l# testTypeAnnotationDependency15() : \l# testTypeAnnotationDependency16() : \l# testTypeAnnotationDependency17() : \l# testTypeAnnotationDependency18() : \l# testTypeAnnotationDependency19() : \l# testTypeAnnotationDependency20() : \l# testTypeAnnotationDependency21() : \l# testTypeAnnotationDependency22() : \l# testTypeAnnotationDependency23() : \l# testTypeAnnotationDependency24() : \l# testTypeAnnotationDependency25() : \l# testTypeAnnotationDependency26() : \l# testTypeAnnotationDependency27() : \l# testParameterAnnotationDependency01() : \l# testReturnAnnotationDependency01() : \l# testReturnAnnotationDependency02() : \l# test411771a() : \l# test411771b() : \l# test411771c() : \l}"
	 ]

	 BasicBuildTests [
		 label = "{BasicBuildTests||# BasicBuildTests(String) : \l# null() : \l# null() : \l# suite() : Test\l# testBuild() : \l# testToDoMarker() : \l# testToDoMarker2() : \l# testTags() : \l# testTags2() : \l# testTags3() : \l# testUnusedImport() : \l# test98667() : \l# testBug164707() : \l# _testUpdateProjectPreferences() : \l# _testUpdateWkspPreferences() : \l# testTags4() : \l# testBug392727() : \l# testbBug386901() : \l# testBug425420() : \l}"
	 ]

	 BuilderTests [
		 label = "{BuilderTests|# DEBUG : boolean\l# env : TestingEnvironment\l# debugRequestor : EfficiencyCompilerRequestor\l|# BuilderTests(String) : \l# cleanBuild() : \l# cleanBuild(String) : \l# executeClass(IPath, String, String, String) : \l# expectingParticipantProblems(IPath, String) : \l# expectingPresenceOf(IPath) : \l# expectingPresenceOf(IPath) : \l# expectingNoPresenceOf(IPath) : \l# expectingNoPresenceOf(IPath) : \l# expectingCompiledClasses(String) : \l# expectingUniqueCompiledClasses(String) : \l# expectingCompilingOrder(String) : \l# expectingCompiling(String, String, String) : \l# expectingNoProblems() : \l# expectingNoProblemsFor(IPath) : \l# expectingNoProblemsFor(IPath) : \l# expectingOnlyProblemsFor(IPath) : \l# expectingOnlyProblemsFor(IPath) : \l# expectingOnlySpecificProblemFor(IPath, Problem) : \l# expectingOnlySpecificProblemsFor(IPath, Problem) : \l# expectingProblemsFor(IPath, String) : \l# expectingProblemsFor(IPath, String) : \l# expectingProblemsFor(IPath, List) : \l# expectingProblemsFor(IPath, List) : \l# expectingSpecificProblemFor(IPath, Problem) : \l# expectingSpecificProblemsFor(IPath, Problem) : \l# fullBuild() : \l# fullBuild(IPath) : \l# incrementalBuild(IPath) : \l# incrementalBuild() : \l# printProblems() : \l# printProblemsFor(IPath) : \l# printProblemsFor(IPath) : \l# arrayToString(Object) : String\l# setUp() : \l# tearDown() : \l# allSortedProblems(IPath) : Problem\l# getAllTestClasses() : Class\l# buildTestSuite(Class, long) : Test\l# buildTestSuite(Class) : Test\l# suite() : Test\l}"
	 ]

	 BuildpathTests [
		 label = "{BuildpathTests||# BuildpathTests(String) : \l# suite() : Test\l+ setUp() : \l# getJdkLevelProblem(String, String, int) : String\l# testClasspathFileChange() : \l# testClosedProject() : \l# testCorruptBuilder() : \l# testCorruptBuilder2() : \l# testChangeExternalFolder() : \l# testChangeZIPArchive1() : \l# testChangeZIPArchive2() : \l# testExternalJarChange() : \l# testMissingBuilder() : \l# testMissingFieldType() : \l# testMissingLibrary1() : \l# testMissingLibrary2() : \l# testMissingLibrary3() : \l# testMissingLibrary4() : \l# testIncompatibleJdkLEvelOnProject() : \l# testIncompatibleJdkLEvelOnWksp() : \l# testMissingProject() : \l# testMissingOptionalProject() : \l# test0100() : \l# testMissingOutputFolder() : \l+ tearDown() : \l}"
	 ]

	 CopyResourceTests [
		 label = "{CopyResourceTests||# CopyResourceTests(String) : \l# suite() : Test\l# testFilteredResources() : \l# testSimpleProject() : \l# testProjectWithBin() : \l# testProjectWithSrcBin() : \l# testProjectWith2SrcBin() : \l# testProjectWith2SrcAsBin() : \l# testProjectWith2Src2Bin() : \l# test2ProjectWith1Bin() : \l# testBug154693() : \l# testBug194420() : \l}"
	 ]

	 DependencyTests [
		 label = "{DependencyTests||# DependencyTests(String) : \l# suite() : Test\l# testAbstractMethod() : \l# testCaseInvariantType() : \l# testExactMethodDeleting() : \l# testExactMethodVisibility() : \l# testExternalJarChanged() : \l# testFieldDeleting() : \l# testFieldVisibility() : \l# testInterfaceDeleting() : \l# testMemberTypeDeleting() : \l# testMemberTypeVisibility() : \l# testMethodDeleting() : \l# testMethodVisibility() : \l# testMissingClassFile() : \l# testSecondaryTypeDeleting() : \l# testTypeDeleting() : \l# testTypeVisibility() : \l# testTypeVisibility2() : \l# testTypeVariable() : \l# test0100() : \l}"
	 ]

	 EfficiencyCompilerRequestor [
		 label = "{EfficiencyCompilerRequestor|- isActive : boolean\l- compiledClasses : Vector\l|# acceptDebugResult(CompilationResult) : \l# compare(Object, Object) : int\l# getCompiledClasses() : String\l# clearResult() : \l# reset() : \l# activate() : \l# deactivate() : \l# isActive() : boolean\l}"
	 ]

	 EfficiencyTests [
		 label = "{EfficiencyTests||# EfficiencyTests(String) : \l# suite() : Test\l# testProjectAsClassFolder() : \l# testEfficiency() : \l# testMethodAddition() : \l# testLocalTypeAddition() : \l# testLocalTypeAddition2() : \l# testLocalTypeRemoval() : \l# testLocalTypeRemoval2() : \l# testMissingType001() : \l}"
	 ]

	 ErrorsTests [
		 label = "{ErrorsTests|- ATTR_IGNORE_OPTIONAL_PROBLEMS_TRUE : IClasspathAttribute\l- COMPARATOR : Comparator\l|# compare(Object, Object) : int\l# ErrorsTests(String) : \l# suite() : Test\l# testErrors() : \l# testRenameToNonJava() : \l# test0100() : \l# test0101() : \l# test0102() : \l# test0103() : \l# test0104() : \l# test0105() : \l# test0106() : \l# test0107() : \l# getResourceOuput(IResource) : String\l# test0108() : \l# test0109() : \l# test0110() : \l# test0111() : \l# test0112() : \l}"
	 ]

	 ExecutionTests [
		 label = "{ExecutionTests||# ExecutionTests(String) : \l# suite() : Test\l# testSuccess() : \l# testFailure() : \l}"
	 ]

	 FriendDependencyTests [
		 label = "{FriendDependencyTests||# FriendDependencyTests(String) : \l# suite() : Test\l# testIncludes() : \l# testInternSimpleNames() : \l# testInternQualifiedNames() : \l# testGetReferences() : \l# testStringSetAdd() : \l# testStringSetclear() : \l# testStringSetNew() : \l# testStringSetElementSize() : \l# testSimpleLookupTableKeyTable() : \l# testSimpleLookupTableValueTable() : \l# testJavaModelManagerGetJavaModelManager() : \l# testJavaModelManagerGetLastBuiltState() : \l}"
	 ]

	 GetResourcesTests [
		 label = "{GetResourcesTests|- COMPARATOR : Comparator\l|# compare(Object, Object) : int\l# GetResourcesTests(String) : \l# null() : \l# suite() : Test\l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# getResourceOuput(IResource) : String\l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# test016() : \l}"
	 ]

	 IncrementalTests [
		 label = "{IncrementalTests||# IncrementalTests(String) : \l# suite() : Test\l# testAddDuplicateSecondaryType() : \l# testDefaultPackage() : \l# testDefaultPackage2() : \l# testNewJCL() : \l# testRenameMainType() : \l# testRemoveSecondaryType() : \l# testRemoveSecondaryType2() : \l# testMoveSecondaryType() : \l# testMoveMemberType() : \l# testMovePackage() : \l# testMovePackage2() : \l# testMemberTypeFromClassFile() : \l# testMemberTypeOfOtherProject() : \l# test$InTypeName() : \l# testObjectWithSuperInterfaces() : \l# _testWrongCompilationUnitLocation() : \l# testMemberTypeCollisionWithBinary() : \l# testMemberTypeCollisionWithBinary2() : \l# test129316() : \l# testSecondaryType() : \l# testMissingType001() : \l# testMissingType002() : \l# testMissingType003() : \l# testBug334377() : \l# testBug364450() : \l}"
	 ]

	 IncrementalTests18 [
		 label = "{IncrementalTests18||# null() : \l# IncrementalTests18(String) : \l# suite() : Test\l# setupProjectForNullAnnotations() : \l# test423122() : \l# test423122a() : \l# test427105() : \l# test427105a() : \l# test428071() : \l# test430425() : \l# test435544() : \l# testBug442452() : \l# testBug442755() : \l# testBug442755a() : \l# test445049() : \l# testBug481276a() : \l# testBug481276b() : \l# testBug481276c() : \l# testBug483744_remove() : \l}"
	 ]

	 Java50Tests [
		 label = "{Java50Tests||# Java50Tests(String) : \l# suite() : Test\l# testAnnotation() : \l# testHierarchyCycle() : \l# testHierarchyCycleInstanceof() : \l# testMissingRequiredBinaries() : \l# testParameterizedMemberType() : \l# testParameterizedType1() : \l# testParameterizedType2() : \l# testHierarchyNonCycle() : \l# testHierarchyNonCycle2() : \l}"
	 ]

	 MultiProjectTests [
		 label = "{MultiProjectTests||# MultiProjectTests(String) : \l# suite() : Test\l# testCompileOnlyDependent() : \l# testCompileOnlyStructuralDependent() : \l# testRemoveField() : \l# testCompileOrder() : \l# testCycle1() : \l# testCycle2() : \l# testCycle3() : \l# testCycle4() : \l# testCycle5() : \l# testCycle6() : \l# testCycle7() : \l# testExcludePartOfAnotherProject1() : \l# testExcludePartOfAnotherProject2() : \l# testExcludePartOfAnotherProject3() : \l# testIncludePartOfAnotherProject1() : \l# testIncludePartOfAnotherProject2() : \l# testIncludePartOfAnotherProject3() : \l# testIgnoreIfBetterNonAccessibleRule1() : \l# testIgnoreIfBetterNonAccessibleRule2() : \l# testMissingRequiredBinaries() : \l# test100_class_folder_exported() : \l# test101_class_folder_non_exported() : \l# test102_missing_required_binaries() : \l# test103_missing_required_binaries() : \l# test104_missing_required_binaries() : \l# test438923() : \l}"
	 ]

	 MultiSourceFolderAndOutputFolderTests [
		 label = "{MultiSourceFolderAndOutputFolderTests||# MultiSourceFolderAndOutputFolderTests(String) : \l# suite() : Test\l# test0001() : \l# test0002() : \l# test0003() : \l# test0004() : \l# test0005() : \l# test0006() : \l# test0007() : \l# test0008() : \l# test0009() : \l# test0010() : \l# test0011() : \l# test0012() : \l}"
	 ]

	 OutputFolderTests [
		 label = "{OutputFolderTests||# OutputFolderTests(String) : \l# suite() : Test\l# testChangeOutputFolder() : \l# testDeleteOutputFolder() : \l# testInvalidOutput() : \l# testSimpleProject() : \l# testProjectWithBin() : \l# testProjectWithSrcBin() : \l# testProjectWith2SrcBin() : \l# testProjectWith2SrcAsBin() : \l# testProjectWith2Src2Bin() : \l# testProjectWith3Src2Bin() : \l# test2ProjectWith1Bin() : \l}"
	 ]

	 PackageInfoTest [
		 label = "{PackageInfoTest||# PackageInfoTest(String) : \l# null() : \l# suite() : Test\l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test258145() : \l# test323785() : \l# test323785a() : \l# testBug372012() : \l# testBug372012a() : \l# testBug372012b() : \l# testBug372012c() : \l# testBug367836() : \l# testBug374063() : \l# testBug382960() : \l# setupProjectForNullAnnotations(IPath) : \l# assertSourceEquals(String, String, String) : \l# testClass() : Class\l}"
	 ]

	 PackageTests [
		 label = "{PackageTests||# PackageTests(String) : \l# suite() : Test\l# testPackageProblem() : \l# testNoPackageProblem() : \l# test001() : \l# test002() : \l}"
	 ]

	 ParticipantProblem [
		 label = "{ParticipantProblem|# JLS3_INTERNAL : int\l# counter : int\l# message : String\l# id : int\l# filename : char\l# buildPass : int\l# count : int\l|# ParticipantBuildTests(String) : \l# tearDown() : \l# suite() : Test\l# null() : \l# BuildTestParticipant() : \l# null() : \l# ParticipantProblem(String, String) : \l# getArguments() : String\l# getID() : int\l# getMessage() : String\l# getOriginatingFileName() : char\l# getSourceStart() : int\l# getSourceEnd() : int\l# getSourceLineNumber() : int\l# isError() : boolean\l# isWarning() : boolean\l# isInfo() : boolean\l# setSourceEnd(int) : \l# setSourceLineNumber(int) : \l# setSourceStart(int) : \l# getCategoryID() : int\l# getMarkerType() : String\l# buildCompilationUnit(BuildContext) : CompilationUnit\l# testBuildStarting() : \l# buildStarting(BuildContext, boolean) : \l# testDefaultValue() : \l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# testParticipantProblems() : \l# buildStarting(BuildContext, boolean) : \l# testProcessAnnotationDeclarations() : \l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# testProcessAnnotationQualifiedReferences() : \l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# testProcessAnnotationReferences() : \l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# testResolvedMethod() : \l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l# test1001() : \l# buildStarting(BuildContext, boolean) : \l# test1002() : \l# buildStarting(BuildContext, boolean) : \l# getExtraMarkerAttributeNames() : String\l# getExtraMarkerAttributeValues() : Object\l}"
	 ]

	 Problem [
		 label = "{Problem|- location : String\l- message : String\l- resourcePath : IPath\l- start : int\l- sourceId : String\l- severity : int\l|# Problem(String, String, IPath, int, int, int, int) : \l# Problem(IMarker) : \l# getCategoryId() : int\l# getSourceId() : String\l# getLocation() : String\l# getMessage() : String\l# getResourcePath() : IPath\l# getSeverity() : int\l# getStart() : int\l# getEnd() : int\l# toString() : String\l# equals(Object) : boolean\l# compareTo(Object) : int\l}"
	 ]

	 StaticFinalTests [
		 label = "{StaticFinalTests||# StaticFinalTests(String) : \l# suite() : Test\l# testBoolean() : \l# testByte() : \l# testChar() : \l# testDouble() : \l# testFloat() : \l# testInt() : \l# testLong() : \l# testShort() : \l# testString() : \l}"
	 ]

	 TestBuilderParticipant [
		 label = "{TestBuilderParticipant|+ PARTICIPANT : CompilationParticipant\l|# aboutToBuild(IJavaProject) : int\l# buildFinished(IJavaProject) : \l# buildStarting(BuildContext, boolean) : \l# cleanStarting(IJavaProject) : \l# isActive(IJavaProject) : boolean\l# isAnnotationProcessor() : boolean\l# processAnnotations(BuildContext) : \l}"
	 ]

	 TestingEnvironment [
		 label = "{TestingEnvironment|- isOpen : boolean\l- workspace : IWorkspace\l- projects : Hashtable\l- tmpDirectory : File\l|# addBuilderSpecs(String) : \l# addBinaryClass(IPath, String, byte) : IPath\l# addBinaryClass(IPath, String, String, byte) : IPath\l# addClass(IPath, String, String) : IPath\l# addClass(IPath, String, String, String) : IPath\l# addClassFolder(IPath, IPath, boolean) : \l# addPackage(IPath, String) : IPath\l# addPackageFragmentRoot(IPath, String) : IPath\l# addPackageFragmentRoot(IPath, String, IPath, String) : IPath\l# addPackageFragmentRoot(IPath, String, IPath, IPath, String) : IPath\l# addProject(IProject) : \l# addProject(String) : IPath\l# addProject(String, String) : IPath\l# addRequiredProject(IPath, IPath) : \l# addRequiredProject(IPath, IPath, IPath, IPath, boolean) : \l# addRequiredProject(IPath, IPath, IPath, int) : \l# addRequiredProject(IPath, IPath, b
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 CompletionElementNotifier [
		 label = "{CompletionElementNotifier|- assistNode : ASTNode\l|# CompletionElementNotifier(CompletionUnitStructureRequestor, boolean, ASTNode) : \l# getArguments(Argument) : char\l# getInterfaceNames(TypeDeclaration) : char\l# getSuperclassName(TypeDeclaration) : char\l# getThrownExceptions(AbstractMethodDeclaration) : char\l# getTypeParameterBounds(TypeParameter) : char\l# notifySourceElementRequestor(AbstractMethodDeclaration, TypeDeclaration, ImportReference) : \l# notifySourceElementRequestor(CompilationUnitDeclaration, int, int, boolean, HashtableOfObjectToInt, Map) : \l# notifySourceElementRequestor(FieldDeclaration, TypeDeclaration) : \l# notifySourceElementRequestor(ImportReference, boolean) : \l# notifySourceElementRequestor(TypeDeclaration, boolean, TypeDeclaration, ImportReference) : \l}"
	 ]

	 CompletionProblemFactory [
		 label = "{CompletionProblemFactory|+ modifiers : int\l+ simpleTypeName : char\l+ parameterCount : int\l+ signature : char\l+ parameterTypes : char\l+ parameterNames : char\l+ typeModifiers : int\l+ packageName : char\l+ extraFlags : int\l+ accessibility : int\l+ proposeType : boolean\l+ proposeConstructor : boolean\l+ fullyQualifiedName : char\l+ mustBeQualified : boolean\l+ packageName : char\l+ simpleTypeName : char\l+ enclosingTypeNames : char\l+ modifiers : int\l+ accessibility : int\l+ mustBeQualified : boolean\l+ fullyQualifiedName : char\l+ qualifiedTypeName : char\l- lastErrorStart : int\l- checkProblems : boolean\l+ hasForbiddenProblems : boolean\l+ hasAllowedProblems : boolean\l+ typeCache : HashtableOfObject\l+ openedBinaryTypes : int\l+ DEBUG : boolean\l+ PERF : boolean\l- KNOWN_TYPE_WITH_UNKNOWN_CONSTRUCTORS : char\l- KNOWN_TYPE_WITH_KNOWN_CONSTRUCTORS : char\l- ARG : char\l- ARG0 : char\l- ARG1 : char\l- ARG2 : char\l- ARG3 : char\l- ARGS1 : char\l- ARGS2 : char\l- ARGS3 : char\l- ARGS4 : char\l- CHECK_CANCEL_FREQUENCY : int\l+ NO_TYPE_COMPLETION_ON_EMPTY_TOKEN : boolean\l- ERROR_PATTERN : char\l- EXCEPTION_PATTERN : char\l- SEMICOLON : char\l- CLASS : char\l- VOID : char\l- INT : char\l- INT_SIGNATURE : char\l- VALUE : char\l- EXTENDS : char\l- SUPER : char\l- DEFAULT_CONSTRUCTOR_SIGNATURE : char\l- DOT : char\l- VARARGS : char\l- IMPORT : char\l- STATIC : char\l- ON_DEMAND : char\l- IMPORT_END : char\l- JAVA_LANG_OBJECT_SIGNATURE : char\l- JAVA_LANG_NAME : char\l- NONE : int\l- SUPERTYPE : int\l- SUBTYPE : int\l# expectedTypesPtr : int\l# expectedTypes : TypeBinding\l# expectedTypesFilter : int\l# hasJavaLangObjectAsExpectedType : boolean\l# hasExpectedArrayTypes : boolean\l# hasComputedExpectedArrayTypes : boolean\l# uninterestingBindingsPtr : int\l# uninterestingBindings : Binding\l# forbbidenBindingsPtr : int\l# forbbidenBindings : Binding\l# uninterestingBindingsFilter : int\l# favoriteReferenceBindings : ImportBinding\l# assistNodeIsClass : boolean\l# assistNodeIsEnum : boolean\l# assistNodeIsException : boolean\l# assistNodeIsInterface : boolean\l# assistNodeIsAnnotation : boolean\l# assistNodeIsConstructor : boolean\l# assistNodeIsSuperType : boolean\l# assistNodeIsExtendedType : boolean\l# assistNodeIsInterfaceExcludingAnnotation : boolean\l# assistNodeInJavadoc : int\l# assistNodeCanBeSingleMemberAnnotation : boolean\l# assistNodeIsInsideCase : boolean\l# assistNodeIsString : boolean\l# targetedElement : long\l# owner : WorkingCopyOwner\l# monitor : IProgressMonitor\l# javaProject : IJavaProject\l# typeRoot : ITypeRoot\l# parser : CompletionParser\l# requestor : CompletionRequestor\l# problemFactory : CompletionProblemFactory\l# problemReporter : ProblemReporter\l- noCacheNameEnvironment : JavaSearchNameEnvironment\l# source : char\l# completionToken : char\l# qualifiedCompletionToken : char\l# resolvingImports : boolean\l# resolvingStaticImports : boolean\l# insideQualifiedReference : boolean\l# noProposal : boolean\l# problem : CategorizedProblem\l# fileName : char\l# startPosition : int\l# tokenStart : int\l# javadocTagPosition : int\l# sourceLevel : String\l# complianceLevel : String\l# validPackageNames : SimpleSetOfCharArray\l# invalidPackageNames : SimpleSetOfCharArray\l# knownPkgs : HashtableOfObject\l# knownTypes : HashtableOfObject\l# BASE_TYPES : BaseTypeBinding\l# BASE_TYPES_LENGTH : int\l# BASE_TYPE_NAMES : char\l# BASE_TYPES_WITHOUT_VOID_LENGTH : int\l# BASE_TYPE_NAMES_WITHOUT_VOID : char\l# classField : char\l# lengthField : char\l# cloneMethod : char\l# THIS : char\l# THROWS : char\l# FakeInvocationSite : InvocationSite\l- foundTypesCount : int\l- acceptedTypes : ObjectVector\l- foundConstructorsCount : int\l- acceptedConstructors : ObjectVector\l|# null() : \l# AcceptedConstructor(int, char, int, char, char, char, int, char, int, int) : \l# toString() : String\l# null() : \l# AcceptedType(char, char, char, int, int) : \l# toString() : String\l# null() : \l# CompletionProblemFactory(Locale) : \l# checkProblem(CategorizedProblem, char, int, int) : CategorizedProblem\l# createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# startCheckingProblems() : \l# stopCheckingProblems() : \l# createBindingKey(char, char) : char\l# createDefaultParameterNames(int) : char\l# createMethodSignature(char, char, char) : char\l# createMethodSignature(char, char, char, char) : char\l# createNonGenericTypeSignature(char, char) : char\l# createTypeSignature(char, char) : char\l# getRequiredTypeSignature(TypeBinding) : char\l# getTypeName(TypeReference) : char\l# hasStaticMemberTypes(ReferenceBinding, SourceTypeBinding, CompilationUnitScope) : boolean\l# hasMemberTypesInEnclosingScope(SourceTypeBinding, Scope) : boolean\l# null() : \l# genericTypeArguments() : TypeBinding\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l# sourceEnd() : int\l# sourceStart() : int\l# invocationTargetType() : TypeBinding\l# receiverIsImplicitThis() : boolean\l# freshInferenceContext(Scope) : InferenceContext18\l# getExpressionContext() : ExpressionContext\l# isQualifiedSuper() : boolean\l# checkingPotentialCompatibility() : boolean\l# acceptPotentiallyCompatibleMethods(MethodBinding) : \l# CompletionEngine(SearchableEnvironment, CompletionRequestor, Map, IJavaProject, WorkingCopyOwner, IProgressMonitor) : \l# accept(ICompilationUnit, AccessRestriction) : \l# acceptConstructor(int, char, int, char, char, char, int, char, int, String, AccessRestriction) : \l# acceptConstructors(Scope) : \l# acceptPackage(char) : \l# acceptType(char, char, char, int, AccessRestriction) : \l# acceptTypes(Scope) : \l# acceptUnresolvedName(char) : \l# addExpectedType(TypeBinding, Scope) : \l# addForbiddenBindings(Binding) : \l# addUninterestingBindings(Binding) : \l# areParametersCompatibleWith(TypeBinding, TypeBinding, boolean) : boolean\l# buildContext(ASTNode, ASTNode, CompilationUnitDeclaration, Binding, Scope) : \l# buildTokenLocationContext(InternalCompletionContext, Scope, ASTNode, ASTNode) : \l# checkCancel() : \l# complete(ASTNode, ASTNode, ASTNode, CompilationUnitDeclaration, Binding, Scope, boolean) : boolean\l# complete(ICompilationUnit, int, int, ITypeRoot) : \l# complete(IType, char, int, char, char, int, boolean) : \l# completionOnBranchStatementLabel(ASTNode) : \l# completionOnClassLiteralAccess(ASTNode, Binding, Scope) : \l# completionOnExplicitConstructorCall(ASTNode, Binding, Scope) : \l# completionOnFieldName(ASTNode, Scope) : \l# completionOnFieldType(ASTNode, Scope) : \l# completionOnJavadocAllocationExpression(ASTNode, Binding, Scope) : \l# completionOnJavadocFieldReference(ASTNode, Scope) : \l# completionOnJavadocMessageSend(ASTNode, Binding, Scope) : \l# completionOnJavadocParamNameReference(ASTNode) : \l# completionOnJavadocQualifiedTypeReference(ASTNode, Binding, Scope) : \l# completionOnJavadocSingleTypeReference(ASTNode, Scope) : \l# completionOnJavadocTag(ASTNode) : \l# completionOnJavadocTypeParamReference(ASTNode) : \l# completionOnKeyword(ASTNode) : \l# completionOnLocalOrArgumentName(ASTNode, Scope) : \l# completionOnMarkerAnnotationName(ASTNode, Binding, Scope) : \l# completionOnMemberAccess(ASTNode, ASTNode, Binding, Scope, boolean) : \l# completionOnMemberValueName(ASTNode, ASTNode, Scope, boolean) : \l# completionOnMessageSend(ASTNode, Binding, Scope) : \l# completionOnMessageSendName(ASTNode, Binding, Scope) : \l# completionOnReferenceExpressionName(ASTNode, Binding, Scope) : \l# completionOnMethodName(ASTNode, Scope) : \l# completionOnMethodReturnType(ASTNode, Scope) : \l# completionOnParameterizedQualifiedTypeReference(ASTNode, ASTNode, Binding, Scope) : \l# assistNodeIsExtendedType(ASTNode, ASTNode) : boolean\l# assistNodeIsInterfaceExcludingAnnotation(ASTNode, ASTNode) : boolean\l# assistNodeIsInsideCase(ASTNode, ASTNode) : boolean\l# completionOnQualifiedAllocationExpression(ASTNode, Binding, Scope) : \l# completionOnQualifiedNameReference(ASTNode, ASTNode, Binding, Scope, boolean) : \l# completionOnQualifiedTypeReference(ASTNode, ASTNode, Binding, Scope) : \l# completionOnSingleNameReference(ASTNode, ASTNode, Scope, boolean) : \l# completionOnSingleTypeReference(ASTNode, ASTNode, Binding, Scope) : \l# computeAlreadyDefinedName(BlockScope, InvocationSite) : char\l# computeAlreadyDefinedName(FieldBinding, Scope, boolean, ReferenceBinding, InvocationSite, ArrayList) : \l# computeAlreadyDefinedName(SourceTypeBinding, ClassScope, boolean, InvocationSite, ArrayList) : \l# computeBaseRelevance() : int\l# computeExpectedTypes(ASTNode, ASTNode, Scope) : \l# computeExpectedTypesForAllocationExpression(ReferenceBinding, Expression, Scope, InvocationSite) : \l# computeExpectedTypesForMessageSend(ReferenceBinding, char, Expression, ReferenceBinding, Scope, InvocationSite, boolean) : \l# computeExpectedTypesForMessageSendForInterface(ReferenceBinding, char, Expression, ReferenceBinding, Scope, InvocationSite, boolean) : \l# computeForbiddenBindings(ASTNode, ASTNode, Scope) : Scope\l# addForbiddenBindingsForMemberTypes(TypeDeclaration) : \l# computePrefix(SourceTypeBinding, SourceTypeBinding, boolean) : char\l# computeRelevanceForAnnotation() : int\l# computeRelevanceForAnnotationTarget(TypeBinding) : int\l# computeRelevanceForCaseMatching(char, char) : int\l# computeRelevanceForClass() : int\l# computeRelevanceForConstructor() : int\l# computeRelevanceForEnum() : int\l# computeRelevanceForEnumConstant(TypeBinding) : int\l# computeRelevanceForException() : int\l# computeRelevanceForException(char) : int\l# computeRelevanceForExpectingType(char, char) : int\l# computeRelevanceForExpectingType(TypeBinding) : int\l# computeRelevanceForInheritance(ReferenceBinding, ReferenceBinding) : int\l# computeRelevanceForInterestingProposal() : int\l# computeRelevanceForInterestingProposal(Binding) : int\l# computeRelevanceForInterestingProposal(char, char) : int\l# computeRelevanceForInterface() : int\l# computeRelevanceForMissingElements(boolean) : int\l# computeRelevanceForQualification(boolean) : int\l# computeRelevanceForResolution() : int\l# computeRelevanceForResolution(boolean) : int\l# computeRelevanceForRestrictions(int) : int\l# computeRelevanceForStatic(boolean, boolean) : int\l# computeRelevanceForFinal(boolean, boolean) : int\l# computeRelevanceForSuper(MethodBinding, Scope, InvocationSite) : int\l# computeTargetedElement(CompletionOnAnnotationOfType) : long\l# computeTypes(Expression) : TypeBinding\l# computeTypesIfCorrect(Expression) : TypeBinding\l# computeUninterestingBindings(ASTNode, ASTNode, Scope) : \l# createImportCharArray(char, boolean, boolean) : char\l# createMethod(MethodBinding, char, char, char, Scope, StringBuffer) : \l# createProposal(int, int) : InternalCompletionProposal\l# createRequiredTypeProposal(Binding, int, int, int) : CompletionProposal\l# createType(TypeBinding, Scope, StringBuffer) : \l# createTypeParameterProposal(TypeParameter, int) : \l# createTypeProposal(char, char, int, int, char, int) : \l# createTypeProposal(ReferenceBinding, char, int, char, int, Binding, int, int, boolean) : \l# createTypeVariable(TypeVariableBinding, Scope, StringBuffer) : \l# createVargsType(TypeBinding, Scope, StringBuffer) : \l# findAnnotationAttributes(char, MemberValuePair, ReferenceBinding) : \l# findAnonymousType(ReferenceBinding, TypeBinding, Scope, InvocationSite, Binding, int, int, boolean) : \l# findAnonymousType(ReferenceBinding, TypeBinding, Scope, InvocationSite, Binding, int, int, boolean, boolean, boolean, int) : \l# findClassField(char, TypeBinding, Scope, Binding, int, int, boolean) : \l# findConstructors(ReferenceBinding, TypeBinding, Scope, InvocationSite, boolean, Binding, int, int, boolean) : \l# findConstructorsFromMissingType(TypeReference, TypeBinding, Scope, InvocationSite) : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# findConstructors(ReferenceBinding, TypeBinding, Scope, InvocationSite, boolean, Binding, int, int, boolean, boolean, boolean, int) : \l# getResolvedSignature(char, char, int, Scope) : char\l# findConstructorsOrAnonymousTypes(ReferenceBinding, Scope, InvocationSite, boolean, int) : \l# findEnclosingTypeNames(Scope) : char\l# findEnumConstants(char, ReferenceBinding, Scope, ObjectVector, char, int, boolean) : \l# findEnumConstantsFromExpectedTypes(char, Scope, ObjectVector) : \l# findEnumConstantsFromSwithStatement(char, SwitchStatement) : \l# findExceptionFromTryStatement(char, ReferenceBinding, ReferenceBinding, SourceTypeBinding, BlockScope, ObjectVector, boolean) : \l# findExceptionFromTryStatement(char, ReferenceBinding, SourceTypeBinding, BlockScope, ObjectVector) : \l# findExplicitConstructors(char, ReferenceBinding, MethodScope, InvocationSite) : \l# findFields(char, FieldBinding, Scope, ObjectVector, ObjectVector, boolean, ReferenceBinding, InvocationSite, Scope, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findFields(char, ReferenceBinding, Scope, ObjectVector, ObjectVector, boolean, InvocationSite, Scope, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findFieldsAndMethods(char, TypeBinding, Scope, ObjectVector, ObjectVector, InvocationSite, Scope, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findFieldsAndMethodsFromAnotherReceiver(char, TypeReference, Scope, ObjectVector, ObjectVector, InvocationSite, Scope, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findFieldsAndMethodsFromCastedReceiver(ASTNode, Binding, Scope, ObjectVector, ObjectVector, InvocationSite, Scope, Expression) : \l# findFieldsAndMethodsFromFavorites(char, Scope, InvocationSite, Scope, ObjectVector, ObjectVector, ObjectVector) : \l# findFieldsAndMethodsFromMissingFieldType(char, Scope, InvocationSite, boolean) : boolean\l# findFieldsAndMethodsFromMissingReturnType(char, TypeBinding, Scope, InvocationSite, boolean) : \l# findFieldsAndMethodsFromMissingType(TypeReference, Scope, InvocationSite, Scope) : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# findFieldsAndMethodsFromStaticImports(char, Scope, InvocationSite, Scope, boolean, boolean, ObjectVector, ObjectVector, ObjectVector, boolean, boolean) : \l# findFieldsFromFavorites(char, FieldBinding, Scope, ObjectVector, ObjectVector, ReferenceBinding, InvocationSite, Scope) : \l# findImplicitMessageSends(char, TypeBinding, Scope, InvocationSite, Scope, ObjectVector) : \l# findImports(CompletionOnImportReference, boolean) : \l# findImportsOfMemberTypes(char, ReferenceBinding, boolean) : \l# findImportsOfStaticFields(char, ReferenceBinding) : \l# findImportsOfStaticMethods(char, ReferenceBinding) : \l# findInterfacesMethodDeclarations(char, ReferenceBinding, ReferenceBinding, Scope, ObjectVector, Binding, int, int, boolean) : \l# findInterfacesMethods(char, TypeBinding, TypeBinding, ReferenceBinding, ReferenceBinding, Scope, ObjectVector, boolean, boolean, InvocationSite, Scope, boolean, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findJavadocBlockTags(CompletionOnJavadocTag) : \l# findJavadocInlineTags(CompletionOnJavadocTag) : \l# findJavadocParamNames(char, char, boolean) : \l# findKeywords(char, char, boolean, boolean) : \l# findKeywordsForMember(char, int, ASTNode) : \l# findLabels(char, char) : \l# findLocalMethodDeclarations(char, MethodBinding, Scope, ObjectVector, boolean, ReferenceBinding) : \l# findLocalMethods(char, TypeBinding, TypeBinding, MethodBinding, Scope, ObjectVector, boolean, boolean, ReferenceBinding, InvocationSite, Scope, boolean, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findLocalMethodsFromFavorites(char, MethodBinding, Scope, ObjectVector, ObjectVector, ReferenceBinding, InvocationSite, Scope) : \l# findLocalMethodsFromStaticImports(char, MethodBinding, Scope, boolean, ObjectVector, ReferenceBinding, InvocationSite) : \l# findLocalMethodsFromStaticImports(char, Scope, InvocationSite, Scope, boolean, ObjectVector, boolean) : \l# findMembers(char, ReferenceBinding, Scope, InvocationSite, boolean, Binding, int, int, boolean) : \l# findMembersFromMissingType(char, long, TypeBinding, Scope, InvocationSite, boolean) : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# findMemberTypes(char, ReferenceBinding, Scope, SourceTypeBinding, boolean, boolean, boolean, boolean, boolean, SourceTypeBinding, ObjectVector, Binding, int, int, boolean) : \l# findMemberTypes(char, ReferenceBinding, Scope, SourceTypeBinding, boolean, boolean, ObjectVector, Binding, int, int, boolean) : \l# findMemberTypes(char, ReferenceBinding, ObjectVector, ReferenceBinding, SourceTypeBinding, boolean, boolean, boolean, boolean, Scope, Binding, int, int, boolean) : \l# findMemberTypesFromMissingType(char, long, Scope) : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# findMemberTypesFromMissingType(TypeReference, long, Scope) : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# findMethodDeclarations(char, ReferenceBinding, Scope, ObjectVector, Binding, int, int, boolean) : \l# findMethodParameterNames(MethodBinding, char) : char\l# findMethods(char, TypeBinding, TypeBinding, ReferenceBinding, Scope, ObjectVector, boolean, boolean, InvocationSite, Scope, boolean, boolean, boolean, Binding, int, int, boolean, char, int, int) : \l# findNestedTypes(char, SourceTypeBinding, Scope, boolean, ObjectVector) : \l# findPackages(CompletionOnPackageReference) : \l# findParameterizedType(TypeReference, Scope) : \l# findSubMemberTypes(char, ReferenceBinding, Scope, SourceTypeBinding, boolean, boolean, boolean, ObjectVector) : \l# findTrueOrFalseKeywords(char) : \l# findTypeParameters(char, Scope) : \l# findTypesAndPackages(char, Scope, boolean, boolean, ObjectVector) : \l# findTypesAndSubpackages(char, PackageBinding, Scope) : \l# findTypesFromExpectedTypes(char, Scope, ObjectVector, boolean, boolean) : \l# findTypesFromImports(char, Scope, boolean, ObjectVector) : \l# findTypesFromStaticImports(char, Scope, boolean, ObjectVector) : \l# findUnresolvedReference(int, int, BlockScope, char) : \l# findUnresolvedReferenceAfter(int, BlockScope, char) : char\l# acceptName(char) : \l# findUnresolvedReferenceBefore(int, int, BlockScope, char) : char\l# acceptName(char) : \l# findVariableFromUnresolvedReference(LocalDeclaration, BlockScope, char) : char\l# acceptName(char) : \l# findVariableName(char, char, char, char, TypeBinding, char, char, boolean, int, int) : \l# accept(char, int, int) : \l# acceptNameWithoutPrefixAndSuffix(char, int) : \l# acceptNameWithPrefix(char, boolean, int) : \l# acceptNameWithPrefixAndSuffix(char, boolean, boolean, int) : \l# acceptNameWithSuffix(char, boolean, int) : \l# findVariableName(char, char, char, char, TypeBinding, char, char, int, int) : \l# findVariableNameForCollection(char, char, char, char, TypeBinding, char, char, int) : \l# findVariableNames(char, TypeReference, char, char, int) : \l# findVariablesAndMethods(char, Scope, InvocationSite, Scope, boolean, boolean) : \l# getCompletedTypeSignature(ReferenceBinding) : char\l# getFavoriteReferenceBindings(Scope) : ImportBinding\l# getNoCacheNameEnvironment() : INameEnvironment\l# getParser() : AssistParser\l# hasArrayTypeAsExpectedSuperTypes() : boolean\l# hasPossibleAnnotationTarget(TypeBinding, Scope) : boolean\l# inlineTagCompletion(char, char) : char\l# isAllowingLongComputationProposals() : boolean\l# isFailedMatch(char, char) : boolean\l# isForbidden(ReferenceBinding) : boolean\l# isForbidden(char, char, char) : boolean\l# isIgnored(int) : boolean\l# isIgnored(int, boolean) : boolean\l# isIgnored(int, int) : boolean\l# isValidPackageName(char) : boolean\l# isValidParent(ASTNode, ASTNode, Scope) : boolean\l# mustQualifyType(ReferenceBinding, char, Scope) : boolean\l# parseSnippeInitializer(char, int, char, char, int, boolean) : Initializer\l# printDebug(CategorizedProblem) : \l# printDebug(CompletionProposal) : \l# printDebug(CompletionProposal, int, StringBuffer) : \l# printDebugTab(int, StringBuffer) : \l# proposeConstructor(AcceptedConstructor, Scope) : \l# proposeConstructor(char, int, char, char, char, int, char, int, int, char, char, boolean, Scope, int) : \l# proposeNewMethod(char, ReferenceBinding) : \l# proposeType(char, char, int, int, char, char, boolean, Scope) : \l# reset() : \l# setSourceAndTokenRange(int, int) : \l# setSourceAndTokenRange(int, int, boolean) : \l# setSourceRange(int, int) : \l# setSourceRange(int, int, boolean) : \l# setTokenRange(int, int) : \l# setTokenRange(int, int, boolean) : \l# substituteMethodTypeParameterName(char, char, char, char, char) : char\l# substituteMethodTypeParameterName(char, char, char) : char\l# substituteMethodTypeParameterNames(TypeVariableBinding, char) : char\l}"
	 ]

	 CompletionRequestorWrapper [
		 label = "{CompletionRequestorWrapper|- DECODE_SIGNATURE : boolean\l- requestor : org\l|# CompletionRequestorWrapper(org) : \l# accept(CompletionProposal) : \l# completionFailure(IProblem) : \l# getParameterPackages(char) : char\l# getParameterTypes(char) : char\l}"
	 ]

	 CompletionUnitStructureRequestor [
		 label = "{CompletionUnitStructureRequestor|- assistNode : ASTNode\l- bindingCache : Map\l- elementCache : Map\l- elementWithProblemCache : Map\l|# CompletionUnitStructureRequestor(ICompilationUnit, CompilationUnitElementInfo, Parser, ASTNode, Map, Map, Map, Map) : \l# createAnnotation(JavaElement, String) : Annotation\l# createField(JavaElement, FieldInfo) : SourceField\l# createImportContainer(ICompilationUnit) : ImportContainer\l# createImportDeclaration(ImportContainer, String, boolean) : ImportDeclaration\l# createInitializer(JavaElement) : Initializer\l# createMethodHandle(JavaElement, MethodInfo) : SourceMethod\l# createPackageDeclaration(JavaElement, String) : PackageDeclaration\l# createTypeHandle(JavaElement, TypeInfo) : SourceType\l# createTypeParameter(JavaElement, String) : TypeParameter\l# acceptAnnotation(org, AnnotatableInfo, JavaElement) : IAnnotation\l# getMemberValue(org, Expression) : Object\l# getMemberValuePairs(MemberValuePair) : IMemberValuePair\l# hasEmptyName(TypeReference, ASTNode) : boolean\l}"
	 ]

	 IExtendedCompletionRequestor [
		 label = "{IExtendedCompletionRequestor||# acceptPotentialMethodDeclaration(char, char, char, int, int, int) : \l}"
	 ]

	 InternalCompletionContext [
		 label = "{InternalCompletionContext|# expectedTypesSignatures : char\l# expectedTypesKeys : char\l# javadoc : int\l# offset : int\l# tokenStart : int\l# tokenEnd : int\l# token : char\l# tokenKind : int\l# tokenLocation : int\l# isExtended : boolean\l# extendedContext : InternalExtendedCompletionContext\l|# setExpectedTypesKeys(char) : \l# setExpectedTypesSignatures(char) : \l# setExtended() : \l# setExtendedData(ITypeRoot, CompilationUnitDeclaration, LookupEnvironment, Scope, ASTNode, ASTNode, WorkingCopyOwner, CompletionParser) : \l# setJavadoc(int) : \l# setOffset(int) : \l# setToken(char) : \l# setTokenKind(int) : \l# setTokenLocation(int) : \l# setTokenRange(int, int) : \l# setTokenRange(int, int, int) : \l# getEnclosingElement() : IJavaElement\l# getExpectedTypesKeys() : char\l# getExpectedTypesSignatures() : char\l# getOffset() : int\l# getToken() : char\l# getTokenEnd() : int\l# getTokenKind() : int\l# getTokenLocation() : int\l# getTokenStart() : int\l# getVisibleElements(String) : IJavaElement\l# isExtended() : boolean\l# isInJavadoc() : boolean\l# isInJavadocFormalReference() : boolean\l# isInJavadocText() : boolean\l# getCompletionNode() : ASTNode\l# getCompletionNodeParent() : ASTNode\l# getVisibleLocalVariables() : ObjectVector\l# getVisibleFields() : ObjectVector\l# getVisibleMethods() : ObjectVector\l}"
	 ]

	 InternalCompletionProposal [
		 label = "{InternalCompletionProposal|- NO_ATTACHED_SOURCE : Object\l# completionEngine : CompletionEngine\l# nameLookup : NameLookup\l# declarationPackageName : char\l# declarationTypeName : char\l# packageName : char\l# typeName : char\l# parameterPackageNames : char\l# parameterTypeNames : char\l# originalSignature : char\l- hasNoParameterNamesFromIndex : boolean\l- updateCompletion : boolean\l# accessibility : int\l# isConstructor : boolean\l- completionKind : int\l- completionLocation : int\l- tokenStart : int\l- tokenEnd : int\l- completion : char\l- replaceStart : int\l- replaceEnd : int\l- relevance : int\l- declarationSignature : char\l- declarationKey : char\l- name : char\l- binding : Binding\l- signature : char\l- key : char\l- requiredProposals : CompletionProposal\l- flags : int\l- additionalFlags : int\l- parameterNames : char\l- parameterNamesComputed : boolean\l- receiverStart : int\l- receiverEnd : int\l- receiverSignature : char\l|# findConstructorParameterNames(char, char, char, char) : char\l# findMethodParameterNames(char, char, char, char) : char\l# findMethod(IType, char, char) : IMethod\l# getDeclarationPackageName() : char\l# getDeclarationTypeName() : char\l# getOpenedBinaryTypesThreshold() : int\l# getPackageName() : char\l# getTypeName() : char\l# getParameterPackageNames() : char\l# getParameterTypeNames() : char\l# setDeclarationPackageName(char) : \l# setDeclarationTypeName(char) : \l# setPackageName(char) : \l# setTypeName(char) : \l# setParameterPackageNames(char) : \l# setParameterTypeNames(char) : \l# setAccessibility(int) : \l# setIsContructor(boolean) : \l# setOriginalSignature(char) : \l# InternalCompletionProposal(int, int) : \l# getAdditionalFlags() : int\l# setAdditionalFlags(int) : \l# getKind() : int\l# getCompletionLocation() : int\l# getTokenStart() : int\l# getTokenEnd() : int\l# setTokenRange(int, int) : \l# getCompletion() : char\l# setCompletion(char) : \l# getReplaceStart() : int\l# getReplaceEnd() : int\l# setReplaceRange(int, int) : \l# getRelevance() : int\l# setRelevance(int) : \l# getDeclarationSignature() : char\l# getDeclarationKey() : char\l# setDeclarationSignature(char) : \l# setDeclarationKey(char) : \l# getName() : char\l# setName(char) : \l# getBinding() : Binding\l# setBinding(Binding) : \l# getSignature() : char\l# getKey() : char\l# setSignature(char) : \l# setKey(char) : \l# getFlags() : int\l# setFlags(int) : \l# setHasNoParameterNamesFromIndex(boolean) : \l# getRequiredProposals() : CompletionProposal\l# setRequiredProposals(CompletionProposal) : \l# findParameterNames(IProgressMonitor) : char\l# setParameterNames(char) : \l# getAccessibility() : int\l# isConstructor() : boolean\l# getReceiverSignature() : char\l# getReceiverStart() : int\l# getReceiverEnd() : int\l# setReceiverSignature(char) : \l# setReceiverRange(int, int) : \l# toString() : String\l# canUseDiamond(CompletionContext) : boolean\l}"
	 ]

	 InternalExtendedCompletionContext [
		 label = "{InternalExtendedCompletionContext|- EmptyNodeMap : Util\l- completionContext : InternalCompletionContext\l- typeRoot : ITypeRoot\l- compilationUnitDeclaration : CompilationUnitDeclaration\l- lookupEnvironment : LookupEnvironment\l- assistScope : Scope\l- assistNode : ASTNode\l- assistNodeParent : ASTNode\l- owner : WorkingCopyOwner\l- parser : CompletionParser\l- hasComputedVisibleElementBindings : boolean\l- visibleLocalVariables : ObjectVector\l- visibleFields : ObjectVector\l- visibleMethods : ObjectVector\l- hasComputedEnclosingJavaElements : boolean\l- bindingsToHandles : Map\l- nodesWithProblemsToHandles : Map\l- compilationUnit : ICompilationUnit\l|# get(Binding) : ASTNode\l# InternalExtendedCompletionContext(InternalCompletionContext, ITypeRoot, CompilationUnitDeclaration, LookupEnvironment, Scope, ASTNode, ASTNode, WorkingCopyOwner, CompletionParser) : \l# computeEnclosingJavaElements() : \l# computeVisibleElementBindings() : \l# getEnclosingElement() : IJavaElement\l# getJavaElement(LocalVariableBinding) : JavaElement\l# getJavaElementOfCompilationUnit(Binding) : JavaElement\l# getJavaElementOfCompilationUnit(ASTNode, Binding) : JavaElement\l# getTypeFromSignature(String, Scope) : TypeBinding\l# replacePackagesDot(char) : char\l# getVisibleElements(String) : IJavaElement\l# searchVisibleFields(FieldBinding, ReferenceBinding, Scope, InvocationSite, Scope, boolean, ObjectVector, ObjectVector) : \l# searchVisibleFields(ReferenceBinding, Scope, InvocationSite, Scope, boolean, boolean, ObjectVector, ObjectVector) : \l# searchVisibleInterfaceMethods(ReferenceBinding, ReferenceBinding, Scope, InvocationSite, Scope, boolean, ObjectVector) : \l# searchVisibleLocalMethods(MethodBinding, ReferenceBinding, Scope, InvocationSite, Scope, boolean, ObjectVector) : \l# searchVisibleMethods(ReferenceBinding, Scope, InvocationSite, Scope, boolean, boolean, ObjectVector) : \l# searchVisibleVariablesAndMethods(Scope, ObjectVector, ObjectVector, ObjectVector, boolean) : \l# canUseDiamond(String, char) : boolean\l# getCompletionNode() : ASTNode\l# getCompletionNodeParent() : ASTNode\l# getVisibleLocalVariables() : ObjectVector\l# getVisibleFields() : ObjectVector\l# getVisibleMethods() : ObjectVector\l}"
	 ]

	 ISearchRequestor [
		 label = "{ISearchRequestor||# acceptConstructor(int, char, int, char, char, char, int, char, int, String, AccessRestriction) : \l# acceptType(char, char, char, int, AccessRestriction) : \l# acceptPackage(char) : \l}"
	 ]

	 ISelectionRequestor [
		 label = "{ISelectionRequestor||# acceptType(char, char, int, boolean, char, int, int) : \l# acceptError(CategorizedProblem) : \l# acceptField(char, char, char, boolean, char, int, int) : \l# acceptMethod(char, char, String, char, char, char, String, char, char, boolean, boolean, char, int, int) : \l# acceptPackage(char) : \l# acceptTypeParameter(char, char, char, boolean, int, int) : \l# acceptMethodTypeParameter(char, char, char, int, int, char, boolean, int, int) : \l}"
	 ]

	 ResolutionCleaner [
		 label = "{ResolutionCleaner|- bitsMap : HashtableOfObjectToInt\l- firstCall : boolean\l- problemFactory : CompletionEngine\l- nameEnvironment : SearchableEnvironment\l- substituedTypes : HashMap\l- originalTypes : HashMap\l- combinationsCount : int\l|# null() : \l# accept(TypeBinding, Binding, int, int, boolean) : \l# null() : \l# ResolutionCleaner() : \l# cleanUp(TypeReference) : \l# cleanUp(ParameterizedSingleTypeReference) : \l# cleanUp(ParameterizedQualifiedTypeReference) : \l# cleanUp(TypeReference, BlockScope) : \l# cleanUp(TypeReference, ClassScope) : \l# visit(SingleTypeReference, BlockScope) : boolean\l# visit(SingleTypeReference, ClassScope) : boolean\l# visit(Wildcard, BlockScope) : boolean\l# visit(Wildcard, ClassScope) : boolean\l# visit(ArrayTypeReference, BlockScope) : boolean\l# visit(ArrayTypeReference, ClassScope) : boolean\l# visit(ParameterizedSingleTypeReference, BlockScope) : boolean\l# visit(ParameterizedSingleTypeReference, ClassScope) : boolean\l# visit(QualifiedTypeReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, ClassScope) : boolean\l# visit(ArrayQualifiedTypeReference, BlockScope) : boolean\l# visit(ArrayQualifiedTypeReference, ClassScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, BlockScope) : boolean\l# visit(ParameterizedQualifiedTypeReference, ClassScope) : boolean\l# MissingTypesGuesser(CompletionEngine) : \l# computeMissingElements(QualifiedTypeReference, char, Binding, int, int) : boolean\l# convert(ArrayQualifiedTypeReference) : TypeReference\l# convert(ArrayTypeReference) : TypeReference\l# convert(ParameterizedQualifiedTypeReference) : TypeReference\l# convert(ParameterizedSingleTypeReference) : TypeReference\l# convert(QualifiedTypeReference) : TypeReference\l# convert(SingleTypeReference) : TypeReference\l# convert(TypeReference) : TypeReference\l# convert(Wildcard) : TypeReference\l# findTypeNames(char) : char\l# acceptConstructor(int, char, int, char, char, char, int, char, int, String, AccessRestriction) : \l# acceptPackage(char) : \l# acceptType(char, char, char, int, AccessRestriction) : \l# getOriginal(TypeReference) : char\l# getSubstituedTypes() : QualifiedTypeReference\l# getSubstitution(TypeReference) : char\l# guess(TypeReference, Scope, GuessedTypeRequestor) : \l# nextSubstitution(QualifiedTypeReference, char, int) : \l}"
	 ]

	 RelevanceConstants [
		 label = "{RelevanceConstants||# R_DEFAULT() : int\l# R_INTERESTING() : int\l# R_CASE() : int\l# R_CAMEL_CASE() : int\l# R_EXACT_NAME() : int\l# R_VOID() : int\l# R_EXPECTED_TYPE() : int\l# R_EXACT_EXPECTED_TYPE() : int\l# R_INTERFACE() : int\l# R_CLASS() : int\l# R_ENUM() : int\l# R_ANNOTATION() : int\l# R_EXCEPTION() : int\l# R_ENUM_CONSTANT() : int\l# R_ABSTRACT_METHOD() : int\l# R_NON_STATIC() : int\l# R_UNQUALIFIED() : int\l# R_QUALIFIED() : int\l# R_NAME_FIRST_PREFIX() : int\l# R_NAME_PREFIX() : int\l# R_NAME_FIRST_SUFFIX() : int\l# R_NAME_SUFFIX() : int\l# R_NAME_LESS_NEW_CHARACTERS() : int\l# R_SUBSTRING() : int\l# R_METHOD_OVERIDE() : int\l# R_NON_RESTRICTED() : int\l# R_TRUE_OR_FALSE() : int\l# R_INLINE_TAG() : int\l# R_VALUE_TAG() : int\l# R_NON_INHERITED() : int\l# R_NO_PROBLEMS() : int\l# R_RESOLVED() : int\l# R_TARGET() : int\l# R_FINAL() : int\l# R_CONSTRUCTOR() : int\l}"
	 ]

	 InheritDocVisitor [
		 label = "{InheritDocVisitor|+ modifiers : int\l+ packageName : char\l+ simpleTypeName : char\l+ path : String\l+ access : AccessRestriction\l- importReferences : ImportReference\l- importCachesNodeInitialized : boolean\l- onDemandImportsNodeCache : ImportReference\l- onDemandImportsNodeCacheCount : int\l- importsNodeCache : char\l- importsNodeCacheCount : int\l- onDemandFound : HashtableOfObject\l- notImportedFound : ObjectVector\l+ DEBUG : boolean\l+ PERF : boolean\l# parser : SelectionParser\l# requestor : ISelectionRequestor\l# owner : WorkingCopyOwner\l# acceptedAnswer : boolean\l- actualSelectionStart : int\l- actualSelectionEnd : int\l- selectedIdentifier : char\l- acceptedClasses : char\l- acceptedClassesModifiers : int\l- acceptedInterfaces : char\l- acceptedInterfacesModifiers : int\l- acceptedEnums : char\l- acceptedEnumsModifiers : int\l- acceptedAnnotations : char\l- acceptedAnnotationsModifiers : int\l# acceptedClassesCount : int\l# acceptedInterfacesCount : int\l# acceptedEnumsCount : int\l# acceptedAnnotationsCount : int\l# noProposal : boolean\l# problem : CategorizedProblem\l# isCanceled : boolean\l+ STOP_BRANCH : Object\l+ CONTINUE : Object\l+ visit : Object\l|# null() : \l# null() : \l# AcceptedType(int, char, char, String, AccessRestriction) : \l# SelectionTypeNameMatchRequestorWrapper(TypeNameMatchRequestor, IJavaSearchScope, ImportReference) : \l# acceptType(int, char, char, char, String, AccessRestriction) : \l# acceptNotImported() : \l# initializeImportNodeCaches() : \l# SelectionEngine(SearchableEnvironment, ISelectionRequestor, Map, WorkingCopyOwner) : \l# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# acceptConstructor(int, char, int, char, char, char, int, char, int, String, AccessRestriction) : \l# acceptType(char, char, char, int, AccessRestriction) : \l# acceptPackage(char) : \l# acceptQualifiedTypes() : \l# checkSelection(char, int, int) : boolean\l# checkTypeArgument(Scanner) : boolean\l# findAllTypes(char) : \l# beginTask(String, int) : \l# done() : \l# internalWorked(double) : \l# isCanceled() : boolean\l# setCanceled(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# worked(int) : \l# acceptTypeNameMatch(TypeNameMatch) : \l# getParser() : AssistParser\l# isLocal(ReferenceBinding) : boolean\l# select(ICompilationUnit, int, int) : \l# selectMemberTypeFromImport(CompilationUnitDeclaration, char, ReferenceBinding, boolean) : \l# selectStaticFieldFromStaticImport(CompilationUnitDeclaration, char, ReferenceBinding) : \l# selectStaticMethodFromStaticImport(CompilationUnitDeclaration, char, ReferenceBinding) : \l# selectFrom(Binding, CompilationUnitDeclaration, boolean) : \l# selectFrom(Binding, CompilationUnitDeclaration, ICompilationUnit, boolean) : \l# selectLocalDeclaration(ASTNode) : \l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l# visit(TypeParameter, BlockScope) : boolean\l# visit(TypeParameter, ClassScope) : boolean\l# selectType(char, IType) : \l# selectDeclaration(CompilationUnitDeclaration) : boolean\l# selectDeclaration(TypeDeclaration, char, char) : boolean\l# getCorrectMethodBinding(MethodBinding) : MethodBinding\l# findOverriddenMethodInType(ReferenceBinding, MethodBinding) : MethodBinding\l# findMethodWithAttachedDocInHierarchy(MethodBinding) : Object\l# visit(ReferenceBinding) : Object\l# null() : \l# toString() : String\l# toString(ReferenceBinding) : String\l# visitInheritDoc(ReferenceBinding) : Object\l# visitInheritDocInterfaces(ArrayList, ReferenceBinding) : Object\l}"
	 ]

	 ThrownExceptionFinder [
		 label = "{ThrownExceptionFinder|- thrownExceptions : SimpleSet\l- exceptionsStack : Stack\l- caughtExceptions : SimpleSet\l- discouragedExceptions : SimpleSet\l|# processThrownExceptions(TryStatement, BlockScope) : \l# acceptException(ReferenceBinding) : \l# endVisit(MessageSend, BlockScope) : \l# endVisit(AllocationExpression, BlockScope) : \l# endVisit(ThrowStatement, BlockScope) : \l# endVisitMethodInvocation(MethodBinding) : \l# getAlreadyCaughtExceptions() : ReferenceBinding\l# getThrownUncaughtExceptions() : ReferenceBinding\l# getDiscouragedExceptions() : ReferenceBinding\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, BlockScope) : boolean\l# visitType(TypeDeclaration) : boolean\l# visit(TryStatement, BlockScope) : boolean\l# removeCaughtExceptions(TryStatement, boolean) : \l# removeCaughtException(ReferenceBinding) : \l}"
	 ]

	 UnresolvedReferenceNameRequestor [
		 label = "{UnresolvedReferenceNameRequestor|- MAX_LINE_COUNT : int\l- FAKE_BLOCKS_COUNT : int\l- requestor : UnresolvedReferenceNameRequestor\l- completionEngine : CompletionEngine\l- parser : CompletionParser\l- completionScanner : CompletionScanner\l- parentsPtr : int\l- parents : ASTNode\l- potentialVariableNamesPtr : int\l- potentialVariableNames : char\l- potentialVariableNameStarts : int\l- acceptedNames : SimpleSetOfCharArray\l|# null() : \l# acceptName(char) : \l# UnresolvedReferenceNameFinder(CompletionEngine) : \l# acceptName(char) : \l# find(char, Initializer, ClassScope, int, char, UnresolvedReferenceNameRequestor) : \l# find(char, AbstractMethodDeclaration, int, char, UnresolvedReferenceNameRequestor) : \l# findAfter(char, Scope, ClassScope, int, int, char, UnresolvedReferenceNameRequestor) : \l# findAfter(char, Scope, int, int, int, boolean, char, UnresolvedReferenceNameRequestor) : MethodDeclaration\l# findBefore(char, Scope, ClassScope, int, int, int, char, UnresolvedReferenceNameRequestor) : \l# findBefore(char, Scope, int, int, int, int, char, UnresolvedReferenceNameRequestor) : MethodDeclaration\l# initPotentialNamesTables(char) : boolean\l# popParent() : \l# pushParent(ASTNode) : \l# getEnclosingDeclaration() : ASTNode\l# visit(Block, BlockScope) : boolean\l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# endVisit(Block, BlockScope) : \l# endVisit(Argument, BlockScope) : \l# endVisit(Argument, ClassScope) : \l# endVisit(ConstructorDeclaration, ClassScope) : \l# endVisit(FieldDeclaration, MethodScope) : \l# endVisit(Initializer, MethodScope) : \l# endVisit(LocalDeclaration, BlockScope) : \l# endVisit(MethodDeclaration, ClassScope) : 
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AptBinaryLocalVariableBinding [
		 label = "{AptBinaryLocalVariableBinding|# annotationBindings : AnnotationBinding\l+ methodBinding : MethodBinding\l|# AptBinaryLocalVariableBinding(char, TypeBinding, int, AnnotationBinding, MethodBinding) : \l# getAnnotations() : AnnotationBinding\l}"
	 ]

	 AptSourceLocalVariableBinding [
		 label = "{AptSourceLocalVariableBinding|+ methodBinding : MethodBinding\l- local : LocalVariableBinding\l|# AptSourceLocalVariableBinding(LocalVariableBinding, MethodBinding) : \l+ getAnnotations() : AnnotationBinding\l}"
	 ]

	 AnnotatableTypeSystem [
		 label = "{AnnotatableTypeSystem|- isAnnotationBasedNullAnalysisEnabled : boolean\l|# AnnotatableTypeSystem(LookupEnvironment) : \l# getAnnotatedTypes(TypeBinding) : TypeBinding\l# getArrayType(TypeBinding, int, AnnotationBinding) : ArrayBinding\l# getArrayType(TypeBinding, int) : ArrayBinding\l# getMemberType(ReferenceBinding, ReferenceBinding) : ReferenceBinding\l# getParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding, AnnotationBinding) : ParameterizedTypeBinding\l# getParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding) : ParameterizedTypeBinding\l# getRawType(ReferenceBinding, ReferenceBinding, AnnotationBinding) : RawTypeBinding\l# getRawType(ReferenceBinding, ReferenceBinding) : RawTypeBinding\l# getWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int, AnnotationBinding) : WildcardBinding\l# getWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int) : WildcardBinding\l# getAnnotatedType(TypeBinding, AnnotationBinding) : TypeBinding\l# getAnnotatedType(TypeBinding, TypeBinding, AnnotationBinding) : TypeBinding\l# haveTypeAnnotations(TypeBinding, TypeBinding, TypeBinding, AnnotationBinding) : boolean\l# haveTypeAnnotations(TypeBinding, AnnotationBinding) : boolean\l# haveTypeAnnotations(TypeBinding, TypeBinding) : boolean\l# flattenedAnnotations(AnnotationBinding) : AnnotationBinding\l# isAnnotatedTypeSystem() : boolean\l}"
	 ]

	 AnnotationBinding [
		 label = "{AnnotationBinding|# type : ReferenceBinding\l# pairs : ElementValuePair\l|# addStandardAnnotations(AnnotationBinding, long, LookupEnvironment) : AnnotationBinding\l# buildMarkerAnnotationForMemberType(char, LookupEnvironment) : AnnotationBinding\l# buildMarkerAnnotation(char, LookupEnvironment) : AnnotationBinding\l# buildRetentionAnnotation(long, LookupEnvironment) : AnnotationBinding\l# buildTargetAnnotation(long, LookupEnvironment) : AnnotationBinding\l# AnnotationBinding(ReferenceBinding, ElementValuePair) : \l# AnnotationBinding(Annotation) : \l# computeUniqueKey(char) : char\l# getAnnotationType() : ReferenceBinding\l# resolve() : \l# getElementValuePairs() : ElementValuePair\l# setMethodBindings(ReferenceBinding, ElementValuePair) : \l# toString() : String\l# hashCode() : int\l# equals(Object) : boolean\l}"
	 ]

	 AnnotationMethodHolder [
		 label = "{AnnotationMethodHolder|# annotations : AnnotationBinding\l# parameterAnnotations : AnnotationBinding\l# defaultValue : Object\l# env : LookupEnvironment\l|# storeAnnotations(AnnotationBinding, AnnotationBinding, Object, LookupEnvironment) : AnnotationHolder\l# getAnnotations() : AnnotationBinding\l# getDefaultValue() : Object\l# getParameterAnnotations() : AnnotationBinding\l# getParameterAnnotations(int) : AnnotationBinding\l# setAnnotations(AnnotationBinding) : AnnotationHolder\l# null() : \l# MethodHolder(AnnotationBinding, AnnotationBinding) : \l# getParameterAnnotations() : AnnotationBinding\l# getParameterAnnotations(int) : AnnotationBinding\l# setAnnotations(AnnotationBinding) : AnnotationHolder\l# null() : \l# AnnotationMethodHolder(AnnotationBinding, AnnotationBinding, Object, LookupEnvironment) : \l# getDefaultValue() : Object\l}"
	 ]

	 ArrayBinding [
		 label = "{ArrayBinding|+ ArrayLength : FieldBinding\l+ leafComponentType : TypeBinding\l+ dimensions : int\l# environment : LookupEnvironment\l# constantPoolName : char\l# genericTypeSignature : char\l+ nullTagBitsPerDimension : long\l|# ArrayBinding(TypeBinding, int, LookupEnvironment) : \l# closestMatch() : TypeBinding\l# collectMissingTypes(List) : List\l# collectSubstitutes(Scope, TypeBinding, InferenceContext, int) : \l+ mentionsAny(TypeBinding, int) : boolean\l# collectInferenceVariables(Set) : \l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# debugName() : String\l# annotatedDebugName() : String\l# dimensions() : int\l# elementsType() : TypeBinding\l# erasure() : TypeBinding\l# environment() : LookupEnvironment\l# genericTypeSignature() : char\l# getPackage() : PackageBinding\l# hashCode() : int\l# isCompatibleWith(TypeBinding, Scope) : boolean\l+ isSubtypeOf(TypeBinding) : boolean\l# isProperType(boolean) : boolean\l# kind() : int\l# leafComponentType() : TypeBinding\l# nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# problemId() : int\l# qualifiedSourceName() : char\l# readableName() : char\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# shortReadableName() : char\l# sourceName() : char\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# toString() : String\l# unannotated() : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l+ uncapture(Scope) : TypeBinding\l+ acceptsNonNullDefault() : boolean\l+ updateTagBits() : long\l}"
	 ]

	 BaseTypeBinding [
		 label = "{BaseTypeBinding|+ CONVERSIONS : int\l+ IDENTITY : int\l+ WIDENING : int\l+ NARROWING : int\l+ MAX_CONVERSIONS : int\l+ simpleName : char\l- constantPoolName : char\l|# null() : \l# initializeConversions() : int\l# isNarrowing(int, int) : boolean\l# isWidening(int, int) : boolean\l# BaseTypeBinding(int, char, char) : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# getPackage() : PackageBinding\l# isCompatibleWith(TypeBinding, Scope) : boolean\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# unannotated() : TypeBinding\l# isUncheckedException(boolean) : boolean\l# kind() : int\l# qualifiedSourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# sourceName() : char\l# toString() : String\l}"
	 ]

	 BinaryTypeBinding [
		 label = "{BinaryTypeBinding|- NO_BINARY_METHODS : IBinaryMethod\l# superclass : ReferenceBinding\l# enclosingType : ReferenceBinding\l# superInterfaces : ReferenceBinding\l# fields : FieldBinding\l# methods : MethodBinding\l# memberTypes : ReferenceBinding\l# typeVariables : TypeVariableBinding\l- prototype : BinaryTypeBinding\l# environment : LookupEnvironment\l# storedAnnotations : SimpleLookupTable\l- containerAnnotationType : ReferenceBinding\l# defaultNullness : int\l|# convertMemberValue(Object, LookupEnvironment, char, boolean) : Object\l# clone(TypeBinding) : TypeBinding\l# createAnnotation(IBinaryAnnotation, LookupEnvironment, char) : AnnotationBinding\l# createAnnotations(IBinaryAnnotation, LookupEnvironment, char) : AnnotationBinding\l# resolveType(TypeBinding, LookupEnvironment, boolean) : TypeBinding\l# BinaryTypeBinding() : \l# BinaryTypeBinding(BinaryTypeBinding) : \l# BinaryTypeBinding(PackageBinding, IBinaryType, LookupEnvironment) : \l# BinaryTypeBinding(PackageBinding, IBinaryType, LookupEnvironment, boolean) : \l# availableFields() : FieldBinding\l# addMethodTypeVariables(TypeVariableBinding) : TypeVariableBinding\l# availableMethods() : MethodBinding\l# cachePartsFrom(IBinaryType, boolean) : \l# getTypeAnnotationWalker(IBinaryTypeAnnotation, int) : ITypeAnnotationWalker\l# getNullDefaultFrom(IBinaryAnnotation) : int\l# createFields(IBinaryField, IBinaryType, long, char) : \l# createMethod(IBinaryMethod, IBinaryType, long, char) : MethodBinding\l# createMethods(IBinaryMethod, IBinaryType, long, char) : IBinaryMethod\l# createTypeVariables(SignatureWrapper, boolean, char, ITypeAnnotationWalker, boolean) : TypeVariableBinding\l# enclosingType() : ReferenceBinding\l# fields() : FieldBinding\l# findMethod(char, char) : MethodBinding\l# genericTypeSignature() : char\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# getMethods(char, int) : MethodBinding\l# hasMemberTypes() : boolean\l# getTypeVariable(char) : TypeVariableBinding\l# hasTypeBit(int) : boolean\l# initializeTypeVariable(TypeVariableBinding, TypeVariableBinding, SignatureWrapper, char, ITypeAnnotationWalker) : \l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# isHierarchyConnected() : boolean\l# isRepeatableAnnotationType() : boolean\l# kind() : int\l# memberTypes() : ReferenceBinding\l# methods() : MethodBinding\l# prototype() : TypeBinding\l# isPrototype() : boolean\l# containerAnnotationType() : ReferenceBinding\l# resolveTypeFor(FieldBinding) : FieldBinding\l# resolveTypesFor(MethodBinding) : MethodBinding\l# retrieveAnnotations(Binding) : AnnotationBinding\l# setContainerAnnotationType(ReferenceBinding) : \l# tagAsHavingDefectiveContainerType() : \l# storedAnnotations(boolean) : SimpleLookupTable\l# scanFieldForNullAnnotation(IBinaryField, FieldBinding, boolean, ITypeAnnotationWalker) : \l# scanMethodForNullAnnotation(IBinaryMethod, MethodBinding, ITypeAnnotationWalker) : \l# scanTypeForNullDefaultAnnotation(IBinaryType, PackageBinding) : \l# setNullDefault(long, int) : boolean\l# getNonNullByDefaultValue(IBinaryAnnotation) : int\l# signature2qualifiedTypeName(char) : char\l+ getNullDefault() : int\l# scanTypeForContainerAnnotation(IBinaryType, char) : \l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# typeVariables() : TypeVariableBinding\l# toString() : String\l# unannotated() : TypeBinding\l# withoutToplevelNullAnnotation() : TypeBinding\l# unResolvedMethods() : MethodBinding\l# unResolvedFields() : FieldBinding\l}"
	 ]

	 Binding [
		 label = "{Binding|+ FIELD : int\l+ LOCAL : int\l+ VARIABLE : int\l+ TYPE : int\l+ METHOD : int\l+ PACKAGE : int\l+ IMPORT : int\l+ ARRAY_TYPE : int\l+ BASE_TYPE : int\l+ PARAMETERIZED_TYPE : int\l+ WILDCARD_TYPE : int\l+ RAW_TYPE : int\l+ GENERIC_TYPE : int\l+ TYPE_PARAMETER : int\l+ INTERSECTION_TYPE : int\l+ TYPE_USE : int\l+ INTERSECTION_TYPE18 : int\l+ POLY_TYPE : int\l+ NO_TYPES : TypeBinding\l+ NO_REFERENCE_TYPES : ReferenceBinding\l+ NO_PARAMETERS : TypeBinding\l+ NO_EXCEPTIONS : ReferenceBinding\l+ ANY_EXCEPTION : ReferenceBinding\l+ NO_FIELDS : FieldBinding\l+ NO_METHODS : MethodBinding\l+ NO_SUPERINTERFACES : ReferenceBinding\l+ NO_MEMBER_TYPES : ReferenceBinding\l+ NO_TYPE_VARIABLES : TypeVariableBinding\l+ NO_ANNOTATIONS : AnnotationBinding\l+ NO_ELEMENT_VALUE_PAIRS : ElementValuePair\l+ NO_PARAMETER_NAMES : char\l+ UNINITIALIZED_FIELDS : FieldBinding\l+ UNINITIALIZED_METHODS : MethodBinding\l+ UNINITIALIZED_REFERENCE_TYPES : ReferenceBinding\l# NO_INFERENCE_VARIABLES : InferenceVariable\l# NO_TYPE_BOUNDS : TypeBound\l+ NO_NULL_DEFAULT : int\l+ NONNULL_BY_DEFAULT : int\l+ NULL_UNSPECIFIED_BY_DEFAULT : int\l+ DefaultLocationParameter : int\l+ DefaultLocationReturnType : int\l+ DefaultLocationField : int\l+ DefaultLocationTypeArgument : int\l+ DefaultLocationTypeParameter : int\l+ DefaultLocationTypeBound : int\l+ DefaultLocationArrayContents : int\l+ NullnessDefaultMASK : int\l+ kind : int\l+ readableName : char\l|# computeUniqueKey() : char\l# computeUniqueKey(boolean) : char\l# getAnnotationTagBits() : long\l# initializeDeprecatedAnnotationTagBits() : \l# isAnnotationType() : boolean\l# isValidBinding() : boolean\l# isVolatile() : boolean\l# isTaggedRepeatable() : boolean\l# isParameter() : boolean\l# problemId() : int\l# shortReadableName() : char\l# getAnnotations() : AnnotationBinding\l# setAnnotations(AnnotationBinding, Scope) : \l# setAnnotations(AnnotationBinding) : \l}"
	 ]

	 BlockScope [
		 label = "{BlockScope|+ locals : LocalVariableBinding\l+ localIndex : int\l+ startIndex : int\l+ offset : int\l+ maxOffset : int\l+ shiftScopes : BlockScope\l+ subscopes : Scope\l+ subscopeCount : int\l+ enclosingCase : CaseStatement\l+ EmulationPathToImplicitThis : VariableBinding\l+ NoEnclosingInstanceInConstructorCall : VariableBinding\l+ NoEnclosingInstanceInStaticContext : VariableBinding\l+ insideTypeAnnotation : boolean\l- trackingVariables : List\l+ finallyInfo : FlowInfo\l|# BlockScope(BlockScope) : \l# BlockScope(BlockScope, boolean) : \l# BlockScope(BlockScope, int) : \l# BlockScope(int, Scope) : \l# addAnonymousType(TypeDeclaration, ReferenceBinding) : \l# addLocalType(TypeDeclaration) : \l# addLocalVariable(LocalVariableBinding) : \l# addSubscope(Scope) : \l# allowBlankFinalFieldAssignment(FieldBinding) : boolean\l# basicToString(int) : String\l# checkAndSetModifiersForVariable(LocalVariableBinding) : \l# computeLocalVariablePositions(int, int, CodeStream) : \l# emulateOuterAccess(LocalVariableBinding) : \l# findLocalType(char) : ReferenceBinding\l# findLocalVariableDeclarations(int) : LocalDeclaration\l# findVariable(char) : LocalVariableBinding\l# getBinding(char, int, InvocationSite, boolean) : Binding\l# getBinding(char, InvocationSite) : Binding\l# getEmulationPath(LocalVariableBinding) : VariableBinding\l# getEmulationPath(ReferenceBinding, boolean, boolean) : Object\l# isDuplicateLocalVariable(char) : boolean\l# maxShiftedOffset() : int\l# needBlankFinalFieldInitializationCheck(FieldBinding) : boolean\l# problemReporter() : ProblemReporter\l# propagateInnerEmulation(ReferenceBinding, boolean) : \l# referenceType() : TypeDeclaration\l# scopeIndex() : int\l# startIndex() : int\l# toString() : String\l# toString(int) : String\l# registerTrackingVariable(FakedTrackingVariable) : int\l# removeTrackingVar(FakedTrackingVariable) : \l# pruneWrapperTrackingVar(FakedTrackingVariable) : \l# checkUnclosedCloseables(FlowInfo, FlowContext, ASTNode, BlockScope) : \l# reportResourceLeak(FakedTrackingVariable, ASTNode, int) : \l# correlateTrackingVarsIfElse(FlowInfo, FlowInfo) : \l# checkAppropriateMethodAgainstSupers(char, MethodBinding, TypeBinding, InvocationSite) : \l# checkAppropriate(MethodBinding, MethodBinding, InvocationSite) : boolean\l+ hasDefaultNullnessFor(int) : boolean\l}"
	 ]

	 ThreeSets [
		 label = "{ThreeSets|# TRUE : BoundSet\l# FALSE : BoundSet\l# superBounds : Set\l# sameBounds : Set\l# subBounds : Set\l# instantiation : TypeBinding\l# inverseBounds : Map\l# boundsPerVariable : HashMap\l# captures : HashMap\l# inThrows : Set\l- incorporatedBounds : TypeBound\l- unincorporatedBounds : TypeBound\l- unincorporatedBoundsCount : int\l- mostRecentBounds : TypeBound\l|# null() : \l# ThreeSets() : \l# addBound(TypeBound) : boolean\l# lowerBounds(boolean, InferenceVariable) : TypeBinding\l# upperBounds(boolean, InferenceVariable) : TypeBinding\l# hasDependency(InferenceVariable) : boolean\l# hasDependency(Set, InferenceVariable) : boolean\l# size() : int\l# flattenInto(TypeBound, int) : int\l# copy() : ThreeSets\l# findSingleWrapperType() : TypeBinding\l# useNullHints(long, TypeBinding, LookupEnvironment) : \l# combineAndUseNullHints(TypeBinding, long, LookupEnvironment) : TypeBinding\l# setInstantiation(TypeBinding, InferenceVariable, LookupEnvironment) : \l# BoundSet() : \l# addBoundsFromTypeParameters(InferenceContext18, TypeVariableBinding, InferenceVariable) : \l# flatten() : TypeBound\l# copy() : BoundSet\l# addBound(TypeBound, LookupEnvironment) : \l# addBounds(TypeBound, LookupEnvironment) : boolean\l# addBounds(BoundSet, LookupEnvironment) : \l# isInstantiated(InferenceVariable) : boolean\l# getInstantiation(InferenceVariable, LookupEnvironment) : TypeBinding\l# numUninstantiatedVariables(InferenceVariable) : int\l# incorporate(InferenceContext18) : boolean\l# incorporate(InferenceContext18, TypeBound, TypeBound) : boolean\l+ getP(int) : TypeBinding\l# addTypeBoundsFromWildcardBound(InferenceContext18, InferenceSubstitution, int, TypeBinding, TypeBinding, TypeBinding) : \l# combineSameSame(TypeBound, TypeBound) : ConstraintTypeFormula\l# combineSameSameWithProperType(TypeBound, TypeBound) : ConstraintTypeFormula\l# combineSameSubSuper(TypeBound, TypeBound) : ConstraintTypeFormula\l# combineSuperAndSub(TypeBound, TypeBound) : ConstraintTypeFormula\l# combineEqualSupers(TypeBound, TypeBound) : ConstraintTypeFormula\l# deriveTypeArgumentConstraints(TypeBound, TypeBound) : ConstraintTypeFormula\l# typeArgumentEqualityConstraints(TypeBinding, TypeBinding, boolean) : ConstraintTypeFormula\l# reduceOneConstraint(InferenceContext18, ConstraintFormula) : boolean\l# dependsOnResolutionOf(InferenceVariable, InferenceVariable) : boolean\l# hasCaptureBound(Set) : boolean\l# hasOnlyTrivialExceptionBounds(InferenceVariable, TypeBinding) : boolean\l# upperBounds(InferenceVariable, boolean) : TypeBinding\l# lowerBounds(InferenceVariable, boolean) : TypeBinding\l# toString() : String\l# findWrapperTypeBound(InferenceVariable) : TypeBinding\l# condition18_5_2_bullet_3_3_1(InferenceVariable, TypeBinding) : boolean\l# condition18_5_2_bullet_3_3_2(InferenceVariable, TypeBinding, InferenceContext18) : boolean\l# superOnlyRaw(TypeBinding, TypeBinding, LookupEnvironment) : boolean\l# superTypesWithCommonGenericType(TypeBinding, TypeBinding) : TypeBinding\l# getEquivalentOuterVariable(InferenceVariable, InferenceVariable) : TypeBinding\l}"
	 ]

	 CaptureBinding [
		 label = "{CaptureBinding|+ lowerBound : TypeBinding\l+ wildcard : WildcardBinding\l+ captureID : int\l+ sourceType : ReferenceBinding\l+ start : int\l+ end : int\l+ cud : ASTNode\l# pendingSubstitute : TypeBinding\l|# CaptureBinding(WildcardBinding, ReferenceBinding, int, int, ASTNode, int) : \l# CaptureBinding(ReferenceBinding, char, int, int, int, LookupEnvironment) : \l# CaptureBinding(CaptureBinding) : \l# clone(TypeBinding) : TypeBinding\l# computeUniqueKey(boolean) : char\l# debugName() : String\l# genericTypeSignature() : char\l# initializeBounds(Scope, ParameterizedTypeBinding) : \l# isCapture() : boolean\l# isEquivalentTo(TypeBinding) : boolean\l+ isProperType(boolean) : boolean\l# readableName() : char\l# signableName() : char\l# shortReadableName() : char\l+ nullAnnotatedReadableName(CompilerOptions, boolean) : char\l+ withoutToplevelNullAnnotation() : TypeBinding\l+ substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l+ setTypeAnnotations(AnnotationBinding, boolean) : \l+ uncapture(Scope) : TypeBinding\l+ getDerivedTypesForDeferredInitialization() : TypeBinding\l# toString() : String\l}"
	 ]

	 CaptureBinding18 [
		 label = "{CaptureBinding18|# upperBounds : TypeBinding\l- originalName : char\l- prototype : CaptureBinding18\l# recursionLevel : int\l|# CaptureBinding18(ReferenceBinding, char, char, int, int, int, LookupEnvironment) : \l# CaptureBinding18(CaptureBinding18) : \l# setUpperBounds(TypeBinding, ReferenceBinding) : boolean\l# initializeBounds(Scope, ParameterizedTypeBinding) : \l# clone(TypeBinding) : TypeBinding\l# getMethods(char) : MethodBinding\l# erasure() : TypeBinding\l# isEquivalentTo(TypeBinding) : boolean\l# isCompatibleWith(TypeBinding, Scope) : boolean\l# findSuperTypeOriginatingFrom(TypeBinding) : TypeBinding\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l+ substitute(TypeVariableBinding) : TypeBinding\l+ isRawSubstitution() : boolean\l+ environment() : LookupEnvironment\l# isProperType(boolean) : boolean\l# genericTypeSignature() : char\l# readableName() : char\l# shortReadableName() : char\l+ uncapture(Scope) : TypeBinding\l+ computeUniqueKey(boolean) : char\l}"
	 ]

	 CatchParameterBinding [
		 label = "{CatchParameterBinding|# preciseTypes : TypeBinding\l|# CatchParameterBinding(LocalDeclaration, TypeBinding, int, boolean) : \l# getPreciseTypes() : TypeBinding\l# setPreciseType(TypeBinding) : \l# isCatchParameter() : boolean\l}"
	 ]

	 ClassScope [
		 label = "{ClassScope|+ referenceContext : TypeDeclaration\l+ superTypeReference : TypeReference\l# deferredBoundChecks : java\l|# ClassScope(Scope, TypeDeclaration) : \l# buildAnonymousTypeBinding(SourceTypeBinding, ReferenceBinding) : \l# buildFields() : \l# buildFieldsAndMethods() : \l# buildLocalType(SourceTypeBinding, PackageBinding) : LocalTypeBinding\l# buildLocalTypeBinding(SourceTypeBinding) : \l# buildMemberTypes(AccessRestriction) : \l# buildMethods() : \l# buildType(SourceTypeBinding, PackageBinding, AccessRestriction) : SourceTypeBinding\l# buildTypeVariables() : \l# resolveTypeParameter(TypeParameter) : \l# checkAndSetModifiers() : \l# checkAndSetModifiersForField(FieldBinding, FieldDeclaration) : \l# checkParameterizedSuperTypeCollisions() : \l# checkForInheritedMemberTypes(SourceTypeBinding) : \l# checkParameterizedTypeBounds() : \l# connectMemberTypes() : \l# connectSuperclass() : boolean\l# connectEnumSuperclass() : boolean\l# connectSuperInterfaces() : boolean\l# connectTypeHierarchy() : \l+ deferCheck(Runnable) : boolean\l# connectTypeHierarchyWithoutMembers() : \l# detectHierarchyCycle(TypeBinding, TypeReference) : boolean\l# detectHierarchyCycle(SourceTypeBinding, ReferenceBinding, TypeReference) : boolean\l# findSupertype(TypeReference) : ReferenceBinding\l# problemReporter() : ProblemReporter\l# referenceType() : TypeDeclaration\l+ hasDefaultNullnessFor(int) : boolean\l# toString() : String\l}"
	 ]

	 CompilationUnitScope [
		 label = "{CompilationUnitScope|+ environment : LookupEnvironment\l+ referenceContext : CompilationUnitDeclaration\l+ currentPackageName : char\l+ fPackage : PackageBinding\l+ imports : ImportBinding\l+ importPtr : int\l+ typeOrPackageCache : HashtableOfObject\l+ topLevelTypes : SourceTypeBinding\l- qualifiedReferences : CompoundNameVector\l- simpleNameReferences : SimpleNameVector\l- rootReferences : SimpleNameVector\l- referencedTypes : ObjectVector\l- referencedSuperTypes : ObjectVector\l# constantPoolNameUsage : HashtableOfType\l- captureID : int\l- tempImports : ImportBinding\l+ suppressImportErrors : boolean\l- skipCachingImports : boolean\l# connectingHierarchy : boolean\l- inferredInvocations : ArrayList\l|# CompilationUnitScope(CompilationUnitDeclaration, LookupEnvironment) : \l# buildFieldsAndMethods() : \l# buildTypeBindings(AccessRestriction) : \l# checkAndSetImports() : \l# checkParameterizedTypes() : \l# computeConstantPoolName(LocalTypeBinding) : char\l# connectTypeHierarchy() : \l# faultInImports() : \l# faultInTypes() : \l# findImport(char, boolean, boolean) : Binding\l# findImport(char, int) : Binding\l# findSingleImport(char, int, boolean) : Binding\l# findSingleStaticImport(char, int) : Binding\l# findStaticMethod(ReferenceBinding, char) : MethodBinding\l# getDefaultImports() : ImportBinding\l# getImport(char, boolean, boolean) : Binding\l# nextCaptureID() : int\l# problemReporter() : ProblemReporter\l# recordQualifiedReference(char) : \l# recordReference(char, char) : \l# recordReference(ReferenceBinding, char) : \l# recordRootReference(char) : \l# recordSimpleReference(char) : \l# recordSuperTypeReference(TypeBinding) : \l# recordTypeConversion(TypeBinding, TypeBinding) : \l# recordTypeReference(TypeBinding) : \l# recordTypeReferences(TypeBinding) : \l# resolveSingleImport(ImportBinding, int) : Binding\l# storeDependencyInfo() : \l# toString() : String\l# typeToRecord(TypeBinding) : ReferenceBinding\l# verifyMethods(MethodVerifier) : \l# recordImportBinding(ImportBinding) : \l# checkMoreStaticBindings(char, HashtableOfType, int, ImportReference) : \l# checkAndRecordImportBinding(Binding, HashtableOfType, ImportReference, char) : int\l+ hasDefaultNullnessFor(int) : boolean\l# registerInferredInvocation(Invocation) : \l# cleanUpInferenceContexts() : \l}"
	 ]

	 ConstraintExceptionFormula [
		 label = "{ConstraintExceptionFormula|# left : FunctionalExpression\l|# ConstraintExceptionFormula(FunctionalExpression, TypeBinding) : \l# reduce(InferenceContext18) : Object\l# inputVariables(InferenceContext18) : Collection\l# toString() : String\l}"
	 ]

	 ConstraintExpressionFormula [
		 label = "{ConstraintExpressionFormula|# left : Expression\l# isSoft : boolean\l|# ConstraintExpressionFormula(Expression, TypeBinding, int) : \l# ConstraintExpressionFormula(Expression, TypeBinding, int, boolean) : \l# reduce(InferenceContext18) : Object\l# findGroundTargetType(InferenceContext18, BlockScope, LambdaExpression, ParameterizedTypeBinding) : ReferenceBinding\l# canBePolyExpression(Expression) : boolean\l# reduceReferenceExpressionCompatibility(ReferenceExpression, InferenceContext18) : Object\l# inferInvocationApplicability(InferenceContext18, MethodBinding, TypeBinding, boolean, int) : \l# inferPolyInvocationType(InferenceContext18, InvocationSite, TypeBinding, MethodBinding) : boolean\l# inputVariables(InferenceContext18) : Collection\l# toString() : String\l}"
	 ]

	 ConstraintTypeFormula [
		 label = "{ConstraintTypeFormula|# left : TypeBinding\l# isSoft : boolean\l|# create(TypeBinding, TypeBinding, int) : ConstraintTypeFormula\l# create(TypeBinding, TypeBinding, int, boolean) : ConstraintTypeFormula\l# ConstraintTypeFormula(TypeBinding, TypeBinding, int, boolean) : \l# ConstraintTypeFormula() : \l# reduce(InferenceContext18) : Object\l# checkIVFreeTVmatch(TypeBinding, TypeBinding) : boolean\l# reduceTypeEquality(TypeBinding) : Object\l# reduceSubType(Scope, TypeBinding, TypeBinding) : Object\l# findMostSpecificSuperArray(TypeBinding, TypeBinding, TypeBinding) : ArrayBinding\l# addConstraintsFromTypeParameters(TypeBinding, ParameterizedTypeBinding, List) : boolean\l# equalsEquals(ConstraintTypeFormula) : boolean\l# applySubstitution(BoundSet, InferenceVariable) : boolean\l# toString() : String\l}"
	 ]

	 UnresolvedEnumConstant [
		 label = "{UnresolvedEnumConstant|# name : char\l+ value : Object\l+ binding : MethodBinding\l# enumType : ReferenceBinding\l# environment : LookupEnvironment\l# enumConstantName : char\l|# null() : \l# UnresolvedEnumConstant(ReferenceBinding, LookupEnvironment, char) : \l# getResolved() : FieldBinding\l# getEnumConstantName() : char\l# getValue(Expression) : Object\l# ElementValuePair(char, Expression, MethodBinding) : \l# ElementValuePair(char, Object, MethodBinding) : \l# getName() : char\l# getMethodBinding() : MethodBinding\l# getValue() : Object\l# setMethodBinding(MethodBinding) : \l# setValue(Object) : \l# toString() : String\l}"
	 ]

	 ExtraCompilerModifiers [
		 label = "{ExtraCompilerModifiers||# AccJustFlag() : int\l# AccDefaultMethod() : int\l# AccRestrictedAccess() : int\l# AccFromClassFile() : int\l# AccDefaultAbstract() : int\l# AccDeprecatedImplicitly() : int\l# AccAlternateModifierProblem() : int\l# AccModifierProblem() : int\l# AccSemicolonBody() : int\l# AccUnresolved() : int\l# AccBlankFinal() : int\l# AccIsDefaultConstructor() : int\l# AccLocallyUsed() : int\l# AccVisibilityMASK() : int\l# AccOverriding() : int\l# AccImplementing() : int\l# AccGenericSignature() : int\l}"
	 ]

	 FieldBinding [
		 label = "{FieldBinding|+ declaringClass : ReferenceBinding\l+ compoundUseFlag : int\l|# FieldBinding() : \l# FieldBinding(char, TypeBinding, int, ReferenceBinding, Constant) : \l# FieldBinding(FieldBinding, ReferenceBinding) : \l# FieldBinding(FieldDeclaration, TypeBinding, int, ReferenceBinding) : \l# canBeSeenBy(PackageBinding) : boolean\l# canBeSeenBy(TypeBinding, InvocationSite, Scope) : boolean\l# computeUniqueKey(boolean) : char\l# constant() : Constant\l# constant(Scope) : Constant\l# fillInDefaultNonNullness(FieldDeclaration, Scope) : \l# genericSignature() : char\l# getAccessFlags() : int\l# getAnnotations() : AnnotationBinding\l# getAnnotationTagBits() : long\l# isDefault() : boolean\l# isDeprecated() : boolean\l# isPrivate() : boolean\l# isOrEnclosedByPrivateType() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isSynthetic() : boolean\l# isTransient() : boolean\l# isUsed() : boolean\l# isUsedOnlyInCompound() : boolean\l# isViewedAsDeprecated() : boolean\l# isVolatile() : boolean\l# kind() : int\l# original() : FieldBinding\l# setAnnotations(AnnotationBinding) : \l# sourceField() : FieldDeclaration\l}"
	 ]

	 InheritedNonNullnessInfo [
		 label = "{InheritedNonNullnessInfo|# inheritedNonNullness : Boolean\l# annotationOrigin : MethodBinding\l# complained : boolean\l# buddyImplicitNullAnnotationsVerifier : ImplicitNullAnnotationVerifier\l- inheritNullAnnotations : boolean\l# environment : LookupEnvironment\l|# null() : \l# ImplicitNullAnnotationVerifier(LookupEnvironment, boolean) : \l# ImplicitNullAnnotationVerifier(LookupEnvironment) : \l# checkImplicitNullAnnotations(MethodBinding, AbstractMethodDeclaration, boolean, Scope) : \l# findAllOverriddenMethods(MethodBinding, char, int, ReferenceBinding, Set, List) : \l# collectOverriddenMethods(MethodBinding, char, int, ReferenceBinding, Set, List) : \l# checkNullSpecInheritance(MethodBinding, AbstractMethodDeclaration, boolean, boolean, boolean, MethodBinding, MethodBinding, Scope, InheritedNonNullnessInfo) : \l# applyReturnNullBits(MethodBinding, long) : \l# getParameterNonNullness(MethodBinding, int, boolean) : Boolean\l# getReturnTypeNullnessTagBits(MethodBinding, boolean) : long\l# recordDeferredInheritedNullness(Scope, ASTNode, MethodBinding, Boolean, InheritedNonNullnessInfo) : \l# recordArgNonNullness(MethodBinding, int, int, Argument, Boolean) : \l# recordArgNonNullness18(MethodBinding, int, Argument, Boolean, LookupEnvironment) : \l# areParametersEqual(MethodBinding, MethodBinding) : boolean\l# areTypesEqual(TypeBinding, TypeBinding) : boolean\l}"
	 ]

	 ImportBinding [
		 label = "{ImportBinding|+ compoundName : char\l+ onDemand : boolean\l+ reference : ImportReference\l+ resolvedImport : Binding\l|# ImportBinding(char, boolean, Binding, ImportReference) : \l# kind() : int\l# isStatic() : boolean\l# readableName() : char\l# toString() : String\l}"
	 ]

	 ImportConflictBinding [
		 label = "{ImportConflictBinding|+ conflictingTypeBinding : ReferenceBinding\l|# ImportConflictBinding(char, Binding, ReferenceBinding, ImportReference) : \l# readableName() : char\l# toString() : String\l}"
	 ]

	 InferenceContext [
		 label = "{InferenceContext|- collectedSubstitutes : TypeBinding\l# genericMethod : MethodBinding\l# depth : int\l# status : int\l# expectedType : TypeBinding\l# hasExplicitExpectedType : boolean\l+ isUnchecked : boolean\l# substitutes : TypeBinding\l# FAILED : int\l|# InferenceContext(MethodBinding) : \l# getSubstitutes(TypeVariableBinding, int) : TypeBinding\l# hasUnresolvedTypeArgument() : boolean\l# recordSubstitute(TypeVariableBinding, TypeBinding, int) : \l# toString() : String\l}"
	 ]

	 SuspendedInferenceRecord [
		 label = "{SuspendedInferenceRecord|# SIMULATE_BUG_JDK_8026527 : boolean\l# SHOULD_WORKAROUND_BUG_JDK_8054721 : boolean\l# ARGUMENT_CONSTRAINTS_ARE_SOFT : boolean\l# currentInvocation : InvocationSite\l# invocationArguments : Expression\l# inferenceVariables : InferenceVariable\l# nextVarId : int\l# initialConstraints : ConstraintFormula\l# finalConstraints : ConstraintExpressionFormula\l# currentBounds : BoundSet\l# inferenceKind : int\l+ stepCompleted : int\l+ NOT_INFERRED : int\l+ APPLICABILITY_INFERRED : int\l+ TYPE_INFERRED : int\l+ constraintsWithUncheckedConversion : List\l+ usesUncheckedConversion : boolean\l+ outerContext : InferenceContext18\l# scope : Scope\l# environment : LookupEnvironment\l# object : ReferenceBinding\l+ b2 : BoundSet\l- internedVariables : InferenceVariable\l+ CHECK_UNKNOWN : int\l+ CHECK_STRICT : int\l+ CHECK_LOOSE : int\l+ CHECK_VARARG : int\l# site : InvocationSite\l# invocationArguments : Expression\l# inferenceVariables : InferenceVariable\l# inferenceKind : int\l# usesUncheckedConversion : boolean\l# captureId : int\l|# getInferenceVariable(TypeBinding, int, InvocationSite) : InferenceVariable\l# null() : \l# SuspendedInferenceRecord(InvocationSite, Expression, InferenceVariable, int, boolean) : \l# InferenceContext18(Scope, Expression, InvocationSite, InferenceContext18) : \l# InferenceContext18(Scope) : \l# createInitialBoundSet(TypeVariableBinding) : InferenceVariable\l# substitute(TypeBinding) : TypeBinding\l# createInitialConstraintsForParameters(TypeBinding, boolean, TypeBinding, MethodBinding) : \l# isTypeVariableOfCandidate(TypeBinding, MethodBinding) : boolean\l# addInitialTypeVariableSubstitutions(TypeBinding) : InferenceVariable\l# addTypeVariableSubstitutions(TypeBinding) : InferenceVariable\l# addThrowsContraints(TypeBinding, InferenceVariable, ReferenceBinding) : \l# inferInvocationApplicability(MethodBinding, TypeBinding, boolean) : \l# inferInvocationType(TypeBinding, InvocationSite, MethodBinding) : BoundSet\l# addConstraintsToC(Expression, Set, MethodBinding, int, boolean, InvocationSite) : boolean\l# addConstraintsToC_OneExpr(Expression, Set, TypeBinding, TypeBinding, MethodBinding, boolean) : boolean\l# getInferenceKind(MethodBinding, TypeBinding) : int\l# inferFunctionalInterfaceParameterization(LambdaExpression, BlockScope, ParameterizedTypeBinding) : ReferenceBinding\l# createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding) : TypeBinding\l# reduceWithEqualityConstraints(TypeBinding, TypeBinding) : boolean\l# isMoreSpecificThan(MethodBinding, MethodBinding, boolean, boolean) : boolean\l# moreSpecificMain(TypeBinding, TypeBinding, Expression) : Boolean\l# checkExpression(Expression, TypeBinding, TypeBinding, TypeBinding, TypeBinding) : boolean\l# siSuperI(TypeBinding, TypeBinding) : boolean\l# siSubI(TypeBinding, TypeBinding) : boolean\l# solve(boolean) : BoundSet\l# solve() : BoundSet\l# solve(InferenceVariable) : BoundSet\l# reduce() : boolean\l# isResolved(BoundSet) : boolean\l# getSolutions(TypeVariableBinding, InvocationSite, BoundSet) : TypeBinding\l# reduceAndIncorporate(ConstraintFormula) : boolean\l# resolve(InferenceVariable) : BoundSet\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# freshCapture(InferenceVariable) : CaptureBinding18\l# setUpperBounds(CaptureBinding18, TypeBinding) : boolean\l# sortTypes(TypeBinding) : \l# compare(TypeBinding, TypeBinding) : int\l# getSmallestVariableSet(BoundSet, InferenceVariable) : Set\l# addDependencies(BoundSet, Set, InferenceVariable) : \l# pickFromCycle(Set) : ConstraintFormula\l# dependsOn(Collection, Collection) : boolean\l# isReachable(Map, ConstraintFormula, ConstraintFormula, Set, Set) : boolean\l# doesExpressionContain(Expression, Expression) : boolean\l# rankNode(ConstraintExpressionFormula, Map, Map) : int\l# findBottomSet(Set, Set) : Set\l# allOutputVariables(Set) : Set\l# varArgTypes(TypeBinding, int) : TypeBinding\l# enterPolyInvocation(InvocationSite, Expression) : SuspendedInferenceRecord\l# enterLambda(LambdaExpression) : SuspendedInferenceRecord\l# integrateInnerInferenceB2(InferenceContext18) : \l# resumeSuspendedInference(SuspendedInferenceRecord) : \l# getResultSubstitution(BoundSet, boolean) : Substitution\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# isVarArgs() : boolean\l# getParameter(TypeBinding, int, boolean) : TypeBinding\l# getReturnProblemMethodIfNeeded(TypeBinding, MethodBinding) : MethodBinding\l# toString() : String\l# parameterizedWithWildcard(TypeBinding) : ParameterizedTypeBinding\l# getFunctionInterfaceArgumentSolutions(TypeBinding) : TypeBinding\l# recordUncheckedConversion(ConstraintTypeFormula) : \l# reportUncheckedConversions(BoundSet) : \l# usesUncheckedConversion() : boolean\l# missingImplementation(String) : \l# forwardResults(BoundSet, Invocation, ParameterizedMethodBinding, TypeBinding) : \l# cleanUp() : \l}"
	 ]

	 InferenceFailureException [
		 label = "{InferenceFailureException|- serialVersionUID : long\l|# InferenceFailureException(String) : \l}"
	 ]

	 InferenceSubstitution [
		 label = "{InferenceSubstitution|- environment : LookupEnvironment\l- variables : InferenceVariable\l- site : InvocationSite\l|# InferenceSubstitution(LookupEnvironment, InferenceVariable, InvocationSite) : \l# InferenceSubstitution(InferenceContext18) : \l# substitute(Substitution, TypeBinding) : TypeBinding\l# getP(int) : TypeBinding\l# substitute(TypeVariableBinding) : TypeBinding\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l}"
	 ]

	 InferenceVariable [
		 label = "{InferenceVariable|# site : InvocationSite\l# typeParameter : TypeBinding\l# nullHints : long\l- prototype : InferenceVariable\l# varId : int\l|# InferenceVariable(TypeBinding, int, int, InvocationSite, LookupEnvironment, ReferenceBinding) : \l# InferenceVariable(TypeBinding, int, InvocationSite, char, LookupEnvironment, ReferenceBinding) : \l# updateSourceName(int) : \l+ clone(TypeBinding) : TypeBinding\l# prototype() : InferenceVariable\l# constantPoolName() : char\l# getPackage() : PackageBinding\l# isCompatibleWith(TypeBinding, Scope) : boolean\l# isProperType(boolean) : boolean\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# collectInferenceVariables(Set) : \l# superInterfaces() : ReferenceBinding\l# qualifiedSourceName() : char\l# sourceName() : char\l# readableName() : char\l# hasTypeBit(int) : boolean\l# debugName() : String\l# toString() : String\l# hashCode() : int\l# equals(Object) : boolean\l# erasure() : TypeBinding\l}"
	 ]

	 InnerEmulationDependency [
		 label = "{InnerEmulationDependency|+ scope : BlockScope\l+ wasEnclosingInstanceSupplied : boolean\l|# InnerEmulationDependency(BlockScope, boolean) : \l}"
	 ]

	 IntersectionTypeBinding18 [
		 label = "{IntersectionTypeBinding18|+ intersectingTypes : ReferenceBinding\l- javaLangObject : ReferenceBinding\l# length : int\l|# IntersectionTypeBinding18(ReferenceBinding, LookupEnvironment) : \l# IntersectionTypeBinding18(IntersectionTypeBinding18) : \l+ clone(TypeBinding) : TypeBinding\l# getSingleAbstractMethod(Scope, boolean) : MethodBinding\l# hasTypeBit(int) : boolean\l# canBeInstantiated() : boolean\l# canBeSeenBy(PackageBinding) : boolean\l# canBeSeenBy(Scope) : boolean\l# canBeSeenBy(ReferenceBinding, ReferenceBinding) : boolean\l# constantPoolName() : char\l# getPackage() : PackageBinding\l# getIntersectingTypes() : ReferenceBinding\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l+ isBoxedPrimitiveType() : boolean\l# isCompatibleWith(TypeBinding, Scope) : boolean\l+ isSubtypeOf(TypeBinding) : boolean\l# qualifiedSourceName() : char\l# sourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# isIntersectionType18() : boolean\l# kind() : int\l# debugName() : String\l# toString() : String\l# getSAMType(Scope) : TypeBinding\l+ collectInferenceVariables(Set) : \l+ mentionsAny(TypeBinding, int) : boolean\l+ updateTagBits() : long\l}"
	 ]

	 EmptyWithAstNode [
		 label = "{EmptyWithAstNode|# node : ASTNode\l|# genericTypeArguments() : TypeBinding\l# isSuperAccess() : boolean\l# isQualifiedSuper() : boolean\l# isTypeAccess() : boolean\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l# sourceEnd() : int\l# sourceStart() : int\l# invocationTargetType() : TypeBinding\l# receiverIsImplicitThis() : boolean\l# checkingPotentialCompatibility() : boolean\l# acceptPotentiallyCompatibleMethods(MethodBinding) : \l# freshInferenceContext(Scope) : InferenceContext18\l# getExpressionContext() : ExpressionContext\l# null() : \l# EmptyWithAstNode(ASTNode) : \l# genericTypeArguments() : TypeBinding\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l# sourceEnd() : int\l# sourceStart() : int\l# invocationTargetType() : TypeBinding\l# receiverIsImplicitThis() : boolean\l# freshInferenceContext(Scope) : InferenceContext18\l# getExpressionContext() : ExpressionContext\l+ isQualifiedSuper() : boolean\l# checkingPotentialCompatibility() : boolean\l# acceptPotentiallyCompatibleMethods(MethodBinding) : \l}"
	 ]

	 IQualifiedTypeResolutionListener [
		 label = "{IQualifiedTypeResolutionListener||# recordResolution(QualifiedTypeReference, TypeBinding) : \l}"
	 ]

	 LocalTypeBinding [
		 label = "{LocalTypeBinding|# LocalTypePrefix : char\l- dependents : InnerEmulationDependency\l+ enclosingCase : CaseStatement\l+ sourceStart : int\l+ enclosingMethod : MethodBinding\l|# LocalTypeBinding(ClassScope, SourceTypeBinding, CaseStatement) : \l# LocalTypeBinding(LocalTypeBinding) : \l# addInnerEmulationDependent(BlockScope, boolean) : \l+ enclosingMethod() : MethodBinding\l# anonymousOriginalSuperType() : ReferenceBinding\l# checkRedundantNullnessDefaultRecurse(ASTNode, Annotation, long, boolean) : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# hashCode() : int\l# genericTypeSignature() : char\l# readableName() : char\l# shortReadableName() : char\l# setAsMemberType() : \l# setConstantPoolName(char) : \l# signature() : char\l# sourceName() : char\l# toString() : String\l# updateInnerEmulationDependents() : \l}"
	 ]

	 LocalVariableBinding [
		 label = "{LocalVariableBinding|+ resolvedPosition : int\l+ UNUSED : int\l+ USED : int\l+ FAKE_USED : int\l+ useFlag : int\l+ declaringScope : BlockScope\l+ declaration : LocalDeclaration\l+ initializationPCs : int\l+ initializationCount : int\l+ closeTracker : FakedTrackingVariable\l|# LocalVariableBinding(char, TypeBinding, int, boolean) : \l# LocalVariableBinding(LocalDeclaration, TypeBinding, int, boolean) : \l# LocalVariableBinding(LocalDeclaration, TypeBinding, int, MethodScope) : \l# kind() : int\l# computeUniqueKey(boolean) : char\l# getAnnotations() : AnnotationBinding\l# getScopeKey(BlockScope, StringBuffer) : \l# isSecret() : boolean\l# recordInitializationEndPC(int) : \l# recordInitializationStartPC(int) : \l# setAnnotations(AnnotationBinding, Scope) : \l# resetInitializations() : \l# toString() : String\l# isParameter() : boolean\l# isCatchParameter() : boolean\l# getEnclosingMethod() : MethodBinding\l}"
	 ]

	 LookupEnvironment [
		 label = "{LookupEnvironment|- accessRestrictions : Map\l# defaultImports : ImportBinding\l+ defaultPackage : PackageBinding\l# knownPackages : HashtableOfPackage\l- lastCompletedUnitIndex : int\l- lastUnitIndex : int\l# typeSystem : TypeSystem\l+ nameEnvironment : INameEnvironment\l+ globalOptions : CompilerOptions\l+ problemReporter : ProblemReporter\l+ classFilePool : ClassFilePool\l- stepCompleted : int\l+ typeRequestor : ITypeRequestor\l- uniqueParameterizedGenericMethodBindings : SimpleLookupTable\l- uniquePolymorphicMethodBindings : SimpleLookupTable\l- uniqueGetClassMethodBinding : SimpleLookupTable\l+ unitBeingCompleted : CompilationUnitDeclaration\l+ missingClassFileLocation : Object\l- units : CompilationUnitDeclaration\l- verifier : MethodVerifier\l+ arrayClone : MethodBinding\l- missingTypes : ArrayList\l# typesBeingConnected : Set\l+ isProcessingAnnotations : boolean\l+ mayTolerateMissingType : boolean\l# nullableAnnotationPackage : PackageBinding\l# nonnullAnnotationPackage : PackageBinding\l# nonnullByDefaultAnnotationPackage : PackageBinding\l# nonNullAnnotation : AnnotationBinding\l# nullableAnnotation : AnnotationBinding\l# allNullAnnotations : Map\l# deferredEnumMethods : List\l# currentInferenceContext : InferenceContext18\l# BUILD_FIELDS_AND_METHODS : int\l# BUILD_TYPE_HIERARCHY : int\l# CHECK_AND_SET_IMPORTS : int\l# CONNECT_TYPE_HIERARCHY : int\l# TheNotFoundPackage : ProblemPackageBinding\l# TheNotFoundType : ProblemReferenceBinding\l+ resolutionListeners : IQualifiedTypeResolutionListener\l|# LookupEnvironment(ITypeRequestor, CompilerOptions, ProblemReporter, INameEnvironment) : \l# askForType(char) : ReferenceBinding\l# askForType(PackageBinding, char) : ReferenceBinding\l# buildTypeBindings(CompilationUnitDeclaration, AccessRestriction) : \l# cacheBinaryType(IBinaryType, AccessRestriction) : BinaryTypeBinding\l# cacheBinaryType(IBinaryType, boolean, AccessRestriction) : BinaryTypeBinding\l# completeTypeBindings() : \l# completeTypeBindings(CompilationUnitDeclaration) : \l# completeTypeBindings(CompilationUnitDeclaration, boolean) : \l# completeTypeBindings(CompilationUnitDeclaration, boolean, int) : \l# computeArrayClone(MethodBinding) : MethodBinding\l# computeBoxingType(TypeBinding) : TypeBinding\l# computePackageFrom(char, boolean) : PackageBinding\l# convertToParameterizedType(ReferenceBinding) : ReferenceBinding\l# convertToRawType(TypeBinding, boolean) : TypeBinding\l# convertToRawTypes(ReferenceBinding, boolean, boolean) : ReferenceBinding\l# convertUnresolvedBinaryToRawType(TypeBinding) : TypeBinding\l# createAnnotation(ReferenceBinding, ElementValuePair) : AnnotationBinding\l# createUnresolvedAnnotation(ReferenceBinding, ElementValuePair) : AnnotationBinding\l# createArrayType(TypeBinding, int) : ArrayBinding\l# createArrayType(TypeBinding, int, AnnotationBinding) : ArrayBinding\l# createIntersectionType18(ReferenceBinding) : TypeBinding\l# createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) : BinaryTypeBinding\l# createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) : BinaryTypeBinding\l# createMissingType(PackageBinding, char) : MissingTypeBinding\l# createPackage(char) : PackageBinding\l# createParameterizedGenericMethod(MethodBinding, RawTypeBinding) : ParameterizedGenericMethodBinding\l# createParameterizedGenericMethod(MethodBinding, TypeBinding) : ParameterizedGenericMethodBinding\l# createParameterizedGenericMethod(MethodBinding, TypeBinding, boolean, boolean) : ParameterizedGenericMethodBinding\l# createPolymorphicMethod(MethodBinding, TypeBinding) : PolymorphicMethodBinding\l# usesAnnotatedTypeSystem() : boolean\l# updatePolymorphicMethodReturnType(PolymorphicMethodBinding, TypeBinding) : MethodBinding\l# createGetClassMethod(TypeBinding, MethodBinding, Scope) : ParameterizedMethodBinding\l# createMemberType(ReferenceBinding, ReferenceBinding) : ReferenceBinding\l# createParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding) : ParameterizedTypeBinding\l# createParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding, AnnotationBinding) : ParameterizedTypeBinding\l# createAnnotatedType(TypeBinding, AnnotationBinding) : TypeBinding\l# createAnnotatedType(TypeBinding, AnnotationBinding) : TypeBinding\l# createRawType(ReferenceBinding, ReferenceBinding) : RawTypeBinding\l# createRawType(ReferenceBinding, ReferenceBinding, AnnotationBinding) : RawTypeBinding\l# createWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int) : WildcardBinding\l# createCapturedWildcard(WildcardBinding, ReferenceBinding, int, int, ASTNode, int) : CaptureBinding\l# createWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int, AnnotationBinding) : WildcardBinding\l# getAccessRestriction(TypeBinding) : AccessRestriction\l# getCachedType(char) : ReferenceBinding\l# getNullableAnnotation() : AnnotationBinding\l# getNullableAnnotationName() : char\l# getNonNullAnnotation() : AnnotationBinding\l# nullAnnotationsFromTagBits(long) : AnnotationBinding\l# getNonNullAnnotationName() : char\l# getNonNullByDefaultAnnotationName() : char\l# getNullAnnotationBit(char) : int\l# isNullnessAnnotationPackage(PackageBinding) : boolean\l# usesNullTypeAnnotations() : boolean\l# initializeUsesNullTypeAnnotation() : \l# getPackage0(char) : PackageBinding\l# getResolvedType(char, Scope) : ReferenceBinding\l# getTopLevelPackage(char) : PackageBinding\l# getType(char) : ReferenceBinding\l# getTypeArgumentsFromSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding, ReferenceBinding, char, ITypeAnnotationWalker) : TypeBinding\l# getTypeFromCompoundName(char, boolean, boolean) : ReferenceBinding\l# getTypeFromConstantPoolName(char, int, int, boolean, char, ITypeAnnotationWalker) : ReferenceBinding\l# getTypeFromConstantPoolName(char, int, int, boolean, char) : ReferenceBinding\l# getTypeFromSignature(char, int, int, boolean, TypeBinding, char, ITypeAnnotationWalker) : TypeBinding\l# annotateType(TypeBinding, ITypeAnnotationWalker, char) : TypeBinding\l# qualifiedNameMatchesSignature(char, char) : boolean\l# getTypeFromTypeSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding, char, ITypeAnnotationWalker) : TypeBinding\l# getTypeFromTypeVariable(TypeVariableBinding, int, AnnotationBinding, ITypeAnnotationWalker, char) : TypeBinding\l# getTypeFromVariantTypeSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding, ReferenceBinding, int, char, ITypeAnnotationWalker) : TypeBinding\l# isMissingType(char) : boolean\l# isPackage(char, char) : boolean\l# methodVerifier() : MethodVerifier\l# newMethodVerifier() : MethodVerifier\l# releaseClassFiles(org) : \l# reset() : \l# setAccessRestriction(ReferenceBinding, AccessRestriction) : \l# updateCaches(UnresolvedReferenceBinding, ReferenceBinding) : \l# addResolutionListener(IQualifiedTypeResolutionListener) : \l# getUnannotatedType(TypeBinding) : TypeBinding\l# getAnnotatedTypes(TypeBinding) : TypeBinding\l# filterNullTypeAnnotations(AnnotationBinding) : AnnotationBinding\l# containsNullTypeAnnotation(IBinaryAnnotation) : boolean\l}"
	 ]

	 MemberTypeBinding [
		 label = "{MemberTypeBinding||# MemberTypeBinding(char, ClassScope, SourceTypeBinding) : \l# MemberTypeBinding(MemberTypeBinding) : \l# checkSyntheticArgsAndFields() : \l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# initializeDeprecatedAnnotationTagBits() : \l# toString() : String\l}"
	 ]

	 MethodBinding [
		 label = "{MethodBinding|+ modifiers : int\l+ selector : char\l+ returnType : TypeBinding\l+ parameters : TypeBinding\l+ receiver : TypeBinding\l+ thrownExceptions : ReferenceBinding\l+ declaringClass : ReferenceBinding\l+ typeVariables : TypeVariableBinding\l# signature : char\l+ tagBits : long\l+ parameterNonNullness : Boolean\l+ defaultNullness : int\l+ parameterNames : char\l|# MethodBinding() : \l# MethodBinding(int, char, TypeBinding, TypeBinding, ReferenceBinding, ReferenceBinding) : \l# MethodBinding(int, TypeBinding, ReferenceBinding, ReferenceBinding) : \l# MethodBinding(MethodBinding, ReferenceBinding) : \l# areParameterErasuresEqual(MethodBinding) : boolean\l# areParametersCompatibleWith(TypeBinding) : boolean\l# areParametersEqual(MethodBinding) : boolean\l# areTypeVariableErasuresEqual(MethodBinding) : boolean\l# asRawMethod(LookupEnvironment) : MethodBinding\l# canBeSeenBy(InvocationSite, Scope) : boolean\l# canBeSeenBy(PackageBinding) : boolean\l# canBeSeenBy(TypeBinding, InvocationSite, Scope) : boolean\l# collectMissingTypes(List) : List\l# computeSubstitutedMethod(MethodBinding, LookupEnvironment) : MethodBinding\l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# fillInDefaultNonNullness(AbstractMethodDeclaration) : \l# fillInDefaultNonNullness18(AbstractMethodDeclaration, LookupEnvironment) : \l# findOriginalInheritedMethod(MethodBinding) : MethodBinding\l# genericSignature() : char\l# getAccessFlags() : int\l# getAnnotations() : AnnotationBinding\l# getAnnotationTagBits() : long\l# getDefaultValue() : Object\l# getParameterAnnotations() : AnnotationBinding\l# getTypeVariable(char) : TypeVariableBinding\l# hasSubstitutedParameters() : boolean\l# hasSubstitutedReturnType() : boolean\l# isAbstract() : boolean\l# isBridge() : boolean\l# isConstructor() : boolean\l# isDefault() : boolean\l# isDefaultAbstract() : boolean\l# isDefaultMethod() : boolean\l# isDeprecated() : boolean\l# isFinal() : boolean\l# isImplementing() : boolean\l# isMain() : boolean\l# isNative() : boolean\l# isOverriding() : boolean\l# isPrivate() : boolean\l# isOrEnclosedByPrivateType() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isStrictfp() : boolean\l# isSynchronized() : boolean\l# isSynthetic() : boolean\l# isUsed() : boolean\l# isVarargs() : boolean\l# isPolymorphic() : boolean\l# isViewedAsDeprecated() : boolean\l# kind() : int\l# original() : MethodBinding\l# shallowOriginal() : MethodBinding\l# genericMethod() : MethodBinding\l# readableName() : char\l# setAnnotations(AnnotationBinding) : \l# setAnnotations(AnnotationBinding, AnnotationBinding, Object, LookupEnvironment) : \l# setDefaultValue(Object) : \l# setParameterAnnotations(AnnotationBinding) : \l# setSelector(char) : \l# shortReadableName() : char\l# signature() : char\l# signature(ClassFile) : char\l# sourceEnd() : int\l# sourceMethod() : AbstractMethodDeclaration\l# sourceLambda() : LambdaExpression\l# sourceStart() : int\l# tiebreakMethod() : MethodBinding\l# toString() : String\l# typeVariables() : TypeVariableBinding\l# hasNonNullDefaultFor(int, boolean) : boolean\l# redeclaresPublicObjectMethod(Scope) : boolean\l# isVoidMethod() : boolean\l}"
	 ]

	 MethodScope [
		 label = "{MethodScope|+ referenceContext : ReferenceContext\l+ isStatic : boolean\l+ isConstructorCall : boolean\l+ initializedField : FieldBinding\l+ lastVisibleFieldID : int\l+ analysisIndex : int\l+ isPropagatingInnerClassEmulation : boolean\l+ lastIndex : int\l+ definiteInits : long\l+ extraDefiniteInits : long\l+ extraSyntheticArguments : SyntheticArgumentBinding\l+ hasMissingSwitchDefault : boolean\l|# MethodScope(Scope, ReferenceContext, boolean) : \l# MethodScope(Scope, ReferenceContext, boolean, int) : \l# basicToString(int) : String\l# checkAndSetModifiersForConstructor(MethodBinding) : \l# checkAndSetModifiersForMethod(MethodBinding) : \l# checkUnusedParameters(MethodBinding) : \l# computeLocalVariablePositions(int, CodeStream) : \l# createMethod(AbstractMethodDeclaration) : MethodBinding\l# findField(TypeBinding, char, InvocationSite, boolean) : FieldBinding\l# isInsideConstructor() : boolean\l# isInsideInitializer() : boolean\l# isLambdaScope() : boolean\l# isInsideInitializerOrConstructor() : boolean\l# problemReporter() : ProblemReporter\l# recordInitializationStates(FlowInfo) : int\l# referenceMethod() : AbstractMethodDeclaration\l# referenceMethodBinding() : MethodBinding\l# referenceType() : TypeDeclaration\l# resolveTypeParameter(TypeParameter) : \l+ hasDefaultNullnessFor(int) : boolean\l}"
	 ]

	 MethodVerifier [
		 label = "{MethodVerifier|# type : SourceTypeBinding\l# inheritedMethods : HashtableOfObject\l# currentMethods : HashtableOfObject\l# checkMethods : null\l|# MethodVerifier(LookupEnvironment) : \l# areMethodsCompatible(MethodBinding, MethodBinding) : boolean\l# areMethodsCompatible(MethodBinding, MethodBinding, LookupEnvironment) : boolean\l# areReturnTypesCompatible(MethodBinding, MethodBinding) : boolean\l# areReturnTypesCompatible(MethodBinding, MethodBinding, LookupEnvironment) : boolean\l# canSkipInheritedMethods() : boolean\l# canSkipInheritedMethods(MethodBinding, MethodBinding) : boolean\l# checkAbstractMethod(MethodBinding) : \l# checkAgainstInheritedMethods(MethodBinding, MethodBinding, int, MethodBinding) : \l# reportRawReferences(MethodBinding, MethodBinding) : \l# checkConcreteInheritedMethod(MethodBinding, MethodBinding) : \l# checkExceptions(MethodBinding, MethodBinding) : \l# checkForBridgeMethod(MethodBinding, MethodBinding, MethodBinding) : \l# checkForMissingHashCodeMethod() : \l# checkForRedundantSuperinterfaces(ReferenceBinding, ReferenceBinding) : \l# checkInheritedMethods(MethodBinding, int, boolean, boolean) : \l# checkInheritedReturnTypes(MethodBinding, MethodBinding) : boolean\l# checkPackagePrivateAbstractMethod(MethodBinding) : \l# computeInheritedMethods() : \l# computeInheritedMethods(ReferenceBinding, ReferenceBinding) : \l# collectAllDistinctSuperInterfaces(ReferenceBinding, Set, List) : \l# canOverridingMethodDifferInErasure(MethodBinding, MethodBinding) : boolean\l# computeMethods() : \l# computeSubstituteMethod(MethodBinding, MethodBinding) : MethodBinding\l# computeSubstituteMethod(MethodBinding, MethodBinding, LookupEnvironment) : MethodBinding\l# couldMethodOverride(MethodBinding, MethodBinding) : boolean\l# doesMethodOverride(MethodBinding, MethodBinding) : boolean\l# doesMethodOverride(MethodBinding, MethodBinding, LookupEnvironment) : boolean\l# findSuperinterfaceCollisions(ReferenceBinding, ReferenceBinding) : SimpleSet\l# findBestInheritedAbstractOrDefaultMethod(MethodBinding, int) : MethodBinding\l# findOverriddenInheritedMethods(MethodBinding, int) : int\l# isAsVisible(MethodBinding, MethodBinding) : boolean\l# isInterfaceMethodImplemented(MethodBinding, MethodBinding, ReferenceBinding) : boolean\l# isMethodSubsignature(MethodBinding, MethodBinding) : boolean\l# isParameterSubsignature(MethodBinding, MethodBinding) : boolean\l# isParameterSubsignature(MethodBinding, MethodBinding, LookupEnvironment) : boolean\l# isSubstituteParameterSubsignature(MethodBinding, MethodBinding) : boolean\l# isSubstituteParameterSubsignature(MethodBinding, MethodBinding, LookupEnvironment) : boolean\l# hasGenericParameter(MethodBinding) : boolean\l# isSameClassOrSubclassOf(ReferenceBinding, ReferenceBinding) : boolean\l# mustImplementAbstractMethod(ReferenceBinding) : boolean\l# mustImplementAbstractMethods() : boolean\l# problemReporter() : ProblemReporter\l# problemReporter(MethodBinding) : ProblemReporter\l# reportIncompatibleReturnTypeError(MethodBinding, MethodBinding) : boolean\l# resolvedExceptionTypesFor(MethodBinding) : ReferenceBinding\l# verify() : \l# verify(SourceTypeBinding) : \l# toString() : String\l}"
	 ]

	 MethodVerifier15 [
		 label = "{MethodVerifier15||# MethodVerifier15(LookupEnvironment) : \l# canOverridingMethodDifferInErasure(MethodBinding, MethodBinding) : boolean\l# canSkipInheritedMethods() : boolean\l# canSkipInheritedMethods(MethodBinding, MethodBinding) : boolean\l# checkConcreteInheritedMethod(MethodBinding, MethodBinding) : \l# checkForBridgeMethod(MethodBinding, MethodBinding, MethodBinding) : \l# checkForNameClash(MethodBinding, MethodBinding) : \l# checkInheritedMethods(MethodBinding, MethodBinding) : \l# checkInheritedMethods(MethodBinding, int, boolean, boolean) : \l# checkInheritedDefaultMethods(MethodBinding, boolean, int) : boolean\l# checkInheritedReturnTypes(MethodBinding, MethodBinding) : boolean\l# checkAgainstInheritedMethods(MethodBinding, MethodBinding, int, MethodBinding) : \l# checkNullSpecInheritance(MethodBinding, AbstractMethodDeclaration, boolean, boolean, boolean, MethodBinding, MethodBinding, Scope, InheritedNonNullnessInfo) : \l# reportRawReferences() : \l# reportRawReferences(MethodBinding, MethodBinding) : \l# checkMethods() : \l# isSkippableOrOverridden(MethodBinding, MethodBinding, boolean, boolean, boolean, int) : boolean\l# findReplacedMethod(MethodBinding, MethodBinding) : MethodBinding\l# checkTypeVariableMethods(TypeParameter) : \l# detectInheritedNameClash(MethodBinding, MethodBinding) : boolean\l# detectNameClash(MethodBinding, MethodBinding, boolean) : boolean\l# doTypeVariablesClash(MethodBinding, MethodBinding) : boolean\l# findSuperinterfaceCollisions(ReferenceBinding, ReferenceBinding) : SimpleSet\l# isAcceptableReturnTypeOverride(MethodBinding, MethodBinding) : boolean\l# isInterfaceMethodImplemented(MethodBinding, MethodBinding, ReferenceBinding) : boolean\l# isMethodSubsignature(MethodBinding, MethodBinding) : boolean\l# isUnsafeReturnTypeOverride(MethodBinding, MethodBinding) : boolean\l# reportIncompatibleReturnTypeError(MethodBinding, MethodBinding) : boolean\l# verify() : \l}"
	 ]

	 MissingTypeBinding [
		 label = "{MissingTypeBinding||# MissingTypeBinding(PackageBinding, char, LookupEnvironment) : \l# clone(TypeBinding) : TypeBinding\l# collectMissingTypes(List) : List\l# problemId() : int\l# setMissingSuperclass(ReferenceBinding) : \l# setTypeAnnotations(AnnotationBinding, boolean) : \l# toString() : String\l}"
	 ]

	 MostSpecificExceptionMethodBinding [
		 label = "{MostSpecificExceptionMethodBinding|- originalMethod : MethodBinding\l|# MostSpecificExceptionMethodBinding(MethodBinding, ReferenceBinding) : \l# original() : MethodBinding\l}"
	 ]

	 NestedTypeBinding [
		 label = "{NestedTypeBinding|+ enclosingType : SourceTypeBinding\l+ enclosingInstances : SyntheticArgumentBinding\l- enclosingTypes : ReferenceBinding\l+ outerLocalVariables : SyntheticArgumentBinding\l- outerLocalVariablesSlotSize : int\l|# NestedTypeBinding(char, ClassScope, SourceTypeBinding) : \l# NestedTypeBinding(NestedTypeBinding) : \l# addSyntheticArgument(LocalVariableBinding) : SyntheticArgumentBinding\l# addSyntheticArgument(ReferenceBinding) : SyntheticArgumentBinding\l# addSyntheticArgumentAndField(LocalVariableBinding) : SyntheticArgumentBinding\l# addSyntheticArgumentAndField(ReferenceBinding) : SyntheticArgumentBinding\l# checkRedundantNullnessDefaultRecurse(ASTNode, Annotation, long, boolean) : \l# enclosingType() : ReferenceBinding\l# getEnclosingInstancesSlotSize() : int\l# getOuterLocalVariablesSlotSize() : int\l# getSyntheticArgument(LocalVariableBinding) : SyntheticArgumentBinding\l# getSyntheticArgument(ReferenceBinding, boolean, boolean) : SyntheticArgumentBinding\l# syntheticEnclosingInstances() : SyntheticArgumentBinding\l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# updateInnerEmulationDependents() : \l}"
	 ]

	 NullTypeBinding [
		 label = "{NullTypeBinding||# NullTypeBinding() : \l# clone(TypeBinding) : TypeBinding\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# unannotated() : TypeBinding\l}"
	 ]

	 PackageBinding [
		 label = "{PackageBinding|+ tagBits : long\l+ compoundName : char\l# parent : PackageBinding\l+ environment : LookupEnvironment\l# knownTypes : HashtableOfType\l# knownPackages : HashtableOfPackage\l# defaultNullness : int\l|# PackageBinding() : \l# PackageBinding(char, LookupEnvironment) : \l# PackageBinding(char, PackageBinding, LookupEnvironment) : \l# PackageBinding(LookupEnvironment) : \l# addNotFoundPackage(char) : \l# addNotFoundType(char) : \l# addPackage(PackageBinding) : \l# addType(ReferenceBinding) : \l# clearMissingTagBit() : \l# computeUniqueKey(boolean) : char\l# findPackage(char) : PackageBinding\l# getPackage(char) : PackageBinding\l# getPackage0(char) : PackageBinding\l# getType(char) : ReferenceBinding\l# getType0(char) : ReferenceBinding\l# getTypeOrPackage(char) : Binding\l# isViewedAsDeprecated() : boolean\l# kind() : int\l# problemId() : int\l# checkIfNullAnnotationPackage() : \l# isPackageOfQualifiedTypeName(char, char) : boolean\l# checkIfNullAnnotationType(ReferenceBinding) : \l# readableName() : char\l# toString() : String\l}"
	 ]

	 ParameterizedFieldBinding [
		 label = "{ParameterizedFieldBinding|+ originalField : FieldBinding\l|# ParameterizedFieldBinding(ParameterizedTypeBinding, FieldBinding) : \l# constant() : Constant\l# original() : FieldBinding\l# setConstant(Constant) : \l}"
	 ]

	 LingeringTypeVariableEliminator [
		 label = "{LingeringTypeVariableEliminator|+ typeArguments : TypeBinding\l# environment : LookupEnvironment\l+ inferredReturnType : boolean\l+ wasInferred : boolean\l+ isRaw : boolean\l- tiebreakMethod : MethodBinding\l+ inferredWithUncheckedConversion : boolean\l# variables : TypeVariableBinding\l# substitutes : TypeBinding\l# scope : Scope\l|# computeCompatibleMethod(MethodBinding, TypeBinding, Scope, InvocationSite) : MethodBinding\l# computeCompatibleMethod18(MethodBinding, TypeBinding, Scope, InvocationSite) : MethodBinding\l# boundCheck18(Scope, TypeBinding, InvocationSite) : MethodBinding\l# inferFromArgumentTypes(Scope, MethodBinding, TypeBinding, TypeBinding, InferenceContext) : ParameterizedGenericMethodBinding\l# resolveSubstituteConstraints(Scope, TypeVariableBinding, InferenceContext, boolean) : boolean\l# ParameterizedGenericMethodBinding(MethodBinding, RawTypeBinding, LookupEnvironment) : \l# ParameterizedGenericMethodBinding(MethodBinding, TypeBinding, LookupEnvironment, boolean, boolean) : \l# getErasure18_5_2(TypeBinding, LookupEnvironment, boolean) : TypeBinding\l# computeUniqueKey(boolean) : char\l# environment() : LookupEnvironment\l# hasSubstitutedParameters() : boolean\l# hasSubstitutedReturnType() : boolean\l# inferFromExpectedType(Scope, InferenceContext) : ParameterizedGenericMethodBinding\l# null() : \l# LingeringTypeVariableEliminator(TypeVariableBinding, TypeBinding, Scope) : \l# substitute(TypeVariableBinding) : TypeBinding\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# tiebreakMethod() : MethodBinding\l+ genericMethod() : MethodBinding\l}"
	 ]

	 ParameterizedMethodBinding [
		 label = "{ParameterizedMethodBinding|# originalMethod : MethodBinding\l|# ParameterizedMethodBinding(ParameterizedTypeBinding, MethodBinding) : \l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# ParameterizedMethodBinding(ReferenceBinding, MethodBinding, char, LookupEnvironment) : \l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# ParameterizedMethodBinding() : \l# instantiateGetClass(TypeBinding, MethodBinding, Scope) : ParameterizedMethodBinding\l# hasSubstitutedParameters() : boolean\l# hasSubstitutedReturnType() : boolean\l# original() : MethodBinding\l# shallowOriginal() : MethodBinding\l}"
	 ]

	 ParameterizedTypeBinding [
		 label = "{ParameterizedTypeBinding|# type : ReferenceBinding\l+ arguments : TypeBinding\l+ environment : LookupEnvironment\l+ genericTypeSignature : char\l+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l+ fields : FieldBinding\l+ memberTypes : ReferenceBinding\l+ methods : MethodBinding\l# enclosingType : ReferenceBinding\l|# ParameterizedTypeBinding(ReferenceBinding, TypeBinding, ReferenceBinding, LookupEnvironment) : \l# actualType() : ReferenceBinding\l# isParameterizedType() : boolean\l# boundCheck(Scope, TypeReference) : \l# canBeInstantiated() : boolean\l# capture(Scope, int, int) : ParameterizedTypeBinding\l# uncapture(Scope) : TypeBinding\l# collectMissingTypes(List) : List\l# collectSubstitutes(Scope, TypeBinding, InferenceContext, int) : \l# computeId() : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# createParameterizedMethod(MethodBinding) : ParameterizedMethodBinding\l# debugName() : String\l# annotatedDebugName() : String\l# enclosingType() : ReferenceBinding\l# environment() : LookupEnvironment\l# erasure() : TypeBinding\l# fieldCount() : int\l# fields() : FieldBinding\l# genericType() : ReferenceBinding\l# genericTypeSignature() : char\l# getAnnotationTagBits() : long\l# getEnclosingInstancesSlotSize() : int\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# getOuterLocalVariablesSlotSize() : int\l# hasMemberTypes() : boolean\l# hasTypeBit(int) : boolean\l# implementsMethod(MethodBinding) : boolean\l# initialize(ReferenceBinding, TypeBinding) : \l# initializeArguments() : \l# initializeForStaticImports() : \l# isBoundParameterizedType() : boolean\l# isEquivalentTo(TypeBinding) : boolean\l# isHierarchyConnected() : boolean\l# isProperType(boolean) : boolean\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# isRawSubstitution() : boolean\l# unannotated() : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l# kind() : int\l# memberTypes() : ReferenceBinding\l# mentionsAny(TypeBinding, int) : boolean\l# collectInferenceVariables(Set) : \l# methods() : MethodBinding\l# problemId() : int\l# qualifiedPackageName() : char\l# qualifiedSourceName() : char\l# readableName() : char\l# resolve() : ReferenceBinding\l# shortReadableName() : char\l# nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# nullAnnotatedReadableName(CompilerOptions) : char\l# nullAnnotatedShortReadableName(CompilerOptions) : char\l# signature() : char\l# sourceName() : char\l# substitute(TypeVariableBinding) : TypeBinding\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# toString() : String\l# typeVariables() : TypeVariableBinding\l# typeArguments() : TypeBinding\l# unResolvedFields() : FieldBinding\l# getSingleAbstractMethod(Scope, boolean) : MethodBinding\l# getSingleAbstractMethod(Scope, boolean, int, int) : MethodBinding\l# getNonWildcardParameterization(Scope) : TypeBinding\l+ updateTagBits() : long\l}"
	 ]

	 PolymorphicMethodBinding [
		 label = "{PolymorphicMethodBinding|# polymorphicMethod : MethodBinding\l|# PolymorphicMethodBinding(MethodBinding, TypeBinding) : \l# PolymorphicMethodBinding(MethodBinding, TypeBinding, TypeBinding) : \l# original() : MethodBinding\l# isPolymorphic() : boolean\l# matches(TypeBinding, TypeBinding) : boolean\l# isVarargs() : boolean\l}"
	 ]

	 PolyParameterizedGenericMethodBinding [
		 label = "{PolyParameterizedGenericMethodBinding|- wrappedBinding : ParameterizedGenericMethodBinding\l|# PolyParameterizedGenericMethodBinding(ParameterizedGenericMethodBinding) : \l# equals(Object) : boolean\l+ hashCode() : int\l}"
	 ]

	 PolyTypeBinding [
		 label = "{PolyTypeBinding|# expression : Expression\l# vanillaCompatibilty : boolean\l|# PolyTypeBinding(Expression) : \l# constantPoolName() : char\l# getPackage() : PackageBinding\l# isCompatibleWith(TypeBinding, Scope) : boolean\l+ isPotentiallyCompatibleWith(TypeBinding, Scope) : boolean\l+ isPolyType() : boolean\l+ isFunctionalType() : boolean\l# qualifiedSourceName() : char\l# sourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# sIsMoreSpecific(TypeBinding, TypeBinding, Scope) : boolean\l# toString() : String\l# kind() : int\l# computeBoxingType() : TypeBinding\l}"
	 ]

	 ProblemBinding [
		 label = "{ProblemBinding|+ name : char\l+ searchType : ReferenceBinding\l- problemId : int\l|# ProblemBinding(char, int) : \l# ProblemBinding(char, ReferenceBinding, int) : \l# ProblemBinding(char, int) : \l# ProblemBinding(char, ReferenceBinding, int) : \l# kind() : int\l# problemId() : int\l# readableName() : char\l}"
	 ]

	 ProblemFieldBinding [
		 label = "{ProblemFieldBinding|- problemId : int\l+ closestMatch : FieldBinding\l|# ProblemFieldBinding(ReferenceBinding, char, int) : \l# ProblemFieldBinding(FieldBinding, ReferenceBinding, char, int) : \l# problemId() : int\l}"
	 ]

	 ProblemMethodBinding [
		 label = "{ProblemMethodBinding|- problemReason : int\l+ closestMatch : MethodBinding\l+ inferenceContext : InferenceContext18\l|# ProblemMethodBinding(char, TypeBinding, int) : \l# ProblemMethodBinding(char, TypeBinding, ReferenceBinding, int) : \l# ProblemMethodBinding(MethodBinding, char, TypeBinding, int) : \l+ shallowOriginal() : MethodBinding\l# problemId() : int\l}"
	 ]

	 ProblemPackageBinding [
		 label = "{ProblemPackageBinding|- problemId : int\l|# ProblemPackageBinding(char, int) : \l# ProblemPackageBinding(char, int) : \l# problemId() : int\l}"
	 ]

	 ProblemReasons [
		 label = "{ProblemReasons||# NoError() : int\l# NotFound() : int\l# NotVisible() : int\l# Ambiguous() : int\l# InternalNameProvided() : int\l# InheritedNameHidesEnclosingName() : int\l# NonStaticReferenceInConstructorInvocation() : int\l# NonStaticReferenceInStaticContext() : int\l# ReceiverTypeNotVisible() : int\l# IllegalSuperTypeVariable() : int\l# ParameterBoundMismatch() : int\l# TypeParameterArityMismatch() : int\l# ParameterizedMethodTypeMismatch() : int\l# TypeArgumentsForRawGenericMethod() : int\l# InvalidTypeForStaticImport() : int\l# InvalidTypeForAutoManagedResource() : int\l# VarargsElementTypeNotVisible() : int\l# NoSuchSingleAbstractMethod() : int\l# NotAWellFormedParameterizedType() : int\l# IntersectionHasMultipleFunctionalInterfaces() : int\l# NonStaticOrAlienTypeReceiver() : int\l# AttemptToBypassDirectSuper() : int\l# DefectiveContainerAnnotationType() : int\l# InvocationTypeInferenceFailure() : int\l# ApplicableMethodOverriddenByInapplicable() : int\l# ContradictoryNullAnnotations() : int\l# NoSuchMethodOnArray() : int\l# InferredApplicableMethodInapplicable() : int\l# NoProperEnclosingInstance() : int\l}"
	 ]

	 ProblemReferenceBinding [
		 label = "{ProblemReferenceBinding|# closestMatch : ReferenceBinding\l- problemReason : int\l|# ProblemReferenceBinding(char, ReferenceBinding, int) : \l# clone(TypeBinding) : TypeBinding\l# closestMatch() : TypeBinding\l# closestReferenceMatch() : ReferenceBinding\l# hasTypeBit(int) : boolean\l# problemId() : int\l# problemReasonString(int) : String\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# shortReadableName() : char\l# sourceName() : char\l# toString() : String\l}"
	 ]

	 RawTypeBinding [
		 label = "{RawTypeBinding||# RawTypeBinding(ReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# computeUniqueKey(boolean) : char\l# clone(TypeBinding) : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l# createParameterizedMethod(MethodBinding) : ParameterizedMethodBinding\l# isParameterizedType() : boolean\l# kind() : int\l# debugName() : String\l# annotatedDebugName() : String\l# genericTypeSignature() : char\l# isEquivalentTo(TypeBinding) : boolean\l# isProvablyDistinct(TypeBinding) : boolean\l# isProperType(boolean) : boolean\l# initializeArguments() : \l+ capture(Scope, int, int) : ParameterizedTypeBinding\l+ uncapture(Scope) : TypeBinding\l+ substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# getSingleAbstractMethod(Scope, boolean) : MethodBinding\l# mentionsAny(TypeBinding, int) : boolean\l# readableName() : char\l# shortReadableName() : char\l}"
	 ]

	 ReductionResult [
		 label = "{ReductionResult|# TRUE : ConstraintTypeFormula\l# FALSE : ConstraintTypeFormula\l# COMPATIBLE : int\l# SUBTYPE : int\l# SUPERTYPE : int\l# SAME : int\l# TYPE_ARGUMENT_CONTAINED : int\l# CAPTURE : int\l# EXCEPTIONS_CONTAINED : int\l# POTENTIALLY_COMPATIBLE : int\l# right : TypeBinding\l# relation : int\l|# reduce(InferenceContext18) : Object\l# toString() : String\l# reduce(InferenceContext18) : Object\l# toString() : String\l# relationToString(int) : String\l}"
	 ]

	 ReferenceBinding [
		 label = "{ReferenceBinding|+ compoundName : char\l+ sourceName : char\l+ modifiers : int\l+ fPackage : PackageBinding\l# fileName : char\l# constantPoolName : char\l# signature : char\l- compatibleCache : SimpleLookupTable\l# typeBits : int\l# singleAbstractMethod : MethodBinding\l+ LUB_GENERIC : ReferenceBinding\l- FIELD_COMPARATOR : Comparator\l- METHOD_COMPARATOR : Comparator\l# samProblemBinding : ProblemMethodBinding\l|# null() : \l# hasTypeBit(int) : boolean\l# compare(FieldBinding, FieldBinding) : int\l# compare(MethodBinding, MethodBinding) : int\l# ReferenceBinding(ReferenceBinding) : \l# ReferenceBinding() : \l# binarySearch(char, FieldBinding) : FieldBinding\l# binarySearch(char, MethodBinding) : long\l# compare(char, char, int, int) : int\l# sortFields(FieldBinding, int, int) : \l# sortMethods(MethodBinding, int, int) : \l# availableFields() : FieldBinding\l# availableMethods() : MethodBinding\l# canBeInstantiated() : boolean\l# canBeSeenBy(PackageBinding) : boolean\l# canBeSeenBy(ReferenceBinding, ReferenceBinding) : boolean\l# canBeSeenBy(Scope) : boolean\l# computeGenericTypeSignature(TypeVariableBinding) : char\l# computeId() : \l# computeId(LookupEnvironment) : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# debugName() : String\l# depth() : int\l# detectAnnotationCycle() : boolean\l# enclosingTypeAt(int) : ReferenceBinding\l# enumConstantCount() : int\l# fieldCount() : int\l# fields() : FieldBinding\l# getAccessFlags() : int\l# getAnnotations() : AnnotationBinding\l# getAnnotationTagBits() : long\l# getEnclosingInstancesSlotSize() : int\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getFileName() : char\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# getMethods(char, int) : MethodBinding\l# getOuterLocalVariablesSlotSize() : int\l# getPackage() : PackageBinding\l# getTypeVariable(char) : TypeVariableBinding\l# hashCode() : int\l# hasIncompatibleSuperType(ReferenceBinding) : boolean\l# hasMemberTypes() : boolean\l# hasNonNullDefaultFor(int, boolean) : boolean\l# getNullDefault() : int\l# acceptsNonNullDefault() : boolean\l# hasRestrictedAccess() : boolean\l# hasNullBit(int) : boolean\l# implementsInterface(ReferenceBinding, boolean) : boolean\l# implementsMethod(MethodBinding) : boolean\l# isAbstract() : boolean\l# isAnnotationType() : boolean\l# isBinaryBinding() : boolean\l# isClass() : boolean\l# isProperType(boolean) : boolean\l# isCompatibleWith(TypeBinding, Scope) : boolean\l# isCompatibleWith0(TypeBinding, Scope) : boolean\l# isSubtypeOf(TypeBinding) : boolean\l# isSubTypeOfRTL(TypeBinding) : boolean\l# isDefault() : boolean\l# isDeprecated() : boolean\l# isEnum() : boolean\l# isFinal() : boolean\l# isHierarchyBeingConnected() : boolean\l# isHierarchyBeingActivelyConnected() : boolean\l# isHierarchyConnected() : boolean\l# isInterface() : boolean\l# isFunctionalInterface(Scope) : boolean\l# isPrivate() : boolean\l# isOrEnclosedByPrivateType() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isStrictfp() : boolean\l# isSuperclassOf(ReferenceBinding) : boolean\l# isThrowable() : boolean\l# isUncheckedException(boolean) : boolean\l# isUsed() : boolean\l# isViewedAsDeprecated() : boolean\l# memberTypes() : ReferenceBinding\l# methods() : MethodBinding\l# outermostEnclosingType() : ReferenceBinding\l# qualifiedSourceName() : char\l# readableName() : char\l# appendNullAnnotation(StringBuffer, CompilerOptions) : \l# retrieveAnnotationHolder(Binding, boolean) : AnnotationHolder\l# retrieveAnnotations(Binding) : AnnotationBinding\l# setAnnotations(AnnotationBinding) : \l# setContainerAnnotationType(ReferenceBinding) : \l# tagAsHavingDefectiveContainerType() : \l# nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# nullAnnotatedReadableName(CompilerOptions) : char\l# nullAnnotatedShortReadableName(CompilerOptions) : char\l# shortReadableName() : char\l# signature() : char\l# sourceName() : char\l# storeAnnotationHolder(Binding, AnnotationHolder) : \l# storeAnnotations(Binding, AnnotationBinding) : \l# storedAnnotations(boolean) : SimpleLookupTable\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# unResolvedMethods() : MethodBinding\l# unResolvedFields() : FieldBinding\l# applyCloseableClassWhitelists() : int\l# applyCloseableInterfaceWhitelists() : int\l# getInterfaceAbstractContracts(Scope) : MethodBinding\l# getSingleAbstractMethod(Scope, boolean) : MethodBinding\l# isConsistentIntersection(TypeBinding) : boolean\l}"
	 ]

	 MethodClashException [
		 label = "{MethodClashException|+ BLOCK_SCOPE : int\l+ CLASS_SCOPE : int\l+ COMPILATION_UNIT_SCOPE : int\l+ METHOD_SCOPE : int\l+ NOT_COMPATIBLE : int\l+ COMPATIBLE : int\l+ AUTOBOX_COMPATIBLE : int\l+ VARARGS_COMPATIBLE : int\l+ EQUAL_OR_MORE_SPECIFIC : int\l+ NOT_RELATED : int\l+ MORE_GENERIC : int\l+ kind : int\l+ parent : Scope\l- defaultSubstitutor : Substitutor\l- serialVersionUID : long\l+ problemReporter : ProblemReporter\l+ hasDefaultNullnessFor : boolean\l|# Scope(int, Scope) : \l# compareTypes(TypeBinding, TypeBinding) : int\l# convertEliminatingTypeVariables(TypeBinding, ReferenceBinding, int, Set) : TypeBinding\l# getBaseType(char) : TypeBinding\l# greaterLowerBound(ReferenceBinding) : ReferenceBinding\l# greaterLowerBound(TypeBinding, Scope, LookupEnvironment) : TypeBinding\l# substitute(Substitution, ReferenceBinding) : ReferenceBinding\l# substitute(Substitution, TypeBinding) : TypeBinding\l# substitute(Substitution, TypeBinding) : TypeBinding\l# null() : \l# substitute(Substitution, ReferenceBinding) : ReferenceBinding\l# substitute(Substitution, TypeBinding) : TypeBinding\l# isMemberTypeOfRaw(TypeBinding, ReferenceBinding) : boolean\l# substitute(Substitution, TypeBinding) : TypeBinding\l# boxing(TypeBinding) : TypeBinding\l# classScope() : ClassScope\l# compilationUnitScope() : CompilationUnitScope\l# isLambdaScope() : boolean\l# isLambdaSubscope() : boolean\l# compilerOptions() : CompilerOptions\l# computeCompatibleMethod(MethodBinding, TypeBinding, InvocationSite) : MethodBinding\l# computeCompatibleMethod(MethodBinding, TypeBinding, InvocationSite, boolean) : MethodBinding\l# connectTypeVariables(TypeParameter, boolean) : boolean\l# createArrayType(TypeBinding, int) : ArrayBinding\l# createArrayType(TypeBinding, int, AnnotationBinding) : ArrayBinding\l# createTypeVariables(TypeParameter, Binding) : TypeVariableBinding\l# resolveTypeParameter(TypeParameter) : \l# enclosingClassScope() : ClassScope\l# enclosingMethodScope() : MethodScope\l# enclosingLambdaScope() : MethodScope\l# enclosingReceiverType() : ReferenceBinding\l# enclosingReferenceContext() : ReferenceContext\l# enclosingSourceType() : SourceTypeBinding\l# environment() : LookupEnvironment\l# findDefaultAbstractMethod(ReferenceBinding, char, TypeBinding, InvocationSite, ReferenceBinding, ObjectVector, MethodBinding) : MethodBinding\l# findDirectMemberType(char, ReferenceBinding) : ReferenceBinding\l# findExactMethod(ReferenceBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findField(TypeBinding, char, InvocationSite, boolean) : FieldBinding\l# findField(TypeBinding, char, InvocationSite, boolean, boolean) : FieldBinding\l# findMemberType(char, ReferenceBinding) : ReferenceBinding\l# findMethod(ReferenceBinding, char, TypeBinding, InvocationSite, boolean) : MethodBinding\l# findMethod0(ReferenceBinding, char, TypeBinding, InvocationSite, boolean) : MethodBinding\l# findMethodForArray(ArrayBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findMethodInSuperInterfaces(ReferenceBinding, char, ObjectVector, List, InvocationSite) : \l# findType(char, PackageBinding, PackageBinding) : ReferenceBinding\l# findVariable(char) : LocalVariableBinding\l# getBinding(char, int, InvocationSite, boolean) : Binding\l# null() : \l# getExactMethod(TypeBinding, TypeBinding, char, InvocationSite, MethodBinding) : MethodBinding\l# getExactMethod(TypeBinding, char, InvocationSite) : MethodBinding\l# getExactConstructor(TypeBinding, InvocationSite) : MethodBinding\l# getConstructor(ReferenceBinding, TypeBinding, InvocationSite) : MethodBinding\l# getConstructor0(ReferenceBinding, TypeBinding, InvocationSite) : MethodBinding\l# getCurrentPackage() : PackageBinding\l# getDeclarationModifiers() : int\l# getField(TypeBinding, char, InvocationSite) : FieldBinding\l# getImplicitMethod(char, TypeBinding, InvocationSite) : MethodBinding\l# getJavaIoSerializable() : ReferenceBinding\l# getJavaLangAnnotationAnnotation() : ReferenceBinding\l# getJavaLangAssertionError() : ReferenceBinding\l# getJavaLangClass() : ReferenceBinding\l# getJavaLangCloneable() : ReferenceBinding\l# getJavaLangEnum() : ReferenceBinding\l# getJavaLangInvokeLambdaMetafactory() : ReferenceBinding\l# getJavaLangInvokeSerializedLambda() : ReferenceBinding\l# getJavaLangInvokeMethodHandlesLookup() : ReferenceBinding\l# getJavaLangIterable() : ReferenceBinding\l# getJavaLangObject() : ReferenceBinding\l# getJavaLangString() : ReferenceBinding\l# getJavaLangThrowable() : ReferenceBinding\l# getJavaLangIllegalArgumentException() : ReferenceBinding\l# getJavaUtilIterator() : ReferenceBinding\l# getMemberType(char, ReferenceBinding) : ReferenceBinding\l# getMethod(TypeBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# getPackage(char) : Binding\l# getOnlyPackage(char) : Binding\l# getType(char) : TypeBinding\l# getType(char, PackageBinding) : TypeBinding\l# getType(char, int) : TypeBinding\l# getTypeOrPackage(char, int, boolean) : Binding\l# getTypeOrPackage(char) : Binding\l# hasErasedCandidatesCollisions(TypeBinding, TypeBinding, Map, ReferenceBinding, ASTNode) : boolean\l# innermostSwitchCase() : CaseStatement\l# isAcceptableMethod(MethodBinding, MethodBinding) : boolean\l# isBoxingCompatibleWith(TypeBinding, TypeBinding) : boolean\l# isDefinedInField(FieldBinding) : boolean\l# isDefinedInMethod(MethodBinding) : boolean\l# isDefinedInSameUnit(ReferenceBinding) : boolean\l# isDefinedInType(ReferenceBinding) : boolean\l# isInsideCase(CaseStatement) : boolean\l# isInsideDeprecatedCode() : boolean\l# isOverriddenMethodGeneric(MethodBinding) : boolean\l# isSubtypeOfRawType(TypeBinding) : boolean\l# leastContainingInvocation(TypeBinding, Object, ArrayList) : TypeBinding\l# leastContainingTypeArgument(TypeBinding, TypeBinding, ReferenceBinding, int, ArrayList) : TypeBinding\l# lowerUpperBound(TypeBinding) : TypeBinding\l# lowerUpperBound(TypeBinding, ArrayList) : TypeBinding\l# methodScope() : MethodScope\l# namedMethodScope() : MethodScope\l# minimalErasedCandidates(TypeBinding, Map) : TypeBinding\l# mostSpecificClassMethodBinding(MethodBinding, int, InvocationSite) : MethodBinding\l# mostSpecificInterfaceMethodBinding(MethodBinding, int, InvocationSite) : MethodBinding\l# mostSpecificMethodBinding(MethodBinding, int, TypeBinding, InvocationSite, ReferenceBinding) : MethodBinding\l# genericTypeArguments() : TypeBinding\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# setActualReceiverType(ReferenceBinding) : \l# setDepth(int) : \l# setFieldIndex(int) : \l# sourceStart() : int\l# sourceEnd() : int\l# invocationTargetType() : TypeBinding\l# receiverIsImplicitThis() : boolean\l# freshInferenceContext(Scope) : InferenceContext18\l# getExpressionContext() : ExpressionContext\l# isQualifiedSuper() : boolean\l# checkingPotentialCompatibility() : boolean\l# acceptPotentiallyCompatibleMethods(MethodBinding) : \l# getFilteredExceptions(MethodBinding) : ReferenceBinding\l# outerMostClassScope() : ClassScope\l# outerMostMethodScope() : MethodScope\l# parameterCompatibilityLevel(MethodBinding, TypeBinding, InvocationSite) : int\l# parameterCompatibilityLevel(MethodBinding, TypeBinding) : int\l# parameterCompatibilityLevel(MethodBinding, TypeBinding, boolean) : int\l# parameterCompatibilityLevel(TypeBinding, TypeBinding) : int\l# parameterCompatibilityLevel(TypeBinding, TypeBinding, LookupEnvironment, boolean) : int\l# referenceCompilationUnit() : CompilationUnitDeclaration\l# referenceContext() : ReferenceContext\l# originalReferenceContext() : ReferenceContext\l# deferCheck(Runnable) : boolean\l# deferBoundCheck(TypeReference) : \l# startIndex() : int\l# getStaticFactory(ParameterizedTypeBinding, ReferenceBinding, TypeBinding, InvocationSite) : MethodBinding\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l# substitute(TypeVariableBinding) : TypeBinding\l# validateNullAnnotation(long, TypeReference, Annotation, int) : boolean\l# typeAnnotationsResolutionScope(Scope) : BlockScope\l# tagAsAccessingEnclosingInstanceStateOf(ReferenceBinding, boolean) : \l}"
	 ]

	 SignatureWrapper [
		 label = "{SignatureWrapper|+ signature : char\l+ start : int\l+ end : int\l+ bracket : int\l- use15specifics : boolean\l- useExternalAnnotations : boolean\l|# SignatureWrapper(char, boolean) : \l# SignatureWrapper(char, boolean, boolean) : \l# SignatureWrapper(char) : \l# atEnd() : boolean\l# computeEnd() : int\l# skipAngleContents(int) : int\l# nextWord() : char\l# nextName() : char\l# peekFullType() : char\l# getFrom(int) : char\l# tail() : char\l# toString() : String\l}"
	 ]

	 SourceTypeBinding [
		 label = "{SourceTypeBinding|+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l- fields : FieldBinding\l- methods : MethodBinding\l+ memberTypes : ReferenceBinding\l+ typeVariables : TypeVariableBinding\l+ scope : ClassScope\l# prototype : SourceTypeBinding\l# environment : LookupEnvironment\l- METHOD_EMUL : int\l- FIELD_EMUL : int\l- CLASS_LITERAL_EMUL : int\l- MAX_SYNTHETICS : int\l# synthetics : HashMap\l# genericReferenceTypeSignature : char\l- storedAnnotations : SimpleLookupTable\l+ defaultNullness : int\l- nullnessDefaultInitialized : int\l- lambdaOrdinal : int\l- containerAnnotationType : ReferenceBinding\l|# SourceTypeBinding(char, PackageBinding, ClassScope) : \l# SourceTypeBinding(SourceTypeBinding) : \l# addDefaultAbstractMethods() : \l# addSyntheticFieldForInnerclass(LocalVariableBinding) : FieldBinding\l# addSyntheticFieldForInnerclass(ReferenceBinding) : FieldBinding\l# addSyntheticFieldForClassLiteral(TypeBinding, BlockScope) : FieldBinding\l# addSyntheticFieldForAssert(BlockScope) : FieldBinding\l# addSyntheticFieldForEnumValues() : FieldBinding\l# addSyntheticMethod(FieldBinding, boolean, boolean) : SyntheticMethodBinding\l# addSyntheticEnumMethod(char) : SyntheticMethodBinding\l# addSyntheticFieldForSwitchEnum(char, String) : SyntheticFieldBinding\l# addSyntheticMethodForSwitchEnum(TypeBinding) : SyntheticMethodBinding\l# addSyntheticMethodForEnumInitialization(int, int) : SyntheticMethodBinding\l# addSyntheticMethod(LambdaExpression) : SyntheticMethodBinding\l# addSyntheticMethod(MethodBinding, boolean) : SyntheticMethodBinding\l# addSyntheticArrayMethod(ArrayBinding, int) : SyntheticMethodBinding\l# addSyntheticFactoryMethod(MethodBinding, MethodBinding, TypeBinding) : SyntheticMethodBinding\l# addSyntheticBridgeMethod(MethodBinding, MethodBinding) : SyntheticMethodBinding\l# addSyntheticBridgeMethod(MethodBinding) : SyntheticMethodBinding\l# areFieldsInitialized() : boolean\l# areMethodsInitialized() : boolean\l# kind() : int\l# clone(TypeBinding) : TypeBinding\l# computeUniqueKey(boolean) : char\l# checkAnnotationsInType() : \l# faultInTypesForFieldsAndMethods() : \l# internalFaultInTypeForFieldsAndMethods() : \l# fields() : FieldBinding\l# genericTypeSignature() : char\l# genericSignature() : char\l# getAnnotationTagBits() : long\l# getDefaultAbstractMethods() : MethodBinding\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMethods(char) : MethodBinding\l# getSyntheticField(LocalVariableBinding) : FieldBinding\l# getSyntheticField(ReferenceBinding, boolean) : FieldBinding\l# getSyntheticBridgeMethod(MethodBinding) : SyntheticMethodBinding\l# hasTypeBit(int) : boolean\l# initializeDeprecatedAnnotationTagBits() : \l# initializeForStaticImports() : \l# getNullDefault() : int\l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# isHierarchyConnected() : boolean\l# isRepeatableAnnotationType() : boolean\l# isTaggedRepeatable() : boolean\l# memberTypes() : ReferenceBinding\l# hasMemberTypes() : boolean\l# methods() : MethodBinding\l# prototype() : TypeBinding\l# isPrototype() : boolean\l# containerAnnotationType() : ReferenceBinding\l# resolveTypeFor(FieldBinding) : FieldBinding\l# resolveTypesFor(MethodBinding) : MethodBinding\l# rejectTypeAnnotatedVoidMethod(AbstractMethodDeclaration) : \l# createArgumentBindings(MethodBinding, CompilerOptions) : \l# evaluateNullAnnotations() : \l# maybeMarkTypeParametersNonNull() : \l# checkRedundantNullnessDefaultRecurse(ASTNode, Annotation, long, boolean) : \l# checkRedundantNullnessDefaultOne(ASTNode, Annotation, long, boolean) : boolean\l# hasNonNullDefaultFor(int, boolean) : boolean\l# retrieveAnnotationHolder(Binding, boolean) : AnnotationHolder\l# setContainerAnnotationType(ReferenceBinding) : \l# tagAsHavingDefectiveContainerType() : \l# setFields(FieldBinding) : FieldBinding\l# setMemberTypes(ReferenceBinding) : ReferenceBinding\l# setMethods(MethodBinding) : MethodBinding\l# setSuperClass(ReferenceBinding) : ReferenceBinding\l# setSuperInterfaces(ReferenceBinding) : ReferenceBinding\l# setTypeVariables(TypeVariableBinding) : TypeVariableBinding\l# sourceEnd() : int\l# sourceStart() : int\l# storedAnnotations(boolean) : SimpleLookupTable\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# syntheticMethods() : SyntheticMethodBinding\l# syntheticFields() : FieldBinding\l# toString() : String\l# typeVariables() : TypeVariableBinding\l# verifyMethods(MethodVerifier) : \l# unannotated() : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l# unResolvedFields() : FieldBinding\l# tagIndirectlyAccessibleMembers() : \l}"
	 ]

	 SourceTypeCollisionException [
		 label = "{SourceTypeCollisionException|- serialVersionUID : long\l+ newAnnotationProcessorUnits : ICompilationUnit\l|}"
	 ]

	 Substitution [
		 label = "{Substitution||# substitute(TypeVariableBinding) : TypeBinding\l# environment() : LookupEnvironment\l# isRawSubstitution() : boolean\l}"
	 ]

	 SyntheticArgumentBinding [
		 label = "{SyntheticArgumentBinding|+ actualOuterLocalVariable : LocalVariableBinding\l+ matchingField : FieldBinding\l|# null() : \l# SyntheticArgumentBinding(LocalVariableBinding) : \l# SyntheticArgumentBinding(ReferenceBinding) : \l}"
	 ]

	 SyntheticFactoryMethodBinding [
		 label = "{SyntheticFactoryMethodBinding|- staticFactoryFor : MethodBinding\l- environment : LookupEnvironment\l- enclosingType : ReferenceBinding\l|# SyntheticFactoryMethodBinding(MethodBinding, LookupEnvironment, ReferenceBinding) : \l# getConstructor() : MethodBinding\l# applyTypeArgumentsOnConstructor(TypeBinding, TypeBinding) : ParameterizedMethodBinding\l}"
	 ]

	 SyntheticFieldBinding [
		 label = "{SyntheticFieldBinding|+ index : int\l|# SyntheticFieldBinding(char, TypeBinding, int, ReferenceBinding, Constant, int) : \l}"
	 ]

	 SyntheticMethodBinding [
		 label = "{SyntheticMethodBinding|+ targetReadField : FieldBinding\l+ targetWriteField : FieldBinding\l+ targetMethod : MethodBinding\l+ targetEnumType : TypeBinding\l+ lambda : LambdaExpression\l+ purpose : int\l+ startIndex : int\l+ endIndex : int\l+ FieldReadAccess : int\l+ FieldWriteAccess : int\l+ SuperFieldReadAccess : int\l+ SuperFieldWriteAccess : int\l+ MethodAccess : int\l+ ConstructorAccess : int\l+ SuperMethodAccess : int\l+ BridgeMethod : int\l+ EnumValues : int\l+ EnumValueOf : int\l+ SwitchTable : int\l+ TooManyEnumsConstants : int\l+ LambdaMethod : int\l+ ArrayConstructor : int\l+ ArrayClone : int\l+ FactoryMethod : int\l+ DeserializeLambda : int\l+ sourceStart : int\l+ index : int\l+ fakePaddedParameters : int\l|# SyntheticMethodBinding(FieldBinding, boolean, boolean, ReferenceBinding) : \l# SyntheticMethodBinding(FieldBinding, ReferenceBinding, TypeBinding, char) : \l# SyntheticMethodBinding(MethodBinding, boolean, ReferenceBinding) : \l# SyntheticMethodBinding(MethodBinding, MethodBinding, SourceTypeBinding) : \l# SyntheticMethodBinding(SourceTypeBinding, char) : \l# SyntheticMethodBinding(SourceTypeBinding) : \l# SyntheticMethodBinding(SourceTypeBinding, int, int) : \l# SyntheticMethodBinding(MethodBinding, SourceTypeBinding) : \l# SyntheticMethodBinding(int, ArrayBinding, char, SourceTypeBinding) : \l# SyntheticMethodBinding(LambdaExpression, char, SourceTypeBinding) : \l# SyntheticMethodBinding(MethodBinding, MethodBinding, char, TypeBinding, SourceTypeBinding) : \l# initializeConstructorAccessor(MethodBinding) : \l# initializeMethodAccessor(MethodBinding, boolean, ReferenceBinding) : \l# isConstructorRelated() : boolean\l# sourceLambda() : LambdaExpression\l# markNonNull(LookupEnvironment) : \l# markNonNull(MethodBinding, int, LookupEnvironment) : \l}"
	 ]

	 TagBits [
		 label = "{TagBits||# IsArrayType() : long\l# IsBaseType() : long\l# IsNestedType() : long\l# IsMemberType() : long\l# ContainsNestedTypeReferences() : long\l# MemberTypeMask() : long\l# IsLocalType() : long\l# LocalTypeMask() : long\l# IsAnonymousType() : long\l# AnonymousTypeMask() : long\l# IsBinaryBinding() : long\l# HasMissingType() : long\l# HasUncheckedTypeArgumentForBoundCheck() : long\l# NotInitialized() : long\l# ForcedToBeRawType() : long\l# HasUnresolvedArguments() : long\l# BeginHierarchyCheck() : long\l# EndHierarchyCheck() : long\l# PauseHierarchyCheck() : long\l# HasParameterAnnotations() : long\l# KnowsDefaultAbstractMethods() : long\l# IsArgument() : long\l# ClearPrivateModifier() : long\l# IsEffectivelyFinal() : long\l# MultiCatchParameter() : long\l# IsResource() : long\l# IsNullnessKnown() : long\l# AreFieldsSorted() : long\l# AreFieldsComplete() : long\l# AreMethodsSorted() : long\l# AreMethodsComplete() : long\l# HasNoMemberTypes() : long\l# HierarchyHasProblems() : long\l# TypeVariablesAreConnected() : long\l# PassedBoundCheck() : long\l# IsBoundParameterizedType() : long\l# HasAnnotatedVariants() : long\l# HasUnresolvedTypeVariables() : long\l# HasUnresolvedSuperclass() : long\l# HasUnresolvedSuperinterfaces() : long\l# HasUnresolvedEnclosingType() : long\l# HasUnresolvedMemberTypes() : long\l# HasTypeVariable() : long\l# HasDirectWildcard() : long\l# BeginAnnotationCheck() : long\l# EndAnnotationCheck() : long\l# AnnotationResolved() : long\l# DeprecatedAnnotationResolved() : long\l# AnnotationTarget() : long\l# AnnotationForType() : long\l# AnnotationForField() : long\l# AnnotationForMethod() : long\l# AnnotationForParameter() : long\l# AnnotationForConstructor() : long\l# AnnotationForLocalVariable() : long\l# AnnotationForAnnotationType() : long\l# AnnotationForPackage() : long\l# AnnotationForTypeUse() : long\l# AnnotationForTypeParameter() : long\l# SE7AnnotationTargetMASK() : long\l# AnnotationTargetMASK() : long\l# AnnotationSourceRetention() : long\l# AnnotationClassRetention() : long\l# AnnotationRuntimeRetention() : long\l# AnnotationRetentionMASK() : long\l# AnnotationDeprecated() : long\l# AnnotationDocumented() : long\l# AnnotationInherited() : long\l# AnnotationOverride() : long\l# AnnotationSuppressWarnings() : long\l# AnnotationSafeVarargs() : long\l# AnnotationPolymorphicSignature() : long\l# AnnotationNullable() : long\l# AnnotationNonNull() : long\l# AnnotationNonNullByDefault() : long\l# AnnotationNullUnspecifiedByDefault() : long\l# AnnotationFunctionalInterface() : long\l# AnnotationRepeatable() : long\l# AllStandardAnnotationsMask() : long\l# AnnotationNullMASK() : long\l# HasNullTypeAnnotation() : long\l# HasTypeAnnotations() : long\l# DefaultValueResolved() : long\l# HasNonPrivateConstructor() : long\l# HasCapturedWildcard() : long\l}"
	 ]

	 TypeBinding [
		 label = "{TypeBinding|+ id : int\l+ tagBits : long\l# typeAnnotations : AnnotationBinding\l+ TYPE_USE_BINDING : ReferenceBinding\l+ INT : BaseTypeBinding\l+ BYTE : BaseTypeBinding\l+ SHORT : BaseTypeBinding\l+ CHAR : BaseTypeBinding\l+ LONG : BaseTypeBinding\l+ FLOAT : BaseTypeBinding\l+ DOUBLE : BaseTypeBinding\l+ BOOLEAN : BaseTypeBinding\l+ NULL : NullTypeBinding\l+ VOID : VoidTypeBinding\l+ constantPoolName : char\l+ getPackage : PackageBinding\l+ isCompatibleWith : boolean\l+ qualifiedSourceName : char\l+ sourceName : char\l|# null() : \l# kind() : int\l# hasTypeBit(int) : boolean\l# TypeBinding() : \l# TypeBinding(TypeBinding) : \l# wellKnownType(Scope, int) : TypeBinding\l# actualType() : ReferenceBinding\l# additionalBounds() : TypeBinding\l# annotatedDebugName() : String\l# bound() : TypeBinding\l# boundKind() : int\l# rank() : int\l# containerAnnotationType() : ReferenceBinding\l# canBeInstantiated() : boolean\l# capture(Scope, int, int) : TypeBinding\l# uncapture(Scope) : TypeBinding\l# closestMatch() : TypeBinding\l# collectMissingTypes(List) : List\l# collectSubstitutes(Scope, TypeBinding, InferenceContext, int) : \l# clone(TypeBinding) : TypeBinding\l# debugName() : String\l# dimensions() : int\l# depth() : int\l# enclosingMethod() : MethodBinding\l# enclosingType() : ReferenceBinding\l# erasure() : TypeBinding\l# findSuperTypeOriginatingFrom(int, boolean) : ReferenceBinding\l# findSuperTypeOriginatingFrom(TypeBinding) : TypeBinding\l# genericCast(TypeBinding) : TypeBinding\l# genericTypeSignature() : char\l# getErasureCompatibleType(TypeBinding) : TypeBinding\l# initializeForStaticImports() : \l# isAnonymousType() : boolean\l# isArrayType() : boolean\l# isBaseType() : boolean\l# isPrimitiveType() : boolean\l# isPrimitiveOrBoxedPrimitiveType() : boolean\l# isBoxedPrimitiveType() : boolean\l# isBoundParameterizedType() : boolean\l# isCapture() : boolean\l# isClass() : boolean\l# isCompatibleWith(TypeBinding, TypeBinding, Scope) : boolean\l# isPotentiallyCompatibleWith(TypeBinding, Scope) : boolean\l# isBoxingCompatibleWith(TypeBinding, Scope) : boolean\l# isEnum() : boolean\l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# isHierarchyInconsistent() : boolean\l# isInterface() : boolean\l# isFunctionalInterface(Scope) : boolean\l# isIntersectionType() : boolean\l# isLocalType() : boolean\l# isMemberType() : boolean\l# isNestedType() : boolean\l# isNumericType() : boolean\l# isParameterizedType() : boolean\l# hasNullTypeAnnotations() : boolean\l# acceptsNonNullDefault() : boolean\l# isIntersectionType18() : boolean\l# isParameterizedTypeWithActualArguments() : boolean\l# isParameterizedWithOwnVariables() : boolean\l# isProperType(boolean) : boolean\l# isPolyType() : boolean\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# isProvableDistinctSubType(TypeBinding) : boolean\l# isProvablyDistinct(TypeBinding) : boolean\l# isProvablyDistinctTypeArgument(TypeBinding, ParameterizedTypeBinding, int) : boolean\l# isRepeatableAnnotationType() : boolean\l# isRawType() : boolean\l# isReifiable() : boolean\l# isStatic() : boolean\l# isThrowable() : boolean\l# isTypeArgumentContainedBy(TypeBinding) : boolean\l# isTypeVariable() : boolean\l# isUnboundWildcard() : boolean\l# isUncheckedException(boolean) : boolean\l# isWildcard() : boolean\l# kind() : int\l# leafComponentType() : TypeBinding\l# needsUncheckedConversion(TypeBinding) : boolean\l# nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# original() : TypeBinding\l# unannotated() : TypeBinding\l# withoutToplevelNullAnnotation() : TypeBinding\l# hasTypeAnnotations() : boolean\l# qualifiedPackageName() : char\l# getTypeAnnotations() : AnnotationBinding\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# signableName() : char\l# signature() : char\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# typeArguments() : TypeBinding\l# typeVariables() : TypeVariableBinding\l# getSingleAbstractMethod(Scope, boolean) : MethodBinding\l# getIntersectingTypes() : ReferenceBinding\l# equalsEquals(TypeBinding, TypeBinding) : boolean\l# notEquals(TypeBinding, TypeBinding) : boolean\l# prototype() : TypeBinding\l# isUnresolvedType() : boolean\l# mentionsAny(TypeBinding, int) : boolean\l# collectInferenceVariables(Set) : \l# hasTypeBit(int) : boolean\l# sIsMoreSpecific(TypeBinding, TypeBinding, Scope) : boolean\l# isSubtypeOf(TypeBinding) : boolean\l# getMethods(char) : MethodBinding\l# canBeSeenBy(Scope) : boolean\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# enterRecursiveFunction() : boolean\l# exitRecursiveFunction() : \l# isFunctionalType() : boolean\l# updateTagBits() : long\l}"
	 ]

	 TypeBindingVisitor [
		 label = "{TypeBindingVisitor|- visitedCache : SimpleLookupTable\l|# visit(BaseTypeBinding) : boolean\l# visit(ArrayBinding) : boolean\l# visit(TypeVariableBinding) : boolean\l# visit(ReferenceBinding) : boolean\l# visit(WildcardBinding) : boolean\l# visit(ParameterizedTypeBinding) : boolean\l# visit(IntersectionTypeBinding18) : boolean\l# visit(RawTypeBinding) : boolean\l# visit(PolyTypeBinding) : boolean\l# visit(TypeBindingVisitor, ReferenceBinding) : \l# visit(TypeBindingVisitor, TypeBinding) : \l# visit(TypeBindingVisitor, TypeBinding) : \l}"
	 ]

	 TypeBound [
		 label = "{TypeBound|# left : InferenceVariable\l# isSoft : boolean\l# nullHints : long\l|# createBoundOrDependency(InferenceSubstitution, TypeBinding, InferenceVariable) : TypeBound\l# TypeBound(InferenceVariable, TypeBinding, int) : \l# TypeBound(InferenceVariable, TypeBinding, int, boolean) : \l# safeType(TypeBinding) : TypeBinding\l# isBound() : boolean\l# hashCode() : int\l# equals(Object) : boolean\l# toString() : String\l}"
	 ]

	 CloseMethodRecord [
		 label = "{CloseMethodRecord|+ typeName : char\l+ selector : char\l+ numCloseableArgs : int\l|# JAVA() : char\l# JAVAX() : char\l# LANG() : char\l# IO() : char\l# UTIL() : char\l# ZIP() : char\l# ANNOTATION() : char\l# REFLECT() : char\l# LENGTH() : char\l# CLONE() : char\l# EQUALS() : char\l# GETCLASS() : char\l# HASHCODE() : char\l# OBJECT() : char\l# MAIN() : char\l# SERIALVERSIONUID() : char\l# SERIALPERSISTENTFIELDS() : char\l# READRESOLVE() : char\l# WRITEREPLACE() : char\l# READOBJECT() : char\l# WRITEOBJECT() : char\l# CharArray_JAVA_LANG_OBJECT() : char\l# CharArray_JAVA_LANG_ENUM() : char\l# CharArray_JAVA_LANG_ANNOTATION_ANNOTATION() : char\l# CharArray_JAVA_IO_OBJECTINPUTSTREAM() : char\l# CharArray_JAVA_IO_OBJECTOUTPUTSTREAM() : char\l# CharArray_JAVA_IO_OBJECTSTREAMFIELD() : char\l# ANONYM_PREFIX() : char\l# ANONYM_SUFFIX() : char\l# WILDCARD_NAME() : char\l# WILDCARD_SUPER() : char\l# WILDCARD_EXTENDS() : char\l# WILDCARD_MINUS() : char\l# WILDCARD_STAR() : char\l# WILDCARD_PLUS() : char\l# WILDCARD_CAPTURE_NAME_PREFIX() : char\l# WILDCARD_CAPTURE_NAME_SUFFIX() : char\l# WILDCARD_CAPTURE_SIGNABLE_NAME_SUFFIX() : char\l# WILDCARD_CAPTURE() : char\l# CAPTURE18() : char\l# BYTE() : char\l# SHORT() : char\l# INT() : char\l# LONG() : char\l# FLOAT() : char\l# DOUBLE() : char\l# CHAR() : char\l# BOOLEAN() : char\l# NULL() : char\l# VOID() : char\l# VALUE() : char\l# VALUES() : char\l# VALUEOF() : char\l# UPPER_SOURCE() : char\l# UPPER_CLASS() : char\l# UPPER_RUNTIME() : char\l# ANNOTATION_PREFIX() : char\l# ANNOTATION_SUFFIX() : char\l# TYPE() : char\l# UPPER_FIELD() : char\l# UPPER_METHOD() : char\l# UPPER_PARAMETER() : char\l# UPPER_CONSTRUCTOR() : char\l# UPPER_LOCAL_VARIABLE() : char\l# UPPER_ANNOTATION_TYPE() : char\l# UPPER_PACKAGE() : char\l# ANONYMOUS_METHOD() : char\l# DESERIALIZE_LAMBDA() : char\l# LAMBDA_TYPE() : char\l# TYPE_USE_TARGET() : char\l# TYPE_PARAMETER_TARGET() : char\l# ORG() : char\l# ECLIPSE() : char\l# CORE() : char\l# RUNTIME() : char\l# APACHE() : char\l# COMMONS() : char\l# LANG3() : char\l# COM() : char\l# GOOGLE() : char\l# JDT() : char\l# INTERNAL() : char\l# COMPILER() : char\l# LOOKUP() : char\l# TYPEBINDING() : char\l# DOM() : char\l# ITYPEBINDING() : char\l# SPRING() : char\l# JAVA_LANG() : char\l# JAVA_IO() : char\l# JAVA_LANG_ANNOTATION_ANNOTATION() : char\l# JAVA_LANG_ASSERTIONERROR() : char\l# JAVA_LANG_CLASS() : char\l# JAVA_LANG_CLASSNOTFOUNDEXCEPTION() : char\l# JAVA_LANG_CLONEABLE() : char\l# JAVA_LANG_ENUM() : char\l# JAVA_LANG_EXCEPTION() : char\l# JAVA_LANG_ERROR() : char\l# JAVA_LANG_ILLEGALARGUMENTEXCEPTION() : char\l# JAVA_LANG_ITERABLE() : char\l# JAVA_LANG_NOCLASSDEFERROR() : char\l# JAVA_LANG_OBJECT() : char\l# JAVA_LANG_STRING() : char\l# JAVA_LANG_STRINGBUFFER() : char\l# JAVA_LANG_STRINGBUILDER() : char\l# JAVA_LANG_SYSTEM() : char\l# JAVA_LANG_RUNTIMEEXCEPTION() : char\l# JAVA_LANG_THROWABLE() : char\l# JAVA_LANG_REFLECT_CONSTRUCTOR() : char\l# JAVA_IO_PRINTSTREAM() : char\l# JAVA_IO_SERIALIZABLE() : char\l# JAVA_LANG_BYTE() : char\l# JAVA_LANG_SHORT() : char\l# JAVA_LANG_CHARACTER() : char\l# JAVA_LANG_INTEGER() : char\l# JAVA_LANG_LONG() : char\l# JAVA_LANG_FLOAT() : char\l# JAVA_LANG_DOUBLE() : char\l# JAVA_LANG_BOOLEAN() : char\l# JAVA_LANG_VOID() : char\l# JAVA_UTIL_COLLECTION() : char\l# JAVA_UTIL_ITERATOR() : char\l# JAVA_UTIL_OBJECTS() : char\l# JAVA_LANG_DEPRECATED() : char\l# JAVA_LANG_ANNOTATION_DOCUMENTED() : char\l# JAVA_LANG_ANNOTATION_INHERITED() : char\l# JAVA_LANG_ANNOTATION_REPEATABLE() : char\l# JAVA_LANG_OVERRIDE() : char\l# JAVA_LANG_FUNCTIONAL_INTERFACE() : char\l# JAVA_LANG_ANNOTATION_RETENTION() : char\l# JAVA_LANG_SUPPRESSWARNINGS() : char\l# JAVA_LANG_ANNOTATION_TARGET() : char\l# JAVA_LANG_ANNOTATION_RETENTIONPOLICY() : char\l# JAVA_LANG_ANNOTATION_ELEMENTTYPE() : char\l# JAVA_LANG_REFLECT_FIELD() : char\l# JAVA_LANG_REFLECT_METHOD() : char\l# JAVA_IO_CLOSEABLE() : char\l# JAVA_IO_OBJECTSTREAMEXCEPTION() : char\l# JAVA_IO_EXTERNALIZABLE() : char\l# JAVA_IO_IOEXCEPTION() : char\l# JAVA_IO_OBJECTOUTPUTSTREAM() : char\l# JAVA_IO_OBJECTINPUTSTREAM() : char\l# JAVA_NIO_FILE_FILES() : char\l# JAVAX_RMI_CORBA_STUB() : char\l# JAVA_LANG_SAFEVARARGS() : char\l# INVOKE() : char\l# JAVA_LANG_INVOKE_METHODHANDLE_POLYMORPHICSIGNATURE() : char\l# JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE() : char\l# JAVA_LANG_INVOKE_LAMBDAMETAFACTORY() : char\l# JAVA_LANG_INVOKE_SERIALIZEDLAMBDA() : char\l# JAVA_LANG_INVOKE_METHODHANDLES() : char\l# JAVA_LANG_AUTOCLOSEABLE() : char\l# CLOSE() : char\l# null() : \l# CloseMethodRecord(char, char, int) : \l# GUAVA_CLOSEABLES() : char\l# APACHE_IOUTILS() : char\l# APACHE_DBUTILS() : char\l# CLOSE_QUIETLY() : char\l# closeMethods() : CloseMethodRecord\l# JAVA_IO_WRAPPER_CLOSEABLES() : char\l# JAVA_UTIL_ZIP_WRAPPER_CLOSEABLES() : char\l# OTHER_WRAPPER_CLOSEABLES() : char\l# JAVA_IO_RESOURCE_FREE_CLOSEABLES() : char\l# RESOURCE_FREE_CLOSEABLE_STREAM() : char\l# ASSERT_CLASS() : char\l# ORG_ECLIPSE_CORE_RUNTIME_ASSERT() : char\l# IS_NOTNULL() : char\l# JUNIT() : char\l# FRAMEWORK() : char\l# JUNIT_FRAMEWORK_ASSERT() : char\l# ORG_JUNIT_ASSERT() : char\l# ASSERT_NULL() : char\l# ASSERT_NOTNULL() : char\l# ASSERT_TRUE() : char\l# ASSERT_FALSE() : char\l# VALIDATE_CLASS() : char\l# ORG_APACHE_COMMONS_LANG_VALIDATE() : char\l# ORG_APACHE_COMMONS_LANG3_VALIDATE() : char\l# ORG_ECLIPSE_JDT_INTERNAL_COMPILER_LOOKUP_TYPEBINDING() : char\l# ORG_ECLIPSE_JDT_CORE_DOM_ITYPEBINDING() : char\l# IS_TRUE() : char\l# NOT_NULL() : char\l# COM_GOOGLE_COMMON_BASE_PRECONDITIONS() : char\l# CHECK_NOT_NULL() : char\l# CHECK_ARGUMENT() : char\l# CHECK_STATE() : char\l# REQUIRE_NON_NULL() : char\l# INJECT_PACKAGE() : char\l# INJECT_TYPE() : char\l# JAVAX_ANNOTATION_INJECT_INJECT() : char\l# COM_GOOGLE_INJECT_INJECT() : char\l# OPTIONAL() : char\l# AUTOWIRED() : char\l# BEANS() : char\l# FACTORY() : char\l# ORG_SPRING_AUTOWIRED() : char\l# REQUIRED() : char\l# CONSTRAINT_EQUAL() : int\l# CONSTRAINT_EXTENDS() : int\l# CONSTRAINT_SUPER() : int\l# null() : \l# isOKbyJLS() : boolean\l# betterOf(BoundCheckStatus) : BoundCheckStatus\l# INIT() : char\l# CLINIT() : char\l# SYNTHETIC_SWITCH_ENUM_TABLE() : char\l# SYNTHETIC_ENUM_VALUES() : char\l# SYNTHETIC_ASSERT_DISABLED() : char\l# SYNTHETIC_CLASS() : char\l# SYNTHETIC_OUTER_LOCAL_PREFIX() : char\l# SYNTHETIC_ENCLOSING_INSTANCE_PREFIX() : char\l# SYNTHETIC_ACCESS_METHOD_PREFIX() : char\l# SYNTHETIC_ENUM_CONSTANT_INITIALIZATION_METHOD_PREFIX() : char\l# SYNTHETIC_STATIC_FACTORY() : char\l# DEFAULT_LOCATION__PARAMETER() : char\l# DEFAULT_LOCATION__RETURN_TYPE() : char\l# DEFAULT_LOCATION__FIELD() : char\l# DEFAULT_LOCATION__TYPE_ARGUMENT() : char\l# DEFAULT_LOCATION__TYPE_PARAMETER() : char\l# DEFAULT_LOCATION__TYPE_BOUND() : char\l# DEFAULT_LOCATION__ARRAY_CONTENTS() : char\l# PACKAGE_INFO_NAME() : char\l}"
	 ]

	 TypeIds [
		 label = "{TypeIds||# T_undefined() : int\l# T_JavaLangObject() : int\l# T_char() : int\l# T_byte() : int\l# T_short() : int\l# T_boolean() : int\l# T_void() : int\l# T_long() : int\l# T_double() : int\l# T_float() : int\l# T_int() : int\l# T_JavaLangString() : int\l# T_null() : int\l# T_JavaLangClass() : int\l# T_JavaLangStringBuffer() : int\l# T_JavaLangSystem() : int\l# T_JavaLangError() : int\l# T_JavaLangReflectConstructor() : int\l# T_JavaLangThrowable() : int\l# T_JavaLangNoClassDefError() : int\l# T_JavaLangClassNotFoundException() : int\l# T_JavaLangRuntimeException() : int\l# T_JavaLangException() : int\l# T_JavaLangByte() : int\l# T_JavaLangShort() : int\l# T_JavaLangCharacter() : int\l# T_JavaLangInteger() : int\l# T_JavaLangLong() : int\l# T_JavaLangFloat() : int\l# T_JavaLangDouble() : int\l# T_JavaLangBoolean() : int\l# T_JavaLangVoid() : int\l# T_JavaLangAssertionError() : int\l# T_JavaLangCloneable() : int\l# T_JavaIoSerializable() : int\l# T_JavaLangIterable() : int\l# T_JavaUtilIterator() : int\l# T_JavaLangStringBuilder() : int\l# T_JavaLangEnum() : int\l# T_JavaLangIllegalArgumentException() : int\l# T_JavaLangAnnotationAnnotation() : int\l# T_JavaLangDeprecated() : int\l# T_JavaLangAnnotationDocumented() : int\l# T_JavaLangAnnotationInherited() : int\l# T_JavaLangOverride() : int\l# T_JavaLangAnnotationRetention() : int\l# T_JavaLangSuppressWarnings() : int\l# T_JavaLangAnnotationTarget() : int\l# T_JavaLangAnnotationRetentionPolicy() : int\l# T_JavaLangAnnotationElementType() : int\l# T_JavaIoPrintStream() : int\l# T_JavaLangReflectField() : int\l# T_JavaLangReflectMethod() : int\l# T_JavaIoExternalizable() : int\l# T_JavaIoObjectStreamException() : int\l# T_JavaIoException() : int\l# T_JavaUtilCollection() : int\l# T_JavaLangSafeVarargs() : int\l# T_JavaLangInvokeMethodHandlePolymorphicSignature() : int\l# T_JavaLangAutoCloseable() : int\l# T_OrgEclipseCoreRuntimeAssert() : int\l# T_JunitFrameworkAssert() : int\l# T_OrgJunitAssert() : int\l# T_OrgApacheCommonsLangValidate() : int\l# T_OrgApacheCommonsLang3Validate() : int\l# T_ComGoogleCommonBasePreconditions() : int\l# T_JavaUtilObjects() : int\l# T_JavaLangFunctionalInterface() : int\l# T_JavaxInjectInject() : int\l# T_ComGoogleInjectInject() : int\l# T_OrgSpringframeworkBeansFactoryAnnotationAutowired() : int\l# T_JavaLangAnnotationRepeatable() : int\l# T_LastWellKnownTypeId() : int\l# NoId() : int\l# IMPLICIT_CONVERSION_MASK() : int\l# COMPILE_TYPE_MASK() : int\l# Boolean2Int() : int\l# Boolean2String() : int\l# Boolean2Boolean() : int\l# Byte2Byte() : int\l# Byte2Short() : int\l# Byte2Char() : int\l# Byte2Int() : int\l# Byte2Long() : int\l# Byte2Float() : int\l# Byte2Double() : int\l# Byte2String() : int\l# Short2Byte() : int\l# Short2Short() : int\l# Short2Char() : int\l# Short2Int() : int\l# Short2Long() : int\l# Short2Float() : int\l# Short2Double() : int\l# Short2String() : int\l# Char2Byte() : int\l# Char2Short() : int\l# Char2Char() : int\l# Char2Int() : int\l# Char2Long() : int\l# Char2Float() : int\l# Char2Double() : int\l# Char2String() : int\l# Int2Byte() : int\l# Int2Short() : int\l# Int2Char() : int\l# Int2Int() : int\l# Int2Long() : int\l# Int2Float() : int\l# Int2Double() : int\l# Int2String() : int\l# Long2Byte() : int\l# Long2Short() : int\l# Long2Char() : int\l# Long2Int() : int\l# Long2Long() : int\l# Long2Float() : int\l# Long2Double() : int\l# Long2String() : int\l# Float2Byte() : int\l# Float2Short() : int\l# Float2Char() : int\l# Float2Int() : int\l# Float2Long() : int\l# Float2Float() : int\l# Float2Double() : int\l# Float2String() : int\l# Double2Byte() : int\l# Double2Short() : int\l# Double2Char() : int\l# Double2Int() : int\l# Double2Long() : int\l# Double2Float() : int\l# Double2Double() : int\l# Double2String() : int\l# String2String() : int\l# Object2String() : int\l# Null2Null() : int\l# Null2String() : int\l# Object2Object() : int\l# Object2byte() : int\l# Object2short() : int\l# Object2char() : int\l# Object2int() : int\l# Object2long() : int\l# Object2float() : int\l# Object2double() : int\l# Object2boolean() : int\l# BOXING() : int\l# UNBOXING() : int\l# BitUninitialized() : int\l# BitAutoCloseable() : int\l# BitCloseable() : int\l# BitWrapperCloseable() : int\l# BitResourceFreeCloseable() : int\l# BitUninternedType() : int\l# BitNonNullAnnotation() : int\l# BitNullableAnnotation() : int\l# BitNonNullByDefaultAnnotation() : int\l# InheritableBits() : int\l}"
	 ]

	 InternalParameterizedTypeBinding [
		 label = "{InternalParameterizedTypeBinding|# hashedParameterizedTypes : HashMap\l- typeid : int\l- types : TypeBinding\l# parameterizedTypes : HashedParameterizedTypes\l- annotationTypes : SimpleLookupTable\l# environment : LookupEnvironment\l|# null() : \l# null() : \l# InternalParameterizedTypeBinding(ReferenceBinding, TypeBinding, ReferenceBinding, LookupEnvironment) : \l# equals(Object) : boolean\l# hashCode() : int\l# get(ReferenceBinding, TypeBinding, ReferenceBinding, AnnotationBinding) : ParameterizedTypeBinding\l# put(ReferenceBinding, TypeBinding, ReferenceBinding, ParameterizedTypeBinding) : \l# TypeSystem(LookupEnvironment) : \l# getUnannotatedType(TypeBinding) : TypeBinding\l# forceRegisterAsDerived(TypeBinding) : \l# getAnnotatedTypes(TypeBinding) : TypeBinding\l# getArrayType(TypeBinding, int) : ArrayBinding\l# getArrayType(TypeBinding, int, AnnotationBinding) : ArrayBinding\l# getMemberType(ReferenceBinding, ReferenceBinding) : ReferenceBinding\l# getParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding) : ParameterizedTypeBinding\l# getParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding, AnnotationBinding) : ParameterizedTypeBinding\l# getRawType(ReferenceBinding, ReferenceBinding) : RawTypeBinding\l# getRawType(ReferenceBinding, ReferenceBinding, AnnotationBinding) : RawTypeBinding\l# getWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int) : WildcardBinding\l# getCapturedWildcard(WildcardBinding, ReferenceBinding, int, int, ASTNode, int) : CaptureBinding\l# getWildcard(ReferenceBinding, int, TypeBinding, TypeBinding, int, AnnotationBinding) : WildcardBinding\l# getAnnotatedType(TypeBinding, AnnotationBinding) : TypeBinding\l# getDerivedTypes(TypeBinding) : TypeBinding\l# cacheDerivedType(TypeBinding, TypeBinding) : TypeBinding\l# cacheDerivedType(TypeBinding, TypeBinding, TypeBinding) : TypeBinding\l# getAnnotationType(ReferenceBinding, boolean) : AnnotationBinding\l# isAnnotatedTypeSystem() : boolean\l# reset() : \l# updateCaches(UnresolvedReferenceBinding, ReferenceBinding) : \l# getIntersectionType18(ReferenceBinding) : TypeBinding\l# fixTypeVariableDeclaringElement(TypeVariableBinding, Binding) : \l}"
	 ]

	 TypeVariableBinding [
		 label = "{TypeVariableBinding|+ declaringElement : Binding\l+ rank : int\l+ firstBound : TypeBinding\l+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l+ genericTypeSignature : char\l# environment : LookupEnvironment\l# inRecursiveFunction : boolean\l|# TypeVariableBinding(char, Binding, int, LookupEnvironment) : \l# TypeVariableBinding(char, LookupEnvironment) : \l# TypeVariableBinding(TypeVariableBinding) : \l# boundCheck(Substitution, TypeBinding, Scope, ASTNode) : TypeConstants\l# internalBoundCheck(Substitution, TypeBinding, Scope, ASTNode) : TypeConstants\l# denotesRelevantSuperClass(TypeBinding) : boolean\l# boundsCount() : int\l# canBeInstantiated() : boolean\l# collectSubstitutes(Scope, TypeBinding, InferenceContext, int) : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# annotatedDebugName() : String\l# debugName() : String\l# erasure() : TypeBinding\l# genericSignature() : char\l# genericTypeSignature() : char\l# getTypeBounds(InferenceVariable, InferenceSubstitution) : TypeBound\l# hasOnlyRawBounds() : boolean\l# hasTypeBit(int) : boolean\l# isErasureBoundTo(TypeBinding) : boolean\l# isHierarchyConnected() : boolean\l# isInterchangeableWith(TypeVariableBinding, Substitution) : boolean\l+ isSubtypeOf(TypeBinding) : boolean\l+ enterRecursiveFunction() : boolean\l+ exitRecursiveFunction() : \l# isProperType(boolean) : boolean\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# isTypeVariable() : boolean\l# kind() : int\l# mentionsAny(TypeBinding, int) : boolean\l# collectInferenceVariables(Set) : \l# otherUpperBounds() : TypeBinding\l# readableName() : char\l# resolve() : ReferenceBinding\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# shortReadableName() : char\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# toString() : String\l+ nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# appendNullAnnotation(StringBuffer, CompilerOptions) : \l# unannotated() : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l# upperBound() : TypeBinding\l# evaluateNullAnnotations(Scope, TypeParameter) : \l# nullMismatchOnBound(TypeParameter, TypeBinding, long, long, Scope) : TypeBinding\l# findBound(TypeBinding, TypeParameter) : TypeReference\l# setFirstBound(TypeBinding) : TypeBinding\l# setSuperClass(ReferenceBinding) : ReferenceBinding\l# setSuperInterfaces(ReferenceBinding) : ReferenceBinding\l# getDerivedTypesForDeferredInitialization() : TypeBinding\l# combineTypeAnnotations(TypeBinding) : TypeBinding\l# hasRelevantTypeUseNullAnnotations() : boolean\l# acceptsNonNullDefault() : boolean\l+ updateTagBits() : long\l}"
	 ]

	 UnresolvedAnnotationBinding [
		 label = "{UnresolvedAnnotationBinding|- env : LookupEnvironment\l- typeUnresolved : boolean\l|# UnresolvedAnnotationBinding(ReferenceBinding, ElementValuePair, LookupEnvironment) : \l# resolve() : \l# getAnnotationType() : ReferenceBinding\l# getElementValuePairs() : ElementValuePair\l}"
	 ]

	 UnresolvedReferenceBinding [
		 label = "{UnresolvedReferenceBinding|# resolvedType : ReferenceBinding\l# wrappers : TypeBinding\l# prototype : UnresolvedReferenceBinding\l|# UnresolvedReferenceBinding(char, PackageBinding) : \l# UnresolvedReferenceBinding(UnresolvedReferenceBinding) : \l# clone(TypeBinding) : TypeBinding\l# addWrapper(TypeBinding, LookupEnvironment) : \l# isUnresolvedType() : boolean\l# debugName() : String\l# depth() : int\l# hasTypeBit(int) : boolean\l# prototype() : TypeBinding\l# resolve(LookupEnvironment, boolean) : ReferenceBinding\l# setResolvedType(ReferenceBinding, LookupEnvironment) : \l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# toString() : String\l}"
	 ]

	 VariableBinding [
		 label = "{VariableBinding|+ modifiers : int\l+ type : TypeBinding\l+ name : char\l# constant : Constant\l+ id : int\l+ tagBits : long\l+ getAnnotations : AnnotationBinding\l|# VariableBinding(char, TypeBinding, int, Constant) : \l# constant() : Constant\l# constant(Scope) : Constant\l# isBlankFinal() : boolean\l# isFinal() : boolean\l# isEffectivelyFinal() : boolean\l# isNonNull() : boolean\l# isNullable() : boolean\l# readableName() : char\l# setConstant(Constant) : \l# toString() : String\l}"
	 ]

	 VoidTypeBinding [
		 label = "{VoidTypeBinding||# VoidTypeBinding() : \l# clone(TypeBinding) : TypeBinding\l# setTypeAnnotations(AnnotationBinding, boolean) : \l# unannotated() : TypeBinding\l}"
	 ]

	 WildcardBinding [
		 label = "{WildcardBinding|+ genericType : ReferenceBinding\l+ rank : int\l+ bound : TypeBinding\l+ otherBounds : TypeBinding\l# genericSignature : char\l+ boundKind : int\l# superclass : ReferenceBinding\l# superInterfaces : ReferenceBinding\l# typeVariable : TypeVariableBinding\l# environment : LookupEnvironment\l# inRecursiveFunction : boolean\l|# WildcardBinding(ReferenceBinding, int, TypeBinding, TypeBinding, int, LookupEnvironment) : \l# bound() : TypeBinding\l# boundKind() : int\l# allBounds() : TypeBinding\l# actualType() : ReferenceBinding\l# additionalBounds() : TypeBinding\l# kind() : int\l# boundCheck(TypeBinding) : boolean\l# canBeInstantiated() : boolean\l# collectMissingTypes(List) : List\l# collectSubstitutes(Scope, TypeBinding, InferenceContext, int) : \l# computeUniqueKey(boolean) : char\l# constantPoolName() : char\l# clone(TypeBinding) : TypeBinding\l# annotatedDebugName() : String\l# debugName() : String\l# erasure() : TypeBinding\l# genericTypeSignature() : char\l# hashCode() : int\l# hasTypeBit(int) : boolean\l# initialize(ReferenceBinding, TypeBinding, TypeBinding) : \l# isSuperclassOf(ReferenceBinding) : boolean\l# isIntersectionType() : boolean\l+ getIntersectingTypes() : ReferenceBinding\l# isHierarchyConnected() : boolean\l+ enterRecursiveFunction() : boolean\l+ exitRecursiveFunction() : \l# isProperType(boolean) : boolean\l# substituteInferenceVariable(InferenceVariable, TypeBinding) : TypeBinding\l# isUnboundWildcard() : boolean\l# isWildcard() : boolean\l# rank() : int\l# readableName() : char\l# nullAnnotatedReadableName(CompilerOptions, boolean) : char\l# resolve() : ReferenceBinding\l# shortReadableName() : char\l# signature() : char\l# sourceName() : char\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# toString() : String\l# typeVariable() : TypeVariableBinding\l# unannotated() : TypeBinding\l+ withoutToplevelNullAnnotation() : TypeBinding\l+ uncapture(Scope) : TypeBinding\l+ collectInferenceVariables(Set) : \l+ mentionsAny(TypeBinding, int) : boolean\l# acceptsNonNullDefault() : boolean\l+ updateTagBits() : long\l}"
	 ]

	 ArrayBinding [
		 label = "{ArrayBinding|+ ArrayLength : FieldBinding\l+ leafComponentType : TypeBinding\l+ dimensions : int\l# environment : LookupEnvironment\l# constantPoolName : char\l# genericTypeSignature : char\l|# ArrayBinding(TypeBinding, int, LookupEnvironment) : \l# collectSubstitutes(TypeBinding, Map) : \l# constantPoolName() : char\l# debugName() : String\l# dimensions() : int\l# elementsType() : TypeBinding\l# erasure() : TypeBinding\l# environment() : LookupEnvironment\l# genericTypeSignature() : char\l# getPackage() : PackageBinding\l# hashCode() : int\l# isCompatibleWith(TypeBinding) : boolean\l# isEquivalentTo(TypeBinding) : boolean\l# leafComponentType() : TypeBinding\l# problemId() : int\l# qualifiedSourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# sourceName() : char\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# toString() : String\l}"
	 ]

	 BaseTypeBinding [
		 label = "{BaseTypeBinding|+ simpleName : char\l- constantPoolName : char\l|# BaseTypeBinding(int, char, char) : \l# constantPoolName() : char\l# getPackage() : PackageBinding\l# isCompatibleWith(TypeBinding) : boolean\l# isNarrowing(int, int) : boolean\l# isWidening(int, int) : boolean\l# qualifiedSourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# sourceName() : char\l# toString() : String\l}"
	 ]

	 BaseTypes [
		 label = "{BaseTypes||# IntBinding() : BaseTypeBinding\l# ByteBinding() : BaseTypeBinding\l# ShortBinding() : BaseTypeBinding\l# CharBinding() : BaseTypeBinding\l# LongBinding() : BaseTypeBinding\l# FloatBinding() : BaseTypeBinding\l# DoubleBinding() : BaseTypeBinding\l# BooleanBinding() : BaseTypeBinding\l# NullBinding() : BaseTypeBinding\l# VoidBinding() : BaseTypeBinding\l}"
	 ]

	 BinaryTypeBinding [
		 label = "{BinaryTypeBinding|- superclass : ReferenceBinding\l- enclosingType : ReferenceBinding\l- superInterfaces : ReferenceBinding\l- fields : FieldBinding\l- methods : MethodBinding\l- memberTypes : ReferenceBinding\l# typeVariables : TypeVariableBinding\l- environment : LookupEnvironment\l|# resolveType(ReferenceBinding, LookupEnvironment, boolean) : ReferenceBinding\l# resolveType(TypeBinding, LookupEnvironment, ParameterizedTypeBinding, int) : TypeBinding\l# resolveUnresolvedType(ReferenceBinding, LookupEnvironment, boolean) : ReferenceBinding\l# BinaryTypeBinding(PackageBinding, IBinaryType, LookupEnvironment) : \l# availableFields() : FieldBinding\l# availableMethods() : MethodBinding\l# cachePartsFrom(IBinaryType, boolean) : \l# createFields(IBinaryField, boolean) : \l# createMethod(IBinaryMethod, boolean) : MethodBinding\l# createMethods(IBinaryMethod, boolean) : \l# createTypeVariable(SignatureWrapper, int) : TypeVariableBinding\l# enclosingType() : ReferenceBinding\l# fields() : FieldBinding\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# hasMemberTypes() : boolean\l# getTypeVariable(char) : TypeVariableBinding\l# initializeTypeVariable(TypeVariableBinding, TypeVariableBinding, SignatureWrapper) : \l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# memberTypes() : ReferenceBinding\l# methods() : MethodBinding\l# resolveTypeFor(FieldBinding) : FieldBinding\l# resolveTypesFor(MethodBinding) : MethodBinding\l# resolveTypesFor(TypeVariableBinding) : TypeVariableBinding\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# typeVariables() : TypeVariableBinding\l# toString() : String\l# unResolvedMethods() : MethodBinding\l}"
	 ]

	 Binding [
		 label = "{Binding|+ bindingType : int\l+ readableName : char\l|# isValidBinding() : boolean\l# problemId() : int\l# shortReadableName() : char\l}"
	 ]

	 BindingIds [
		 label = "{BindingIds||# FIELD() : int\l# LOCAL() : int\l# VARIABLE() : int\l# TYPE() : int\l# METHOD() : int\l# PACKAGE() : int\l# IMPORT() : int\l}"
	 ]

	 BlockScope [
		 label = "{BlockScope|+ locals : LocalVariableBinding\l+ localIndex : int\l+ startIndex : int\l+ offset : int\l+ maxOffset : int\l+ shiftScopes : BlockScope\l+ EmulationPathToImplicitThis : VariableBinding\l+ NoEnclosingInstanceInConstructorCall : VariableBinding\l+ NoEnclosingInstanceInStaticContext : VariableBinding\l+ subscopes : Scope\l+ subscopeCount : int\l+ switchCase : CaseStatement\l|# BlockScope(int, Scope) : \l# BlockScope(BlockScope) : \l# BlockScope(BlockScope, boolean) : \l# BlockScope(BlockScope, int) : \l# addAnonymousType(TypeDeclaration, ReferenceBinding) : \l# addLocalType(TypeDeclaration) : \l# addLocalVariable(LocalVariableBinding) : \l# addSubscope(Scope) : \l# allowBlankFinalFieldAssignment(FieldBinding) : boolean\l# basicToString(int) : String\l# checkAndSetModifiersForVariable(LocalVariableBinding) : \l# computeLocalVariablePositions(int, int, CodeStream) : \l# emulateOuterAccess(LocalVariableBinding) : \l# findLocalType(char) : ReferenceBinding\l# findVariable(char) : LocalVariableBinding\l# getBinding(char, int, InvocationSite, boolean) : Binding\l# getBinding(char, InvocationSite) : Binding\l# getEmulationPath(LocalVariableBinding) : VariableBinding\l# getEmulationPath(ReferenceBinding, boolean, boolean) : Object\l# isDuplicateLocalVariable(char) : boolean\l# maxShiftedOffset() : int\l# problemReporter() : ProblemReporter\l# propagateInnerEmulation(ReferenceBinding, boolean) : \l# referenceType() : TypeDeclaration\l# scopeIndex() : int\l# startIndex() : int\l# toString() : String\l# toString(int) : String\l}"
	 ]

	 ClassScope [
		 label = "{ClassScope|+ referenceContext : TypeDeclaration\l- superTypeReference : TypeReference\l- IncompleteHierarchy : char\l|# ClassScope(Scope, TypeDeclaration) : \l# buildAnonymousTypeBinding(SourceTypeBinding, ReferenceBinding) : \l# buildFields() : \l# buildFieldsAndMethods() : \l# buildLocalType(SourceTypeBinding, PackageBinding) : LocalTypeBinding\l# buildLocalTypeBinding(SourceTypeBinding) : \l# buildMemberTypes() : \l# buildMethods() : \l# buildType(SourceTypeBinding, PackageBinding) : SourceTypeBinding\l# buildTypeVariables() : \l# checkAndSetModifiers() : \l# checkAndSetModifiersForField(FieldBinding, FieldDeclaration) : \l# checkForInheritedMemberTypes(SourceTypeBinding) : \l# checkParameterizedTypeBounds() : \l# connectMemberTypes() : \l# connectSuperclass() : boolean\l# connectSuperInterfaces() : boolean\l# connectTypeHierarchy() : \l# connectTypeHierarchyWithoutMembers() : \l# detectCycle(TypeBinding, TypeReference, TypeBinding) : boolean\l# detectCycle(SourceTypeBinding, ReferenceBinding, TypeReference) : boolean\l# findAmbiguousInterface(ReferenceBinding, ReferenceBinding) : ReferenceBinding\l# findSupertype(TypeReference) : ReferenceBinding\l# problemReporter() : ProblemReporter\l# referenceType() : TypeDeclaration\l# toString() : String\l}"
	 ]

	 CompilationUnitScope [
		 label = "{CompilationUnitScope|+ environment : LookupEnvironment\l+ referenceContext : CompilationUnitDeclaration\l+ currentPackageName : char\l+ fPackage : PackageBinding\l+ imports : ImportBinding\l+ resolvedSingeTypeImports : HashtableOfObject\l+ topLevelTypes : SourceTypeBinding\l- qualifiedReferences : CompoundNameVector\l- simpleNameReferences : SimpleNameVector\l- referencedTypes : ObjectVector\l- referencedSuperTypes : ObjectVector\l# constantPoolNameUsage : HashtableOfType\l|# CompilationUnitScope(CompilationUnitDeclaration, LookupEnvironment) : \l# buildFieldsAndMethods() : \l# buildTypeBindings() : \l# checkAndSetImports() : \l# computeConstantPoolName(LocalTypeBinding) : char\l# connectTypeHierarchy() : \l# faultInImports() : \l# faultInTypes() : \l# findOnDemandImport(char) : Binding\l# findSingleTypeImport(char) : Binding\l# getDefaultImports() : ImportBinding\l# getImport(char, boolean) : Binding\l# problemReporter() : ProblemReporter\l# recordQualifiedReference(char) : \l# recordReference(char, char) : \l# recordReference(ReferenceBinding, char) : \l# recordSimpleReference(char) : \l# recordSuperTypeReference(TypeBinding) : \l# recordTypeReference(TypeBinding) : \l# recordTypeReferences(TypeBinding) : \l# resolveSingleTypeImport(ImportBinding) : Binding\l# storeDependencyInfo() : \l# toString() : String\l# typeToRecord(TypeBinding) : ReferenceBinding\l# verifyMethods(MethodVerifier) : \l}"
	 ]

	 CompilerModifiers [
		 label = "{CompilerModifiers||# AccDefault() : int\l# AccJustFlag() : int\l# AccRestrictedAccess() : int\l# AccFromClassFile() : int\l# AccIsConstantValue() : int\l# AccDefaultAbstract() : int\l# AccDeprecatedImplicitly() : int\l# AccAlternateModifierProblem() : int\l# AccModifierProblem() : int\l# AccSemicolonBody() : int\l# AccUnresolved() : int\l# AccClearPrivateModifier() : int\l# AccBlankFinal() : int\l# AccIsDefaultConstructor() : int\l# AccPrivateUsed() : int\l# AccVisibilityMASK() : int\l# AccOverriding() : int\l# AccImplementing() : int\l# AccGenericSignature() : int\l}"
	 ]

	 FieldBinding [
		 label = "{FieldBinding|+ declaringClass : ReferenceBinding\l|# FieldBinding() : \l# FieldBinding(char, TypeBinding, int, ReferenceBinding, Constant) : \l# FieldBinding(FieldDeclaration, TypeBinding, int, ReferenceBinding) : \l# FieldBinding(FieldBinding, ReferenceBinding) : \l# bindingType() : int\l# canBeSeenBy(TypeBinding, InvocationSite, Scope) : boolean\l# genericSignature() : char\l# getAccessFlags() : int\l# isDefault() : boolean\l# isDeprecated() : boolean\l# isPrivate() : boolean\l# isPrivateUsed() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isSynthetic() : boolean\l# isTransient() : boolean\l# isViewedAsDeprecated() : boolean\l# isVolatile() : boolean\l# original() : FieldBinding\l}"
	 ]

	 ImportBinding [
		 label = "{ImportBinding|+ compoundName : char\l+ onDemand : boolean\l+ reference : ImportReference\l# resolvedImport : Binding\l|# ImportBinding(char, boolean, Binding, ImportReference) : \l# bindingType() : int\l# readableName() : char\l# toString() : String\l}"
	 ]

	 InnerEmulationDependency [
		 label = "{InnerEmulationDependency|+ scope : BlockScope\l+ wasEnclosingInstanceSupplied : boolean\l|# InnerEmulationDependency(BlockScope, boolean) : \l}"
	 ]

	 InvocationSite [
		 label = "{InvocationSite||# genericTypeArguments() : TypeBinding\l# isSuperAccess() : boolean\l# isTypeAccess() : boolean\l# setDepth(int) : \l# setFieldIndex(int) : \l# setActualReceiverType(ReferenceBinding) : \l# sourceStart() : int\l# sourceEnd() : int\l}"
	 ]

	 LocalTypeBinding [
		 label = "{LocalTypeBinding|# LocalTypePrefix : char\l- dependents : InnerEmulationDependency\l+ localArrayBindings : ArrayBinding\l+ switchCase : CaseStatement\l|# LocalTypeBinding(ClassScope, SourceTypeBinding, CaseStatement) : \l# addInnerEmulationDependent(BlockScope, boolean) : \l# constantPoolName() : char\l# createArrayType(int) : ArrayBinding\l# readableName() : char\l# shortReadableName() : char\l# setAsMemberType() : \l# setConstantPoolName(char) : \l# sourceName() : char\l# toString() : String\l# updateInnerEmulationDependents() : \l}"
	 ]

	 LocalVariableBinding [
		 label = "{LocalVariableBinding|+ isArgument : boolean\l+ resolvedPosition : int\l+ UNUSED : int\l+ USED : int\l+ FAKE_USED : int\l+ useFlag : int\l+ declaringScope : BlockScope\l+ declaration : LocalDeclaration\l+ initializationPCs : int\l+ initializationCount : int\l|# LocalVariableBinding(char, TypeBinding, int, boolean) : \l# LocalVariableBinding(LocalDeclaration, TypeBinding, int, boolean) : \l# bindingType() : int\l# isSecret() : boolean\l# recordInitializationEndPC(int) : \l# recordInitializationStartPC(int) : \l# toString() : String\l}"
	 ]

	 LookupEnvironment [
		 label = "{LookupEnvironment|+ options : CompilerOptions\l+ problemReporter : ProblemReporter\l+ typeRequestor : ITypeRequestor\l# defaultPackage : PackageBinding\l# defaultImports : ImportBinding\l# knownPackages : HashtableOfPackage\l# TheNotFoundPackage : ProblemPackageBinding\l# TheNotFoundType : ProblemReferenceBinding\l+ nameEnvironment : INameEnvironment\l- verifier : MethodVerifier\l- uniqueArrayBindings : ArrayBinding\l- uniqueParameterizedTypeBindings : SimpleLookupTable\l- uniqueRawTypeBindings : SimpleLookupTable\l- uniqueWildcardBindings : SimpleLookupTable\l- units : CompilationUnitDeclaration\l- lastUnitIndex : int\l- lastCompletedUnitIndex : int\l+ unitBeingCompleted : CompilationUnitDeclaration\l- stepCompleted : int\l# BUILD_TYPE_HIERARCHY : int\l# CHECK_AND_SET_IMPORTS : int\l# CONNECT_TYPE_HIERARCHY : int\l# BUILD_FIELDS_AND_METHODS : int\l+ sharedArraysUsed : boolean\l+ sharedClassFileHeader : byte\l+ sharedClassFileContents : byte\l|# LookupEnvironment(ITypeRequestor, CompilerOptions, ProblemReporter, INameEnvironment) : \l# askForType(char) : ReferenceBinding\l# askForType(PackageBinding, char) : ReferenceBinding\l# buildTypeBindings(CompilationUnitDeclaration) : \l# cacheBinaryType(IBinaryType) : BinaryTypeBinding\l# cacheBinaryType(IBinaryType, boolean) : BinaryTypeBinding\l# completeTypeBindings() : \l# completeTypeBindings(CompilationUnitDeclaration) : \l# completeTypeBindings(CompilationUnitDeclaration, boolean) : \l# computePackageFrom(char) : PackageBinding\l# createArrayType(TypeBinding, int) : ArrayBinding\l# createBinaryTypeFrom(IBinaryType, PackageBinding) : BinaryTypeBinding\l# createBinaryTypeFrom(IBinaryType, PackageBinding, boolean) : BinaryTypeBinding\l# createPackage(char) : PackageBinding\l# createParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding) : ParameterizedTypeBinding\l# createRawType(ReferenceBinding, ReferenceBinding) : RawTypeBinding\l# createWildcard(ReferenceBinding, int, TypeBinding, int) : WildcardBinding\l# getCachedType(char) : ReferenceBinding\l# getPackage0(char) : PackageBinding\l# getTopLevelPackage(char) : PackageBinding\l# getType(char) : ReferenceBinding\l# getTypeArgumentsFromSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding, ReferenceBinding) : TypeBinding\l# getTypeFromConstantPoolName(char, int, int, boolean) : ReferenceBinding\l# getTypeFromSignature(char, int, int, boolean, TypeBinding) : TypeBinding\l# getTypeFromTypeSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding) : TypeBinding\l# getTypeFromVariantTypeSignature(SignatureWrapper, TypeVariableBinding, ReferenceBinding, ReferenceBinding, int) : TypeBinding\l# isPackage(char, char) : boolean\l# methodVerifier() : MethodVerifier\l# reset() : \l# updateCaches(UnresolvedReferenceBinding, ReferenceBinding) : \l}"
	 ]

	 MemberTypeBinding [
		 label = "{MemberTypeBinding||# MemberTypeBinding(char, ClassScope, SourceTypeBinding) : \l# checkSyntheticArgsAndFields() : \l# constantPoolName() : char\l# toString() : String\l}"
	 ]

	 MethodBinding [
		 label = "{MethodBinding|+ modifiers : int\l+ selector : char\l+ returnType : TypeBinding\l+ parameters : TypeBinding\l+ thrownExceptions : ReferenceBinding\l+ declaringClass : ReferenceBinding\l+ typeVariables : TypeVariableBinding\l# signature : char\l|# MethodBinding() : \l# MethodBinding(int, char, TypeBinding, TypeBinding, ReferenceBinding, ReferenceBinding) : \l# MethodBinding(int, TypeBinding, ReferenceBinding, ReferenceBinding) : \l# MethodBinding(MethodBinding, ReferenceBinding) : \l# areParametersEqual(MethodBinding) : boolean\l# areParameterErasuresEqual(MethodBinding) : boolean\l# bindingType() : int\l# canBeSeenBy(InvocationSite, Scope) : boolean\l# canBeSeenBy(TypeBinding, InvocationSite, Scope) : boolean\l# constantPoolDeclaringClass() : TypeBinding\l# constantPoolName() : char\l# genericSignature() : char\l# getAccessFlags() : int\l# getTypeVariable(char) : TypeVariableBinding\l# hasSubstitutedParameters() : boolean\l# hasSubstitutedReturnType() : boolean\l# isAbstract() : boolean\l# isBridge() : boolean\l# isConstructor() : boolean\l# isConstructorRelated() : boolean\l# isDefault() : boolean\l# isDefaultAbstract() : boolean\l# isDeprecated() : boolean\l# isFinal() : boolean\l# isImplementing() : boolean\l# isNative() : boolean\l# isOverriding() : boolean\l# isMain() : boolean\l# isPrivate() : boolean\l# isPrivateUsed() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isRequiredToClearPrivateModifier() : boolean\l# isStatic() : boolean\l# isStrictfp() : boolean\l# isSynchronized() : boolean\l# isSynthetic() : boolean\l# isVararg() : boolean\l# isViewedAsDeprecated() : boolean\l# original() : MethodBinding\l# readableName() : char\l# shortReadableName() : char\l# setSelector(char) : \l# signature() : char\l# sourceEnd() : int\l# sourceMethod() : AbstractMethodDeclaration\l# sourceStart() : int\l# tagForClearingPrivateModifier() : \l# toString() : String\l# typeVariables() : TypeVariableBinding\l}"
	 ]

	 MethodScope [
		 label = "{MethodScope|+ referenceContext : ReferenceContext\l+ isStatic : boolean\l+ isConstructorCall : boolean\l+ initializedField : FieldBinding\l+ lastVisibleFieldID : int\l+ analysisIndex : int\l+ isPropagatingInnerClassEmulation : boolean\l+ lastIndex : int\l+ definiteInits : long\l+ extraDefiniteInits : long\l+ extraSyntheticArguments : SyntheticArgumentBinding\l|# MethodScope(ClassScope, ReferenceContext, boolean) : \l# checkAndSetModifiersForConstructor(MethodBinding) : \l# checkAndSetModifiersForMethod(MethodBinding) : \l# computeLocalVariablePositions(int, CodeStream) : \l# createMethod(AbstractMethodDeclaration) : MethodBinding\l# findField(TypeBinding, char, InvocationSite, boolean) : FieldBinding\l# isInsideConstructor() : boolean\l# isInsideInitializer() : boolean\l# isInsideInitializerOrConstructor() : boolean\l# problemReporter() : ProblemReporter\l# recordInitializationStates(FlowInfo) : int\l# referenceMethod() : AbstractMethodDeclaration\l# referenceType() : TypeDeclaration\l# basicToString(int) : String\l}"
	 ]

	 MethodVerifier [
		 label = "{MethodVerifier|# type : SourceTypeBinding\l# inheritedMethods : HashtableOfObject\l# currentMethods : HashtableOfObject\l# runtimeException : ReferenceBinding\l# errorException : ReferenceBinding\l# environment : LookupEnvironment\l|# MethodVerifier(LookupEnvironment) : \l# areParametersEqual(MethodBinding, MethodBinding) : boolean\l# areReturnTypesEqual(MethodBinding, MethodBinding) : boolean\l# areTypesEqual(TypeBinding, TypeBinding) : boolean\l# checkAbstractMethod(MethodBinding) : \l# checkAgainstInheritedMethods(MethodBinding, MethodBinding, int) : \l# checkExceptions(MethodBinding, MethodBinding) : \l# checkInheritedMethods(MethodBinding, int) : \l# checkMethods() : \l# checkPackagePrivateAbstractMethod(MethodBinding) : \l# computeInheritedMethods() : \l# computeMethods() : \l# doesMethodOverride(MethodBinding, MethodBinding) : boolean\l# errorException() : ReferenceBinding\l# isAsVisible(MethodBinding, MethodBinding) : boolean\l# isSameClassOrSubclassOf(ReferenceBinding, ReferenceBinding) : boolean\l# mustImplementAbstractMethod(MethodBinding) : boolean\l# problemReporter() : ProblemReporter\l# problemReporter(MethodBinding) : ProblemReporter\l# resolvedExceptionTypesFor(MethodBinding) : ReferenceBinding\l# runtimeException() : ReferenceBinding\l# verify(SourceTypeBinding) : \l# toString() : String\l}"
	 ]

	 MethodVerifier15 [
		 label = "{MethodVerifier15||# MethodVerifier15(LookupEnvironment) : \l# areTypesEqual(TypeBinding, TypeBinding) : boolean\l# checkAgainstInheritedMethods(MethodBinding, MethodBinding, int) : \l# doesMethodOverride(MethodBinding, MethodBinding) : boolean\l# hasBoundedParameters(ParameterizedTypeBinding) : boolean\l# isReturnTypeSubstituable(MethodBinding, MethodBinding) : boolean\l# isTypeSubstituable(TypeBinding, TypeBinding) : boolean\l}"
	 ]

	 NestedTypeBinding [
		 label = "{NestedTypeBinding|+ enclosingType : SourceTypeBinding\l+ enclosingInstances : SyntheticArgumentBinding\l+ outerLocalVariables : SyntheticArgumentBinding\l+ enclosingInstancesSlotSize : int\l+ outerLocalVariablesSlotSize : int\l|# NestedTypeBinding(char, ClassScope, SourceTypeBinding) : \l# addSyntheticArgument(LocalVariableBinding) : SyntheticArgumentBinding\l# addSyntheticArgument(ReferenceBinding) : SyntheticArgumentBinding\l# addSyntheticArgumentAndField(LocalVariableBinding) : SyntheticArgumentBinding\l# addSyntheticArgumentAndField(ReferenceBinding) : SyntheticArgumentBinding\l# computeSyntheticArgumentSlotSizes() : \l# enclosingType() : ReferenceBinding\l# getSyntheticArgument(LocalVariableBinding) : SyntheticArgumentBinding\l# syntheticEnclosingInstances() : SyntheticArgumentBinding\l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# updateInnerEmulationDependents() : \l# getSyntheticArgument(ReferenceBinding, boolean) : SyntheticArgumentBinding\l}"
	 ]

	 PackageBinding [
		 label = "{PackageBinding|+ compoundName : char\l# parent : PackageBinding\l+ environment : LookupEnvironment\l# knownTypes : HashtableOfType\l# knownPackages : HashtableOfPackage\l|# PackageBinding() : \l# PackageBinding(char, PackageBinding, LookupEnvironment) : \l# PackageBinding(char, LookupEnvironment) : \l# PackageBinding(LookupEnvironment) : \l# addNotFoundPackage(char) : \l# addNotFoundType(char) : \l# addPackage(PackageBinding) : \l# addType(ReferenceBinding) : \l# bindingType() : int\l# findPackage(char) : PackageBinding\l# getPackage(char) : PackageBinding\l# getPackage0(char) : PackageBinding\l# getType(char) : ReferenceBinding\l# getType0(char) : ReferenceBinding\l# getTypeOrPackage(char) : Binding\l# readableName() : char\l# toString() : String\l}"
	 ]

	 ParameterizedFieldBinding [
		 label = "{ParameterizedFieldBinding|+ originalField : FieldBinding\l|# ParameterizedFieldBinding(ParameterizedTypeBinding, FieldBinding) : \l# constant() : Constant\l# isConstantValue() : boolean\l# original() : FieldBinding\l# setConstant(Constant) : \l}"
	 ]

	 ParameterizedGenericMethodBinding [
		 label = "{ParameterizedGenericMethodBinding|+ typeArguments : TypeBinding\l- environment : LookupEnvironment\l+ inferredReturnType : boolean\l|# ParameterizedGenericMethodBinding(MethodBinding, TypeBinding, LookupEnvironment) : \l# ParameterizedGenericMethodBinding(MethodBinding, RawTypeBinding, LookupEnvironment) : \l# computeCompatibleMethod(MethodBinding, TypeBinding, Scope, InvocationSite) : MethodBinding\l# inferFromExpectedType(TypeBinding, Scope) : \l# substitute(TypeBinding) : TypeBinding\l}"
	 ]

	 ParameterizedMethodBinding [
		 label = "{ParameterizedMethodBinding|# originalMethod : MethodBinding\l|# ParameterizedMethodBinding(ParameterizedTypeBinding, MethodBinding, boolean) : \l# ParameterizedMethodBinding() : \l# instantiateGetClass(TypeBinding, MethodBinding, Scope) : ParameterizedMethodBinding\l# hasSubstitutedParameters() : boolean\l# hasSubstitutedReturnType() : boolean\l# original() : MethodBinding\l}"
	 ]

	 ParameterizedTypeBinding [
		 label = "{ParameterizedTypeBinding|+ type : ReferenceBinding\l+ arguments : TypeBinding\l+ environment : LookupEnvironment\l+ genericTypeSignature : char\l+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l+ fields : FieldBinding\l+ memberTypes : ReferenceBinding\l+ methods : MethodBinding\l- enclosingType : ReferenceBinding\l|# ParameterizedTypeBinding(ReferenceBinding, TypeBinding, ReferenceBinding, LookupEnvironment) : \l# collectSubstitutes(TypeBinding, Map) : \l# computeId() : \l# constantPoolName() : char\l# createParameterizedMethod(MethodBinding) : ParameterizedMethodBinding\l# debugName() : String\l# enclosingType() : ReferenceBinding\l# erasure() : TypeBinding\l# fieldCount() : int\l# fields() : FieldBinding\l# genericTypeSignature() : char\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# hasMemberTypes() : boolean\l# implementsMethod(MethodBinding) : boolean\l# initialize(ReferenceBinding, TypeBinding) : \l# initializeArguments() : \l# isEquivalentTo(TypeBinding) : boolean\l# isParameterizedType() : boolean\l# memberTypes() : ReferenceBinding\l# methods() : MethodBinding\l# qualifiedSourceName() : char\l# readableName() : char\l# resolve() : ReferenceBinding\l# shortReadableName() : char\l# signature() : char\l# sourceName() : char\l# substitute(TypeBinding) : TypeBinding\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# qualifiedPackageName() : char\l# toString() : String\l# typeVariables() : TypeVariableBinding\l}"
	 ]

	 ProblemBinding [
		 label = "{ProblemBinding|+ name : char\l+ searchType : ReferenceBinding\l- problemId : int\l|# ProblemBinding(char, int) : \l# ProblemBinding(char, ReferenceBinding, int) : \l# ProblemBinding(char, int) : \l# ProblemBinding(char, ReferenceBinding, int) : \l# bindingType() : int\l# problemId() : int\l# readableName() : char\l}"
	 ]

	 ProblemFieldBinding [
		 label = "{ProblemFieldBinding|- problemId : int\l+ closestMatch : FieldBinding\l|# ProblemFieldBinding(ReferenceBinding, char, int) : \l# ProblemFieldBinding(ReferenceBinding, char, int) : \l# ProblemFieldBinding(FieldBinding, ReferenceBinding, char, int) : \l# problemId() : int\l}"
	 ]

	 ProblemMethodBinding [
		 label = "{ProblemMethodBinding|- problemReason : int\l+ closestMatch : MethodBinding\l|# ProblemMethodBinding(char, TypeBinding, int) : \l# ProblemMethodBinding(char, TypeBinding, ReferenceBinding, int) : \l# ProblemMethodBinding(MethodBinding, char, TypeBinding, int) : \l# problemId() : int\l}"
	 ]

	 ProblemPackageBinding [
		 label = "{ProblemPackageBinding|- problemId : int\l|# ProblemPackageBinding(char, int) : \l# ProblemPackageBinding(char, int) : \l# problemId() : int\l}"
	 ]

	 ProblemReasons [
		 label = "{ProblemReasons||# NoError() : int\l# NotFound() : int\l# NotVisible() : int\l# Ambiguous() : int\l# InternalNameProvided() : int\l# InheritedNameHidesEnclosingName() : int\l# NonStaticReferenceInConstructorInvocation() : int\l# NonStaticReferenceInStaticContext() : int\l# ReceiverTypeNotVisible() : int\l# IllegalSuperTypeVariable() : int\l# ParameterBoundMismatch() : int\l# TypeParameterArityMismatch() : int\l# ParameterizedMethodTypeMismatch() : int\l# TypeArgumentsForRawGenericMethod() : int\l}"
	 ]

	 ProblemReferenceBinding [
		 label = "{ProblemReferenceBinding|+ original : ReferenceBinding\l- problemReason : int\l+ alternateMatch : ReferenceBinding\l|# ProblemReferenceBinding(char, int) : \l# ProblemReferenceBinding(char, int) : \l# ProblemReferenceBinding(char, ReferenceBinding, int) : \l# ProblemReferenceBinding(char, ReferenceBinding, int) : \l# problemId() : int\l# shortReadableName() : char\l}"
	 ]

	 RawTypeBinding [
		 label = "{RawTypeBinding||# RawTypeBinding(ReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# createParameterizedMethod(MethodBinding) : ParameterizedMethodBinding\l# debugName() : String\l# genericTypeSignature() : char\l# isEquivalentTo(TypeBinding) : boolean\l# isParameterizedType() : boolean\l# isRawType() : boolean\l# initializeArguments() : \l# readableName() : char\l# substitute(TypeBinding) : TypeBinding\l# shortReadableName() : char\l}"
	 ]

	 ReferenceBinding [
		 label = "{ReferenceBinding|+ compoundName : char\l+ sourceName : char\l+ modifiers : int\l+ fPackage : PackageBinding\l# fileName : char\l# constantPoolName : char\l# signature : char\l|# availableFields() : FieldBinding\l# availableMethods() : MethodBinding\l# canBeInstantiated() : boolean\l# canBeSeenBy(PackageBinding) : boolean\l# canBeSeenBy(ReferenceBinding, SourceTypeBinding) : boolean\l# canBeSeenBy(Scope) : boolean\l# computeId() : \l# constantPoolName() : char\l# debugName() : String\l# depth() : int\l# enclosingType() : ReferenceBinding\l# enclosingTypeAt(int) : ReferenceBinding\l# fieldCount() : int\l# fields() : FieldBinding\l# findSuperTypeErasingTo(int, boolean) : ReferenceBinding\l# findSuperTypeErasingTo(ReferenceBinding) : ReferenceBinding\l# getAccessFlags() : int\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getFileName() : char\l# getMemberType(char) : ReferenceBinding\l# getMethods(char) : MethodBinding\l# getPackage() : PackageBinding\l# hasMemberTypes() : boolean\l# getTypeVariable(char) : TypeVariableBinding\l# hashCode() : int\l# hasRestrictedAccess() : boolean\l# implementsInterface(ReferenceBinding, boolean) : boolean\l# implementsMethod(MethodBinding) : boolean\l# isAbstract() : boolean\l# isAnonymousType() : boolean\l# isBinaryBinding() : boolean\l# isClass() : boolean\l# isHierarchyBeingConnected() : boolean\l# isCompatibleWith(TypeBinding) : boolean\l# isDefault() : boolean\l# isDeprecated() : boolean\l# isFinal() : boolean\l# isInterface() : boolean\l# isPrivate() : boolean\l# isPrivateUsed() : boolean\l# isProtected() : boolean\l# isPublic() : boolean\l# isStatic() : boolean\l# isStrictfp() : boolean\l# isSuperclassOf(ReferenceBinding) : boolean\l# isViewedAsDeprecated() : boolean\l# memberTypes() : ReferenceBinding\l# methods() : MethodBinding\l# qualifiedSourceName() : char\l# readableName() : char\l# shortReadableName() : char\l# signature() : char\l# sourceName() : char\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# syntheticEnclosingInstanceTypes() : ReferenceBinding\l# syntheticOuterLocalVariables() : SyntheticArgumentBinding\l# unResolvedMethods() : MethodBinding\l}"
	 ]

	 Scope [
		 label = "{Scope|+ BLOCK_SCOPE : int\l+ CLASS_SCOPE : int\l+ COMPILATION_UNIT_SCOPE : int\l+ METHOD_SCOPE : int\l+ kind : int\l+ parent : Scope\l+ problemReporter : ProblemReporter\l|# compareTypes(TypeBinding, TypeBinding) : int\l# substitute(Substitution, ReferenceBinding) : ReferenceBinding\l# substitute(Substitution, TypeBinding) : TypeBinding\l# Scope(int, Scope) : \l# boxing(int) : int\l# boxing(TypeBinding) : TypeBinding\l# classScope() : ClassScope\l# compareUncheckedException(ReferenceBinding) : int\l# compilationUnitScope() : CompilationUnitScope\l# computeCompatibleMethod(MethodBinding, TypeBinding, InvocationSite) : MethodBinding\l# connectTypeVariables(TypeParameter) : boolean\l# convertToRawType(TypeBinding) : TypeBinding\l# createArrayType(TypeBinding, int) : ArrayBinding\l# createParameterizedType(ReferenceBinding, TypeBinding, ReferenceBinding) : ParameterizedTypeBinding\l# createTypeVariables(TypeParameter, Binding) : TypeVariableBinding\l# detectCycle(ReferenceBinding) : boolean\l# enclosingClassScope() : ClassScope\l# enclosingMethodScope() : MethodScope\l# enclosingSourceType() : SourceTypeBinding\l# environment() : LookupEnvironment\l# findDefaultAbstractMethod(ReferenceBinding, char, TypeBinding, InvocationSite, ReferenceBinding, MethodBinding, ObjectVector) : MethodBinding\l# findDirectMemberType(char, ReferenceBinding) : ReferenceBinding\l# findExactMethod(ReferenceBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findField(TypeBinding, char, InvocationSite, boolean) : FieldBinding\l# findMemberType(char, ReferenceBinding) : ReferenceBinding\l# findMethod(ReferenceBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findMethodForArray(ArrayBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# findMethodInSuperInterfaces(ReferenceBinding, char, ObjectVector, MethodBinding) : MethodBinding\l# findType(char, PackageBinding, PackageBinding) : ReferenceBinding\l# findVariable(char) : LocalVariableBinding\l# getBaseType(char) : TypeBinding\l# getBinding(char, int, InvocationSite, boolean) : Binding\l# getConstructor(ReferenceBinding, TypeBinding, InvocationSite) : MethodBinding\l# getCurrentPackage() : PackageBinding\l# getDeclarationModifiers() : int\l# getField(TypeBinding, char, InvocationSite) : FieldBinding\l# getImplicitMethod(char, TypeBinding, InvocationSite) : MethodBinding\l# getJavaIoSerializable() : ReferenceBinding\l# getJavaLangAssertionError() : ReferenceBinding\l# getJavaLangClass() : ReferenceBinding\l# getJavaLangCloneable() : ReferenceBinding\l# getJavaLangError() : ReferenceBinding\l# getJavaLangIterable() : ReferenceBinding\l# getJavaLangObject() : ReferenceBinding\l# getJavaLangRuntimeException() : ReferenceBinding\l# getJavaLangString() : ReferenceBinding\l# getJavaLangThrowable() : ReferenceBinding\l# getJavaUtilIterator() : ReferenceBinding\l# getMemberType(char, ReferenceBinding) : ReferenceBinding\l# getMethod(TypeBinding, char, TypeBinding, InvocationSite) : MethodBinding\l# getPackage(char) : Binding\l# getType(char) : TypeBinding\l# getType(char, PackageBinding) : TypeBinding\l# getType(char, int) : TypeBinding\l# getTypeOrPackage(char, int) : Binding\l# getTypeOrPackage(char) : Binding\l# greaterLowerBound(TypeBinding) : TypeBinding\l# isDefinedInField(FieldBinding) : boolean\l# isDefinedInMethod(MethodBinding) : boolean\l# isDefinedInSameUnit(ReferenceBinding) : boolean\l# isDefinedInType(ReferenceBinding) : boolean\l# isInsideDeprecatedCode() : boolean\l# leastContainingInvocation(TypeBinding, List) : TypeBinding\l# leastContainingTypeArgument(TypeBinding, TypeBinding, ReferenceBinding, int) : TypeBinding\l# lowerUpperBound(TypeBinding) : TypeBinding\l# methodScope() : MethodScope\l# minimalErasedCandidate(TypeBinding, List) : TypeBinding\l# mostSpecificClassMethodBinding(MethodBinding, int, InvocationSite) : MethodBinding\l# mostSpecificCommonType(TypeBinding) : TypeBinding\l# mostSpecificInterfaceMethodBinding(MethodBinding, int, InvocationSite) : MethodBinding\l# mostSpecificMethodBinding(MethodBinding, int, InvocationSite) : MethodBinding\l# outerMostClassScope() : ClassScope\l# outerMostMethodScope() : MethodScope\l# referenceCompilationUnit() : CompilationUnitDeclaration\l# startIndex() : int\l# switchCase() : CaseStatement\l# unboxing(int) : int\l# unboxing(TypeBinding) : TypeBinding\l}"
	 ]

	 SignatureWrapper [
		 label = "{SignatureWrapper|+ signature : char\l+ start : int\l+ end : int\l+ bracket : int\l|# SignatureWrapper(char) : \l# atEnd() : boolean\l# computeEnd() : int\l# nextWord() : char\l# toString() : String\l}"
	 ]

	 SourceTypeBinding [
		 label = "{SourceTypeBinding|+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l+ fields : FieldBinding\l+ methods : MethodBinding\l+ memberTypes : ReferenceBinding\l+ typeVariables : TypeVariableBinding\l+ scope : ClassScope\l+ METHOD_EMUL : int\l+ FIELD_EMUL : int\l+ CLASS_LITERAL_EMUL : int\l+ RECEIVER_TYPE_EMUL : int\l# synthetics : HashMap\l# genericReferenceTypeSignature : char\l|# SourceTypeBinding(char, PackageBinding, ClassScope) : \l# addDefaultAbstractMethod(MethodBinding) : \l# addDefaultAbstractMethods() : \l# addSyntheticField(LocalVariableBinding) : FieldBinding\l# addSyntheticField(ReferenceBinding) : FieldBinding\l# addSyntheticField(TypeBinding, BlockScope) : FieldBinding\l# addSyntheticField(AssertStatement, BlockScope) : FieldBinding\l# addSyntheticMethod(FieldBinding, boolean) : SyntheticAccessMethodBinding\l# addSyntheticMethod(MethodBinding, boolean) : SyntheticAccessMethodBinding\l# addSyntheticBridgeMethod(MethodBinding, MethodBinding) : SyntheticAccessMethodBinding\l# faultInTypesForFieldsAndMethods() : \l# fields() : FieldBinding\l# genericTypeSignature() : char\l# genericSignature() : char\l# getDefaultAbstractMethods() : MethodBinding\l# getExactConstructor(TypeBinding) : MethodBinding\l# getExactMethod(char, TypeBinding, CompilationUnitScope) : MethodBinding\l# getField(char, boolean) : FieldBinding\l# getMethods(char) : MethodBinding\l# getSyntheticField(LocalVariableBinding) : FieldBinding\l# getSyntheticBridgeMethod(MethodBinding) : SyntheticAccessMethodBinding\l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# memberTypes() : ReferenceBinding\l# getUpdatedFieldBinding(FieldBinding, ReferenceBinding) : FieldBinding\l# getUpdatedMethodBinding(MethodBinding, ReferenceBinding) : MethodBinding\l# hasMemberTypes() : boolean\l# methods() : MethodBinding\l# resolveTypeFor(FieldBinding) : FieldBinding\l# resolveTypesFor(MethodBinding) : MethodBinding\l# sourceEnd() : int\l# sourceStart() : int\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# syntheticAccessMethods() : SyntheticAccessMethodBinding\l# syntheticFields() : FieldBinding\l# toString() : String\l# typeVariables() : TypeVariableBinding\l# verifyMethods(MethodVerifier) : \l# getSyntheticField(ReferenceBinding, boolean) : FieldBinding\l}"
	 ]

	 Substitution [
		 label = "{Substitution||# substitute(TypeBinding) : TypeBinding\l}"
	 ]

	 SyntheticAccessMethodBinding [
		 label = "{SyntheticAccessMethodBinding|+ targetReadField : FieldBinding\l+ targetWriteField : FieldBinding\l+ targetMethod : MethodBinding\l+ accessType : int\l+ FieldReadAccess : int\l+ FieldWriteAccess : int\l+ MethodAccess : int\l+ ConstructorAccess : int\l+ SuperMethodAccess : int\l+ BridgeMethodAccess : int\l# AccessMethodPrefix : char\l+ sourceStart : int\l+ index : int\l|# SyntheticAccessMethodBinding(FieldBinding, boolean, ReferenceBinding) : \l# SyntheticAccessMethodBinding(MethodBinding, boolean, ReferenceBinding) : \l# SyntheticAccessMethodBinding(MethodBinding, MethodBinding) : \l# initializeConstructorAccessor(MethodBinding) : \l# initializeMethodAccessor(MethodBinding, boolean, ReferenceBinding) : \l# isConstructorRelated() : boolean\l}"
	 ]

	 SyntheticArgumentBinding [
		 label = "{SyntheticArgumentBinding|+ actualOuterLocalVariable : LocalVariableBinding\l+ matchingField : FieldBinding\l# OuterLocalPrefix : char\l# EnclosingInstancePrefix : char\l|# null() : \l# SyntheticArgumentBinding(LocalVariableBinding) : \l# SyntheticArgumentBinding(ReferenceBinding) : \l}"
	 ]

	 SyntheticFieldBinding [
		 label = "{SyntheticFieldBinding|+ index : int\l|# SyntheticFieldBinding(char, TypeBinding, int, ReferenceBinding, Constant, int) : \l}"
	 ]

	 TagBits [
		 label = "{TagBits||# IsArrayType() : int\l# IsBaseType() : int\l# IsNestedType() : int\l# IsMemberType() : int\l# MemberTypeMask() : int\l# IsLocalType() : int\l# LocalTypeMask() : int\l# IsAnonymousType() : int\l# AnonymousTypeMask() : int\l# IsBinaryBinding() : int\l# BeginHierarchyCheck() : int\l# EndHierarchyCheck() : int\l# KnowsDefaultAbstractMethods() : int\l# InterfaceVisited() : int\l# AreFieldsComplete() : int\l# AreMethodsComplete() : int\l# HasNoMemberTypes() : int\l# HierarchyHasProblems() : int\l# IsBoundParameterizedType() : int\l# HasUnresolvedTypeVariables() : int\l# HasUnresolvedSuperclass() : int\l# HasUnresolvedSuperinterfaces() : int\l# HasUnresolvedEnclosingType() : int\l# HasUnresolvedMemberTypes() : int\l# HasTypeVariable() : int\l# HasWildcard() : int\l}"
	 ]

	 TypeBinding [
		 label = "{TypeBinding|+ id : int\l+ tagBits : int\l+ constantPoolName : char\l+ getPackage : PackageBinding\l+ isCompatibleWith : boolean\l+ qualifiedSourceName : char\l+ sourceName : char\l|# bindingType() : int\l# canBeInstantiated() : boolean\l# collectSubstitutes(TypeBinding, Map) : \l# debugName() : String\l# dimensions() : int\l# erasure() : TypeBinding\l# genericCast(TypeBinding) : TypeBinding\l# genericTypeSignature() : char\l# isArrayType() : boolean\l# isBaseType() : boolean\l# isClass(TypeBinding) : boolean\l# isEquivalentTo(TypeBinding) : boolean\l# isGenericType() : boolean\l# isHierarchyInconsistent() : boolean\l# isInterface() : boolean\l# isLocalType() : boolean\l# isMemberType() : boolean\l# isNestedType() : boolean\l# isNumericType() : boolean\l# isParameterizedType() : boolean\l# isProvablyDistinctFrom(TypeBinding) : boolean\l# isTypeVariable() : boolean\l# isBoundParameterizedType() : boolean\l# isWildcard() : boolean\l# leafComponentType() : TypeBinding\l# qualifiedPackageName() : char\l# isRawType() : boolean\l# signature() : char\l# swapUnresolved(UnresolvedReferenceBinding, ReferenceBinding, LookupEnvironment) : \l# typeVariables() : TypeVariableBinding\l# wellKnownType(Scope, int) : TypeBinding\l}"
	 ]

	 TypeConstants [
		 label = "{TypeConstants||# JAVA() : char\l# LANG() : char\l# IO() : char\l# REFLECT() : char\l# CharArray_JAVA_LANG_OBJECT() : char\l# LENGTH() : char\l# CLONE() : char\l# GETCLASS() : char\l# OBJECT() : char\l# MAIN() : char\l# SERIALVERSIONUID() : char\l# SERIALPERSISTENTFIELDS() : char\l# READRESOLVE() : char\l# WRITEREPLACE() : char\l# READOBJECT() : char\l# WRITEOBJECT() : char\l# CharArray_JAVA_IO_OBJECTINPUTSTREAM() : char\l# CharArray_JAVA_IO_OBJECTOUTPUTSTREAM() : char\l# CharArray_JAVA_IO_OBJECTSTREAMFIELD() : char\l# ANONYM_PREFIX() : char\l# ANONYM_SUFFIX() : char\l# WILDCARD_NAME() : char\l# WILDCARD_SUPER() : char\l# WILDCARD_EXTENDS() : char\l# WILDCARD_MINUS() : char\l# WILDCARD_STAR() : char\l# WILDCARD_PLUS() : char\l# JAVA_LANG() : char\l# JAVA_IO() : char\l# JAVA_LANG_ASSERTIONERROR() : char\l# JAVA_LANG_CLASS() : char\l# JAVA_LANG_CLASSNOTFOUNDEXCEPTION() : char\l# JAVA_LANG_CLONEABLE() : char\l# JAVA_LANG_EXCEPTION() : char\l# JAVA_LANG_ERROR() : char\l# JAVA_LANG_ITERABLE() : char\l# JAVA_LANG_NOCLASSDEFERROR() : char\l# JAVA_LANG_OBJECT() : char\l# JAVA_LANG_STRING() : char\l# JAVA_LANG_STRINGBUFFER() : char\l# JAVA_LANG_STRINGBUILDER() : char\l# JAVA_LANG_SYSTEM() : char\l# JAVA_LANG_RUNTIMEEXCEPTION() : char\l# JAVA_LANG_THROWABLE() : char\l# JAVA_LANG_REFLECT_CONSTRUCTOR() : char\l# JAVA_IO_PRINTSTREAM() : char\l# JAVA_IO_SERIALIZABLE() : char\l# JAVA_LANG_BYTE() : char\l# JAVA_LANG_SHORT() : char\l# JAVA_LANG_CHARACTER() : char\l# JAVA_LANG_INTEGER() : char\l# JAVA_LANG_LONG() : char\l# JAVA_LANG_FLOAT() : char\l# JAVA_LANG_DOUBLE() : char\l# JAVA_LANG_BOOLEAN() : char\l# JAVA_LANG_VOID() : char\l# JAVA_UTIL_ITERATOR() : char\l# EqualOrMoreSpecific() : int\l# NotRelated() : int\l# MoreGeneric() : int\l# NoParameters() : TypeBinding\l# NoExceptions() : ReferenceBinding\l# AnyException() : ReferenceBinding\l# NoFields() : FieldBinding\l# NoMethods() : MethodBinding\l# NoSuperInterfaces() : ReferenceBinding\l# NoMemberTypes() : ReferenceBinding\l# NoTypeVariables() : TypeVariableBinding\l}"
	 ]

	 TypeIds [
		 label = "{TypeIds||# T_undefined() : int\l# T_Object() : int\l# T_char() : int\l# T_byte() : int\l# T_short() : int\l# T_boolean() : int\l# T_void() : int\l# T_long() : int\l# T_double() : int\l# T_float() : int\l# T_int() : int\l# T_String() : int\l# T_null() : int\l# T_JavaLangObject() : int\l# T_JavaLangString() : int\l# T_JavaLangClass() : int\l# T_JavaLangStringBuffer() : int\l# T_JavaLangSystem() : int\l# T_JavaLangError() : int\l# T_JavaLangReflectConstructor() : int\l# T_JavaLangThrowable() : int\l# T_JavaLangNoClassDefError() : int\l# T_JavaLangClassNotFoundException() : int\l# T_JavaIoPrintStream() : int\l# T_JavaLangException() : int\l# T_JavaLangByte() : int\l# T_JavaLangShort() : int\l# T_JavaLangCharacter() : int\l# T_JavaLangInteger() : int\l# T_JavaLangLong() : int\l# T_JavaLangFloat() : int\l# T_JavaLangDouble() : int\l# T_JavaLangBoolean() : int\l# T_JavaLangVoid() : int\l# T_JavaLangAssertionError() : int\l# T_JavaLangCloneable() : int\l# T_JavaIoSerializable() : int\l# T_JavaLangIterable() : int\l# T_JavaUtilIterator() : int\l# T_JavaLangStringBuilder() : int\l# NoId() : int\l# Boolean2Int() : int\l# Boolean2String() : int\l# Boolean2Boolean() : int\l# Byte2Byte() : int\l# Byte2Short() : int\l# Byte2Char() : int\l# Byte2Int() : int\l# Byte2Long() : int\l# Byte2Float() : int\l# Byte2Double() : int\l# Byte2String() : int\l# Short2Byte() : int\l# Short2Short() : int\l# Short2Char() : int\l# Short2Int() : int\l# Short2Long() : int\l# Short2Float() : int\l# Short2Double() : int\l# Short2String() : int\l# Char2Byte() : int\l# Char2Short() : int\l# Char2Char() : int\l# Char2Int() : int\l# Char2Long() : int\l# Char2Float() : int\l# Char2Double() : int\l# Char2String() : int\l# Int2Byte() : int\l# Int2Short() : int\l# Int2Char() : int\l# Int2Int() : int\l# Int2Long() : int\l# Int2Float() : int\l# Int2Double() : int\l# Int2String() : int\l# Long2Byte() : int\l# Long2Short() : int\l# Long2Char() : int\l# Long2Int() : int\l# Long2Long() : int\l# Long2Float() : int\l# Long2Double() : int\l# Long2String() : int\l# Float2Byte() : int\l# Float2Short() : int\l# Float2Char() : int\l# Float2Int() : int\l# Float2Long() : int\l# Float2Float() : int\l# Float2Double() : int\l# Float2String() : int\l# Double2Byte() : int\l# Double2Short() : int\l# Double2Char() : int\l# Double2Int() : int\l# Double2Long() : int\l# Double2Float() : int\l# Double2Double() : int\l# Double2String() : int\l# String2String() : int\l# Object2String() : int\l# Null2String() : int\l# Object2Object() : int\l}"
	 ]

	 TypeVariableBinding [
		 label = "{TypeVariableBinding|+ declaringElement : Binding\l+ rank : int\l+ firstBound : ReferenceBinding\l+ superclass : ReferenceBinding\l+ superInterfaces : ReferenceBinding\l+ genericTypeSignature : char\l|# TypeVariableBinding(char, Binding, int) : \l# boundCheck(Substitution, TypeBinding) : boolean\l# collectSubstitutes(TypeBinding, Map) : \l# constantPoolName() : char\l# debugName() : String\l# erasure() : TypeBinding\l# genericSignature() : char\l# genericTypeSignature() : char\l# isEquivalentTo(TypeBinding) : boolean\l# isErasureBoundTo(TypeBinding) : boolean\l# isTypeVariable() : boolean\l# readableName() : char\l# shortReadableName() : char\l# superclass() : ReferenceBinding\l# superInterfaces() : ReferenceBinding\l# toString() : String\l}"
	 ]

	 UnresolvedReferenceBinding [
		 label = "{UnresolvedReferenceBinding|# resolvedType : ReferenceBinding\l# wrappers : TypeBinding\l|# UnresolvedReferenceBinding(char, PackageBinding) : \l# addWrapper(TypeBinding) : \l# debugName() : String\l# resolve(LookupEnvironment, boolean) : ReferenceBinding\l# setResolvedType(ReferenceBinding, LookupEnvironment) : \l# toString() : String\l}"
	 ]

	 UpdatedMethodBinding [
		 label = "{UpdatedMethodBinding|+ updatedDeclaringClass : TypeBinding\l|# UpdatedMethodBinding(TypeBinding, int, char, TypeBinding, TypeBinding, ReferenceBinding, ReferenceBinding) : \l# constantPoolDeclaringClass() : TypeBinding\l}"
	 ]

	 VariableBinding [
		 label = "{VariableBinding|+ modifiers : int\l+ type : TypeBinding\l+ name : char\l- constant : Constant\l+ id : int\l|# VariableBinding(char, TypeBinding, int, Constant) : \l# constant() : Constant\l# isBlankFinal() : boolean\l# isConstantValue() : boolean\l# isFinal() : boolean\l# readableName() : char\l# setConstant(Constant) : \l# toString() : String\l}"
	 ]

	 WildcardBinding [
		 label = "{WildcardBinding|# genericType : ReferenceBinding\l# rank : int\l+ bound : TypeBinding\l# genericSignature : char\l+ kind : int\l# superclass : ReferenceBinding\l# superInterfaces : ReferenceBinding\l# typeVariable : TypeVariableBinding\l# environment : LookupEnvironment\l|# WildcardBinding(ReferenceBinding, int, TypeBinding, int, LookupEnvironment) : \l# boundCheck(TypeBinding) : boolean\l# collectSubstitutes(TypeBinding, Map) : \l# debugName() : String\l# erasure() : TypeBinding\
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AbortCompilation [
		 label = "{AbortCompilation|+ compilationResult : CompilationResult\l+ exception : Throwable\l+ problem : CategorizedProblem\l+ isSilent : boolean\l+ silentException : RuntimeException\l- serialVersionUID : long\l|# AbortCompilation() : \l# AbortCompilation(CompilationResult, CategorizedProblem) : \l# AbortCompilation(CompilationResult, Throwable) : \l# AbortCompilation(boolean, RuntimeException) : \l# getMessage() : String\l# updateContext(InvocationSite, CompilationResult) : \l# updateContext(ASTNode, CompilationResult) : \l# getKey() : String\l}"
	 ]

	 AbortCompilationUnit [
		 label = "{AbortCompilationUnit|- serialVersionUID : long\l+ encoding : String\l|# AbortCompilationUnit(CompilationResult, CategorizedProblem) : \l# AbortCompilationUnit(CompilationResult, IOException, String) : \l}"
	 ]

	 AbortMethod [
		 label = "{AbortMethod|- serialVersionUID : long\l|# AbortMethod(CompilationResult, CategorizedProblem) : \l}"
	 ]

	 AbortType [
		 label = "{AbortType|- serialVersionUID : long\l|# AbortType(CompilationResult, CategorizedProblem) : \l}"
	 ]

	 DefaultProblem [
		 label = "{DefaultProblem|- fileName : char\l- id : int\l- startPosition : int\l- endPosition : int\l- line : int\l+ column : int\l- severity : int\l- arguments : String\l- message : String\l- MARKER_TYPE_PROBLEM : String\l- MARKER_TYPE_TASK : String\l+ EMPTY_VALUES : Object\l|# DefaultProblem(char, String, int, String, int, int, int, int, int) : \l# errorReportSource(char) : String\l# getArguments() : String\l# getCategoryID() : int\l# getID() : int\l# getInternalCategoryMessage() : String\l# getMarkerType() : String\l# getMessage() : String\l# getOriginatingFileName() : char\l# getSourceEnd() : int\l# getSourceColumnNumber() : int\l# getSourceLineNumber() : int\l# getSourceStart() : int\l# isError() : boolean\l# isWarning() : boolean\l# isInfo() : boolean\l# setOriginatingFileName(char) : \l# setSourceEnd(int) : \l# setSourceLineNumber(int) : \l# setSourceStart(int) : \l# toString() : String\l}"
	 ]

	 DefaultProblemFactory [
		 label = "{DefaultProblemFactory|+ messageTemplates : HashtableOfInt\l- locale : Locale\l- DEFAULT_LOCALE_TEMPLATES : HashtableOfInt\l- DOUBLE_QUOTES : char\l- SINGLE_QUOTE : char\l- FIRST_ARGUMENT : char\l|# DefaultProblemFactory() : \l# DefaultProblemFactory(Locale) : \l# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l# keyFromID(int) : int\l# getLocale() : Locale\l# setLocale(Locale) : \l# getLocalizedMessage(int, String) : String\l# getLocalizedMessage(int, int, String) : String\l# localizedMessage(CategorizedProblem) : String\l# loadMessageTemplates(Locale) : HashtableOfInt\l}"
	 ]

	 ProblemHandler [
		 label = "{ProblemHandler|+ NoArgument : String\l+ policy : IErrorHandlingPolicy\l+ problemFactory : IProblemFactory\l+ options : CompilerOptions\l- rootPolicy : IErrorHandlingPolicy\l|# ProblemHandler(IErrorHandlingPolicy, CompilerOptions, IProblemFactory) : \l# computeSeverity(int) : int\l# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l# handle(int, String, int, String, int, int, int, ReferenceContext, CompilationResult) : \l# handle(int, String, String, int, int, ReferenceContext, CompilationResult) : \l# record(CategorizedProblem, CompilationResult, ReferenceContext, boolean) : \l# switchErrorHandlingPolicy(IErrorHandlingPolicy) : IErrorHandlingPolicy\l# suspendTempErrorHandlingPolicy() : IErrorHandlingPolicy\l# resumeTempErrorHandlingPolicy(IErrorHandlingPolicy) : \l}"
	 ]

	 ProblemReporter [
		 label = "{ProblemReporter|+ referenceContext : ReferenceContext\l- positionScanner : Scanner\l- underScoreIsLambdaParameter : boolean\l- FIELD_ACCESS : byte\l|# ProblemReporter(IErrorHandlingPolicy, CompilerOptions, IProblemFactory) : \l# getElaborationId(int, byte) : int\l# getIrritant(int) : int\l# getProblemCategory(int, int) : int\l# abortDueToInternalError(String) : \l# abortDueToInternalError(String, ASTNode) : \l# abstractMethodCannotBeOverridden(SourceTypeBinding, MethodBinding) : \l# abstractMethodInAbstractClass(SourceTypeBinding, AbstractMethodDeclaration) : \l# abstractMethodInConcreteClass(SourceTypeBinding) : \l# abstractMethodMustBeImplemented(SourceTypeBinding, MethodBinding) : \l# abstractMethodMustBeImplemented(SourceTypeBinding, MethodBinding, MethodBinding) : \l# abstractMethodNeedingNoBody(AbstractMethodDeclaration) : \l# alreadyDefinedLabel(char, ASTNode) : \l# annotationCannotOverrideMethod(MethodBinding, MethodBinding) : \l# annotationCircularity(TypeBinding, TypeBinding, TypeReference) : \l# annotationMembersCannotHaveParameters(AnnotationMethodDeclaration) : \l# annotationMembersCannotHaveTypeParameters(AnnotationMethodDeclaration) : \l# annotationTypeDeclarationCannotHaveConstructor(ConstructorDeclaration) : \l# annotationTypeDeclarationCannotHaveSuperclass(TypeDeclaration) : \l# annotationTypeDeclarationCannotHaveSuperinterfaces(TypeDeclaration) : \l# annotationTypeUsedAsSuperinterface(SourceTypeBinding, TypeReference, ReferenceBinding) : \l# annotationValueMustBeAnnotation(TypeBinding, char, Expression, TypeBinding) : \l# annotationValueMustBeArrayInitializer(TypeBinding, char, Expression) : \l# annotationValueMustBeClassLiteral(TypeBinding, char, Expression) : \l# annotationValueMustBeConstant(TypeBinding, char, Expression, boolean) : \l# anonymousClassCannotExtendFinalClass(TypeReference, TypeBinding) : \l# argumentTypeCannotBeVoid(ASTNode, Argument) : \l# argumentTypeCannotBeVoidArray(Argument) : \l# arrayConstantsOnlyInArrayInitializers(int, int) : \l# assignmentHasNoEffect(AbstractVariableDeclaration, char) : \l# assignmentHasNoEffect(Assignment, char) : \l# attemptToReturnNonVoidExpression(ReturnStatement, TypeBinding) : \l# attemptToReturnVoidValue(ReturnStatement) : \l# autoboxing(Expression, TypeBinding, TypeBinding) : \l# boundCannotBeArray(ASTNode, TypeBinding) : \l# boundMustBeAnInterface(ASTNode, TypeBinding) : \l# bytecodeExceeds64KLimit(AbstractMethodDeclaration) : \l# bytecodeExceeds64KLimit(LambdaExpression) : \l# bytecodeExceeds64KLimit(TypeDeclaration) : \l# cannotAllocateVoidArray(Expression) : \l# cannotAssignToFinalField(FieldBinding, ASTNode) : \l# cannotAssignToFinalLocal(LocalVariableBinding, ASTNode) : \l# cannotAssignToFinalOuterLocal(LocalVariableBinding, ASTNode) : \l# cannotDefineDimensionsAndInitializer(ArrayAllocationExpression) : \l# cannotDireclyInvokeAbstractMethod(ASTNode, MethodBinding) : \l# cannotExtendEnum(SourceTypeBinding, TypeReference, TypeBinding) : \l# cannotImportPackage(ImportReference) : \l# cannotInstantiate(Expression, TypeBinding) : \l# cannotInvokeSuperConstructorInEnum(ExplicitConstructorCall, MethodBinding) : \l# cannotReadSource(CompilationUnitDeclaration, AbortCompilationUnit, boolean) : \l# cannotReferToNonFinalOuterLocal(LocalVariableBinding, ASTNode) : \l# cannotReferToNonEffectivelyFinalOuterLocal(LocalVariableBinding, ASTNode) : \l# cannotReturnInInitializer(ASTNode) : \l# cannotThrowNull(ASTNode) : \l# cannotThrowType(ASTNode, TypeBinding) : \l# illegalArrayOfUnionType(char, TypeReference) : \l# cannotUseQualifiedEnumConstantInCaseLabel(Reference, FieldBinding) : \l# cannotUseSuperInCodeSnippet(int, int) : \l# cannotUseSuperInJavaLangObject(ASTNode) : \l# targetTypeIsNotAFunctionalInterface(FunctionalExpression) : \l# illFormedParameterizationOfFunctionalInterface(FunctionalExpression) : \l# lambdaSignatureMismatched(LambdaExpression) : \l# lambdaParameterTypeMismatched(Argument, TypeReference, TypeBinding) : \l# lambdaExpressionCannotImplementGenericMethod(LambdaExpression, MethodBinding) : \l# caseExpressionMustBeConstant(Expression) : \l# classExtendFinalClass(SourceTypeBinding, TypeReference, TypeBinding) : \l# codeSnippetMissingClass(String, int, int) : \l# codeSnippetMissingMethod(String, String, String, int, int) : \l# comparingIdenticalExpressions(Expression) : \l# computeSeverity(int) : int\l# conditionalArgumentsIncompatibleTypes(ConditionalExpression, TypeBinding, TypeBinding) : \l# conflictingImport(ImportReference) : \l# constantOutOfRange(Literal, TypeBinding) : \l# corruptedSignature(TypeBinding, char, int) : \l# defaultMethodOverridesObjectMethod(MethodBinding) : \l# defaultModifierIllegallySpecified(int, int) : \l# deprecatedField(FieldBinding, ASTNode) : \l# deprecatedMethod(MethodBinding, ASTNode) : \l# deprecatedType(TypeBinding, ASTNode) : \l# deprecatedType(TypeBinding, ASTNode, int) : \l# disallowedTargetForAnnotation(Annotation) : \l# explitAnnotationTargetRequired(Annotation) : \l# polymorphicMethodNotBelow17(ASTNode) : \l# multiCatchNotBelow17(ASTNode) : \l# duplicateAnnotation(Annotation, long) : \l# duplicateAnnotationValue(TypeBinding, MemberValuePair) : \l# duplicateBounds(ASTNode, TypeBinding) : \l# duplicateCase(CaseStatement) : \l# duplicateDefaultCase(ASTNode) : \l# duplicateEnumSpecialMethod(SourceTypeBinding, AbstractMethodDeclaration) : \l# duplicateFieldInType(SourceTypeBinding, FieldDeclaration) : \l# duplicateImport(ImportReference) : \l# duplicateInheritedMethods(SourceTypeBinding, MethodBinding, MethodBinding, boolean) : \l# duplicateInitializationOfBlankFinalField(FieldBinding, Reference) : \l# duplicateInitializationOfFinalLocal(LocalVariableBinding, ASTNode) : \l# duplicateMethodInType(AbstractMethodDeclaration, boolean, int) : \l# duplicateModifierForField(ReferenceBinding, FieldDeclaration) : \l# duplicateModifierForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# duplicateModifierForType(SourceTypeBinding) : \l# duplicateModifierForVariable(LocalDeclaration, boolean) : \l# duplicateNestedType(TypeDeclaration) : \l# duplicateSuperinterface(SourceTypeBinding, TypeReference, ReferenceBinding) : \l# duplicateTargetInTargetAnnotation(TypeBinding, NameReference) : \l# duplicateTypeParameterInType(TypeParameter) : \l# duplicateTypes(CompilationUnitDeclaration, TypeDeclaration) : \l# emptyControlFlowStatement(int, int) : \l# enumAbstractMethodMustBeImplemented(AbstractMethodDeclaration) : \l# enumConstantMustImplementAbstractMethod(AbstractMethodDeclaration, FieldDeclaration) : \l# enumConstantsCannotBeSurroundedByParenthesis(Expression) : \l# enumStaticFieldUsedDuringInitialization(FieldBinding, ASTNode) : \l# enumSwitchCannotTargetField(Reference, FieldBinding) : \l# errorNoMethodFor(MessageSend, TypeBinding, TypeBinding) : \l# errorNoMethodFor(Expression, TypeBinding, char, TypeBinding) : \l# errorThisSuperInStatic(ASTNode) : \l# errorNoSuperInInterface(ASTNode) : \l# expressionShouldBeAVariable(Expression) : \l# fakeReachable(ASTNode) : \l# fieldHiding(FieldDeclaration, Binding) : \l# fieldsOrThisBeforeConstructorInvocation(ASTNode) : \l# finallyMustCompleteNormally(Block) : \l# finalMethodCannotBeOverridden(MethodBinding, MethodBinding) : \l# finalVariableBound(TypeVariableBinding, TypeReference) : \l# forbiddenReference(FieldBinding, ASTNode, byte, String, int) : \l# forbiddenReference(MethodBinding, ASTNode, byte, String, int) : \l# forbiddenReference(TypeBinding, ASTNode, byte, String, int) : \l# forwardReference(Reference, int, FieldBinding) : \l# forwardTypeVariableReference(ASTNode, TypeVariableBinding) : \l# genericTypeCannotExtendThrowable(TypeDeclaration) : \l# handle(int, String, int, String, int, int, int) : \l# handle(int, String, String, int, int) : \l# handle(int, String, String, int, int, CompilationResult) : \l# handle(int, String, String, int, int, int) : \l# hiddenCatchBlock(ReferenceBinding, ASTNode) : \l# hierarchyCircularity(SourceTypeBinding, ReferenceBinding, TypeReference) : \l# hierarchyCircularity(TypeVariableBinding, ReferenceBinding, TypeReference) : \l# hierarchyHasProblems(SourceTypeBinding) : \l# illegalAbstractModifierCombinationForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalAbstractModifierCombinationForMethod(AbstractMethodDeclaration) : \l# illegalAccessFromTypeVariable(TypeVariableBinding, ASTNode) : \l# illegalClassLiteralForTypeVariable(TypeVariableBinding, ASTNode) : \l# illegalExtendedDimensions(AnnotationMethodDeclaration) : \l# illegalExtendedDimensions(Argument) : \l# illegalGenericArray(TypeBinding, ASTNode) : \l# illegalInstanceOfGenericType(TypeBinding, ASTNode) : \l# illegalLocalTypeDeclaration(TypeDeclaration) : \l# illegalModifierCombinationFinalAbstractForClass(SourceTypeBinding) : \l# illegalModifierCombinationFinalVolatileForField(ReferenceBinding, FieldDeclaration) : \l# illegalModifierCombinationForInterfaceMethod(AbstractMethodDeclaration) : \l# illegalModifierForAnnotationField(FieldDeclaration) : \l# illegalModifierForAnnotationMember(AbstractMethodDeclaration) : \l# illegalModifierForAnnotationMemberType(SourceTypeBinding) : \l# illegalModifierForAnnotationType(SourceTypeBinding) : \l# illegalModifierForClass(SourceTypeBinding) : \l# illegalModifierForEnum(SourceTypeBinding) : \l# illegalModifierForEnumConstant(ReferenceBinding, FieldDeclaration) : \l# illegalModifierForEnumConstructor(AbstractMethodDeclaration) : \l# illegalModifierForField(ReferenceBinding, FieldDeclaration) : \l# illegalModifierForInterface(SourceTypeBinding) : \l# illegalModifierForInterfaceField(FieldDeclaration) : \l# illegalModifierForInterfaceMethod(AbstractMethodDeclaration, boolean) : \l# illegalModifierForLocalClass(SourceTypeBinding) : \l# illegalModifierForMemberClass(SourceTypeBinding) : \l# illegalModifierForMemberEnum(SourceTypeBinding) : \l# illegalModifierForMemberInterface(SourceTypeBinding) : \l# illegalModifierForMethod(AbstractMethodDeclaration) : \l# illegalModifierForVariable(LocalDeclaration, boolean) : \l# illegalPrimitiveOrArrayTypeForEnclosingInstance(TypeBinding, ASTNode) : \l# illegalQualifiedParameterizedTypeAllocation(TypeReference, TypeBinding) : \l# illegalStaticModifierForMemberType(SourceTypeBinding) : \l# illegalUsageOfQualifiedTypeReference(QualifiedTypeReference) : \l# illegalUsageOfWildcard(TypeReference) : \l# illegalVararg(Argument, AbstractMethodDeclaration) : \l# illegalVarargInLambda(Argument) : \l# illegalThisDeclaration(Argument) : \l# illegalSourceLevelForThis(Argument) : \l# disallowedThisParameter(Receiver) : \l# illegalQualifierForExplicitThis(Receiver, TypeBinding) : \l# illegalQualifierForExplicitThis2(Receiver) : \l# illegalTypeForExplicitThis(Receiver, TypeBinding) : \l# illegalThis(Argument) : \l# defaultMethodsNotBelow18(MethodDeclaration) : \l# staticInterfaceMethodsNotBelow18(MethodDeclaration) : \l# referenceExpressionsNotBelow18(ReferenceExpression) : \l# lambdaExpressionsNotBelow18(LambdaExpression) : \l# illegalVisibilityModifierCombinationForField(ReferenceBinding, FieldDeclaration) : \l# illegalVisibilityModifierCombinationForMemberType(SourceTypeBinding) : \l# illegalVisibilityModifierCombinationForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalVisibilityModifierForInterfaceMemberType(SourceTypeBinding) : \l# illegalVoidExpression(ASTNode) : \l# importProblem(ImportReference, Binding) : \l# incompatibleExceptionInThrowsClause(SourceTypeBinding, MethodBinding, MethodBinding, ReferenceBinding) : \l# incompatibleReturnType(MethodBinding, MethodBinding) : \l# incorrectArityForParameterizedType(ASTNode, TypeBinding, TypeBinding) : \l# incorrectArityForParameterizedType(ASTNode, TypeBinding, TypeBinding, int) : \l# diamondNotBelow17(ASTNode) : \l# diamondNotBelow17(ASTNode, int) : \l# incorrectLocationForNonEmptyDimension(ArrayAllocationExpression, int) : \l# incorrectSwitchType(Expression, TypeBinding) : \l# indirectAccessToStaticField(ASTNode, FieldBinding) : \l# indirectAccessToStaticMethod(ASTNode, MethodBinding) : \l# inheritedDefaultMethodConflictsWithOtherInherited(SourceTypeBinding, MethodBinding, MethodBinding) : \l# inheritedMethodReducesVisibility(int, int, MethodBinding, MethodBinding) : \l# inheritedMethodReducesVisibility(SourceTypeBinding, MethodBinding, MethodBinding) : \l# inheritedMethodReducesVisibility(TypeParameter, MethodBinding, MethodBinding) : \l# inheritedMethodsHaveIncompatibleReturnTypes(ASTNode, MethodBinding, int) : \l# inheritedMethodsHaveIncompatibleReturnTypes(SourceTypeBinding, MethodBinding, int, boolean) : \l# inheritedMethodsHaveNameClash(SourceTypeBinding, MethodBinding, MethodBinding) : \l# initializerMustCompleteNormally(FieldDeclaration) : \l# innerTypesCannotDeclareStaticInitializers(ReferenceBinding, Initializer) : \l# interfaceCannotHaveConstructors(ConstructorDeclaration) : \l# interfaceCannotHaveInitializers(char, FieldDeclaration) : \l# invalidAnnotationMemberType(MethodDeclaration) : \l# invalidBreak(ASTNode) : \l# invalidConstructor(Statement, MethodBinding) : \l# invalidContinue(ASTNode) : \l# invalidEnclosingType(Expression, TypeBinding, ReferenceBinding) : \l# invalidExplicitConstructorCall(ASTNode) : \l# invalidExpressionAsStatement(Expression) : \l# invalidField(FieldReference, TypeBinding) : \l# invalidField(NameReference, FieldBinding) : \l# invalidField(QualifiedNameReference, FieldBinding, int, TypeBinding) : \l# invalidFileNameForPackageAnnotations(Annotation) : \l# invalidMethod(MessageSend, MethodBinding, Scope) : \l# invalidNullToSynchronize(Expression) : \l# invalidOperator(BinaryExpression, TypeBinding, TypeBinding) : \l# invalidOperator(CompoundAssignment, TypeBinding, TypeBinding) : \l# invalidOperator(UnaryExpression, TypeBinding) : \l# invalidParameterizedExceptionType(TypeBinding, ASTNode) : \l# invalidParenthesizedExpression(ASTNode) : \l# invalidType(ASTNode, TypeBinding) : \l# invalidTypeForCollection(Expression) : \l# invalidTypeForCollectionTarget14(Expression) : \l# invalidTypeToSynchronize(Expression, TypeBinding) : \l# invalidTypeVariableAsException(TypeBinding, ASTNode) : \l# invalidUnaryExpression(Expression) : \l# invalidUsageOfAnnotation(Annotation) : \l# invalidUsageOfAnnotationDeclarations(TypeDeclaration) : \l# invalidUsageOfEnumDeclarations(TypeDeclaration) : \l# invalidUsageOfForeachStatements(LocalDeclaration, Expression) : \l# invalidUsageOfStaticImports(ImportReference) : \l# invalidUsageOfTypeArguments(TypeReference, TypeReference) : \l# invalidUsageOfTypeParameters(TypeParameter, TypeParameter) : \l# invalidUsageOfTypeParametersForAnnotationDeclaration(TypeDeclaration) : \l# invalidUsageOfTypeParametersForEnumDeclaration(TypeDeclaration) : \l# invalidUsageOfVarargs(Argument) : \l# invalidUsageOfTypeAnnotations(Annotation) : \l# toleratedMisplacedTypeAnnotations(Annotation, Annotation) : \l# misplacedTypeAnnotations(Annotation, Annotation) : \l# illegalUsageOfTypeAnnotations(Annotation) : \l# illegalTypeAnnotationsInStaticMemberAccess(Annotation, Annotation) : \l# isClassPathCorrect(char, CompilationUnitDeclaration, Object) : \l# isIdentifier(int) : boolean\l# isKeyword(int) : boolean\l# isLiteral(int) : boolean\l# isRecoveredName(char) : boolean\l# isRecoveredName(char) : boolean\l# javadocAmbiguousMethodReference(int, int, Binding, int) : \l# javadocDeprecatedField(FieldBinding, ASTNode, int) : \l# javadocDeprecatedMethod(MethodBinding, ASTNode, int) : \l# javadocDeprecatedType(TypeBinding, ASTNode, int) : \l# javadocDeprecatedType(TypeBinding, ASTNode, int, int) : \l# javadocDuplicatedParamTag(char, int, int, int) : \l# javadocDuplicatedReturnTag(int, int) : \l# javadocDuplicatedTag(char, int, int) : \l# javadocDuplicatedThrowsClassName(TypeReference, int) : \l# javadocEmptyReturnTag(int, int, int) : \l# javadocErrorNoMethodFor(MessageSend, TypeBinding, TypeBinding, int) : \l# javadocHiddenReference(int, int, Scope, int) : \l# javadocInvalidConstructor(Statement, MethodBinding, int) : \l# javadocInvalidField(FieldReference, Binding, TypeBinding, int) : \l# javadocInvalidMemberTypeQualification(int, int, int) : \l# javadocInvalidMethod(MessageSend, MethodBinding, int) : \l# javadocInvalidParamTagName(int, int) : \l# javadocInvalidParamTypeParameter(int, int) : \l# javadocInvalidReference(int, int) : \l# javadocInvalidSeeHref(int, int) : \l# javadocInvalidSeeReferenceArgs(int, int) : \l# javadocInvalidSeeUrlReference(int, int) : \l# javadocInvalidTag(int, int) : \l# javadocInvalidThrowsClass(int, int) : \l# javadocInvalidThrowsClassName(TypeReference, int) : \l# javadocInvalidType(ASTNode, TypeBinding, int) : \l# javadocInvalidValueReference(int, int, int) : \l# javadocMalformedSeeReference(int, int) : \l# javadocMissing(int, int, int) : \l# javadocMissing(int, int, int, int) : \l# javadocMissingHashCharacter(int, int, String) : \l# javadocMissingIdentifier(int, int, int) : \l# javadocMissingParamName(int, int, int) : \l# javadocMissingParamTag(char, int, int, int) : \l# javadocMissingReference(int, int, int) : \l# javadocMissingReturnTag(int, int, int) : \l# javadocMissingTagDescription(char, int, int, int) : \l# javadocMissingTagDescriptionAfterReference(int, int, int) : \l# javadocMissingThrowsClassName(int, int, int) : \l# javadocMissingThrowsTag(TypeReference, int) : \l# javadocUndeclaredParamTagName(char, int, int, int) : \l# javadocUnexpectedTag(int, int) : \l# javadocUnexpectedText(int, int) : \l# javadocUnterminatedInlineTag(int, int) : \l# javadocVisibility(int, int) : boolean\l# javadocVisibilityArgument(int, int) : String\l# localVariableHiding(LocalDeclaration, Binding, boolean) : \l# localVariableNonNullComparedToNull(LocalVariableBinding, ASTNode) : \l# localVariableNullComparedToNonNull(LocalVariableBinding, ASTNode) : \l# expressionNonNullComparison(Expression, boolean) : boolean\l# nullAnnotationUnsupportedLocation(Annotation) : \l# nullAnnotationUnsupportedLocation(TypeReference) : \l# localVariableNullInstanceof(LocalVariableBinding, ASTNode) : \l# localVariableNullReference(LocalVariableBinding, ASTNode) : \l# localVariablePotentialNullReference(LocalVariableBinding, ASTNode) : \l# potentialNullUnboxing(ASTNode, TypeBinding) : \l# nullUnboxing(ASTNode, TypeBinding) : \l# nullableFieldDereference(FieldBinding, long) : \l# localVariableRedundantCheckOnNonNull(LocalVariableBinding, ASTNode) : \l# localVariableRedundantCheckOnNull(LocalVariableBinding, ASTNode) : \l# localVariableRedundantNullAssignment(LocalVariableBinding, ASTNode) : \l# methodMustOverride(AbstractMethodDeclaration, long) : \l# methodNameClash(MethodBinding, MethodBinding, int) : \l# methodNameClashHidden(MethodBinding, MethodBinding) : \l# methodNeedBody(AbstractMethodDeclaration) : \l# methodNeedingNoBody(MethodDeclaration) : \l# methodWithConstructorName(MethodDeclaration) : \l# methodCanBeDeclaredStatic(MethodDeclaration) : \l# methodCanBePotentiallyDeclaredStatic(MethodDeclaration) : \l# missingDeprecatedAnnotationForField(FieldDeclaration) : \l# missingDeprecatedAnnotationForMethod(AbstractMethodDeclaration) : \l# missingDeprecatedAnnotationForType(TypeDeclaration) : \l# notAFunctionalInterface(TypeDeclaration) : \l# missingEnumConstantCase(SwitchStatement, FieldBinding) : \l# missingDefaultCase(SwitchStatement, boolean, TypeBinding) : \l# missingOverrideAnnotation(AbstractMethodDeclaration) : \l# missingOverrideAnnotationForInterfaceMethodImplementation(AbstractMethodDeclaration) : \l# missingReturnType(AbstractMethodDeclaration) : \l# missingSemiColon(Expression) : \l# missingSerialVersion(TypeDeclaration) : \l# missingSynchronizedOnInheritedMethod(MethodBinding, MethodBinding) : \l# missingTypeInConstructor(ASTNode, MethodBinding) : \l# missingTypeInLambda(LambdaExpression, MethodBinding) : \l# missingTypeInMethod(ASTNode, MethodBinding) : \l# missingValueForAnnotationMember(Annotation, char) : \l# mustDefineDimensionsOrInitializer(ArrayAllocationExpression) : \l# mustUseAStaticMethod(MessageSend, MethodBinding) : \l# nativeMethodsCannotBeStrictfp(ReferenceBinding, AbstractMethodDeclaration) : \l# needImplementation(ASTNode) : \l# needToEmulateFieldAccess(FieldBinding, ASTNode, boolean) : \l# needToEmulateMethodAccess(MethodBinding, ASTNode) : \l# noAdditionalBoundAfterTypeVariable(TypeReference) : \l# nodeSourceEnd(ASTNode) : int\l# nodeSourceEnd(Binding, ASTNode) : int\l# nodeSourceEnd(Binding, ASTNode, int) : int\l# nodeSourceStart(ASTNode) : int\l# nodeSourceStart(Binding, ASTNode) : int\l# nodeSourceStart(Binding, ASTNode, int) : int\l# noMoreAvailableSpaceForArgument(LocalVariableBinding, ASTNode) : \l# noMoreAvailableSpaceForConstant(TypeDeclaration) : \l# noMoreAvailableSpaceForLocal(LocalVariableBinding, ASTNode) : \l# noMoreAvailableSpaceInConstantPool(TypeDeclaration) : \l# nonExternalizedStringLiteral(ASTNode) : \l# nonGenericTypeCannotBeParameterized(int, ASTNode, TypeBinding, TypeBinding) : \l# nonStaticAccessToStaticField(ASTNode, FieldBinding) : \l# nonStaticAccessToStaticField(ASTNode, FieldBinding, int) : \l# nonStaticAccessToStaticMethod(ASTNode, MethodBinding) : \l# nonStaticContextForEnumMemberType(SourceTypeBinding) : \l# noSuchEnclosingInstance(TypeBinding, ASTNode, boolean) : \l# notCompatibleTypesError(EqualExpression, TypeBinding, TypeBinding) : \l# notCompatibleTypesError(InstanceOfExpression, TypeBinding, TypeBinding) : \l# notCompatibleTypesErrorInForeach(Expression, TypeBinding, TypeBinding) : \l# objectCannotBeGeneric(TypeDeclaration) : \l# objectCannotHaveSuperTypes(SourceTypeBinding) : \l# objectMustBeClass(SourceTypeBinding) : \l# operatorOnlyValidOnNumericType(CompoundAssignment, TypeBinding, TypeBinding) : \l# overridesDeprecatedMethod(MethodBinding, MethodBinding) : \l# overridesMethodWithoutSuperInvocation(MethodBinding) : \l# overridesPackageDefaultMethod(MethodBinding, MethodBinding) : \l# packageCollidesWithType(CompilationUnitDeclaration) : \l# packageIsNotExpectedPackage(CompilationUnitDeclaration) : \l# parameterAssignment(LocalVariableBinding, ASTNode) : \l# parameterBoundAsString(TypeVariableBinding, boolean) : String\l# parameterizedMemberTypeMissingArguments(ASTNode, TypeBinding, int) : \l# parseError(int, int, int, char, String, String) : \l# parseErrorDeleteToken(int, int, int, char, String) : \l# parseErrorDeleteTokens(int, int) : \l# parseErrorInsertAfterToken(int, int, int, char, String, String) : \l# parseErrorInsertBeforeToken(int, int, int, char, String, String) : \l# parseErrorInsertToComplete(int, int, String, String) : \l# parseErrorInsertToCompletePhrase(int, int, String) : \l# parseErrorInsertToCompleteScope(int, int, String) : \l# parseErrorInvalidToken(int, int, int, char, String, String) : \l# parseErrorMergeTokens(int, int, String) : \l# parseErrorMisplacedConstruct(int, int) : \l# parseErrorNoSuggestion(int, int, int, char, String) : \l# parseErrorNoSuggestionForTokens(int, int) : \l# parseErrorReplaceToken(int, int, int, char, String, String) : \l# parseErrorReplaceTokens(int, int, String) : \l# parseErrorUnexpectedEnd(int, int) : \l# possibleAccidentalBooleanAssignment(Assignment) : \l# possibleFallThroughCase(CaseStatement) : \l# publicClassMustMatchFileName(CompilationUnitDeclaration, TypeDeclaration) : \l# rawMemberTypeCannotBeParameterized(ASTNode, ReferenceBinding, TypeBinding) : \l# rawTypeReference(ASTNode, TypeBinding) : \l# recursiveConstructorInvocation(ExplicitConstructorCall) : \l# redefineArgument(Argument) : \l# redefineLocal(LocalDeclaration) : \l# redundantSuperInterface(SourceTypeBinding, TypeReference, ReferenceBinding, ReferenceBinding) : \l# referenceMustBeArrayTypeAt(TypeBinding, ArrayReference) : \l# repeatedAnnotationWithContainer(Annotation, Annotation) : \l# containerAnnotationTypeMustHaveValue(ASTNode, ReferenceBinding) : \l# containerAnnotationTypeHasWrongValueType(ASTNode, ReferenceBinding, ReferenceBinding, TypeBinding) : \l# containerAnnotationTypeHasNonDefaultMembers(ASTNode, ReferenceBinding, char) : \l# containerAnnotationTypeHasShorterRetention(ASTNode, ReferenceBinding, String, ReferenceBinding, String) : \l# repeatableAnnotationTypeTargetMismatch(ASTNode, ReferenceBinding, ReferenceBinding, String) : \l# repeatableAnnotationTypeIsDocumented(ASTNode, ReferenceBinding, ReferenceBinding) : \l# repeatableAnnotationTypeIsInherited(ASTNode, ReferenceBinding, ReferenceBinding) : \l# repeatableAnnotationWithRepeatingContainer(Annotation, ReferenceBinding) : \l# reset() : \l# resourceHasToImplementAutoCloseable(TypeBinding, TypeReference) : \l# retrieveClosingAngleBracketPosition(int) : int\l# retrieveEndingPositionAfterOpeningParenthesis(int, int, int) : int\l# retrieveStartingPositionAfterOpeningParenthesis(int, int, int) : int\l# scannerError(Parser, String) : \l# shouldImplementHashcode(SourceTypeBinding) : \l# shouldReturn(TypeBinding, ASTNode) : \l# signalNoImplicitStringConversionForCharArrayExpression(Expression) : \l# staticAndInstanceConflict(MethodBinding, MethodBinding) : \l# staticFieldAccessToNonStaticVariable(ASTNode, FieldBinding) : \l# staticInheritedMethodConflicts(SourceTypeBinding, MethodBinding, MethodBinding) : \l# staticMemberOfParameterizedType(ASTNode, ReferenceBinding, int) : \l# stringConstantIsExceedingUtf8Limit(ASTNode) : \l# superclassMustBeAClass(SourceTypeBinding, TypeReference, ReferenceBinding) : \l# superfluousSemicolon(int, int) : \l# superinterfaceMustBeAnInterface(SourceTypeBinding, TypeReference, ReferenceBinding) : \l# superinterfacesCollide(TypeBinding, ASTNode, TypeBinding, TypeBinding) : \l# superTypeCannotUseWildcard(SourceTypeBinding, TypeReference, TypeBinding) : \l# syntaxError(int, int, int, int, char, String, String) : \l# replaceIfSynthetic(String) : String\l# task(String, String, String, int, int) : \l# tooManyDimensions(ASTNode) : \l# tooManyFields(TypeDeclaration) : \l# tooManyMethods(TypeDeclaration) : \l# tooManyParametersForSyntheticMethod(AbstractMethodDeclaration) : \l# typeCastError(CastExpression, TypeBinding, TypeBinding) : \l# typeCollidesWithEnclosingType(TypeDeclaration) : \l# typeCollidesWithPackage(CompilationUnitDeclaration, TypeDeclaration) : \l# typeHiding(TypeDeclaration, TypeBinding) : \l# typeHiding(TypeDeclaration, TypeVariableBinding) : \l# typeHiding(TypeParameter, Binding) : \l# notAnnotationType(TypeBinding, ASTNode) : \l# typeMismatchError(TypeBinding, TypeBinding, ASTNode, ASTNode) : \l# typeMismatchError(TypeBinding, TypeVariableBinding, ReferenceBinding, ASTNode) : \l# typesAsString(MethodBinding, boolean) : String\l# typesAsString(MethodBinding, TypeBinding, boolean) : String\l# typesAsString(MethodBinding, boolean, boolean) : String\l# typesAsString(MethodBinding, TypeBinding, boolean, boolean) : String\l# typesAsString(TypeBinding, boolean) : String\l# typesAsString(TypeBinding, boolean, boolean) : String\l# undefinedAnnotationValue(TypeBinding, MemberValuePair) : \l# undefinedLabel(BranchStatement) : \l# undefinedTypeVariableSignature(char, ReferenceBinding) : \l# undocumentedEmptyBlock(int, int) : \l# unexpectedStaticModifierForField(SourceTypeBinding, FieldDeclaration) : \l# unexpectedStaticModifierForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# unhandledException(TypeBinding, ASTNode) : \l# unhandledExceptionFromAutoClose(TypeBinding, ASTNode) : \l# unhandledWarningToken(Expression) : \l# uninitializedBlankFinalField(FieldBinding, ASTNode) : \l# uninitializedNonNullField(FieldBinding, ASTNode) : \l# uninitializedLocalVariable(LocalVariableBinding, ASTNode) : \l# methodHasMissingSwitchDefault() : boolean\l# unmatchedBracket(int, ReferenceContext, CompilationResult) : \l# unnecessaryCast(CastExpression) : \l# unnecessaryElse(ASTNode) : \l# unnecessaryEnclosingInstanceSpecification(Expression, ReferenceBinding) : \l# unnecessaryInstanceof(InstanceOfExpression, TypeBinding) : \l# unnecessaryNLSTags(int, int) : \l# unnecessaryTypeArgumentsForMethodInvocation(MethodBinding, TypeBinding, TypeReference) : \l# unqualifiedFieldAccess(NameReference, FieldBinding) : \l# unreachableCatchBlock(ReferenceBinding, ASTNode) : \l# unreachableCode(Statement) : \l# unresolvableReference(NameReference, Binding) : \l# unsafeCast(CastExpression, Scope) : \l# unsafeNullnessCast(CastExpression, Scope) : \l# unsafeGenericArrayForVarargs(TypeBinding, ASTNode) : \l# unsafeRawFieldAssignment(FieldBinding, TypeBinding, ASTNode) : \l# unsafeRawGenericMethodInvocation(ASTNode, MethodBinding, TypeBinding) : \l# unsafeRawInvocation(ASTNode, MethodBinding) : \l# unsafeReturnTypeOverride(MethodBinding, MethodBinding, SourceTypeBinding) : \l# unsafeTypeConversion(Expression, TypeBinding, TypeBinding) : \l# unsafeElementTypeConversion(Expression, TypeBinding, TypeBinding) : \l# unusedArgument(LocalDeclaration) : \l# unusedExceptionParameter(LocalDeclaration) : \l# unusedDeclaredThrownException(ReferenceBinding, AbstractMethodDeclaration, ASTNode) : \l# unusedImport(ImportReference) : \l# unusedLabel(LabeledStatement) : \l# unusedLocalVariable(LocalDeclaration) : \l# unusedObjectAllocation(AllocationExpression) : \l# unusedPrivateConstructor(ConstructorDeclaration) : \l# unusedPrivateField(FieldDeclaration) : \l# unusedPrivateMethod(AbstractMethodDeclaration) : \l# excludeDueToAnnotation(Annotation, int) : boolean\l# unusedPrivateType(TypeDeclaration) : \l# unusedTypeParameter(TypeParameter) : \l# unusedWarningToken(Expression) : \l# useAssertAsAnIdentifier(int, int) : \l# useEnumAsAnIdentifier(int, int) : \l# illegalUseOfUnderscoreAsAnIdentifier(int, int, boolean) : \l# varargsArgumentNeedCast(MethodBinding, TypeBinding, InvocationSite) : \l# varargsConflict(MethodBinding, MethodBinding, SourceTypeBinding) : \l# safeVarargsOnFixedArityMethod(MethodBinding) : \l# safeVarargsOnNonFinalInstanceMethod(MethodBinding) : \l# possibleHeapPollutionFromVararg(AbstractVariableDeclaration) : \l# variableTypeCannotBeVoid(AbstractVariableDeclaration) : \l# variableTypeCannotBeVoidArray(AbstractVariableDeclaration) : \l# visibilityConflict(MethodBinding, MethodBinding) : \l# wildcardAssignment(TypeBinding, TypeBinding, ASTNode) : \l# wildcardInvocation(ASTNode, TypeBinding, MethodBinding, TypeBinding) : \l# wrongSequenceOfExceptionTypesError(TypeReference, TypeBinding, TypeBinding) : \l# wrongSequenceOfExceptionTypes(TypeReference, TypeBinding, TypeBinding) : \l# autoManagedResourcesNotBelow17(LocalDeclaration) : \l# cannotInferElidedTypes(AllocationExpression) : \l# diamondNotWithExplicitTypeArguments(TypeReference) : \l# rawConstructorReferenceNotWithExplicitTypeArguments(TypeReference) : \l# diamondNotWithAnoymousClasses(TypeReference) : \l# redundantSpecificationOfTypeArguments(ASTNode, TypeBinding) : \l# potentiallyUnclosedCloseable(FakedTrackingVariable, ASTNode) : \l# unclosedCloseable(FakedTrackingVariable, ASTNode) : \l# explicitlyClosedAutoCloseable(FakedTrackingVariable) : \l# nullityMismatch(Expression, TypeBinding, TypeBinding, int, char) : \l# nullityMismatchIsNull(Expression, TypeBinding) : \l# nullityMismatchSpecdNullable(Expression, TypeBinding, char) : \l# nullityMismatchPotentiallyNull(Expression, TypeBinding, char) : \l# nullityMismatchIsUnknown(Expression, TypeBinding, TypeBinding, char) : \l# illegalRedefinitionToNonNullParameter(Argument, ReferenceBinding, char) : \l# parameterLackingNullableAnnotation(Argument, ReferenceBinding, char) : \l# parameterLackingNonnullAnnotation(Argument, ReferenceBinding, char) : \l# illegalParameterRedefinition(Argument, ReferenceBinding, TypeBinding) : \l# illegalReturnRedefinition(AbstractMethodDeclaration, MethodBinding, char) : \l# referenceExpressionArgumentNullityMismatch(ReferenceExpression, TypeBinding, TypeBinding, MethodBinding, int, NullAnnotationMatching) : \l# illegalReturnRedefinition(ASTNode, MethodBinding, boolean, TypeBinding) : \l# messageSendPotentialNullReference(MethodBinding, ASTNode) : \l# messageSendRedundantCheckOnNonNull(MethodBinding, ASTNode) : \l# expressionNullReference(ASTNode) : \l# expressionPotentialNullReference(ASTNode) : \l# cannotImplementIncompatibleNullness(MethodBinding, MethodBinding, boolean) : \l# nullAnnotationIsRedundant(AbstractMethodDeclaration, int) : \l# nullAnnotationIsRedundant(FieldDeclaration) : \l# nullDefaultAnnotationIsRedundant(ASTNode, Annotation, Binding) : \l# contradictoryNullAnnotations(Annotation) : \l# contradictoryNullAnnotations(Annotation) : \l# contradictoryNullAnnotations(int, int) : \l# contradictoryNullAnnotationsInferred(MethodBinding, ASTNode) : \l# contradictoryNullAnnotationsInferred(MethodBinding, int, int, boolean) : \l# contradictoryNullAnnotationsOnBounds(Annotation, long) : \l# conflictingNullAnnotations(MethodBinding, ASTNode, MethodBinding) : \l# conflictingInheritedNullAnnotations(ASTNode, boolean, MethodBinding, boolean, MethodBinding) : \l# illegalAnnotationForBaseType(TypeReference, Annotation, long) : \l# illegalAnnotationForBaseType(Annotation, TypeBinding) : \l# annotatedTypeName(TypeBinding, char) : String\l# shortAnnotatedTypeName(TypeBinding, char) : String\l# internalAnnotatedTypeName(char, char, int) : String\l# findAnnotation(Annotation, int) : Annotation\l# missingNonNullByDefaultAnnotation(TypeDeclaration) : \l# illegalModifiersForElidedType(Argument) : \l# illegalModifiers(int, int) : \l# arrayReferencePotentialNullReference(ArrayReference) : \l# nullityMismatchingTypeAnnotation(Expression, TypeBinding, TypeBinding, NullAnnotationMatching) : \l# nullityMismatchTypeArgument(TypeBinding, TypeBinding, ASTNode) : \l# cannotRedefineTypeArgumentNullity(TypeBinding, Binding, ASTNode) : \l# implicitObjectBoundNoNullDefault(TypeReference) : \l# dereferencingNullableExpression(Expression) : \l# dereferencingNullableExpression(long, LookupEnvironment) : \l# onlyReferenceTypesInIntersectionCast(TypeReference) : \l# illegalArrayTypeInIntersectionCast(TypeReference) : \l# intersectionCastNotBelow18(TypeReference) : \l# duplicateBoundInIntersectionCast(TypeReference) : \l# multipleFunctionalInterfaces(FunctionalExpression) : \l# lambdaRedeclaresArgument(Argument) : \l# lambdaRedeclaresLocal(LocalDeclaration) : \l# descriptorHasInvisibleType(FunctionalExpression, ReferenceBinding) : \l# methodReferenceSwingsBothWays(ReferenceExpression, MethodBinding, MethodBinding) : \l# methodMustBeAccessedStatically(ReferenceExpression, MethodBinding) : \l# methodMustBeAccessedWithInstance(ReferenceExpression, MethodBinding) : \l# invalidArrayConstructorReference(ReferenceExpression, TypeBinding, TypeBinding) : \l# constructedArrayIncompatible(ReferenceExpression, TypeBinding, TypeBinding) : \l# danglingReference(ReferenceExpression, TypeBinding, char, TypeBinding) : \l# unhandledException(TypeBinding, ReferenceExpression) : \l# incompatibleReturnType(ReferenceExpression, MethodBinding, TypeBinding) : \l# illegalSuperAccess(TypeBinding, TypeBinding, ASTNode) : \l# illegalSuperCallBypassingOverride(InvocationSite, MethodBinding, ReferenceBinding) : \l# disallowedTargetForContainerAnnotation(Annotation, TypeBinding) : \l# genericInferenceError(String, InvocationSite) : \l# genericInferenceProblem(String, InvocationSite, int) : \l# uninternedIdentityComparison(EqualExpression, TypeBinding, TypeBinding, CompilationUnitDeclaration) : \l# invalidTypeArguments(TypeReference) : \l}"
	 ]

	 ProblemSeverities [
		 label = "{ProblemSeverities||# Warning() : int\l# Error() : int\l# AbortCompilation() : int\l# AbortCompilationUnit() : int\l# AbortType() : int\l# AbortMethod() : int\l# Abort() : int\l# Optional() : int\l# SecondaryError() : int\l# Fatal() : int\l# Ignore() : int\l# InternalError() : int\l# Info() : int\l}"
	 ]

	 ShouldNotImplement [
		 label = "{ShouldNotImplement|- serialVersionUID : long\l|# ShouldNotImplement(String) : \l}"
	 ]

	 AbortCompilation [
		 label = "{AbortCompilation|+ compilationResult : CompilationResult\l+ exception : Throwable\l+ problem : IProblem\l+ isSilent : boolean\l+ silentException : RuntimeException\l- serialVersionUID : long\l|# AbortCompilation() : \l# AbortCompilation(CompilationResult, IProblem) : \l# AbortCompilation(CompilationResult, Throwable) : \l# AbortCompilation(boolean, RuntimeException) : \l# updateContext(InvocationSite, CompilationResult) : \l# updateContext(ASTNode, CompilationResult) : \l}"
	 ]

	 AbortCompilationUnit [
		 label = "{AbortCompilationUnit|- serialVersionUID : long\l|# AbortCompilationUnit(CompilationResult, IProblem) : \l}"
	 ]

	 AbortMethod [
		 label = "{AbortMethod|- serialVersionUID : long\l|# AbortMethod(CompilationResult, IProblem) : \l}"
	 ]

	 AbortType [
		 label = "{AbortType|- serialVersionUID : long\l|# AbortType(CompilationResult, IProblem) : \l}"
	 ]

	 DefaultProblem [
		 label = "{DefaultProblem|- LINE_DELIMITER : String\l- fileName : char\l- id : int\l- startPosition : int\l- severity : int\l- arguments : String\l- message : String\l|# DefaultProblem(char, String, int, String, int, int, int, int) : \l# errorReportSource(char) : String\l# getArguments() : String\l# getID() : int\l# getMessage() : String\l# getOriginatingFileName() : char\l# getSourceEnd() : int\l# getSourceLineNumber() : int\l# getSourceStart() : int\l# isError() : boolean\l# isWarning() : boolean\l# setOriginatingFileName(char) : \l# setSourceEnd(int) : \l# setSourceLineNumber(int) : \l# setSourceStart(int) : \l# toString() : String\l}"
	 ]

	 DefaultProblemFactory [
		 label = "{DefaultProblemFactory|+ messageTemplates : HashtableOfInt\l- locale : Locale\l- DEFAULT_LOCALE_TEMPLATES : HashtableOfInt\l- DOUBLE_QUOTES : char\l- SINGLE_QUOTE : char\l|# DefaultProblemFactory() : \l# DefaultProblemFactory(Locale) : \l# createProblem(char, int, String, String, int, int, int, int) : IProblem\l# keyFromID(int) : int\l# getLocale() : Locale\l# getLocalizedMessage(int, String) : String\l# localizedMessage(IProblem) : String\l# loadMessageTemplates(Locale) : HashtableOfInt\l}"
	 ]

	 ProblemHandler [
		 label = "{ProblemHandler|+ NoArgument : String\l# policy : IErrorHandlingPolicy\l+ problemFactory : IProblemFactory\l+ options : CompilerOptions\l|# ProblemHandler(IErrorHandlingPolicy, CompilerOptions, IProblemFactory) : \l# computeSeverity(int) : int\l# createProblem(char, int, String, String, int, int, int, int) : IProblem\l# handle(int, String, String, int, int, int, ReferenceContext, CompilationResult) : \l# handle(int, String, String, int, int, ReferenceContext, CompilationResult) : \l# record(IProblem, CompilationResult, ReferenceContext) : \l# searchLineNumber(int, int) : int\l}"
	 ]

	 ProblemReporter [
		 label = "{ProblemReporter|+ referenceContext : ReferenceContext\l|# ProblemReporter(IErrorHandlingPolicy, CompilerOptions, IProblemFactory) : \l# abortDueToInternalError(String) : \l# abortDueToInternalError(String, ASTNode) : \l# abstractMethodCannotBeOverridden(SourceTypeBinding, MethodBinding) : \l# abstractMethodInAbstractClass(SourceTypeBinding, AbstractMethodDeclaration) : \l# abstractMethodMustBeImplemented(SourceTypeBinding, MethodBinding) : \l# abstractMethodNeedingNoBody(AbstractMethodDeclaration) : \l# alreadyDefinedLabel(char, ASTNode) : \l# annotationTypeMemberDeclarationWithConstructorName(AnnotationTypeMemberDeclaration) : \l# anonymousClassCannotExtendFinalClass(Expression, TypeBinding) : \l# argumentTypeCannotBeVoid(SourceTypeBinding, AbstractMethodDeclaration, Argument) : \l# argumentTypeCannotBeVoidArray(SourceTypeBinding, AbstractMethodDeclaration, Argument) : \l# arrayConstantsOnlyInArrayInitializers(int, int) : \l# assignmentHasNoEffect(Assignment, char) : \l# attemptToReturnNonVoidExpression(ReturnStatement, TypeBinding) : \l# attemptToReturnVoidValue(ReturnStatement) : \l# boundsMustBeAnInterface(ASTNode, TypeBinding) : \l# bytecodeExceeds64KLimit(AbstractMethodDeclaration) : \l# bytecodeExceeds64KLimit(TypeDeclaration) : \l# cannotAllocateVoidArray(Expression) : \l# cannotAssignToFinalField(FieldBinding, ASTNode) : \l# cannotAssignToFinalLocal(LocalVariableBinding, ASTNode) : \l# cannotAssignToFinalOuterLocal(LocalVariableBinding, ASTNode) : \l# cannotDeclareLocalInterface(char, int, int) : \l# cannotDefineDimensionsAndInitializer(ArrayAllocationExpression) : \l# cannotDireclyInvokeAbstractMethod(MessageSend, MethodBinding) : \l# cannotImportPackage(ImportReference) : \l# cannotInstantiate(TypeReference, TypeBinding) : \l# cannotReferToNonFinalOuterLocal(LocalVariableBinding, ASTNode) : \l# cannotReturnInInitializer(ASTNode) : \l# cannotThrowNull(ThrowStatement) : \l# cannotThrowType(SourceTypeBinding, AbstractMethodDeclaration, TypeReference, TypeBinding) : \l# cannotUseSuperInCodeSnippet(int, int) : \l# cannotUseSuperInJavaLangObject(ASTNode) : \l# caseExpressionMustBeConstant(Expression) : \l# classExtendFinalClass(SourceTypeBinding, TypeReference, TypeBinding) : \l# codeSnippetMissingClass(String, int, int) : \l# codeSnippetMissingMethod(String, String, String, int, int) : \l# computeSeverity(int) : int\l# conditionalArgumentsIncompatibleTypes(ConditionalExpression, TypeBinding, TypeBinding) : \l# conflictingImport(ImportReference) : \l# constantOutOfFormat(NumberLiteral) : \l# constantOutOfRange(Literal, TypeBinding) : \l# corruptedSignature(TypeBinding, char, int) : \l# deprecatedField(FieldBinding, ASTNode) : \l# deprecatedMethod(MethodBinding, ASTNode) : \l# deprecatedType(TypeBinding, ASTNode) : \l# duplicateCase(CaseStatement) : \l# duplicateDefaultCase(ASTNode) : \l# duplicateFieldInType(SourceTypeBinding, FieldDeclaration) : \l# duplicateImport(ImportReference) : \l# duplicateInitializationOfBlankFinalField(FieldBinding, Reference) : \l# duplicateInitializationOfFinalLocal(LocalVariableBinding, ASTNode) : \l# duplicateMethodInType(SourceTypeBinding, AbstractMethodDeclaration) : \l# duplicateModifierForField(ReferenceBinding, FieldDeclaration) : \l# duplicateModifierForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# duplicateModifierForType(SourceTypeBinding) : \l# duplicateModifierForVariable(LocalDeclaration, boolean) : \l# duplicateNestedType(TypeDeclaration) : \l# duplicateSuperinterface(SourceTypeBinding, TypeDeclaration, ReferenceBinding) : \l# duplicateTypeParameterInType(TypeParameter) : \l# duplicateTypes(CompilationUnitDeclaration, TypeDeclaration) : \l# emptyControlFlowStatement(int, int) : \l# errorNoMethodFor(MessageSend, TypeBinding, TypeBinding) : \l# errorThisSuperInStatic(ASTNode) : \l# expressionShouldBeAVariable(Expression) : \l# fieldHiding(FieldDeclaration, Binding) : \l# fieldLocation(FieldBinding, ASTNode) : int\l# fieldsOrThisBeforeConstructorInvocation(ThisReference) : \l# finallyMustCompleteNormally(Block) : \l# finalMethodCannotBeOverridden(MethodBinding, MethodBinding) : \l# finalVariableBound(TypeVariableBinding, TypeReference) : \l# forbiddenReference(TypeBinding, ASTNode, String) : \l# forwardReference(Reference, int, TypeBinding) : \l# forwardTypeVariableReference(ASTNode, TypeVariableBinding) : \l# genericTypeCannotExtendThrowable(TypeDeclaration) : \l# handle(int, String, String, int, int) : \l# handle(int, String, String, int, int, CompilationResult) : \l# handle(int, String, String, int, int, int) : \l# hiddenCatchBlock(ReferenceBinding, ASTNode) : \l# hidingEnclosingType(TypeDeclaration) : \l# hierarchyCircularity(SourceTypeBinding, ReferenceBinding, TypeReference) : \l# hierarchyHasProblems(SourceTypeBinding) : \l# illegalAbstractModifierCombinationForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalClassLiteralForTypeVariable(TypeVariableBinding, ASTNode) : \l# illegalExtendedDimensions(AnnotationTypeMemberDeclaration) : \l# illegalGenericArray(TypeBinding, ASTNode) : \l# illegalInstanceOfGenericType(TypeBinding, ASTNode) : \l# illegalModifierCombinationFinalAbstractForClass(SourceTypeBinding) : \l# illegalModifierCombinationFinalVolatileForField(ReferenceBinding, FieldDeclaration) : \l# illegalModifierForClass(SourceTypeBinding) : \l# illegalModifierForField(ReferenceBinding, FieldDeclaration) : \l# illegalModifierForInterface(SourceTypeBinding) : \l# illegalModifierForInterfaceField(ReferenceBinding, FieldDeclaration) : \l# illegalModifierForInterfaceMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalModifierForLocalClass(SourceTypeBinding) : \l# illegalModifierForMemberClass(SourceTypeBinding) : \l# illegalModifierForMemberInterface(SourceTypeBinding) : \l# illegalModifierForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalModifierForVariable(LocalDeclaration, boolean) : \l# illegalPrimitiveOrArrayTypeForEnclosingInstance(TypeBinding, ASTNode) : \l# illegalStaticModifierForMemberType(SourceTypeBinding) : \l# illegalUsageOfQualifiedTypeReference(QualifiedTypeReference) : \l# illegalVisibilityModifierCombinationForField(ReferenceBinding, FieldDeclaration) : \l# illegalVisibilityModifierCombinationForMemberType(SourceTypeBinding) : \l# illegalVisibilityModifierCombinationForMethod(ReferenceBinding, AbstractMethodDeclaration) : \l# illegalVisibilityModifierForInterfaceMemberType(SourceTypeBinding) : \l# illegalVoidExpression(ASTNode) : \l# importProblem(ImportReference, Binding) : \l# incompatibleExceptionInThrowsClause(SourceTypeBinding, MethodBinding, MethodBinding, ReferenceBinding) : \l# incompatibleReturnType(MethodBinding, MethodBinding) : \l# incorrectArityForParameterizedType(ASTNode, TypeBinding, TypeBinding) : \l# incorrectLocationForEmptyDimension(ArrayAllocationExpression, int) : \l# incorrectSwitchType(Expression, TypeBinding) : \l# indirectAccessToStaticField(ASTNode, FieldBinding) : \l# indirectAccessToStaticMethod(ASTNode, MethodBinding) : \l# indirectAccessToStaticType(ASTNode, ReferenceBinding) : \l# inheritedMethodReducesVisibility(SourceTypeBinding, MethodBinding, MethodBinding) : \l# inheritedMethodsHaveIncompatibleReturnTypes(SourceTypeBinding, MethodBinding, int) : \l# initializerMustCompleteNormally(FieldDeclaration) : \l# innerTypesCannotDeclareStaticInitializers(ReferenceBinding, ASTNode) : \l# interfaceCannotHaveConstructors(ConstructorDeclaration) : \l# interfaceCannotHaveInitializers(SourceTypeBinding, FieldDeclaration) : \l# invalidBreak(ASTNode) : \l# invalidConstructor(Statement, MethodBinding) : \l# invalidContinue(ASTNode) : \l# invalidEnclosingType(Expression, TypeBinding, ReferenceBinding) : \l# invalidExplicitConstructorCall(ASTNode) : \l# invalidExpressionAsStatement(Expression) : \l# invalidField(FieldReference, TypeBinding) : \l# invalidField(NameReference, FieldBinding) : \l# invalidField(QualifiedNameReference, FieldBinding, int, TypeBinding) : \l# invalidFileNameForPackageAnnotations(Annotation) : \l# invalidMethod(MessageSend, MethodBinding) : \l# invalidNullToSynchronize(Expression) : \l# invalidOperator(BinaryExpression, TypeBinding, TypeBinding) : \l# invalidOperator(CompoundAssignment, TypeBinding, TypeBinding) : \l# invalidOperator(UnaryExpression, TypeBinding) : \l# invalidParameterizedExceptionType(TypeBinding, ASTNode) : \l# invalidParenthesizedExpression(ASTNode) : \l# invalidType(ASTNode, TypeBinding) : \l# invalidTypeForCollection(Expression) : \l# invalidTypeReference(Expression) : \l# invalidTypeToSynchronize(Expression, TypeBinding) : \l# invalidTypeVariableAsException(TypeBinding, ASTNode) : \l# invalidUnaryExpression(Expression) : \l# invalidUsageOfAnnotation(Annotation) : \l# invalidUsageOfAnnotationDeclarations(AnnotationTypeDeclaration) : \l# invalidUsageOfEnumDeclarations(EnumDeclaration) : \l# invalidUsageOfForeachStatements(LocalDeclaration, Expression) : \l# invalidUsageOfStaticImports(ImportReference) : \l# invalidUsageOfTypeArguments(TypeReference, TypeReference) : \l# invalidUsageOfTypeParameters(TypeParameter, TypeParameter) : \l# invalidUsageOfVarargs(Argument) : \l# isClassPathCorrect(char, CompilationUnitDeclaration) : \l# isIdentifier(int) : boolean\l# isKeyword(int) : boolean\l# isLiteral(int) : boolean\l# javadocAmbiguousMethodReference(int, int, Binding, int) : \l# javadocDeprecatedField(FieldBinding, ASTNode, int) : \l# javadocDeprecatedMethod(MethodBinding, ASTNode, int) : \l# javadocDeprecatedType(TypeBinding, ASTNode, int) : \l# javadocDuplicatedParamTag(JavadocSingleNameReference, int) : \l# javadocDuplicatedReturnTag(int, int) : \l# javadocDuplicatedThrowsClassName(TypeReference, int) : \l# javadocEmptyReturnTag(int, int) : \l# javadocErrorNoMethodFor(MessageSend, TypeBinding, TypeBinding, int) : \l# javadocInvalidConstructor(Statement, MethodBinding, int) : \l# javadocInvalidField(int, int, Binding, TypeBinding, int) : \l# javadocInvalidMethod(MessageSend, MethodBinding, int) : \l# javadocInvalidParamName(JavadocSingleNameReference, int) : \l# javadocInvalidReference(int, int) : \l# javadocInvalidSeeReferenceArgs(int, int) : \l# javadocInvalidSeeUrlReference(int, int) : \l# javadocInvalidTag(int, int) : \l# javadocInvalidThrowsClass(int, int) : \l# javadocInvalidThrowsClassName(TypeReference, int) : \l# javadocInvalidType(ASTNode, TypeBinding, int) : \l# javadocInvalidValueReference(int, int) : \l# javadocMalformedSeeReference(int, int) : \l# javadocMissing(int, int, int) : \l# javadocMissingHashCharacter(int, int, String) : \l# javadocMissingParamName(int, int) : \l# javadocMissingParamTag(Argument, int) : \l# javadocMissingReference(int, int) : \l# javadocMissingReturnTag(int, int, int) : \l# javadocMissingThrowsClassName(int, int) : \l# javadocMissingThrowsTag(TypeReference, int) : \l# javadocUnexpectedTag(int, int) : \l# javadocUnexpectedText(int, int) : \l# javadocUnterminatedInlineTag(int, int) : \l# javadocVisibility(int, int) : boolean\l# javadocVisibilityArgument(int, int) : String\l# localVariableHiding(LocalDeclaration, Binding, boolean) : \l# methodNameClash(MethodBinding, MethodBinding) : \l# methodNeedBody(AbstractMethodDeclaration) : \l# methodNeedingNoBody(MethodDeclaration) : \l# methodWithConstructorName(MethodDeclaration) : \l# parameterizedMemberTypeMissingArguments(ASTNode, TypeBinding) : \l# missingReturnType(AbstractMethodDeclaration) : \l# missingSemiColon(Expression) : \l# missingSerialVersion(TypeDeclaration) : \l# mustDefineDimensionsOrInitializer(ArrayAllocationExpression) : \l# mustSpecifyPackage(CompilationUnitDeclaration) : \l# mustUseAStaticMethod(MessageSend, MethodBinding) : \l# nativeMethodsCannotBeStrictfp(ReferenceBinding, AbstractMethodDeclaration) : \l# needImplementation() : \l# needToEmulateFieldAccess(FieldBinding, ASTNode, boolean) : \l# needToEmulateMethodAccess(MethodBinding, ASTNode) : \l# nestedClassCannotDeclareInterface(TypeDeclaration) : \l# noMoreAvailableSpaceForArgument(LocalVariableBinding, ASTNode) : \l# noMoreAvailableSpaceForConstant(TypeDeclaration) : \l# noMoreAvailableSpaceForLocal(LocalVariableBinding, ASTNode) : \l# noMoreAvailableSpaceInConstantPool(TypeDeclaration) : \l# nonExternalizedStringLiteral(ASTNode) : \l# nonGenericTypeCannotBeParameterized(ASTNode, TypeBinding, TypeBinding) : \l# nonStaticAccessToStaticField(ASTNode, FieldBinding) : \l# nonStaticAccessToStaticMethod(ASTNode, MethodBinding) : \l# noSuchEnclosingInstance(TypeBinding, ASTNode, boolean) : \l# notCompatibleTypesError(EqualExpression, TypeBinding, TypeBinding) : \l# notCompatibleTypesError(InstanceOfExpression, TypeBinding, TypeBinding) : \l# notCompatibleTypesErrorInForeach(Expression, TypeBinding, TypeBinding) : \l# objectCannotBeGeneric(TypeDeclaration) : \l# objectCannotHaveSuperTypes(SourceTypeBinding) : \l# operatorOnlyValidOnNumericType(CompoundAssignment, TypeBinding, TypeBinding) : \l# overridesDeprecatedMethod(MethodBinding, MethodBinding) : \l# overridesPackageDefaultMethod(MethodBinding, MethodBinding) : \l# packageCollidesWithType(CompilationUnitDeclaration) : \l# packageIsNotExpectedPackage(CompilationUnitDeclaration) : \l# parameterBoundAsString(TypeVariableBinding, boolean) : String\l# parametersAsString(TypeBinding, boolean) : String\l# parseError(int, int, int, char, String, String) : \l# parseErrorDeleteToken(int, int, int, char, String) : \l# parseErrorDeleteTokens(int, int) : \l# parseErrorInsertAfterToken(int, int, int, char, String, String) : \l# parseErrorInsertBeforeToken(int, int, int, char, String, String) : \l# parseErrorInsertToComplete(int, int, String, String) : \l# parseErrorInsertToCompletePhrase(int, int, String) : \l# parseErrorInsertToCompleteScope(int, int, String) : \l# parseErrorInvalidToken(int, int, int, char, String, String) : \l# parseErrorMergeTokens(int, int, String) : \l# parseErrorMisplacedConstruct(int, int) : \l# parseErrorNoSuggestion(int, int, int, char, String) : \l# parseErrorNoSuggestionForTokens(int, int) : \l# parseErrorReplaceToken(int, int, int, char, String, String) : \l# parseErrorReplaceTokens(int, int, String) : \l# parseErrorUnexpectedEnd(int, int) : \l# possibleAccidentalBooleanAssignment(Assignment) : \l# publicClassMustMatchFileName(CompilationUnitDeclaration, TypeDeclaration) : \l# rawMemberTypeCannotBeParameterized(ASTNode, ReferenceBinding, TypeBinding) : \l# recursiveConstructorInvocation(ExplicitConstructorCall) : \l# redefineArgument(Argument) : \l# redefineLocal(LocalDeclaration) : \l# referenceMustBeArrayTypeAt(TypeBinding, ArrayReference) : \l# returnTypeCannotBeVoidArray(SourceTypeBinding, MethodDeclaration) : \l# scannerError(Parser, String) : \l# shouldReturn(TypeBinding, ASTNode) : \l# signalNoImplicitStringConversionForCharArrayExpression(Expression) : \l# staticAndInstanceConflict(MethodBinding, MethodBinding) : \l# staticFieldAccessToNonStaticVariable(ASTNode, FieldBinding) : \l# staticInheritedMethodConflicts(SourceTypeBinding, MethodBin
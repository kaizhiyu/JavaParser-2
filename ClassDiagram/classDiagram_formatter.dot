digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 Messages [
		 label = "{Messages|- BUNDLE_NAME : String\l+ CommandLineConfigFile : String\l+ CommandLineDone : String\l+ CommandLineErrorConfig : String\l+ CommandLineErrorFileTryFullPath : String\l+ CommandLineErrorFile : String\l+ CommandLineErrorFileDir : String\l+ CommandLineErrorQuietVerbose : String\l+ CommandLineErrorNoConfigFile : String\l+ CommandLineFormatting : String\l+ CommandLineStart : String\l+ CommandLineUsage : String\l+ ConfigFileNotFoundErrorTryFullPath : String\l+ ConfigFileReadingError : String\l+ FormatProblem : String\l+ CaughtException : String\l+ ExceptionSkip : String\l- ARG_CONFIG : String\l- ARG_HELP : String\l- ARG_QUIET : String\l- ARG_VERBOSE : String\l- configName : String\l- options : Map\l- PDE_LAUNCH : String\l- quiet : boolean\l- verbose : boolean\l|# null() : \l# null() : \l# bind(String) : String\l# bind(String, Object) : String\l# bind(String, Object, Object) : String\l# bind(String, Object) : String\l# displayHelp() : \l# displayHelp(String) : \l# formatDirTree(File, CodeFormatter) : \l# formatFile(File, CodeFormatter) : \l# processCommandLine(String) : File\l# readConfig(String) : Properties\l# start(IApplicationContext) : Object\l# stop() : \l}"
	 ]

	 DefaultCodeFormatterConstants [
		 label = "{DefaultCodeFormatterConstants|+ END_OF_LINE : String\l+ FALSE : String\l+ FORMATTER_ALIGN_TYPE_MEMBERS_ON_COLUMNS : String\l+ FORMATTER_ALIGN_FIELDS_GROUPING_BLANK_LINES : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ALLOCATION_EXPRESSION : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ENUM_CONSTANT : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_ANNOTATION : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_EXPLICIT_CONSTRUCTOR_CALL : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_METHOD_INVOCATION : String\l+ FORMATTER_ALIGNMENT_FOR_ARGUMENTS_IN_QUALIFIED_ALLOCATION_EXPRESSION : String\l+ FORMATTER_ALIGNMENT_FOR_ASSIGNMENT : String\l+ FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION : String\l+ FORMATTER_ALIGNMENT_FOR_COMPACT_IF : String\l+ FORMATTER_ALIGNMENT_FOR_CONDITIONAL_EXPRESSION : String\l+ FORMATTER_ALIGNMENT_FOR_ENUM_CONSTANTS : String\l+ FORMATTER_ALIGNMENT_FOR_EXPRESSIONS_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_ALIGNMENT_FOR_METHOD_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_MULTIPLE_FIELDS : String\l+ FORMATTER_ALIGNMENT_FOR_PARAMETERS_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_PARAMETERS_IN_METHOD_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_RESOURCES_IN_TRY : String\l+ FORMATTER_ALIGNMENT_FOR_SELECTOR_IN_METHOD_INVOCATION : String\l+ FORMATTER_ALIGNMENT_FOR_SUPERCLASS_IN_TYPE_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_ENUM_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_SUPERINTERFACES_IN_TYPE_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_THROWS_CLAUSE_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_THROWS_CLAUSE_IN_METHOD_DECLARATION : String\l+ FORMATTER_ALIGNMENT_FOR_UNION_TYPE_IN_MULTICATCH : String\l+ FORMATTER_BLANK_LINES_AFTER_IMPORTS : String\l+ FORMATTER_BLANK_LINES_AFTER_PACKAGE : String\l+ FORMATTER_BLANK_LINES_AT_BEGINNING_OF_METHOD_BODY : String\l+ FORMATTER_BLANK_LINES_BEFORE_FIELD : String\l+ FORMATTER_BLANK_LINES_BEFORE_FIRST_CLASS_BODY_DECLARATION : String\l+ FORMATTER_BLANK_LINES_BEFORE_IMPORTS : String\l+ FORMATTER_BLANK_LINES_BEFORE_MEMBER_TYPE : String\l+ FORMATTER_BLANK_LINES_BEFORE_METHOD : String\l+ FORMATTER_BLANK_LINES_BEFORE_NEW_CHUNK : String\l+ FORMATTER_BLANK_LINES_BEFORE_PACKAGE : String\l+ FORMATTER_BLANK_LINES_BETWEEN_IMPORT_GROUPS : String\l+ FORMATTER_BLANK_LINES_BETWEEN_TYPE_DECLARATIONS : String\l+ FORMATTER_BRACE_POSITION_FOR_ANNOTATION_TYPE_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_ARRAY_INITIALIZER : String\l+ FORMATTER_BRACE_POSITION_FOR_BLOCK : String\l+ FORMATTER_BRACE_POSITION_FOR_BLOCK_IN_CASE : String\l+ FORMATTER_BRACE_POSITION_FOR_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_ENUM_CONSTANT : String\l+ FORMATTER_BRACE_POSITION_FOR_ENUM_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_METHOD_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_SWITCH : String\l+ FORMATTER_BRACE_POSITION_FOR_TYPE_DECLARATION : String\l+ FORMATTER_BRACE_POSITION_FOR_LAMBDA_BODY : String\l+ FORMATTER_COMMENT_CLEAR_BLANK_LINES : String\l+ FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_JAVADOC_COMMENT : String\l+ FORMATTER_COMMENT_CLEAR_BLANK_LINES_IN_BLOCK_COMMENT : String\l+ FORMATTER_COMMENT_FORMAT : String\l+ FORMATTER_COMMENT_FORMAT_LINE_COMMENT : String\l+ FORMATTER_COMMENT_FORMAT_LINE_COMMENT_STARTING_ON_FIRST_COLUMN : String\l+ FORMATTER_COMMENT_PRESERVE_WHITE_SPACE_BETWEEN_CODE_AND_LINE_COMMENT : String\l+ FORMATTER_COMMENT_FORMAT_BLOCK_COMMENT : String\l+ FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT : String\l+ FORMATTER_COMMENT_FORMAT_HEADER : String\l+ FORMATTER_COMMENT_FORMAT_HTML : String\l+ FORMATTER_COMMENT_FORMAT_SOURCE : String\l+ FORMATTER_COMMENT_INDENT_PARAMETER_DESCRIPTION : String\l+ FORMATTER_COMMENT_INDENT_ROOT_TAGS : String\l+ FORMATTER_COMMENT_INSERT_EMPTY_LINE_BEFORE_ROOT_TAGS : String\l+ FORMATTER_COMMENT_INSERT_NEW_LINE_FOR_PARAMETER : String\l+ FORMATTER_COMMENT_LINE_LENGTH : String\l+ FORMATTER_COMMENT_NEW_LINES_AT_BLOCK_BOUNDARIES : String\l+ FORMATTER_COMMENT_NEW_LINES_AT_JAVADOC_BOUNDARIES : String\l+ FORMATTER_COMPACT_ELSE_IF : String\l+ FORMATTER_CONTINUATION_INDENTATION : String\l+ FORMATTER_CONTINUATION_INDENTATION_FOR_ARRAY_INITIALIZER : String\l+ FORMATTER_USE_ON_OFF_TAGS : String\l+ FORMATTER_DISABLING_TAG : String\l+ FORMATTER_ENABLING_TAG : String\l+ FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ANNOTATION_DECLARATION_HEADER : String\l+ FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_CONSTANT_HEADER : String\l+ FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ENUM_DECLARATION_HEADER : String\l+ FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_TYPE_HEADER : String\l+ FORMATTER_INDENT_BREAKS_COMPARE_TO_CASES : String\l+ FORMATTER_INDENT_EMPTY_LINES : String\l+ FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BLOCK : String\l+ FORMATTER_INDENT_STATEMENTS_COMPARE_TO_BODY : String\l+ FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_CASES : String\l+ FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH : String\l+ FORMATTER_INDENTATION_SIZE : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_MEMBER : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_LOCAL_VARIABLE : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_LABEL : String\l+ FORMATTER_INSERT_NEW_LINE_AFTER_OPENING_BRACE_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_NEW_LINE_AT_END_OF_FILE_IF_MISSING : String\l+ FORMATTER_INSERT_NEW_LINE_BEFORE_CATCH_IN_TRY_STATEMENT : String\l+ FORMATTER_INSERT_NEW_LINE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_NEW_LINE_BEFORE_ELSE_IN_IF_STATEMENT : String\l+ FORMATTER_INSERT_NEW_LINE_BEFORE_FINALLY_IN_TRY_STATEMENT : String\l+ FORMATTER_INSERT_NEW_LINE_BEFORE_WHILE_IN_DO_STATEMENT : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANNOTATION_DECLARATION : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANONYMOUS_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_BLOCK : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ENUM_DECLARATION : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_METHOD_BODY : String\l+ FORMATTER_INSERT_NEW_LINE_IN_EMPTY_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_AND_IN_TYPE_PARAMETER : String\l+ FORMATTER_INSERT_SPACE_AFTER_ASSIGNMENT_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_AT_IN_ANNOTATION_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_BINARY_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_AFTER_CLOSING_BRACE_IN_BLOCK : String\l+ FORMATTER_INSERT_SPACE_AFTER_CLOSING_PAREN_IN_CAST : String\l+ FORMATTER_INSERT_SPACE_AFTER_COLON_IN_ASSERT : String\l+ FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CASE : String\l+ FORMATTER_INSERT_SPACE_AFTER_COLON_IN_CONDITIONAL : String\l+ FORMATTER_INSERT_SPACE_AFTER_COLON_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_COLON_IN_LABELED_STATEMENT : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_DECLARATION_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_CONSTRUCTOR_DECLARATION_THROWS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_CONSTANT_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_ENUM_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_EXPLICIT_CONSTRUCTOR_CALL_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INCREMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_FOR_INITS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_DECLARATION_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_DECLARATION_THROWS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_METHOD_INVOCATION_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_SUPERINTERFACES : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_COMMA_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_AFTER_ELLIPSIS : String\l+ FORMATTER_INSERT_SPACE_AFTER_LAMBDA_ARROW : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACE_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_BRACKET_IN_ARRAY_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CAST : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CATCH : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_IF : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_METHOD_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_METHOD_INVOCATION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SWITCH : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_SYNCHRONIZED : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_TRY : String\l+ FORMATTER_INSERT_SPACE_AFTER_OPENING_PAREN_IN_WHILE : String\l+ FORMATTER_INSERT_SPACE_AFTER_POSTFIX_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_PREFIX_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_CONDITIONAL : String\l+ FORMATTER_INSERT_SPACE_AFTER_QUESTION_IN_WILDCARD : String\l+ FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_AFTER_SEMICOLON_IN_TRY_RESOURCES : String\l+ FORMATTER_INSERT_SPACE_AFTER_UNARY_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_AND_IN_TYPE_PARAMETER : String\l+ FORMATTER_INSERT_SPACE_BEFORE_ASSIGNMENT_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_AT_IN_ANNOTATION_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_BINARY_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_ANGLE_BRACKET_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACE_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_BRACKET_IN_ARRAY_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CAST : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CATCH : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_IF : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_METHOD_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_METHOD_INVOCATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_PARENTHESIZED_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SWITCH : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_SYNCHRONIZED : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_TRY : String\l+ FORMATTER_INSERT_SPACE_BEFORE_CLOSING_PAREN_IN_WHILE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_ASSERT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CASE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_CONDITIONAL : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_DEFAULT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COLON_IN_LABELED_STATEMENT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_DECLARATION_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_CONSTRUCTOR_DECLARATION_THROWS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_CONSTANT_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_ENUM_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_EXPLICIT_CONSTRUCTOR_CALL_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INCREMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_FOR_INITS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_DECLARATION_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_DECLARATION_THROWS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_METHOD_INVOCATION_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_FIELD_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_MULTIPLE_LOCAL_DECLARATIONS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_PARAMETERIZED_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_SUPERINTERFACES : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_COMMA_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_ELLIPSIS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_LAMBDA_ARROW : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_PARAMETERIZED_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_ARGUMENTS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETERS : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANNOTATION_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ANONYMOUS_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_BLOCK : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_ENUM_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_METHOD_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_SWITCH : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACE_IN_TYPE_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_BRACKET_IN_ARRAY_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ANNOTATION_TYPE_MEMBER_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CATCH : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_IF : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_METHOD_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_METHOD_INVOCATION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_PARENTHESIZED_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SWITCH : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_SYNCHRONIZED : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_TRY : String\l+ FORMATTER_INSERT_SPACE_BEFORE_OPENING_PAREN_IN_WHILE : String\l+ FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_RETURN : String\l+ FORMATTER_INSERT_SPACE_BEFORE_PARENTHESIZED_EXPRESSION_IN_THROW : String\l+ FORMATTER_INSERT_SPACE_BEFORE_POSTFIX_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_PREFIX_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_CONDITIONAL : String\l+ FORMATTER_INSERT_SPACE_BEFORE_QUESTION_IN_WILDCARD : String\l+ FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON : String\l+ FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_FOR : String\l+ FORMATTER_INSERT_SPACE_BEFORE_SEMICOLON_IN_TRY_RESOURCES : String\l+ FORMATTER_INSERT_SPACE_BEFORE_UNARY_OPERATOR : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_BRACKETS_IN_ARRAY_TYPE_REFERENCE : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACES_IN_ARRAY_INITIALIZER : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_BRACKETS_IN_ARRAY_ALLOCATION_EXPRESSION : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ANNOTATION_TYPE_MEMBER_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_CONSTRUCTOR_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_ENUM_CONSTANT : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_METHOD_DECLARATION : String\l+ FORMATTER_INSERT_SPACE_BETWEEN_EMPTY_PARENS_IN_METHOD_INVOCATION : String\l+ FORMATTER_KEEP_ELSE_STATEMENT_ON_SAME_LINE : String\l+ FORMATTER_KEEP_EMPTY_ARRAY_INITIALIZER_ON_ONE_LINE : String\l+ FORMATTER_KEEP_GUARDIAN_CLAUSE_ON_ONE_LINE : String\l+ FORMATTER_KEEP_SIMPLE_IF_ON_ONE_LINE : String\l+ FORMATTER_KEEP_THEN_STATEMENT_ON_SAME_LINE : String\l+ FORMATTER_LINE_SPLIT : String\l+ FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN : String\l+ FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN : String\l+ FORMATTER_NUMBER_OF_EMPTY_LINES_TO_PRESERVE : String\l+ FORMATTER_JOIN_WRAPPED_LINES : String\l+ FORMATTER_JOIN_LINES_IN_COMMENTS : String\l+ FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE : String\l+ FORMATTER_TAB_CHAR : String\l+ FORMATTER_TAB_SIZE : String\l+ FORMATTER_USE_TABS_ONLY_FOR_LEADING_INDENTATIONS : String\l+ FORMATTER_WRAP_BEFORE_BINARY_OPERATOR : String\l+ FORMATTER_WRAP_BEFORE_OR_OPERATOR_MULTICATCH : String\l+ FORMATTER_WRAP_OUTER_EXPRESSIONS_WHEN_NESTED : String\l+ INDENT_BY_ONE : int\l+ INDENT_DEFAULT : int\l+ INDENT_ON_COLUMN : int\l+ MIXED : String\l+ NEXT_LINE : String\l+ NEXT_LINE_ON_WRAP : String\l+ NEXT_LINE_SHIFTED : String\l+ TRUE : String\l+ WRAP_COMPACT : int\l+ WRAP_COMPACT_FIRST_BREAK : int\l+ WRAP_NEXT_PER_LINE : int\l+ WRAP_NEXT_SHIFTED : int\l+ WRAP_NO_SPLIT : int\l+ WRAP_ONE_PER_LINE : int\l- WRONG_ARGUMENT : IllegalArgumentException\l|# createAlignmentValue(boolean, int, int) : String\l# getEclipse21Settings() : Map\l# getEclipseDefaultSettings() : Map\l# getForceWrapping(String) : boolean\l# getIndentStyle(String) : int\l# getJavaConventionsSettings() : Map\l# getWrappingStyle(String) : int\l# setForceWrapping(String, boolean) : String\l# setIndentStyle(String, int) : String\l# setWrappingStyle(String, int) : String\l}"
	 ]

	 IndentManipulation [
		 label = "{IndentManipulation||# IndentManipulation() : \l# isIndentChar(char) : boolean\l# isLineDelimiterChar(char) : boolean\l# measureIndentUnits(CharSequence, int, int) : int\l# measureIndentInSpaces(CharSequence, int) : int\l# extractIndentString(String, int, int) : String\l# trimIndent(String, int, int, int) : String\l# changeIndent(String, int, int, int, String, String) : String\l# getChangeIndentEdits(String, int, int, int, String) : ReplaceEdit\l# indexOfIndent(CharSequence, int, int, int) : int\l# calculateSpaceEquivalents(int, int) : int\l# getTabWidth(Map) : int\l# getIndentWidth(Map) : int\l# getIntValue(Map, String, int) : int\l}"
	 ]

	 CommentsPreparator [
		 label = "{CommentsPreparator|+ COMMENT_LINE_SEPARATOR_LENGTH : int\l- NLS_TAG_PATTERN : Pattern\l- STRING_LITERAL_PATTERN : Pattern\l- HTML_TAG_PATTERN : Pattern\l- HTML_ATTRIBUTE_PATTERN : Pattern\l- HTML_ENTITY_PATTERN : Pattern\l- HTML_ENTITY_REPLACE : String\l- PARAM_TAGS : List\l- IMMUTABLE_TAGS : List\l- tm : TokenManager\l- options : DefaultCodeFormatterOptions\l- sourceLevel : String\l- formatDisableTag : String\l- formatEnableTag : String\l- lastLineComment : Token\l- lastLineCommentPosition : int\l- lastFormatOffComment : Token\l- ctm : TokenManager\l- commentStructure : List\l- commentIndent : int\l- noSubstituteWrapping : boolean\l- noFormatTagOpenStart : int\l- formatCodeTagOpenEnd : int\l- lastFormatCodeClosingTagIndex : int\l- firstTagToken : Token\l- commentCodeFormatter : DefaultCodeFormatter\l|# null() : \l# CommentsPreparator(TokenManager, DefaultCodeFormatterOptions, String) : \l+ preVisit2(ASTNode) : boolean\l+ visit(LineComment) : boolean\l# handleLineComment(int) : \l# preserveWhitespace(Token, int) : \l# handleFormatOnOffTags(Token) : boolean\l# handleNLSTags(Token, int) : \l# findStringLiteralsInLine(int) : List\l# tokenizeLineComment(Token) : List\l+ visit(BlockComment) : boolean\l# handleBlockComment(int) : \l# handleWhitespaceAround(int) : boolean\l# commentToLines(Token, int) : List\l+ visit(Javadoc) : boolean\l+ endVisit(Javadoc) : \l+ visit(TagElement) : boolean\l+ endVisit(TagElement) : \l# handleHtml(TagElement) : \l+ visit(MethodRef) : boolean\l+ visit(MemberRef) : boolean\l+ visit(QualifiedName) : boolean\l# handleReference(ASTNode) : \l# handleStringLiterals(String, int) : \l# handleSeparateLineTag(int, int) : \l# handleBreakBeforeTag(int, int, boolean) : \l# handleBreakAfterTag(int, int) : \l# handleNoFormatTag(int, int, boolean) : \l# handleOtherTag(int, int) : \l# handleFormatCodeTag(int, int, boolean) : \l# cleanupHTMLElement(int, int, boolean) : \l# disableFormatting(int, int) : \l# disableFormattingExclusively(int, int) : \l# findCommentLineIndent(int) : int\l# tokenStartingAt(int) : int\l# tokenEndingAt(int) : int\l# splitToken(Token, int, int) : \l# tokenizeMultilineComment(Token) : boolean\l# noSubstituteWrapping(int, int) : \l# addSubstituteWraps() : \l# substituteWrapIfTouching(int) : \l# formatCode(int, int) : \l# getCommentCodeFormatter() : DefaultCodeFormatter\l# getCodeToFormat(int, int, StringBuilder, int) : \l# getHtmlEntityChar(String) : char\l# translateFormattedTokens(int, List, int, HashMap) : List\l# finishUp() : \l}"
	 ]

	 DefaultCodeFormatter [
		 label = "{DefaultCodeFormatter|+ DEBUG : boolean\l- K_COMMENTS_MASK : int\l- K_MASK : int\l- originalOptions : DefaultCodeFormatterOptions\l- workingOptions : DefaultCodeFormatterOptions\l- oldCommentFormatOption : Object\l- sourceLevel : String\l- sourceString : String\l- sourceArray : char\l- formatRegions : IRegion\l- astRoot : ASTNode\l- tokens : List\l- tokenManager : TokenManager\l|# DefaultCodeFormatter() : \l# DefaultCodeFormatter(DefaultCodeFormatterOptions) : \l# DefaultCodeFormatter(Map) : \l# DefaultCodeFormatter(DefaultCodeFormatterOptions, Map) : \l# initOptions(DefaultCodeFormatterOptions, Map) : \l+ getOldCommentFormatOption(Map) : Object\l# createIndentationString(int) : String\l# format(int, String, int, int, int, String) : TextEdit\l# format(int, String, IRegion, int, String) : TextEdit\l# init(String) : boolean\l# prepareFormattedCode(String, int) : List\l# findHeader() : \l# formatComments(String, int) : TextEdit\l# parseSourceCode(int) : ASTNode\l# parseSourceCode(ASTParser, int, boolean) : ASTNode\l# tokenizeSource() : \l# prepareSpaces() : \l# prepareLineBreaks() : \l# prepareComments() : \l# prepareWraps(int) : \l# regionsSatisfiesPreconditions(IRegion, int) : boolean\l# updateWorkingOptions(int, String, int) : \l# canFormatComment(int, int) : boolean\l+ setOptions(Map) : \l}"
	 ]

	 Alignment [
		 label = "{Alignment|+ M_FORCE : int\l+ M_INDENT_ON_COLUMN : int\l+ M_INDENT_BY_ONE : int\l+ M_COMPACT_SPLIT : int\l+ M_COMPACT_FIRST_BREAK_SPLIT : int\l+ M_ONE_PER_LINE_SPLIT : int\l+ M_NEXT_SHIFTED_SPLIT : int\l+ M_NEXT_PER_LINE_SPLIT : int\l+ M_NO_ALIGNMENT : int\l+ SPLIT_MASK : int\l+ TAB : int\l+ SPACE : int\l+ MIXED : int\l+ alignment_for_arguments_in_allocation_expression : int\l+ alignment_for_arguments_in_annotation : int\l+ alignment_for_arguments_in_enum_constant : int\l+ alignment_for_arguments_in_explicit_constructor_call : int\l+ alignment_for_arguments_in_method_invocation : int\l+ alignment_for_arguments_in_qualified_allocation_expression : int\l+ alignment_for_assignment : int\l+ alignment_for_binary_expression : int\l+ alignment_for_compact_if : int\l+ alignment_for_conditional_expression : int\l+ alignment_for_enum_constants : int\l+ alignment_for_expressions_in_array_initializer : int\l+ alignment_for_method_declaration : int\l+ alignment_for_multiple_fields : int\l+ alignment_for_parameters_in_constructor_declaration : int\l+ alignment_for_parameters_in_method_declaration : int\l+ alignment_for_selector_in_method_invocation : int\l+ alignment_for_superclass_in_type_declaration : int\l+ alignment_for_superinterfaces_in_enum_declaration : int\l+ alignment_for_superinterfaces_in_type_declaration : int\l+ alignment_for_throws_clause_in_constructor_declaration : int\l+ alignment_for_throws_clause_in_method_declaration : int\l+ alignment_for_resources_in_try : int\l+ alignment_for_union_type_in_multicatch : int\l+ align_type_members_on_columns : boolean\l+ align_fields_grouping_blank_lines : int\l+ brace_position_for_annotation_type_declaration : String\l+ brace_position_for_anonymous_type_declaration : String\l+ brace_position_for_array_initializer : String\l+ brace_position_for_block : String\l+ brace_position_for_block_in_case : String\l+ brace_position_for_constructor_declaration : String\l+ brace_position_for_enum_constant : String\l+ brace_position_for_enum_declaration : String\l+ brace_position_for_lambda_body : String\l+ brace_position_for_method_declaration : String\l+ brace_position_for_type_declaration : String\l+ brace_position_for_switch : String\l+ continuation_indentation : int\l+ continuation_indentation_for_array_initializer : int\l+ blank_lines_after_imports : int\l+ blank_lines_after_package : int\l+ blank_lines_before_field : int\l+ blank_lines_before_first_class_body_declaration : int\l+ blank_lines_before_imports : int\l+ blank_lines_before_member_type : int\l+ blank_lines_before_method : int\l+ blank_lines_before_new_chunk : int\l+ blank_lines_before_package : int\l+ blank_lines_between_import_groups : int\l+ blank_lines_between_type_declarations : int\l+ blank_lines_at_beginning_of_method_body : int\l+ comment_clear_blank_lines_in_javadoc_comment : boolean\l+ comment_clear_blank_lines_in_block_comment : boolean\l+ comment_new_lines_at_block_boundaries : boolean\l+ comment_new_lines_at_javadoc_boundaries : boolean\l+ comment_format_javadoc_comment : boolean\l+ comment_format_line_comment : boolean\l+ comment_format_line_comment_starting_on_first_column : boolean\l+ comment_format_block_comment : boolean\l+ comment_format_header : boolean\l+ comment_format_html : boolean\l+ comment_format_source : boolean\l+ comment_indent_parameter_description : boolean\l+ comment_indent_root_tags : boolean\l+ comment_insert_empty_line_before_root_tags : boolean\l+ comment_insert_new_line_for_parameter : boolean\l+ comment_preserve_white_space_between_code_and_line_comments : boolean\l+ comment_line_length : int\l+ use_tags : boolean\l+ disabling_tag : char\l+ enabling_tag : char\l- DEFAULT_DISABLING_TAG : char\l- DEFAULT_ENABLING_TAG : char\l+ indent_statements_compare_to_block : boolean\l+ indent_statements_compare_to_body : boolean\l+ indent_body_declarations_compare_to_annotation_declaration_header : boolean\l+ indent_body_declarations_compare_to_enum_constant_header : boolean\l+ indent_body_declarations_compare_to_enum_declaration_header : boolean\l+ indent_body_declarations_compare_to_type_header : boolean\l+ indent_breaks_compare_to_cases : boolean\l+ indent_empty_lines : boolean\l+ indent_switchstatements_compare_to_cases : boolean\l+ indent_switchstatements_compare_to_switch : boolean\l+ indentation_size : int\l+ insert_new_line_after_annotation_on_type : boolean\l+ insert_new_line_after_type_annotation : boolean\l+ insert_new_line_after_annotation_on_field : boolean\l+ insert_new_line_after_annotation_on_method : boolean\l+ insert_new_line_after_annotation_on_package : boolean\l+ insert_new_line_after_annotation_on_parameter : boolean\l+ insert_new_line_after_annotation_on_local_variable : boolean\l+ insert_new_line_after_label : boolean\l+ insert_new_line_after_opening_brace_in_array_initializer : boolean\l+ insert_new_line_at_end_of_file_if_missing : boolean\l+ insert_new_line_before_catch_in_try_statement : boolean\l+ insert_new_line_before_closing_brace_in_array_initializer : boolean\l+ insert_new_line_before_else_in_if_statement : boolean\l+ insert_new_line_before_finally_in_try_statement : boolean\l+ insert_new_line_before_while_in_do_statement : boolean\l+ insert_new_line_in_empty_anonymous_type_declaration : boolean\l+ insert_new_line_in_empty_block : boolean\l+ insert_new_line_in_empty_annotation_declaration : boolean\l+ insert_new_line_in_empty_enum_constant : boolean\l+ insert_new_line_in_empty_enum_declaration : boolean\l+ insert_new_line_in_empty_method_body : boolean\l+ insert_new_line_in_empty_type_declaration : boolean\l+ insert_space_after_and_in_type_parameter : boolean\l+ insert_space_after_assignment_operator : boolean\l+ insert_space_after_at_in_annotation : boolean\l+ insert_space_after_at_in_annotation_type_declaration : boolean\l+ insert_space_after_binary_operator : boolean\l+ insert_space_after_closing_angle_bracket_in_type_arguments : boolean\l+ insert_space_after_closing_angle_bracket_in_type_parameters : boolean\l+ insert_space_after_closing_paren_in_cast : boolean\l+ insert_space_after_closing_brace_in_block : boolean\l+ insert_space_after_colon_in_assert : boolean\l+ insert_space_after_colon_in_case : boolean\l+ insert_space_after_colon_in_conditional : boolean\l+ insert_space_after_colon_in_for : boolean\l+ insert_space_after_colon_in_labeled_statement : boolean\l+ insert_space_after_comma_in_allocation_expression : boolean\l+ insert_space_after_comma_in_annotation : boolean\l+ insert_space_after_comma_in_array_initializer : boolean\l+ insert_space_after_comma_in_constructor_declaration_parameters : boolean\l+ insert_space_after_comma_in_constructor_declaration_throws : boolean\l+ insert_space_after_comma_in_enum_constant_arguments : boolean\l+ insert_space_after_comma_in_enum_declarations : boolean\l+ insert_space_after_comma_in_explicit_constructor_call_arguments : boolean\l+ insert_space_after_comma_in_for_increments : boolean\l+ insert_space_after_comma_in_for_inits : boolean\l+ insert_space_after_comma_in_method_invocation_arguments : boolean\l+ insert_space_after_comma_in_method_declaration_parameters : boolean\l+ insert_space_after_comma_in_method_declaration_throws : boolean\l+ insert_space_after_comma_in_multiple_field_declarations : boolean\l+ insert_space_after_comma_in_multiple_local_declarations : boolean\l+ insert_space_after_comma_in_parameterized_type_reference : boolean\l+ insert_space_after_comma_in_superinterfaces : boolean\l+ insert_space_after_comma_in_type_arguments : boolean\l+ insert_space_after_comma_in_type_parameters : boolean\l+ insert_space_after_ellipsis : boolean\l+ insert_space_after_lambda_arrow : boolean\l+ insert_space_after_opening_angle_bracket_in_parameterized_type_reference : boolean\l+ insert_space_after_opening_angle_bracket_in_type_arguments : boolean\l+ insert_space_after_opening_angle_bracket_in_type_parameters : boolean\l+ insert_space_after_opening_bracket_in_array_allocation_expression : boolean\l+ insert_space_after_opening_bracket_in_array_reference : boolean\l+ insert_space_after_opening_brace_in_array_initializer : boolean\l+ insert_space_after_opening_paren_in_annotation : boolean\l+ insert_space_after_opening_paren_in_cast : boolean\l+ insert_space_after_opening_paren_in_catch : boolean\l+ insert_space_after_opening_paren_in_constructor_declaration : boolean\l+ insert_space_after_opening_paren_in_enum_constant : boolean\l+ insert_space_after_opening_paren_in_for : boolean\l+ insert_space_after_opening_paren_in_if : boolean\l+ insert_space_after_opening_paren_in_method_declaration : boolean\l+ insert_space_after_opening_paren_in_method_invocation : boolean\l+ insert_space_after_opening_paren_in_parenthesized_expression : boolean\l+ insert_space_after_opening_paren_in_switch : boolean\l+ insert_space_after_opening_paren_in_synchronized : boolean\l+ insert_space_after_opening_paren_in_try : boolean\l+ insert_space_after_opening_paren_in_while : boolean\l+ insert_space_after_postfix_operator : boolean\l+ insert_space_after_prefix_operator : boolean\l+ insert_space_after_question_in_conditional : boolean\l+ insert_space_after_question_in_wilcard : boolean\l+ insert_space_after_semicolon_in_for : boolean\l+ insert_space_after_semicolon_in_try_resources : boolean\l+ insert_space_after_unary_operator : boolean\l+ insert_space_before_and_in_type_parameter : boolean\l+ insert_space_before_at_in_annotation_type_declaration : boolean\l+ insert_space_before_assignment_operator : boolean\l+ insert_space_before_binary_operator : boolean\l+ insert_space_before_closing_angle_bracket_in_parameterized_type_reference : boolean\l+ insert_space_before_closing_angle_bracket_in_type_arguments : boolean\l+ insert_space_before_closing_angle_bracket_in_type_parameters : boolean\l+ insert_space_before_closing_brace_in_array_initializer : boolean\l+ insert_space_before_closing_bracket_in_array_allocation_expression : boolean\l+ insert_space_before_closing_bracket_in_array_reference : boolean\l+ insert_space_before_closing_paren_in_annotation : boolean\l+ insert_space_before_closing_paren_in_cast : boolean\l+ insert_space_before_closing_paren_in_catch : boolean\l+ insert_space_before_closing_paren_in_constructor_declaration : boolean\l+ insert_space_before_closing_paren_in_enum_constant : boolean\l+ insert_space_before_closing_paren_in_for : boolean\l+ insert_space_before_closing_paren_in_if : boolean\l+ insert_space_before_closing_paren_in_method_declaration : boolean\l+ insert_space_before_closing_paren_in_method_invocation : boolean\l+ insert_space_before_closing_paren_in_parenthesized_expression : boolean\l+ insert_space_before_closing_paren_in_switch : boolean\l+ insert_space_before_closing_paren_in_synchronized : boolean\l+ insert_space_before_closing_paren_in_try : boolean\l+ insert_space_before_closing_paren_in_while : boolean\l+ insert_space_before_colon_in_assert : boolean\l+ insert_space_before_colon_in_case : boolean\l+ insert_space_before_colon_in_conditional : boolean\l+ insert_space_before_colon_in_default : boolean\l+ insert_space_before_colon_in_for : boolean\l+ insert_space_before_colon_in_labeled_statement : boolean\l+ insert_space_before_comma_in_allocation_expression : boolean\l+ insert_space_before_comma_in_annotation : boolean\l+ insert_space_before_comma_in_array_initializer : boolean\l+ insert_space_before_comma_in_constructor_declaration_parameters : boolean\l+ insert_space_before_comma_in_constructor_declaration_throws : boolean\l+ insert_space_before_comma_in_enum_constant_arguments : boolean\l+ insert_space_before_comma_in_enum_declarations : boolean\l+ insert_space_before_comma_in_explicit_constructor_call_arguments : boolean\l+ insert_space_before_comma_in_for_increments : boolean\l+ insert_space_before_comma_in_for_inits : boolean\l+ insert_space_before_comma_in_method_invocation_arguments : boolean\l+ insert_space_before_comma_in_method_declaration_parameters : boolean\l+ insert_space_before_comma_in_method_declaration_throws : boolean\l+ insert_space_before_comma_in_multiple_field_declarations : boolean\l+ insert_space_before_comma_in_multiple_local_declarations : boolean\l+ insert_space_before_comma_in_parameterized_type_reference : boolean\l+ insert_space_before_comma_in_superinterfaces : boolean\l+ insert_space_before_comma_in_type_arguments : boolean\l+ insert_space_before_comma_in_type_parameters : boolean\l+ insert_space_before_ellipsis : boolean\l+ insert_space_before_lambda_arrow : boolean\l+ insert_space_before_parenthesized_expression_in_return : boolean\l+ insert_space_before_parenthesized_expression_in_throw : boolean\l+ insert_space_before_question_in_wilcard : boolean\l+ insert_space_before_opening_angle_bracket_in_parameterized_type_reference : boolean\l+ insert_space_before_opening_angle_bracket_in_type_arguments : boolean\l+ insert_space_before_opening_angle_bracket_in_type_parameters : boolean\l+ insert_space_before_opening_brace_in_annotation_type_declaration : boolean\l+ insert_space_before_opening_brace_in_anonymous_type_declaration : boolean\l+ insert_space_before_opening_brace_in_array_initializer : boolean\l+ insert_space_before_opening_brace_in_block : boolean\l+ insert_space_before_opening_brace_in_constructor_declaration : boolean\l+ insert_space_before_opening_brace_in_enum_constant : boolean\l+ insert_space_before_opening_brace_in_enum_declaration : boolean\l+ insert_space_before_opening_brace_in_method_declaration : boolean\l+ insert_space_before_opening_brace_in_type_declaration : boolean\l+ insert_space_before_opening_bracket_in_array_allocation_expression : boolean\l+ insert_space_before_opening_bracket_in_array_reference : boolean\l+ insert_space_before_opening_bracket_in_array_type_reference : boolean\l+ insert_space_before_opening_paren_in_annotation : boolean\l+ insert_space_before_opening_paren_in_annotation_type_member_declaration : boolean\l+ insert_space_before_opening_paren_in_catch : boolean\l+ insert_space_before_opening_paren_in_constructor_declaration : boolean\l+ insert_space_before_opening_paren_in_enum_constant : boolean\l+ insert_space_before_opening_paren_in_for : boolean\l+ insert_space_before_opening_paren_in_if : boolean\l+ insert_space_before_opening_paren_in_method_invocation : boolean\l+ insert_space_before_opening_paren_in_method_declaration : boolean\l+ insert_space_before_opening_paren_in_switch : boolean\l+ insert_space_before_opening_paren_in_try : boolean\l+ insert_space_before_opening_brace_in_switch : boolean\l+ insert_space_before_opening_paren_in_synchronized : boolean\l+ insert_space_before_opening_paren_in_parenthesized_expression : boolean\l+ insert_space_before_opening_paren_in_while : boolean\l+ insert_space_before_postfix_operator : boolean\l+ insert_space_before_prefix_operator : boolean\l+ insert_space_before_question_in_conditional : boolean\l+ insert_space_before_semicolon : boolean\l+ insert_space_before_semicolon_in_for : boolean\l+ insert_space_before_semicolon_in_try_resources : boolean\l+ insert_space_before_unary_operator : boolean\l+ insert_space_between_brackets_in_array_type_reference : boolean\l+ insert_space_between_empty_braces_in_array_initializer : boolean\l+ insert_space_between_empty_brackets_in_array_allocation_expression : boolean\l+ insert_space_between_empty_parens_in_annotation_type_member_declaration : boolean\l+ insert_space_between_empty_parens_in_constructor_declaration : boolean\l+ insert_space_between_empty_parens_in_enum_constant : boolean\l+ insert_space_between_empty_parens_in_method_declaration : boolean\l+ insert_space_between_empty_parens_in_method_invocation : boolean\l+ compact_else_if : boolean\l+ keep_guardian_clause_on_one_line : boolean\l+ keep_else_statement_on_same_line : boolean\l+ keep_empty_array_initializer_on_one_line : boolean\l+ keep_simple_if_on_one_line : boolean\l+ keep_then_statement_on_same_line : boolean\l+ never_indent_block_comments_on_first_column : boolean\l+ never_indent_line_comments_on_first_column : boolean\l+ number_of_empty_lines_to_preserve : int\l+ join_wrapped_lines : boolean\l+ join_lines_in_comments : boolean\l+ put_empty_statement_on_new_line : boolean\l+ tab_size : int\l+ page_width : int\l+ tab_char : int\l+ use_tabs_only_for_leading_indentations : boolean\l+ wrap_before_binary_operator : boolean\l+ wrap_before_or_operator_multicatch : boolean\l+ wrap_outer_expressions_when_nested : boolean\l+ initial_indentation_level : int\l+ line_separator : String\l|# null() : \l# getDefaultSettings() : DefaultCodeFormatterOptions\l# getEclipseDefaultSettings() : DefaultCodeFormatterOptions\l# getJavaConventionsSettings() : DefaultCodeFormatterOptions\l# DefaultCodeFormatterOptions() : \l# DefaultCodeFormatterOptions(Map) : \l# getAlignment(int) : String\l# getMap() : Map\l# set(Map) : \l# setDeprecatedOptions(Map) : \l# setDefaultSettings() : \l# setEclipseDefaultSettings() : \l# setJavaConventionsSettings() : \l}"
	 ]

	 LineBreaksPreparator [
		 label = "{LineBreaksPreparator|# tm : TokenManager\l# options : DefaultCodeFormatterOptions\l- declarationModifierVisited : boolean\l|# LineBreaksPreparator(TokenManager, DefaultCodeFormatterOptions) : \l+ preVisit2(ASTNode) : boolean\l+ visit(CompilationUnit) : boolean\l+ visit(PackageDeclaration) : boolean\l+ visit(ImportDeclaration) : boolean\l# visit(TypeDeclaration) : boolean\l# handleBodyDeclarations(List) : \l# sameChunk(BodyDeclaration, BodyDeclaration) : boolean\l# putBlankLinesBefore(ASTNode, int) : \l+ visit(EnumDeclaration) : boolean\l+ visit(AnnotationTypeDeclaration) : boolean\l+ visit(AnonymousClassDeclaration) : boolean\l+ visit(MethodDeclaration) : boolean\l+ visit(Block) : boolean\l+ visit(SwitchStatement) : boolean\l+ visit(DoStatement) : boolean\l+ visit(LabeledStatement) : boolean\l+ visit(ArrayInitializer) : boolean\l+ visit(NormalAnnotation) : boolean\l+ visit(SingleMemberAnnotation) : boolean\l+ visit(MarkerAnnotation) : boolean\l+ visit(VariableDeclarationStatement) : boolean\l+ visit(SingleVariableDeclaration) : boolean\l+ visit(VariableDeclarationExpression) : boolean\l+ visit(FieldDeclaration) : boolean\l+ visit(AnnotationTypeMemberDeclaration) : boolean\l+ visit(Modifier) : boolean\l# handleAnnotation(Annotation) : \l+ visit(WhileStatement) : boolean\l+ visit(ForStatement) : boolean\l+ visit(EnhancedForStatement) : boolean\l# handleLoopBody(Statement) : \l+ visit(IfStatement) : boolean\l+ visit(TryStatement) : boolean\l+ visit(CatchClause) : boolean\l# breakLineBefore(ASTNode) : \l# handleBracedCode(ASTNode, ASTNode, String, boolean, boolean) : \l# handleBracePosition(Token, int, String) : \l# addEmptyLineTokenAfter(int) : \l# indent(ASTNode) : \l# finishUp() : \l}"
	 ]

	 SpacePreparator [
		 label = "{SpacePreparator|# tm : TokenManager\l- options : DefaultCodeFormatterOptions\l# isPreviousJIDP : boolean\l|# SpacePreparator(TokenManager, DefaultCodeFormatterOptions) : \l+ preVisit2(ASTNode) : boolean\l+ visit(PackageDeclaration) : boolean\l+ visit(ImportDeclaration) : boolean\l+ visit(TypeDeclaration) : boolean\l+ visit(EnumDeclaration) : boolean\l+ visit(EnumConstantDeclaration) : boolean\l+ visit(AnonymousClassDeclaration) : boolean\l+ visit(MethodDeclaration) : boolean\l# handleTypeParameters(List) : \l+ visit(FieldDeclaration) : boolean\l+ visit(VariableDeclarationStatement) : boolean\l+ visit(VariableDeclarationFragment) : boolean\l+ endVisit(SingleVariableDeclaration) : \l+ visit(SwitchStatement) : boolean\l+ visit(SwitchCase) : boolean\l+ visit(DoStatement) : boolean\l+ visit(WhileStatement) : boolean\l+ visit(SynchronizedStatement) : boolean\l+ visit(TryStatement) : boolean\l+ visit(CatchClause) : boolean\l+ visit(AssertStatement) : boolean\l+ visit(ReturnStatement) : boolean\l+ visit(ThrowStatement) : boolean\l+ visit(LabeledStatement) : boolean\l+ visit(AnnotationTypeDeclaration) : boolean\l+ visit(AnnotationTypeMemberDeclaration) : boolean\l+ visit(NormalAnnotation) : boolean\l+ visit(MemberValuePair) : boolean\l+ visit(SingleMemberAnnotation) : boolean\l+ visit(MarkerAnnotation) : boolean\l# handleAnnotation(Annotation, boolean) : \l+ visit(LambdaExpression) : boolean\l+ visit(Block) : boolean\l+ visit(IfStatement) : boolean\l+ visit(ForStatement) : boolean\l+ visit(VariableDeclarationExpression) : boolean\l+ visit(EnhancedForStatement) : boolean\l+ visit(MethodInvocation) : boolean\l+ visit(SuperMethodInvocation) : boolean\l+ visit(ClassInstanceCreation) : boolean\l+ visit(ConstructorInvocation) : boolean\l+ visit(SuperConstructorInvocation) : boolean\l# handleInvocation(ASTNode, ASTNode) : \l# handleInvocation(ASTNode, ASTNode, ASTNode) : \l+ visit(Assignment) : boolean\l+ visit(InfixExpression) : boolean\l+ visit(PrefixExpression) : boolean\l+ visit(PostfixExpression) : boolean\l# handleOperator(String, ASTNode, boolean, boolean) : \l+ visit(ParenthesizedExpression) : boolean\l+ visit(CastExpression) : boolean\l+ visit(IntersectionType) : boolean\l+ visit(ConditionalExpression) : boolean\l+ visit(ArrayType) : boolean\l+ visit(ArrayAccess) : boolean\l+ visit(ArrayCreation) : boolean\l+ visit(ArrayInitializer) : boolean\l+ visit(ParameterizedType) : boolean\l+ visit(TypeParameter) : boolean\l+ visit(WildcardType) : boolean\l+ visit(UnionType) : boolean\l+ visit(Dimension) : boolean\l+ visit(TypeMethodReference) : boolean\l+ visit(ExpressionMethodReference) : boolean\l+ visit(SuperMethodReference) : boolean\l+ visit(CreationReference) : boolean\l# handleTypeArguments(List) : \l+ visit(InstanceofExpression) : boolean\l# handleCommas(List, boolean, boolean) : \l# handleToken(ASTNode, int, boolean, boolean) : \l# handleTokenBefore(ASTNode, int, boolean, boolean) : \l# handleTokenAfter(ASTNode, int, boolean, boolean) : \l# handleToken(Token, boolean, boolean) : \l# handleEmptyParens(ASTNode, boolean) : boolean\l# handleEmptyBrackets(ASTNode, boolean) : boolean\l# handleSemicolon(ASTNode) : \l# handleSemicolon(List) : \l# finishUp() : \l+ token(Token, int) : boolean\l}"
	 ]

	 TextEditsBuilder [
		 label = "{TextEditsBuilder|- source : String\l- regions : List\l- tm : TokenManager\l- options : DefaultCodeFormatterOptions\l- buffer : StringBuilder\l- stringLiteralsInLine : List\l- edits : List\l- currentRegion : int\l- childBuilder : TextEditsBuilder\l- parent : TextEditsBuilder\l- alignChar : int\l- sourceLimit : int\l- parentTokenIndex : int\l|# TextEditsBuilder(String, IRegion, TokenManager, DefaultCodeFormatterOptions) : \l# TextEditsBuilder(TextEditsBuilder) : \l# adaptRegions(IRegion) : List\l+ token(Token, int) : boolean\l# bufferWhitespaceBefore(Token, int) : \l# bufferLineSeparator(Token, boolean) : \l# bufferIndent(Token, int) : \l# appendIndentationString(StringBuilder, int, int, int, int) : \l# bufferAlign(Token, int) : \l# flushBuffer(int) : \l# getReplaceEdit(int, int, String, IRegion) : ReplaceEdit\l# isOnlyWhitespace(String) : boolean\l# adaptReplaceText(String, int, boolean, int) : String\l# handleSingleLineComment(Token, int) : \l# handleMultiLineComment(Token, int) : \l# traverseInternalStructure(Token, int) : \l# processComment(Token) : \l# getEdits() : List\l# setAlignChar(int) : \l}"
	 ]

	 WrapPolicy [
		 label = "{WrapPolicy|+ DISABLE_WRAP : WrapPolicy\l+ SUBSTITUTE_ONLY : WrapPolicy\l+ wrapMode : WrapMode\l+ wrapParentIndex : int\l+ groupEndIndex : int\l+ extraIndent : int\l+ structureDepth : int\l+ penaltyMultiplier : float\l+ isFirstInGroup : boolean\l+ indentOnColumn : boolean\l+ TokenNameEMPTY_LINE : int\l+ originalStart : int\l+ originalEnd : int\l+ tokenType : int\l- spaceBefore : boolean\l- lineBreaksBefore : int\l- indent : int\l- align : int\l- toEscape : boolean\l- nextLineOnWrap : boolean\l- wrapPolicy : WrapPolicy\l- nlsTagToken : Token\l- internalStructure : List\l|# null() : \l# null() : \l# WrapPolicy(WrapMode, int, int, int, int, float, boolean, boolean) : \l# WrapPolicy(WrapMode, int, int) : \l# Token(int, int, int) : \l# Token(Token) : \l# Token(Token, int, int, int) : \l# fromCurrent(Scanner, int) : Token\l# spaceBefore() : \l# clearSpaceBefore() : \l# isSpaceBefore() : boolean\l# spaceAfter() : \l# clearSpaceAfter() : \l# isSpaceAfter() : boolean\l# breakBefore() : \l# putLineBreaksBefore(int) : \l# getLineBreaksBefore() : int\l# clearLineBreaksBefore() : \l# breakAfter() : \l# putLineBreaksAfter(int) : \l# getLineBreaksAfter() : int\l# clearLineBreaksAfter() : \l# indent() : \l# unindent() : \l# setIndent(int) : \l# getIndent() : int\l# setAlign(int) : \l# getAlign() : int\l# setToEscape(boolean) : \l# isToEscape() : boolean\l# setNextLineOnWrap() : \l# isNextLineOnWrap() : boolean\l# setWrapPolicy(WrapPolicy) : \l# getWrapPolicy() : WrapPolicy\l# isWrappable() : boolean\l# setNLSTag(Token) : \l# hasNLSTag() : boolean\l# getNLSTag() : Token\l# setInternalStructure(List) : \l# getInternalStructure() : List\l# isComment() : boolean\l# toString(String) : String\l# countChars() : int\l# toString() : String\l}"
	 ]

	 TokenManager [
		 label = "{TokenManager|- COMMENT_LINE_ANNOTATION_PATTERN : Pattern\l- tokens : List\l- source : String\l- tabSize : int\l- tabChar : int\l- wrapWithSpaces : boolean\l# commentWrapper : CommentWrapExecutor\l- tokenIndexToNLSAlign : HashMap\l- formatOffTagPairs : List\l- headerEndIndex : int\l- positionInLineCounter : TokenTraverser\l- isNLSTagInLine : boolean\l|# TokenManager(List, String, DefaultCodeFormatterOptions) : \l# TokenManager(List, TokenManager) : \l# get(int) : Token\l# size() : int\l# remove(int) : \l# insert(int, Token) : \l# toString(int) : String\l# toString(Token) : String\l# toString(ASTNode) : String\l# getSource() : String\l# indexOf(Token) : int\l# charAt(int) : char\l# getSourceLength() : int\l# findIndex(int, int, boolean) : int\l+ iterator() : Iterator\l# isGuardClause(Block) : boolean\l# firstIndexIn(ASTNode, int) : int\l# firstTokenIn(ASTNode, int) : Token\l# lastIndexIn(ASTNode, int) : int\l# lastTokenIn(ASTNode, int) : Token\l# firstIndexAfter(ASTNode, int) : int\l# firstTokenAfter(ASTNode, int) : Token\l# firstIndexBefore(ASTNode, int) : int\l# firstTokenBefore(ASTNode, int) : Token\l# countLineBreaksBetween(Token, Token) : int\l# countLineBreaksBetween(String, int, int) : int\l+ token(Token, int) : boolean\l# getPositionInLine(int) : int\l# findSourcePositionInLine(int) : int\l# getEscapedTokenString(Token) : String\l# getLength(Token, int) : int\l# getLength(int, int, int) : int\l# toIndent(int, boolean) : int\l# traverse(int, TokenTraverser) : int\l# findFirstTokenInLine(int) : int\l# findFirstTokenInLine(int, boolean, boolean) : int\l# tokenInside(ASTNode, int) : boolean\l# addNLSAlignIndex(int, int) : \l# getNLSAlign(int) : int\l# setHeaderEndIndex(int) : \l# isInHeader(int) : boolean\l# addDisableFormatTokenPair(Token, Token) : \l# applyFormatOff() : \l}"
	 ]

	 DecodeCodeFormatterPreferences [
		 label = "{DecodeCodeFormatterPreferences|- record : boolean\l- entries : Map\l- profileName : String\l|# decodeCodeFormatterOptions(String) : Map\l# decodeCodeFormatterOptions(String, String) : Map\l# decodeCodeFormatterOptions(String, String, String) : Map\l# DecodeCodeFormatterPreferences(String) : \l# startElement(String, String, String, Attributes) : \l# endElement(String, String, String) : \l# getEntries() : Map\l}"
	 ]

	 FormatterBugs18Tests [
		 label = "{FormatterBugs18Tests||# suite() : Test\l# FormatterBugs18Tests(String) : \l# setUpSuite() : \l# testBug426520a() : \l# testBug426520b() : \l# testBug425040() : \l# testBug433177() : \l# testBug434821() : \l}"
	 ]

	 FormatterBugsTests [
		 label = "{FormatterBugsTests|- EXPECTED_OUTPUT_WKSP2E1 : String\l- EXPECTED_OUTPUT_WKSP2E3 : String\l- EXPECTED_OUTPUT_WKSP2E1_SPACES : String\l- EXPECTED_OUTPUT_WKSP2E3_SPACES : String\l|# suite() : Test\l# FormatterBugsTests(String) : \l# setUpBracesPreferences(String) : \l# setUpSuite() : \l# testBug027079a() : \l# testBug027079a1() : \l# testBug027079a2() : \l# testBug027079a3() : \l# testBug027079a4() : \l# testBug027079b() : \l# testBug027079c() : \l# testBug027079c2() : \l# testBug027079d() : \l# testBug027079d2() : \l# testBug027079d3() : \l# testBug027079d4() : \l# testBug027079e() : \l# testBug027079f() : \l# testBug027079f2() : \l# testBug027079f3() : \l# testBug027079f4() : \l# testBug059891_01() : \l# testBug059891_01b() : \l# testBug059891_02() : \l# testBug059891_02b() : \l# testBug059891_03() : \l# testBug059891_03b() : \l# testBug059891_146175() : \l# testBug059891_164093_01() : \l# testBug059891_164093_02() : \l# testBug059891_203588() : \l# testBug059891_wksp1_01() : \l# testBug059891_wksp1_02() : \l# testBug059891_wksp1_03() : \l# testBug059891_wksp1_04() : \l# testBug059891_wksp1_05() : \l# testBug059891_wksp1_06() : \l# testBug059891_wksp1_07() : \l# testBug059891_wksp1_08() : \l# testBug059891_wksp1_09() : \l# testBug059891_wksp1_10() : \l# testBug059891_wksp1_11() : \l# testBug059891_wksp1_12() : \l# testBug198074() : \l# testBug198074b() : \l# testBug198074_c1() : \l# testBug198074_c1b() : \l# testBug198074_c3() : \l# testBug198074_c3b() : \l# testBug198074_comments() : \l# testBug198074_dup201022() : \l# testBug198074_dup213700() : \l# testBug199265a() : \l# testBug199265b() : \l# testBug199265c1() : \l# testBug199265c2() : \l# testBug199265c3() : \l# testBug199265d1() : \l# testBug199265d2() : \l# testBug199265d3() : \l# testBug199265_wksp1a() : \l# testBug199265_wksp1b() : \l# testBug199265_wksp2a() : \l# testBug199265_wksp3a() : \l# testBug208541() : \l# testBug203588() : \l# testBug252556() : \l# testBug252556a() : \l# testBug252556b() : \l# testBug252556c() : \l# testBug252556d() : \l# testBug252556e() : \l# testBug252556f() : \l# testBug252556_wksp3a() : \l# testBug281655() : \l# testBug281655a() : \l# testBug281655b() : \l# testBug281655c() : \l# testBug281655d() : \l# testBug281655e() : \l# testBug281655f() : \l# testBug282030() : \l# testBug282030a() : \l# testBug282030b() : \l# testBug282030c() : \l# testBug282030d() : \l# testBug282030e() : \l# testBug282030f() : \l# testBug282030g1() : \l# testBug282030g2() : \l# testBug282030h1() : \l# testBug282030h2() : \l# testBug283467() : \l# testBug284789() : \l# testBug284789_01a() : \l# testBug284789_01b() : \l# testBug284789_01c() : \l# testBug284789_01d() : \l# testBug284789_01e() : \l# testBug284789_01f() : \l# testBug284789_02a() : \l# testBug284789_02b() : \l# testBug284789_02c() : \l# testBug284789_02d() : \l# testBug284789_02e() : \l# testBug284789_02f() : \l# testBug285565a() : \l# testBug285565b() : \l# testBug285565c() : \l# testBug285565d() : \l# testBug285565e() : \l# testBug286601() : \l# testBug286601b() : \l# testBug286601c() : \l# testBug286601d() : \l# testBug286601_massive_01() : \l# testBug286601_massive_02() : \l# testBug286601_massive_03() : \l# testBug286601_wksp_03b() : \l# testBug286668() : \l# testBug286668b() : \l# testBug286668c() : \l# testBug286668_40w() : \l# testBug286668b_40w() : \l# testBug286668c_40w() : \l# testBug286668_60w() : \l# testBug286668b_60w() : \l# testBug286668c_60w() : \l# testBug290905a() : \l# testBug290905b() : \l# testBug290905c() : \l# testBug290905d() : \l# testBug290905e() : \l# testBug290905f() : \l# testBug293240() : \l# testBug293300_wksp1_01() : \l# testBug293300_wkps1_02() : \l# testBug293300_wkps1_03() : \l# testBug293300_wkps1_04() : \l# testBug293300_wkps1_05() : \l# testBug293300_wkps1_05_JoinLinesComments_BracesNextLine() : \l# testBug293300_wksp2_01() : \l# testBug293300_wksp2_02() : \l# testBug293300_wksp2_03() : \l# testBug293300_wksp2_04() : \l# testBug293300_wksp2_05() : \l# testBug293300_wksp2_05b() : \l# testBug293300_wksp2_05c() : \l# testBug293300_wksp2_05d() : \l# testBug293300_wksp2_05e() : \l# testBug293300_wksp2_05_spaces() : \l# testBug293300_wksp2_05b_spaces() : \l# testBug293300_wksp2_05c_spaces() : \l# testBug293300_wksp2_05d_spaces() : \l# testBug293300_wksp2_05e_spaces() : \l# testBug293300_wksp_06() : \l# testBug293300_wksp_07() : \l# testBug293300_wksp2_08() : \l# testBug293300_wksp2_08b() : \l# testBug293300_wksp2_08c() : \l# testBug293300_wksp2_09() : \l# testBug293300_wksp2_10() : \l# testBug293300_wksp2_11() : \l# testBug293300_wksp2_12a() : \l# testBug293300_wksp2_12b() : \l# testBug293300_wksp2_13() : \l# testBug293300_wksp2_14() : \l# _testBug293300_wksp2_15a() : \l# testBug293300_wksp2_15b() : \l# testBug293300_wksp3_01() : \l# testBug293496() : \l# testBug294500a() : \l# testBug294500b() : \l# testBug294618a() : \l# testBug294618b() : \l# testBug294631() : \l# testBug295175a() : \l# testBug295175b() : \l# testBug295175c() : \l# testBug295175d() : \l# testBug295175e() : \l# testBug295175f() : \l# testBug295238() : \l# testBug295238b1() : \l# testBug295238b2() : \l# testBug295238b3() : \l# testBug264112_w24_S1() : \l# testBug264112_w24_S2() : \l# testBug264112_w25_S1() : \l# testBug264112_w25_S2() : \l# testBug264112_w26_S1() : \l# testBug264112_w26_S2() : \l# testBug264112_wksp1_01() : \l# testBug264112_wksp1_02() : \l# testBug264112_wksp2_01() : \l# testBug264112_wksp2_02() : \l# testBug297225() : \l# testBug297546() : \l# testBug298243() : \l# testBug298844a() : \l# testBug298844b() : \l# testBug302123() : \l# testBug302123b() : \l# testBug302123c() : \l# testBug302123d() : \l# testBug302552_LW0() : \l# testBug302552_LW1() : \l# testBug302552_LW2() : \l# testBug302552_LW3() : \l# testBug302552_LW4() : \l# testBug302552_LW5() : \l# testBug304529() : \l# testBug304529b() : \l# testBug304529c() : \l# testBug304529d() : \l# testBug304529e() : \l# testBug309706() : \l# testBug309706b() : \l# testBug311578a() : \l# testBug311578b() : \l# testBug311578c() : \l# testBug311578d() : \l# testBug311578e() : \l# testBug311578_320754a() : \l# testBug311578_320754b() : \l# testBug311582a() : \l# testBug311582b() : \l# testBug311617() : \l# testBug311617b() : \l# testBug313524_01() : \l# testBug313524_01b() : \l# testBug313524_02() : \l# testBug313524_02b() : \l# testBug313524_03() : \l# testBug313524_03b() : \l# testBug313524_146175() : \l# testBug313524_164093_01() : \l# testBug313524_164093_02() : \l# testBug313524_203588() : \l# testBug313524_wksp1_01() : \l# testBug313524_wksp1_02() : \l# testBug313524_wksp1_03() : \l# testBug313524_wksp1_04() : \l# testBug313524_wksp1_05() : \l# testBug313524_wksp1_06() : \l# testBug313524_wksp1_07() : \l# testBug313524_wksp1_08() : \l# testBug313524_wksp1_09() : \l# testBug313524_wksp1_10() : \l# testBug313524_wksp1_11() : \l# testBug313524_wksp1_12() : \l# testBug317039_njl() : \l# testBug320754_00() : \l# testBug320754_01a() : \l# testBug320754_01b() : \l# testBug320754_01c() : \l# testBug320754_02a() : \l# testBug320754_02b() : \l# testBug320754_02c() : \l# testBug320754_02d() : \l# testBug320754_03() : \l# testBug328240() : \l# testBug328362() : \l# testBug330313() : \l# testBug330313a() : \l# testBug330313b() : \l# testBug330313c() : \l# testBug330313d() : \l# testBug330313_regression_187a() : \l# testBug330313_regression_187b() : \l# testBug330313_wksp1_01_njl() : \l# testBug330313_wksp1_02_njl() : \l# testBug330313_wksp1_03_njl() : \l# testBug330313_wksp1_04() : \l# testBug330313_wksp1_04_njl() : \l# testBug330313_wksp1_05_njl() : \l# testBug330313_wksp1_06_njl() : \l# testBug330313_wksp1_07() : \l# testBug330313_wksp1_07_bnl() : \l# testBug330313_wksp1_07_njl() : \l# testBug330313_wksp1_07_njl_bnl() : \l# testBug330313_wksp1_08_njl() : \l# testBug330313_wksp1_09_njl() : \l# testBug330313_wksp1_10_njl() : \l# testBug330313_wksp1_11_njl() : \l# testBug330313_wksp1_12() : \l# testBug330313_wksp1_12_njl() : \l# testBug330313_wksp1_13() : \l# testBug330313_wksp1_13_njl() : \l# testBug330313_wksp1_14() : \l# testBug330313_wksp1_14_njl() : \l# testBug330313_wksp1_15_njl() : \l# testBug330313_wksp1_16() : \l# testBug330313_wksp1_16_njl() : \l# testBug330313_wksp1_17_njl() : \l# testBug330313_wksp1_18_njl() : \l# testBug330313_wksp1_19_njl() : \l# testBug330313_wksp1_20_njl() : \l# testBug330313_wksp1_21_njl() : \l# testBug330313_wksp1_22_njl() : \l# testBug330313_wksp1_23_njl() : \l# testBug330313_wksp1_24_njl() : \l# testBug330313_wksp1_25_njl() : \l# testBug330313_wksp1_26_njl() : \l# testBug330313_wksp1_27_njl() : \l# testBug330313_wksp1_28_njl() : \l# testBug330313_wksp1_29_njl() : \l# testBug330313_wksp1_30_njl() : \l# testBug330313_wksp1_31_njl() : \l# testBug330313_wksp1_32_njl() : \l# testBug330313_wksp1_33() : \l# testBug330313_wksp1_33_njl() : \l# testBug330313_wksp1_34_njl() : \l# testBug330313_wksp1_35_njl() : \l# testBug330313_wksp1_36_njl() : \l# testBug330313_wksp1_37_njl() : \l# testBug330313_wksp1_38_njl() : \l# testBug330313_wksp1_39_njl() : \l# testBug330313_wksp1_40_njl() : \l# testBug330313_wksp1_41_njl() : \l# testBug330313_wksp1_42_njl() : \l# testBug330313_wksp1_43_njl() : \l# testBug330313_wksp1_44_njl() : \l# testBug330313_wksp1_45_njl() : \l# testBug330313_wksp1_45b_njl() : \l# testBug330313_wksp1_46_njl() : \l# testBug330313_wksp1_47_njl() : \l# testBug330313_wksp1_48_njl() : \l# testBug330313_wksp1_49_njl() : \l# testBug330313_wksp1_50_njl() : \l# testBug330313_wksp1_51_njl() : \l# testBug330313_wksp1_52_njl() : \l# testBug330313_wksp1_53_njl_bnl() : \l# testBug330313_wksp2_01() : \l# testBug330313_wksp3_X01_njl() : \l# testBug330313_b286601_04() : \l# testBug330313_b286601_05() : \l# testBug330313_b286601_06() : \l# testBug330313_b286601_07() : \l# testBug330313_b286601_08() : \l# testBug332818() : \l# testBug332877() : \l# testBug282988() : \l# testBug356851() : \l# testBug437639() : \l# testBug460008() : \l# testBug462945() : \l# testBug407629() : \l# testBug464312() : \l# testBug458208() : \l# testBug458208b() : \l# testBug458208c() : \l# testBug458208d() : \l# testBug465669() : \l# testBug471090() : \l# testBug471364() : \l# testBug471145() : \l# testBug469438() : \l# testBug471883() : \l# testBug470977() : \l# testBug472962() : \l# testBug470506() : \l# testBug472205() : \l# testBug471780() : \l# testBug472009() : \l# testBug474629() : \l# testBug467618() : \l# testBug474916() : \l# testBug474918() : \l# testBug474918b() : \l# testBug474918c() : \l# testBug475865() : \l# testBug435241() : \l# testBug472815() : \l# testBug472815b() : \l# testBug472413() : \l# testBug475793() : \l# testBug475746() : \l# testBug477005() : \l# testBug471202() : \l# testBug475791() : \l# testBug475791b() : \l# testBug477430() : \l# testBug480074() : \l# testBug479959() : \l# testBug480086() : \l# testBug480735() : \l# testBug481221a() : \l# testBug481221b() : \l# testBug483922a() : \l# testBug483922b() : \l# testBug485163() : \l# testBug479898() : \l# testBug485276() : \l}"
	 ]

	 FormatterCommentsBugsTest [
		 label = "{FormatterCommentsBugsTest|- OUTPUT_FOLDER : IPath\l|# suite() : Test\l# null() : \l# FormatterCommentsBugsTest(String) : \l# getOutputFolder() : IPath\l# testBug196308() : \l# testBug196308b() : \l# testBug196308c() : \l# testBug198963_Tabs01() : \l# testBug198963_Tabs02() : \l# testBug198963_Tabs03() : \l# testBug198963_Tabs04() : \l# testBug198963_Tabs05() : \l# testBug198963_Tabs06() : \l# testBug198963_Spaces01() : \l# testBug198963_Spaces02() : \l# testBug198963_Spaces03() : \l# testBug198963_Spaces04() : \l# testBug198963_Spaces05() : \l# testBug198963_Spaces06() : \l# testBug198963_Mixed01() : \l# testBug198963_Mixed02() : \l# testBug198963_Mixed03() : \l# testBug198963_Mixed04() : \l# testBug198963_Mixed05() : \l# testBug198963_Mixed06() : \l# _testBug204091() : \l# testBug217108a() : \l# testBug217108b() : \l# testBug217108c() : \l# testBug217108d() : \l# testBug217108e() : \l# testBug217108f() : \l# testBug217108g() : \l# testBug217108h() : \l# testBug228652() : \l# testBug230944a() : \l# testBug230944b() : \l# testBug231263() : \l# testBug231263a() : \l# testBug231297() : \l# testBug231297a() : \l# testBug231297b() : \l# testBug231297c() : \l# testBug231297d() : \l# testBug232285a() : \l# testBug232285b() : \l# testBug232285c() : \l# testBug232285d() : \l# testBug232285e() : \l# testBug232285f() : \l# testBug232285g() : \l# testBug232285h() : \l# testBug232285i() : \l# testBug232285j() : \l# testBug232488() : \l# testBug232466a() : \l# testBug232466b() : \l# testBug232768a() : \l# testBug232768b() : \l# testBug232768_Javadoc01() : \l# testBug232768_Javadoc02() : \l# testBug232768_Javadoc03() : \l# testBug232768_Javadoc04() : \l# testBug232768_Javadoc05() : \l# testBug232768_Javadoc06() : \l# testBug232768_Block01() : \l# testBug232768_Block02() : \l# testBug232768_Block03() : \l# testBug232768_Block04() : \l# testBug232768_Block05() : \l# testBug232768_Block06() : \l# testBug232768_Line01() : \l# testBug232768_Line02() : \l# testBug232768_Line03() : \l# testBug232768_Line04() : \l# testBug232768_Line05() : \l# testBug232768_Line06() : \l# testBug232768_Line07() : \l# testBug232768_Line08() : \l# testBug232788_Tabs01() : \l# testBug232788_Spaces01() : \l# testBug232788_Mixed01() : \l# testBug232788_Tabs02() : \l# testBug232788_Spaces02() : \l# testBug232788_Mixed02() : \l# testBug232788_Tabs03() : \l# testBug232788_Spaces03() : \l# testBug232788_Mixed03() : \l# testBug233011() : \l# testBug233228a() : \l# testBug233228b() : \l# testBug233228c() : \l# testBug233228d() : \l# testBug233228e() : \l# testBug233224() : \l# testBug233259a() : \l# testBug233259b() : \l# testBug233259c() : \l# testBug233259d() : \l# testBug237942a() : \l# testBug237942b() : \l# testBug237942c() : \l# testBug237942d() : \l# testBug234336() : \l# testBug234583a() : \l# testBug234583b() : \l# testBug234583c() : \l# testBug234583d() : \l# testBug234583e() : \l# testBug234583f() : \l# testBug234583g() : \l# testBug234583h() : \l# testBug234583i() : \l# testBug234583_Bug239447() : \l# testBug234583_Bug237592() : \l# testBug236230() : \l# testBug236230b() : \l# testBug236230c() : \l# testBug236230d() : \l# testBug236230e() : \l# testBug236230f() : \l# testBug236406_CDB1() : \l# testBug236406_CDB2() : \l# testBug236406_EX1() : \l# testBug236406_EX2() : \l# testBug236406_ST1() : \l# testBug236406_ST2() : \l# testBug237051() : \l# testBug237051b() : \l# testBug237051c() : \l# testBug237051d() : \l# testBug237453a() : \l# testBug237453b() : \l# testBug237453c() : \l# testBug237453d() : \l# testBug237453e() : \l# testBug237453f() : \l# testBug237453g() : \l# testBug237453h() : \l# testBug237453i() : \l# testBug238090() : \l# testBug238210() : \l# testBug238210_X01() : \l# testBug238210_X02() : \l# testBug238210_X03() : \l# testBug238853() : \l# testBug238920() : \l# testBug238920b() : \l# testBug238920c() : \l# testBug239130_default() : \l# testBug239130_clearBlankLines() : \l# testBug239130_preserveLineBreaks() : \l# testBug239130_clearBlankLines_preserveLineBreaks() : \l# testBug239130_196124_default() : \l# testBug239130_196124() : \l# testBug239130_96696_block_default() : \l# testBug239130_96696_block_clearBlankLines() : \l# testBug239130_96696_block_clearBlankLines_preserveLineBreaks() : \l# testBug239130_96696_javadoc_default() : \l# testBug239130_96696_javadoc_clearBlankLines() : \l# testBug239130_96696_javadoc_clearBlankLines_preserveLineBreaks() : \l# testBug239719() : \l# testBug239719b() : \l# testBug239941() : \l# testBug240686() : \l# testBug241345() : \l# testBug241687() : \l# testBug251133() : \l# testBug251133a() : \l# testBug251133b() : \l# testBug251133c() : \l# testBug251133d() : \l# testBug251133e() : \l# testBug251133f() : \l# testBug251133g() : \l# testBug251133h() : \l# testBug256799_Line01() : \l# testBug256799_Line02() : \l# testBug256799_Block01() : \l# testBug256799_Block02() : \l# testBug254998() : \l# testBug254998b() : \l# testBug254998c() : \l# testBug260011() : \l# testBug260011_01() : \l# testBug260011_02() : \l# testBug260011_03() : \l# testBug260011_04() : \l# testBug260011_05() : \l# testBug260011_06() : \l# testBug260011_07() : \l# testBug260011_08() : \l# testBug260011_09() : \l# testBug260011_09b() : \l# testBug260011_10() : \l# testBug260011_11() : \l# testBug260274() : \l# testBug260274b() : \l# testBug260274c() : \l# testBug260274d() : \l# testBug260274e() : \l# testBug260274f() : \l# testBug260274g() : \l# testBug260274h() : \l# testBug260274i() : \l# testBug260276() : \l# testBug260276b() : \l# testBug260276c() : \l# testBug260381() : \l# testBug260381a() : \l# testBug260381b() : \l# testBug260381c() : \l# testBug260381d() : \l# testBug260381e() : \l# testBug260381f() : \l# testBug260381g() : \l# testBug260381h() : \l# testBug260381i() : \l# testBug260381j() : \l# testBug260381k() : \l# testBug260381_wksp1_01() : \l# testBug260381_wksp2_01() : \l# testBug260381_wksp2_01b() : \l# testBug260381_wksp2_01c() : \l# testBug260381_wksp2_02() : \l# testBug260381_wksp2_03() : \l# testBug260381_wksp2_03b() : \l# testBug260381_wksp2_04() : \l# testBug260381_wksp2_05() : \l# testBug260381_wksp2_06() : \l# testBug260381_wksp2_07() : \l# testBug260381_wksp2_08() : \l# testBug260381_wksp2_09() : \l# testBug260798() : \l# testBug260798b() : \l# testBug260798c() : \l# testBug267551() : \l# testBug267658() : \l# testBug267658b() : \l# testBug270209_Block01() : \l# testBug270209_Block02() : \l# testBug270209_Block03() : \l# testBug270209_Javadoc01() : \l# testBug270209_Javadoc02() : \l# testBug270209_Javadoc03() : \l# testBug273619a() : \l# testBug273619b() : \l# testBug279359() : \l# testBug280061() : \l# testBug280255() : \l# testBug280255b() : \l# testBug280616() : \l# testBug287833a() : \l# testBug287833b() : \l# testBug287833c() : \l# testBug295825() : \l# testBug300379() : \l# testBug300379b() : \l# testBug304705() : \l# testBug304705b() : \l# testBug305281() : \l# testBug305371() : \l# testBug305371b() : \l# testBug305371c() : \l# testBug305371d() : \l# testBug305518() : \l# testBug305518_wksp2_01() : \l# testBug305518_wksp2_02() : \l# testBug305518_wksp2_03() : \l# testBug305830() : \l# testBug305830b() : \l# testBug305830c() : \l# testBug305830d() : \l# testBug309835() : \l# testBug309835b() : \l# testBug309835c() : \l# testBug309835d() : \l# testBug309835_wksp1_01() : \l# testBug309835_wksp1_02() : \l# testBug309835_wksp2_01() : \l# testBug311864() : \l# testBug315577() : \l# testBug315732() : \l# testBug313651_01() : \l# testBug313651_01b() : \l# testBug313651_01c() : \l# testBug313651_02() : \l# testBug313651_02b() : \l# testBug313651_02c() : \l# testBug313651_03() : \l# testBug313651_03b() : \l# testBug313651_03c() : \l# testBug313651_wksp3_01() : \l# testBug313651_wksp3_02() : \l# testBug348338() : \l# testBug470986() : \l# testBug471062() : \l# testBug471918() : \l# testBug474011() : \l# testBug475294() : \l# testBug475294b() : \l# testBug479292() : \l# testBug479292b() : \l# testBug121728() : \l# testBug479469() : \l# testBug480029() : \l# testBug480030() : \l# testBug479474() : \l# testBug484957() : \l}"
	 ]

	 FormatterCommentsClearBlankLinesTests [
		 label = "{FormatterCommentsClearBlankLinesTests|- OUTPUT_FOLDER : IPath\l|# suite() : Test\l# FormatterCommentsClearBlankLinesTests(String) : \l# setUp() : \l# codeFormatter() : DefaultCodeFormatter\l# getOutputFolder() : IPath\l}"
	 ]

	 FormatterCommentsTests [
		 label = "{FormatterCommentsTests|- OUTPUT_FOLDER : IPath\l+ ALL_TEST_SUITES : List\l|# suite() : Test\l# FormatterCommentsTests(String) : \l# setUpSuite() : \l# tearDownSuite() : \l# compareFormattedSource(ICompilationUnit) : \l# assumeSourceEquals(String, String, String) : \l# expectedFormattedSource(String) : String\l# getIndentationLevel(Scanner, int) : int\l# getDefaultCompilerOptions() : Map\l# formatUnit(String, String) : \l# formatUnit(String, String, int, int, boolean, int, int, String) : \l# getProjectCompilationUnits(IJavaProject) : List\l# getOutputSource(ICompilationUnit) : String\l# getOutputFolder() : IPath\l# testCopyright_DEF() : \l# testCopyright_CBL() : \l# testCopyright01() : \l# testCopyright02() : \l# testCopyright03() : \l# testCopyright04() : \l# testCopyright05() : \l# testCopyright06() : \l# testHtmlOthers01() : \l# testHtmlOthers01b() : \l# testHtmlOthers01c() : \l# testHtmlOthers01d() : \l# testHtmlOthers01e() : \l# testHtmlOthers02() : \l# testHtmlOthers02b() : \l# testHtmlOthers02c() : \l# testHtmlOthers02d() : \l# testHtmlOthers02e() : \l# testHtmlOthers03() : \l# testHtmlOthers03b() : \l# testHtmlOthers04() : \l# testHtmlOthers05() : \l# testHtmlOthers06() : \l# testHtmlOthers07() : \l# testHtmlOthers08() : \l# testHtmlOthers09() : \l# testHtmlOthers10() : \l# testHtmlOthers11() : \l# testHtmlPre01() : \l# testHtmlPre02() : \l# testHtmlPre02b() : \l# testHtmlPre03() : \l# testHtmlPre04() : \l# testHtmlPre05() : \l# testHtmlPre06() : \l# testHtmlPre07() : \l# testHtmlPre08() : \l# testHtmlPre09() : \l# testHtmlPre10() : \l# testHtmlPre11() : \l# testHtmlPre12() : \l# testHtmlPre13() : \l# testHtmlUl01() : \l# testHtmlUl02() : \l# testHtmlUl03() : \l# testHtmlUl04() : \l# testHtmlUl05() : \l# testHtmlUl06() : \l# testHtmlUl07() : \l# testHtmlUl08() : \l# testHtmlUl09() : \l# testHtmlUl10() : \l# testHtmlUl11() : \l# testHtmlUl12() : \l# testLines() : \l# testLines02() : \l# testLines03() : \l# testLines04() : \l# testLines05() : \l# testLines06() : \l# testLines07() : \l# testLines08() : \l# testLines09() : \l# testPreferencesExample01() : \l# testPreferencesExample02() : \l# testPreferencesExample03() : \l# testPreferencesExample04() : \l# testPreferencesExample05() : \l# testPreferencesExample06() : \l# _testPreferencesExample07() : \l# testPreferencesExample08() : \l# testPreferencesExample09() : \l# testPreferencesExample10() : \l# testPreferencesExample11() : \l# testPreferencesExample12() : \l# testPreferencesExample13() : \l# testPreferencesExample14() : \l# testPreferencesExample14a() : \l# testPreferencesExample14b() : \l# testPreferencesExample14c() : \l# testPreferencesExample14d() : \l# testPreferencesExample15a() : \l# testPreferencesExample15b() : \l# testPreferencesExample15c() : \l# testPreferencesExample16a() : \l# testPreferencesExample16b() : \l# testPreferencesExample17a() : \l# testPreferencesExample17b() : \l# testPreferencesExample17c() : \l# testTagImmutable01() : \l# testTagImmutable02() : \l# testTagImmutable03() : \l# testTagOthers01() : \l# testTagOthers02() : \l# testTagOthers03() : \l# testTagParam01() : \l# testTagParam02() : \l# testTagParam03() : \l# testTagParam04() : \l# testTagParam05() : \l# testTagParam06() : \l# testTagSee01() : \l# testTagSee02() : \l# testTagSee03() : \l# testTagSee04() : \l# testTagSee05() : \l# testTagSee06() : \l# testTagLink01() : \l# testTagLink02() : \l# testTagLink02b() : \l# testTagLink03a() : \l# testTagLink03b() : \l# testTagLink04() : \l# testLineComments01() : \l# testLineComments02() : \l# testLineComments02b() : \l# testLineComments03() : \l# testLineComments04() : \l# testLineComments05() : \l# testLineComments06() : \l# testLineComments07() : \l# testLineComments08() : \l# testLineComments09() : \l# testLineComments10() : \l# testLineComments11() : \l# testBlockComments01() : \l# testBlockComments02() : \l# testBlockComments03() : \l# testBlockComments03b() : \l# testBlockComments04() : \l# testBlockComments05() : \l# testBlockComments05b() : \l# testBlockComments05c() : \l# testBlockComments05d() : \l# testBlockComments05db() : \l# testBlockComments05dc() : \l# testBlockComments05e() : \l# testBlockComments06() : \l# testBlockComments07() : \l# testBlockComments08() : \l# testBlockComments09() : \l# testBlockComments10() : \l# testBlockComments11() : \l# testBlockComments12() : \l# testBlockComments13() : \l# testBlockComments14() : \l# testBlockComments15() : \l# testBlockComments16() : \l# testBlockComments17() : \l# testBlockComments18() : \l# testBlockComments19() : \l# testWkspEclipse01() : \l# testWkspEclipse02() : \l# testWkspEclipse02b() : \l# testWkspEclipse03() : \l# _testWkspEclipse04() : \l# testWkspEclipse05() : \l# testWkspEclipse06() : \l# testWkspEclipse07() : \l# testWkspEclipse08() : \l# testWkspEclipse08b() : \l# testWkspEclipse08c() : \l# testWkspEclipse09() : \l# testWkspEclipse10() : \l# testWkspEclipse11() : \l# testWkspEclipse11b() : \l# testWkspEclipse11c() : \l# testWkspEclipse12() : \l# testWkspEclipse12b() : \l# testWkspEclipse13() : \l# testWkspEclipse14() : \l# testWkspEclipse15() : \l# testWkspEclipse16() : \l# testWkspEclipse17() : \l# testWkspEclipse18() : \l# testWkspEclipse19() : \l# testWkspEclipse20() : \l# testWkspEclipse21() : \l# testWkspEclipse22() : \l# testWkspEclipse23() : \l# testWkspEclipse24() : \l# testWkspEclipse25() : \l# testWkspEclipse26() : \l# testWkspEclipse27() : \l# testWkspEclipse28() : \l# testWkspEclipse28b() : \l# _testWkspEclipse28c() : \l# testWkspEclipse28d() : \l# testWkspEclipse29() : \l# testWkspEclipse30() : \l# testWkspEclipse31() : \l# testWkspEclipse32() : \l# testWkspEclipse33() : \l# testWkspEclipse34() : \l# testWkspGanymede01() : \l# testWkspGanymede02() : \l# testWkspGanymede03() : \l# testWkspGanymede04() : \l# testWkspJUnit01() : \l}"
	 ]

	 FormatterJavadocDontIndentTagsDescriptionTests [
		 label = "{FormatterJavadocDontIndentTagsDescriptionTests|- OUTPUT_FOLDER : IPath\l|# suite() : Test\l# FormatterJavadocDontIndentTagsDescriptionTests(String) : \l# setUp() : \l# codeFormatter() : DefaultCodeFormatter\l# getOutputFolder() : IPath\l}"
	 ]

	 FormatterJavadocDontIndentTagsTests [
		 label = "{FormatterJavadocDontIndentTagsTests|- OUTPUT_FOLDER : IPath\l|# suite() : Test\l# FormatterJavadocDontIndentTagsTests(String) : \l# setUp() : \l# codeFormatter() : DefaultCodeFormatter\l# getOutputFolder() : IPath\l}"
	 ]

	 FormatterJSR308Tests [
		 label = "{FormatterJSR308Tests|# JAVA_PROJECT : IJavaProject\l+ UNKNOWN_KIND : int\l+ IN : String\l+ OUT : String\l+ DEBUG : boolean\l# LINE_SEPARATOR : String\l- PROJECT_NAME : String\l- time : long\l# formatterPrefs : DefaultCodeFormatterOptions\l# formatterOptions : Map\l|# null() : \l# suite() : Test\l# FormatterJSR308Tests(String) : \l# setPageWidth80() : \l# runFormatter(CodeFormatter, String, int, int, int, int, String, boolean) : String\l# setUp() : \l# setUpSuite() : \l# tearDownSuite() : \l# getIn(String) : String\l# getOut(String) : String\l# assertLineEquals(String, String, String, boolean) : \l# runTest(String, String) : \l# runTest(CodeFormatter, String, String, int, int) : \l# runTest(CodeFormatter, String, String, int, int, boolean, int, int) : \l# runTest(CodeFormatter, String, String, int, int, boolean, int, int, String) : \l# testLambda() : \l# testReferenceExpression() : \l# test000() : \l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# test016() : \l# test017() : \l# test018() : \l# test019() : \l# test020() : \l# test021() : \l# test022() : \l# test023() : \l# test024() : \l# test025() : \l# test026() : \l# test027() : \l# test028() : \l# test029() : \l# test030() : \l# test031() : \l# test032() : \l# test033() : \l# test034() : \l# test035() : \l# test036() : \l# test037() : \l# test038() : \l# test039() : \l# testBug403881() : \l}"
	 ]

	 FormatterJSR335Tests [
		 label = "{FormatterJSR335Tests|# JAVA_PROJECT : IJavaProject\l+ UNKNOWN_KIND : int\l+ IN : String\l+ OUT : String\l+ DEBUG : boolean\l# LINE_SEPARATOR : String\l- PROJECT_NAME : String\l# formatterPrefs : DefaultCodeFormatterOptions\l# formatterOptions : Map\l|# null() : \l# suite() : Test\l# FormatterJSR335Tests(String) : \l# setUp() : \l# setUpSuite() : \l# tearDownSuite() : \l# setPageWidth80() : \l# setPageWidth80(DefaultCodeFormatterOptions) : \l# runFormatter(CodeFormatter, String, int, int, int, int, String, boolean) : String\l# getIn(String) : String\l# getOut(String) : String\l# assertLineEquals(String, String, String, boolean) : \l# runTest(String, String, DefaultCodeFormatterOptions) : \l# runTest(String, String) : \l# runTest(CodeFormatter, String, String, int, int) : \l# runTest(CodeFormatter, String, String, int, int, boolean, int, int, String) : \l# testLambda() : \l# testLambdaOptions() : \l# testMethodReference() : \l# testBug402819() : \l# testBug402818() : \l}"
	 ]

	 FormattingFailure [
		 label = "{FormattingFailure|# file : File\l# path : IPath\l- preferences : DefaultCodeFormatterOptions\l- inputDir : File\l- OUTPUT_DIR : File\l- WRITE_DIR : File\l# FILES_FILTER : String\l# FILES_FILTER_KIND : int\l- LOG_FILE : File\l- LOG_STREAM : PrintStream\l- MAINTENANCE : boolean\l- CLEAN : boolean\l- CAN_COMPARE : boolean\l- canCompare : boolean\l- testIndex : int\l- LIST : boolean\l- MAX_FILES : Map\l# FORMAT_REPEAT : int\l- NO_COMMENTS : boolean\l- JOIN_LINES : String\l- BRACES : String\l- PRESERVED_LINES : int\l- profiles : int\l- PROFILE_NEVER_JOIN_LINES : int\l- PROFILE_JOIN_LINES_ONLY_COMMENTS : int\l- PROFILE_JOIN_LINES_ONLY_CODE : int\l- PROFILE_JOIN_LINES_MASK : int\l- PROFILE_NO_COMMENTS : int\l- PROFILE_BRACES_NEXT_LINE : int\l- PROFILE_BRACES_NEXT_LINE_ON_WRAP : int\l- PROFILE_BRACES_NEXT_LINE_SHIFTED : int\l- PROFILE_BRACES_MASK : int\l- PROFILE_PRESERVED_LINES_MASK : int\l# formatting : long\l# occurences : int\l# null_output : int\l- TIME_MEASURES : TimeMeasuring\l- ONE_MINUTE : int\l- ONE_HOUR : long\l# failureIndex : int\l# UNEXPECTED_FAILURE : int\l# NO_OUTPUT_FAILURE : int\l# COMPILATION_ERRORS_FAILURE : int\l# FILE_NOT_FOUND_FAILURE : int\l# COMPARISON_FAILURE : int\l# REFORMATTING_FAILURE : int\l# REFORMATTING_EXPECTED_FAILURE : int\l# REFORMATTING_LEADING_FAILURE : int\l# REFORMATTING_WHITESPACES_FAILURE : int\l# msg : String\l# kind : int\l# failures : List\l# FAILURES : FormattingFailure\l- MAX_FAILURES : int\l- ASSERT_EQUALS_STRINGS : boolean\l- ECLIPSE_VERSION : String\l- ECLIPSE_MILESTONE : String\l- JDT_CORE_VERSION : String\l- PATCH_BUG : String\l- TEMP_OUTPUT : String\l- JDT_CORE_HEAD : boolean\l|# null() : \l# null() : \l# null() : \l# null() : \l# FormattingFailure(int) : \l# FormattingFailure(int, String) : \l# size() : int\l# toString() : String\l# suite() : Test\l# suite(File, String, Map) : Test\l# accept(File) : boolean\l# buildProfileString() : String\l# initProfiles(String) : int\l# initDirectories(File, int, boolean) : \l# setLogDir(File, int, boolean) : \l# createDir(File, List) : File\l# setProfilesDir(int, File) : File\l# setProfilesDir(int, List) : \l# appendProfiles(int, StringBuffer) : \l# setOutputDir(File, String, int) : \l# initFailures() : \l# initVersion() : \l# FormatterMassiveRegressionTests(File, File, int, int, boolean) : \l# getName() : String\l# setUp() : \l# setUpSuite() : \l# print() : \l# tearDown() : \l# tearDownSuite() : \l# assertSourceEquals(String, String, String) : \l# codeFormatter() : DefaultCodeFormatter\l# compareFormattedSource() : \l# counterToString(int) : String\l# getDefaultCompilerOptions() : Map\l# sourceHasCompilationErrors(String) : boolean\l# runFormatter(CodeFormatter, String, int, int, int, int, String, boolean) : String\l# timeString(long) : String\l# testReference() : \l# testCompare() : \l}"
	 ]

	 FormatterOldBugsGistTests [
		 label = "{FormatterOldBugsGistTests|- lineSeparator : String\l|# FormatterOldBugsGistTests(String) : \l# format(String, String, String, Map) : \l# suite() : Test\l# testComments() : \l# testCode() : \l}"
	 ]

	 MyRegion [
		 label = "{MyRegion|# JAVA_PROJECT : IJavaProject\l+ UNKNOWN_KIND : int\l+ IN : String\l+ OUT : String\l+ DEBUG : boolean\l# LINE_SEPARATOR : String\l- time : long\l# formatterPrefs : DefaultCodeFormatterOptions\l# formatterOptions : Map\l|# null() : \l# suite() : Test\l# FormatterRegressionTests(String) : \l# setComplianceLevel(String) : \l# setPageWidth80() : \l# setPageWidth80(DefaultCodeFormatterOptions) : \l# setFormatterOptions80() : \l# getResource(String, String) : String\l# getZipEntryContents(String, String) : String\l# runFormatter(CodeFormatter, String, int, int, int, int, String, boolean) : String\l# runFormatter(CodeFormatter, String, int, int, IRegion, String) : String\l# setUp() : \l# setUpSuite() : \l# tearDownSuite() : \l# getIn(String) : String\l# getOut(String) : String\l# assertLineEquals(String, String, String, boolean) : \l# assertLineEquals(String, String, String) : \l# codeFormatter() : DefaultCodeFormatter\l# formatSource(String) : \l# formatSource(String, String) : \l# formatSource(String, String, int) : \l# formatSource(String, String, boolean) : \l# formatSource(String, String, int, int, boolean) : \l# formatSource(String, String, int, int, int, int, String, boolean) : \l# runTest(String, String) : \l# runTest(CodeFormatter, String, String) : \l# runTest(String, String, int) : \l# runTest(CodeFormatter, String, String, int) : \l# runTest(CodeFormatter, String, String, int, boolean) : \l# runTest(CodeFormatter, String, String, int, int) : \l# runTest(CodeFormatter, String, String, int, int, boolean, int, int) : \l# runTest(String, String, CodeFormatter, int, int, boolean, int, int, String) : \l# runTest(String, String, CodeFormatter, int, int, boolean, int, int) : \l# runTest(CodeFormatter, String, String, int, int, boolean, int, int, String) : \l# runTest(CodeFormatter, String, String, int, int, boolean, IRegion, String) : \l# getSource(ASTNode, char) : String\l# test001() : \l# test002() : \l# test003() : \l# test004() : \l# test005() : \l# test006() : \l# test007() : \l# test008() : \l# test009() : \l# test010() : \l# test011() : \l# test012() : \l# test013() : \l# test014() : \l# test015() : \l# test016() : \l# test017() : \l# test018() : \l# test019() : \l# test020() : \l# test021() : \l# test022() : \l# test023() : \l# test024() : \l# test025() : \l# test026() : \l# test026b() : \l# test027() : \l# test028() : \l# test029() : \l# test030() : \l# test031() : \l# test032() : \l# test033() : \l# test034() : \l# test035() : \l# test036() : \l# test037() : \l# test038() : \l# test039() : \l# test040() : \l# test041() : \l# test042() : \l# test043() : \l# test044() : \l# test045() : \l# test046() : \l# test047() : \l# test048() : \l# test049() : \l# test050() : \l# test051() : \l# test052() : \l# test053() : \l# test054() : \l# test055() : \l# test056() : \l# test057() : \l# test058() : \l# test059() : \l# test060() : \l# test061() : \l# test062() : \l# test063() : \l# test064() : \l# test065() : \l# test066() : \l# test067() : \l# test068() : \l# test069() : \l# test070() : \l# test071() : \l# test072() : \l# test073() : \l# test074() : \l# test075() : \l# test076() : \l# test077() : \l# test078() : \l# test079() : \l# test080() : \l# test081() : \l# test082() : \l# test083() : \l# test084() : \l# test085() : \l# test086() : \l# test087() : \l# test088() : \l# test089() : \l# test090() : \l# test091() : \l# test092() : \l# test093() : \l# test094() : \l# test095() : \l# test096() : \l# test097() : \l# test098() : \l# test099() : \l# test100() : \l# test101() : \l# test102() : \l# test103() : \l# test104() : \l# test105() : \l# test106() : \l# test107() : \l# test108() : \l# test109() : \l# test110() : \l# test111() : \l# test112() : \l# test113() : \l# test114() : \l# test115() : \l# test116() : \l# test117() : \l# test118() : \l# test119() : \l# test120() : \l# test121() : \l# test122() : \l# test123() : \l# test124() : \l# test125() : \l# test126() : \l# test127() : \l# test128() : \l# test129() : \l# test130() : \l# test131() : \l# test132() : \l# test133() : \l# test134() : \l# test135() : \l# test136() : \l# test137() : \l# test138() : \l# test139() : \l# test140() : \l# test141() : \l# test142() : \l# test143() : \l# test144() : \l# test145() : \l# test146() : \l# test147() : \l# test148() : \l# test149() : \l# test150() : \l# test151() : \l# test152() : \l# test153() : \l# test154() : \l# test155() : \l# test156() : \l# test157() : \l# test158() : \l# test159() : \l# test160() : \l# test161() : \l# test162() : \l# test163() : \l# test164() : \l# test165() : \l# test166() : \l# test167() : \l# test167b() : \l# test169() : \l# test169b() : \l# test170() : \l# test170b() : \l# test171() : \l# test172() : \l# test173() : \l# test174() : \l# test175() : \l# test176() : \l# test177() : \l# test178() : \l# test179() : \l# test180() : \l# test181() : \l# test182() : \l# test183() : \l# test184() : \l# test185() : \l# _test186() : \l# test187() : \l# test188() : \l# test189() : \l# test190() : \l# test191() : \l# test192() : \l# test193() : \l# test194() : \l# test195() : \l# test196() : \l# test197() : \l# test198() : \l# test199() : \l# test201() : \l# test202() : \l# test203() : \l# test204() : \l# test205() : \l# test206() : \l# test207() : \l# test208() : \l# test209() : \l# test210() : \l# test211() : \l# test212() : \l# test213() : \l# test214() : \l# test215() : \l# test216() : \l# test217() : \l# test218() : \l# test219() : \l# test220() : \l# test221() : \l# test222() : \l# test223() : \l# test224() : \l# test225() : \l# test226() : \l# test227() : \l# test228() : \l# test229() : \l# test230() : \l# test231() : \l# test232() : \l# test233() : \l# test234() : \l# test235() : \l# test236() : \l# test237() : \l# test238() : \l# test239() : \l# test240() : \l# test242() : \l# test244() : \l# test245() : \l# test246() : \l# test247() : \l# test248() : \l# test249() : \l# test250() : \l# test251() : \l# test252() : \l# test253() : \l# test254() : \l# test255() : \l# test256() : \l# test257() : \l# test258() : \l# test259() : \l# test260() : \l# test261() : \l# test262() : \l# test263() : \l# test264() : \l# test265() : \l# test266() : \l# test267() : \l# test268() : \l# test269() : \l# test270() : \l# test271() : \l# test272() : \l# test273() : \l# test274() : \l# test275() : \l# test276() : \l# test277() : \l# test278() : \l# test279() : \l# test280() : \l# test281() : \l# test282() : \l# test283() : \l# test284() : \l# test285() : \l# test286() : \l# test287() : \l# test288() : \l# test289() : \l# test290() : \l# test291() : \l# test292() : \l# test293() : \l# test294() : \l# test295() : \l# test296() : \l# test297() : \l# test298() : \l# test299() : \l# test300() : \l# test301() : \l# test302() : \l# test303() : \l# test304() : \l# test305() : \l# test306() : \l# test307() : \l# test308() : \l# test309() : \l# test310() : \l# test311() : \l# test312() : \l# test313() : \l# test314() : \l# test315() : \l# test316() : \l# test317() : \l# test318() : \l# test319() : \l# test320() : \l# test321() : \l# test322() : \l# test323() : \l# test324() : \l# test325() : \l# test326() : \l# test327() : \l# test328() : \l# test329() : \l# test330() : \l# test331() : \l# test332() : \l# test333() : \l# test334() : \l# test335() : \l# test336() : \l# test337() : \l# test337b() : \l# test338() : \l# test339() : \l# test340() : \l# test341() : \l# test342() : \l# test343() : \l# test344() : \l# test345() : \l# test347() : \l# test348() : \l# test349() : \l# test350() : \l# test351() : \l# test352() : \l# test353() : \l# test354() : \l# test355() : \l# test356() : \l# test357() : \l# test358() : \l# test359() : \l# test360() : \l# test361() : \l# test362() : \l# test363() : \l# test364() : \l# test365() : \l# test366() : \l# test367() : \l# test368() : \l# test369() : \l# test370() : \l# test371() : \l# test372() : \l# test373() : \l# test374() : \l# test375() : \l# test376() : \l# test377() : \l# test378() : \l# test379() : \l# test380() : \l# test381() : \l# test382() : \l# test383() : \l# _test384() : \l# test385() : \l# test386() : \l# _test387() : \l# test388() : \l# test389() : \l# test390() : \l# test391() : \l# test392() : \l# test393() : \l# test394() : \l# test395() : \l# test396() : \l# test397() : \l# test398() : \l# test399() : \l# test400() : \l# test401() : \l# test402() : \l# test403() : \l# test404() : \l# test405() : \l# test406() : \l# test407() : \l# test408() : \l# test409() : \l# test410() : \l# test411() : \l# test412() : \l# test413() : \l# test414() : \l# test415() : \l# test416() : \l# test417() : \l# test418() : \l# _test419() : \l# _test420() : \l# test421() : \l# test422() : \l# test423() : \l# test424() : \l# test425() : \l# test426() : \l# test427() : \l# test428() : \l# test429() : \l# test430() : \l# test431() : \l# test432() : \l# test433() : \l# test434() : \l# test435() : \l# test436() : \l# test437() : \l# test438() : \l# test439() : \l# test440() : \l# test441() : \l# test442() : \l# test443() : \l# test444() : \l# test445() : \l# test446() : \l# test447() : \l# test448() : \l# test449() : \l# test450() : \l# test451() : \l# test452() : \l# test453() : \l# test454() : \l# test455() : \l# test455b() : \l# test456() : \l# test457() : \l# test458() : \l# test459() : \l# test460() : \l# test461() : \l# test462() : \l# test463() : \l# test464() : \l# test465() : \l# test466() : \l# test467() : \l# test468() : \l# test469() : \l# test470() : \l# test471() : \l# test472() : \l# test473() : \l# test474() : \l# test475() : \l# test476() : \l# test477() : \l# test478() : \l# test479() : \l# test480() : \l# test481() : \l# test482() : \l# test483() : \l# test484() : \l# test485() : \l# test486() : \l# test487() : \l# test488() : \l# test489() : \l# test490() : \l# _test491() : \l# test492() : \l# test493() : \l# test494() : \l# test495() : \l# test496() : \l# test497() : \l# test498() : \l# test499() : \l# test500() : \l# test501() : \l# test502() : \l# test503() : \l# test504() : \l# test505() : \l# test506() : \l# test507() : \l# test508() : \l# test509() : \l# test510() : \l# test511() : \l# test512() : \l# test513() : \l# test514() : \l# test515() : \l# test516() : \l# test517() : \l# test518() : \l# test519() : \l# test520() : \l# test521() : \l# test522() : \l# test523() : \l# test524() : \l# test525() : \l# test526() : \l# test527() : \l# test527b() : \l# test528() : \l# test529() : \l# test530() : \l# test531() : \l# test532() : \l# test533() : \l# test534() : \l# test535() : \l# test536() : \l# test537() : \l# test538() : \l# test539() : \l# test540() : \l# test541() : \l# test542() : \l# test543() : \l# test544() : \l# test545() : \l# test546() : \l# test547() : \l# test548() : \l# test549() : \l# test550() : \l# test551() : \l# test552() : \l# test553() : \l# test554() : \l# test555() : \l# test556() : \l# test557() : \l# test558() : \l# test559() : \l# test560() : \l# test561() : \l# test562() : \l# test563() : \l# test564() : \l# test566() : \l# test567() : \l# test568() : \l# test569() : \l# test570() : \l# test571() : \l# test572() : \l# test573() : \l# test574() : \l# test575() : \l# test576() : \l# test577() : \l# test578() : \l# test579() : \l# test580() : \l# test581() : \l# test582() : \l# test583() : \l# test584() : \l# test585() : \l# test586() : \l# test587() : \l# test588() : \l# test589() : \l# test590() : \l# test591() : \l# test592() : \l# test593() : \l# test594() : \l# test595() : \l# test596() : \l# test597() : \l# test598() : \l# test599() : \l# test600() : \l# test601() : \l# test605() : \l# test606() : \l# test607() : \l# test608() : \l# test609() : \l# test610() : \l# test611() : \l# test612() : \l# test613() : \l# test614() : \l# test615() : \l# test616() : \l# test617() : \l# test618() : \l# test619() : \l# test620() : \l# test621() : \l# test622() : \l# test623() : \l# test624() : \l# test625() : \l# test626() : \l# test627() : \l# test628() : \l# test629() : \l# test630() : \l# test631() : \l# test632() : \l# test633() : \l# test634() : \l# test635() : \l# test636() : \l# test637() : \l# test638() : \l# test639() : \l# test640() : \l# test641() : \l# test642() : \l# test643() : \l# test644() : \l# test645() : \l# test646() : \l# test647() : \l# test648() : \l# test649() : \l# test650() : \l# test651() : \l# test652() : \l# test653() : \l# test654() : \l# test655() : \l# test656() : \l# test657() : \l# test658() : \l# test659() : \l# test660() : \l# test661() : \l# test662() : \l# test663() : \l# test664() : \l# test665() : \l# test666() : \l# test667() : \l# test668() : \l# test669() : \l# test670() : \l# test671() : \l# test672() : \l# test673() : \l# test674() : \l# _test675() : \l# _test676() : \l# _test677() : \l# test678() : \l# test679() : \l# test680() : \l# test681() : \l# test685() : \l# test686() : \l# test687() : \l# test688a() : \l# test688b() : \l# test689() : \l# test690() : \l# test691() : \l# test692() : \l# test693() : \l# getLength() : int\l# getOffset() : int\l# test694a() : \l# test694b() : \l# test695() : \l# test696a() : \l# test696b() : \l# test697a() : \l# test697b() : \l# test699() : \l# test700() : \l# test701() : \l# test702() : \l# test703() : \l# test704() : \l# test705() : \l# test706() : \l# test707() : \l# test708() : \l# test709() : \l# test710() : \l# test711() :
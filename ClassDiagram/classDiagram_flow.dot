digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 ConditionalFlowInfo [
		 label = "{ConditionalFlowInfo|+ initsWhenTrue : FlowInfo\l+ initsWhenFalse : FlowInfo\l|# ConditionalFlowInfo(FlowInfo, FlowInfo) : \l# addInitializationsFrom(FlowInfo) : FlowInfo\l# addNullInfoFrom(FlowInfo) : FlowInfo\l# addPotentialInitializationsFrom(FlowInfo) : FlowInfo\l# asNegatedCondition() : FlowInfo\l# copy() : FlowInfo\l# initsWhenFalse() : FlowInfo\l# initsWhenTrue() : FlowInfo\l# isDefinitelyAssigned(FieldBinding) : boolean\l# isDefinitelyAssigned(LocalVariableBinding) : boolean\l# isDefinitelyNonNull(LocalVariableBinding) : boolean\l# isDefinitelyNull(LocalVariableBinding) : boolean\l# isDefinitelyUnknown(LocalVariableBinding) : boolean\l# hasNullInfoFor(LocalVariableBinding) : boolean\l# isPotentiallyAssigned(FieldBinding) : boolean\l# isPotentiallyAssigned(LocalVariableBinding) : boolean\l# isPotentiallyNonNull(LocalVariableBinding) : boolean\l# isPotentiallyNull(LocalVariableBinding) : boolean\l# isPotentiallyUnknown(LocalVariableBinding) : boolean\l# isProtectedNonNull(LocalVariableBinding) : boolean\l# isProtectedNull(LocalVariableBinding) : boolean\l# markAsComparedEqualToNonNull(LocalVariableBinding) : \l# markAsComparedEqualToNull(LocalVariableBinding) : \l# markAsDefinitelyAssigned(FieldBinding) : \l# markAsDefinitelyAssigned(LocalVariableBinding) : \l# markAsDefinitelyNonNull(LocalVariableBinding) : \l# markAsDefinitelyNull(LocalVariableBinding) : \l# resetNullInfo(LocalVariableBinding) : \l# markPotentiallyNullBit(LocalVariableBinding) : \l# markPotentiallyNonNullBit(LocalVariableBinding) : \l# markAsDefinitelyUnknown(LocalVariableBinding) : \l# markPotentiallyUnknownBit(LocalVariableBinding) : \l# setReachMode(int) : FlowInfo\l# mergedWith(UnconditionalFlowInfo) : UnconditionalFlowInfo\l# nullInfoLessUnconditionalCopy() : UnconditionalFlowInfo\l# toString() : String\l# safeInitsWhenTrue() : FlowInfo\l# unconditionalCopy() : UnconditionalFlowInfo\l# unconditionalFieldLessCopy() : UnconditionalFlowInfo\l# unconditionalInits() : UnconditionalFlowInfo\l# unconditionalInitsWithoutSideEffect() : UnconditionalFlowInfo\l# resetAssignmentInfo(LocalVariableBinding) : \l}"
	 ]

	 ExceptionHandlingFlowContext [
		 label = "{ExceptionHandlingFlowContext|+ BitCacheSize : int\l+ handledExceptions : ReferenceBinding\l# isReached : int\l# isNeeded : int\l# initsOnExceptions : UnconditionalFlowInfo\l# indexes : ObjectCache\l# isMethodContext : boolean\l+ initsOnReturn : UnconditionalFlowInfo\l+ initializationParent : FlowContext\l+ extendedExceptions : ArrayList\l- NO_ARGUMENTS : Argument\l+ catchArguments : Argument\l- exceptionToCatchBlockMap : int\l|# ExceptionHandlingFlowContext(FlowContext, ASTNode, ReferenceBinding, FlowContext, BlockScope, UnconditionalFlowInfo) : \l# ExceptionHandlingFlowContext(FlowContext, TryStatement, ReferenceBinding, int, FlowContext, BlockScope, FlowInfo) : \l# ExceptionHandlingFlowContext(FlowContext, ASTNode, ReferenceBinding, int, Argument, FlowContext, BlockScope, UnconditionalFlowInfo) : \l# complainIfUnusedExceptionHandlers(AbstractMethodDeclaration) : \l# complainIfUnusedExceptionHandlers(BlockScope, TryStatement) : \l# getExceptionType(int) : ASTNode\l+ getInitializationContext() : FlowContext\l# individualToString() : String\l# initsOnException(int) : UnconditionalFlowInfo\l# initsOnReturn() : UnconditionalFlowInfo\l# mergeUnhandledException(TypeBinding) : \l# recordHandlingException(ReferenceBinding, UnconditionalFlowInfo, TypeBinding, TypeBinding, ASTNode, boolean) : \l# recordReturnFrom(UnconditionalFlowInfo) : \l# subroutine() : SubRoutineStatement\l}"
	 ]

	 ExceptionInferenceFlowContext [
		 label = "{ExceptionInferenceFlowContext||# ExceptionInferenceFlowContext(FlowContext, ASTNode, ReferenceBinding, FlowContext, BlockScope, UnconditionalFlowInfo) : \l}"
	 ]

	 FinallyFlowContext [
		 label = "{FinallyFlowContext|# finalAssignments : Reference\l# finalVariables : VariableBinding\l# assignCount : int\l# nullLocals : LocalVariableBinding\l# nullReferences : ASTNode\l# nullCheckTypes : int\l# nullCount : int\l+ tryContext : FlowContext\l|# FinallyFlowContext(FlowContext, ASTNode, ExceptionHandlingFlowContext) : \l# complainOnDeferredChecks(FlowInfo, BlockScope) : \l# individualToString() : String\l# isSubRoutine() : boolean\l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# recordUsingNullReference(Scope, LocalVariableBinding, ASTNode, int, FlowInfo) : \l# removeFinalAssignmentIfAny(Reference) : \l# recordNullReference(LocalVariableBinding, ASTNode, int, FlowInfo) : \l# recordUnboxing(Scope, Expression, int, FlowInfo) : \l# internalRecordNullityMismatch(Expression, TypeBinding, FlowInfo, int, TypeBinding, int) : boolean\l}"
	 ]

	 FlowContext [
		 label = "{FlowContext|+ NotContinuableContext : FlowContext\l+ associatedNode : ASTNode\l+ parent : FlowContext\l+ initsOnFinally : FlowInfo\l+ conditionalLevel : int\l+ tagBits : int\l+ providedExpectedTypes : TypeBinding\l- nullCheckedFieldReferences : Reference\l- timesToLiveForNullCheckInfo : int\l+ DEFER_NULL_DIAGNOSTIC : int\l+ PREEMPT_NULL_DIAGNOSTIC : int\l+ INSIDE_NEGATION : int\l+ HIDE_NULL_COMPARISON_WARNING : int\l+ HIDE_NULL_COMPARISON_WARNING_MASK : int\l+ CAN_ONLY_NULL_NON_NULL : int\l+ CAN_ONLY_NULL : int\l+ CAN_ONLY_NON_NULL : int\l+ MAY_NULL : int\l+ ASSIGN_TO_NONNULL : int\l+ IN_UNBOXING : int\l+ EXIT_RESOURCE : int\l+ CHECK_MASK : int\l+ IN_COMPARISON_NULL : int\l+ IN_COMPARISON_NON_NULL : int\l+ IN_ASSIGNMENT : int\l+ IN_INSTANCEOF : int\l+ CONTEXT_MASK : int\l|# FlowContext(FlowContext, ASTNode) : \l# recordNullCheckedFieldReference(Reference, int) : \l# extendTimeToLiveForNullCheckedField(int) : \l# expireNullCheckedFieldInfo() : \l# isNullcheckedFieldAccess(Reference) : boolean\l# breakLabel() : BranchLabel\l# checkExceptionHandlers(TypeBinding, ASTNode, FlowInfo, BlockScope) : \l# checkExceptionHandlers(TypeBinding, ASTNode, FlowInfo, BlockScope, boolean) : \l# checkExceptionHandlers(TypeBinding, ASTNode, FlowInfo, BlockScope) : \l# continueLabel() : BranchLabel\l# getInitsForFinalBlankInitializationCheck(TypeBinding, FlowInfo) : FlowInfo\l# getTargetContextForBreakLabel(char) : FlowContext\l# getTargetContextForContinueLabel(char) : FlowContext\l# getTargetContextForDefaultBreak() : FlowContext\l# getTargetContextForDefaultContinue() : FlowContext\l# getInitializationContext() : FlowContext\l# getLocalParent() : FlowContext\l# individualToString() : String\l# initsOnBreak() : FlowInfo\l# initsOnReturn() : UnconditionalFlowInfo\l# isBreakable() : boolean\l# isContinuable() : boolean\l# isNonReturningContext() : boolean\l# isSubRoutine() : boolean\l# labelName() : char\l# markFinallyNullStatus(LocalVariableBinding, int) : \l# mergeFinallyNullInfo(FlowInfo) : \l# recordAbruptExit() : \l# recordBreakFrom(FlowInfo) : \l# recordBreakTo(FlowContext) : \l# recordContinueFrom(FlowContext, FlowInfo) : \l# recordExitAgainstResource(BlockScope, FlowInfo, FakedTrackingVariable, ASTNode) : boolean\l# recordProvidedExpectedTypes(TypeBinding, TypeBinding, int) : \l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# recordNullReference(LocalVariableBinding, ASTNode, int, FlowInfo) : \l# recordUnboxing(Scope, Expression, int, FlowInfo) : \l# checkUnboxing(Scope, Expression, FlowInfo) : \l# recordReturnFrom(UnconditionalFlowInfo) : \l# recordSettingFinal(VariableBinding, Reference, FlowInfo) : \l# recordUsingNullReference(Scope, LocalVariableBinding, ASTNode, int, FlowInfo) : \l# removeFinalAssignmentIfAny(Reference) : \l# subroutine() : SubRoutineStatement\l# toString() : String\l# recordNullityMismatch(BlockScope, Expression, TypeBinding, TypeBinding, FlowInfo, int, NullAnnotationMatching) : \l# internalRecordNullityMismatch(Expression, TypeBinding, FlowInfo, int, TypeBinding, int) : boolean\l}"
	 ]

	 FlowInfo [
		 label = "{FlowInfo|+ tagBits : int\l+ REACHABLE : int\l+ UNREACHABLE_OR_DEAD : int\l+ UNREACHABLE_BY_NULLANALYSIS : int\l+ UNREACHABLE : int\l+ NULL_FLAG_MASK : int\l+ UNKNOWN : int\l+ NULL : int\l+ NON_NULL : int\l+ POTENTIALLY_UNKNOWN : int\l+ POTENTIALLY_NULL : int\l+ POTENTIALLY_NON_NULL : int\l+ UNROOTED : int\l+ DEAD_END : UnconditionalFlowInfo\l# addInitializationsFrom : FlowInfo\l# addNullInfoFrom : FlowInfo\l# addPotentialInitializationsFrom : FlowInfo\l# copy : FlowInfo\l# initsWhenFalse : FlowInfo\l# initsWhenTrue : FlowInfo\l# isDefinitelyAssigned : boolean\l+ isDefinitelyAssigned : boolean\l+ isDefinitelyNonNull : boolean\l+ isDefinitelyNull : boolean\l+ isDefinitelyUnknown : boolean\l+ hasNullInfoFor : boolean\l# isPotentiallyAssigned : boolean\l# isPotentiallyAssigned : boolean\l+ isPotentiallyNonNull : boolean\l+ isPotentiallyNull : boolean\l+ isPotentiallyUnknown : boolean\l+ isProtectedNonNull : boolean\l+ isProtectedNull : boolean\l# markAsComparedEqualToNonNull : null\l# markAsComparedEqualToNull : null\l# markAsDefinitelyAssigned : null\l# markAsDefinitelyNonNull : null\l# markAsDefinitelyNull : null\l# resetNullInfo : null\l# markPotentiallyUnknownBit : null\l# markPotentiallyNullBit : null\l# markPotentiallyNonNullBit : null\l# markAsDefinitelyAssigned : null\l# markAsDefinitelyUnknown : null\l# safeInitsWhenTrue : FlowInfo\l# setReachMode : FlowInfo\l# mergedWith : UnconditionalFlowInfo\l# nullInfoLessUnconditionalCopy : UnconditionalFlowInfo\l# unconditionalCopy : UnconditionalFlowInfo\l# unconditionalFieldLessCopy : UnconditionalFlowInfo\l# unconditionalInits : UnconditionalFlowInfo\l# unconditionalInitsWithoutSideEffect : UnconditionalFlowInfo\l# resetAssignmentInfo : null\l|# null(FlowInfo, FlowInfo, FlowInfo) : \l# asNegatedCondition() : FlowInfo\l# conditional(FlowInfo, FlowInfo) : FlowInfo\l# cannotBeDefinitelyNullOrNonNull(LocalVariableBinding) : boolean\l# cannotBeNull(LocalVariableBinding) : boolean\l# canOnlyBeNull(LocalVariableBinding) : boolean\l# initial(int, FieldBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, FieldBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, FieldBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding, LocalVariableBinding) : UnconditionalFlowInfo\l# markNullStatus(LocalVariableBinding, int) : \l# nullStatus(LocalVariableBinding) : int\l# mergeNullStatus(int, int) : int\l# mergedOptimizedBranches(FlowInfo, boolean, FlowInfo, boolean, boolean) : UnconditionalFlowInfo\l# mergedOptimizedBranchesIfElse(FlowInfo, boolean, FlowInfo, boolean, boolean, FlowInfo, IfStatement, boolean) : UnconditionalFlowInfo\l# reachMode(int, UnconditionalFlowInfo) : int\l# toString(LocalVariableBinding) : String\l# tagBitsToNullStatus(long) : int\l}"
	 ]

	 InitializationFlowContext [
		 label = "{InitializationFlowContext|+ exceptionCount : int\l+ thrownExceptions : TypeBinding\l+ exceptionThrowers : ASTNode\l+ exceptionThrowerFlowInfos : FlowInfo\l+ initsBeforeContext : FlowInfo\l|# InitializationFlowContext(FlowContext, ASTNode, FlowInfo, FlowContext, BlockScope) : \l# checkInitializerExceptions(BlockScope, FlowContext, FlowInfo) : \l+ getInitializationContext() : FlowContext\l# individualToString() : String\l# recordHandlingException(ReferenceBinding, UnconditionalFlowInfo, TypeBinding, TypeBinding, ASTNode, boolean) : \l}"
	 ]

	 InsideSubRoutineFlowContext [
		 label = "{InsideSubRoutineFlowContext|+ initsOnReturn : UnconditionalFlowInfo\l|# InsideSubRoutineFlowContext(FlowContext, ASTNode) : \l# individualToString() : String\l# initsOnReturn() : UnconditionalFlowInfo\l# isNonReturningContext() : boolean\l# recordReturnFrom(UnconditionalFlowInfo) : \l# subroutine() : SubRoutineStatement\l}"
	 ]

	 LabelFlowContext [
		 label = "{LabelFlowContext|+ labelName : char\l|# LabelFlowContext(FlowContext, ASTNode, char, BranchLabel, BlockScope) : \l# checkLabelValidity(BlockScope) : \l# individualToString() : String\l# labelName() : char\l}"
	 ]

	 EscapingExceptionCatchSite [
		 label = "{EscapingExceptionCatchSite|+ continueLabel : BranchLabel\l+ initsOnContinue : UnconditionalFlowInfo\l- upstreamNullFlowInfo : UnconditionalFlowInfo\l- innerFlowContexts : LoopingFlowContext\l- innerFlowInfos : UnconditionalFlowInfo\l- innerFlowContextsCount : int\l- breakTargetContexts : LabelFlowContext\l- breakTargetsCount : int\l# finalAssignments : Reference\l# finalVariables : VariableBinding\l# assignCount : int\l# nullLocals : LocalVariableBinding\l# nullReferences : ASTNode\l# nullCheckTypes : int\l# nullInfos : UnconditionalFlowInfo\l# nullCount : int\l# caughtException : ReferenceBinding\l# catchingContext : ExceptionHandlingFlowContext\l# exceptionInfo : FlowInfo\l- escapingExceptionCatchSites : ArrayList\l# associatedScope : Scope\l|# null() : \l# EscapingExceptionCatchSite(ExceptionHandlingFlowContext, ReferenceBinding, FlowInfo) : \l# simulateThrowAfterLoopBack(FlowInfo) : \l# LoopingFlowContext(FlowContext, FlowInfo, ASTNode, BranchLabel, BranchLabel, Scope, boolean) : \l# complainOnDeferredFinalChecks(BlockScope, FlowInfo) : \l# complainOnDeferredNullChecks(BlockScope, FlowInfo) : \l# continueLabel() : BranchLabel\l# individualToString() : String\l# isContinuable() : boolean\l# isContinuedTo() : boolean\l# recordBreakTo(FlowContext) : \l# recordContinueFrom(FlowContext, FlowInfo) : \l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# recordNullReference(LocalVariableBinding, ASTNode, int, FlowInfo) : \l# recordUnboxing(Scope, Expression, int, FlowInfo) : \l# recordExitAgainstResource(BlockScope, FlowInfo, FakedTrackingVariable, ASTNode) : boolean\l# recordUsingNullReference(Scope, LocalVariableBinding, ASTNode, int, FlowInfo) : \l# removeFinalAssignmentIfAny(Reference) : \l# simulateThrowAfterLoopBack(FlowInfo) : \l# recordCatchContextOfEscapingException(ExceptionHandlingFlowContext, ReferenceBinding, FlowInfo) : \l# hasEscapingExceptions() : boolean\l# internalRecordNullityMismatch(Expression, TypeBinding, FlowInfo, int, TypeBinding, int) : boolean\l}"
	 ]

	 SwitchFlowContext [
		 label = "{SwitchFlowContext|+ breakLabel : BranchLabel\l+ initsOnBreak : UnconditionalFlowInfo\l|# SwitchFlowContext(FlowContext, ASTNode, BranchLabel, boolean) : \l# breakLabel() : BranchLabel\l# individualToString() : String\l# isBreakable() : boolean\l# recordBreakFrom(FlowInfo) : \l}"
	 ]

	 TryFlowContext [
		 label = "{TryFlowContext|+ outerTryContext : FlowContext\l|# TryFlowContext(FlowContext, ASTNode) : \l# markFinallyNullStatus(LocalVariableBinding, int) : \l# mergeFinallyNullInfo(FlowInfo) : \l}"
	 ]

	 AssertionFailedException [
		 label = "{AssertionFailedException|- serialVersionUID : long\l+ COVERAGE_TEST_FLAG : boolean\l+ CoverageTestId : int\l+ definiteInits : long\l+ potentialInits : long\l+ nullBit1 : long\l+ iNBit : long\l+ extraLength : int\l+ extra : long\l+ maxFieldCount : int\l+ BitCacheSize : int\l+ IN : int\l+ INN : int\l|# null() : \l# AssertionFailedException(String) : \l# fakeInitializedFlowInfo(int, int) : UnconditionalFlowInfo\l# addInitializationsFrom(FlowInfo) : FlowInfo\l# addNullInfoFrom(FlowInfo) : FlowInfo\l# addInfoFrom(FlowInfo, boolean) : FlowInfo\l# addPotentialInitializationsFrom(FlowInfo) : FlowInfo\l# addPotentialNullInfoFrom(UnconditionalFlowInfo) : UnconditionalFlowInfo\l# cannotBeDefinitelyNullOrNonNull(LocalVariableBinding) : boolean\l# cannotBeNull(LocalVariableBinding) : boolean\l# canOnlyBeNull(LocalVariableBinding) : boolean\l# copy() : FlowInfo\l# discardInitializationInfo() : UnconditionalFlowInfo\l# discardNonFieldInitializations() : UnconditionalFlowInfo\l# initsWhenFalse() : FlowInfo\l# initsWhenTrue() : FlowInfo\l# isDefinitelyAssigned(int) : boolean\l# isDefinitelyAssigned(FieldBinding) : boolean\l# isDefinitelyAssigned(LocalVariableBinding) : boolean\l# isDefinitelyNonNull(LocalVariableBinding) : boolean\l# isDefinitelyNull(LocalVariableBinding) : boolean\l# isDefinitelyUnknown(LocalVariableBinding) : boolean\l# hasNullInfoFor(LocalVariableBinding) : boolean\l# isPotentiallyAssigned(int) : boolean\l# isPotentiallyAssigned(FieldBinding) : boolean\l# isPotentiallyAssigned(LocalVariableBinding) : boolean\l# isPotentiallyNonNull(LocalVariableBinding) : boolean\l# isPotentiallyNull(LocalVariableBinding) : boolean\l# isPotentiallyUnknown(LocalVariableBinding) : boolean\l# isProtectedNonNull(LocalVariableBinding) : boolean\l# isProtectedNull(LocalVariableBinding) : boolean\l# isTrue(boolean, String) : boolean\l# markAsComparedEqualToNonNull(LocalVariableBinding) : \l# markAsComparedEqualToNull(LocalVariableBinding) : \l# markAsDefinitelyAssigned(int) : \l# markAsDefinitelyAssigned(FieldBinding) : \l# markAsDefinitelyAssigned(LocalVariableBinding) : \l# markAsDefinitelyNonNull(LocalVariableBinding) : \l# markAsDefinitelyNull(LocalVariableBinding) : \l# markAsDefinitelyUnknown(LocalVariableBinding) : \l# resetNullInfo(LocalVariableBinding) : \l# markPotentiallyUnknownBit(LocalVariableBinding) : \l# markPotentiallyNullBit(LocalVariableBinding) : \l# markPotentiallyNonNullBit(LocalVariableBinding) : \l# mergedWith(UnconditionalFlowInfo) : UnconditionalFlowInfo\l# numberOfEnclosingFields(ReferenceBinding) : int\l# nullInfoLessUnconditionalCopy() : UnconditionalFlowInfo\l# safeInitsWhenTrue() : FlowInfo\l# setReachMode(int) : FlowInfo\l# toString() : String\l# unconditionalCopy() : UnconditionalFlowInfo\l# unconditionalFieldLessCopy() : UnconditionalFlowInfo\l# unconditionalInits() : UnconditionalFlowInfo\l# unconditionalInitsWithoutSideEffect() : UnconditionalFlowInfo\l# resetAssignmentInfo(LocalVariableBinding) : \l# resetAssignmentInfo(int) : \l# createExtraSpace(int) : \l}"
	 ]

	 ConditionalFlowInfo [
		 label = "{ConditionalFlowInfo|+ initsWhenTrue : FlowInfo\l+ initsWhenFalse : FlowInfo\l|# ConditionalFlowInfo(FlowInfo, FlowInfo) : \l# addInitializationsFrom(FlowInfo) : FlowInfo\l# addPotentialInitializationsFrom(FlowInfo) : FlowInfo\l# asNegatedCondition() : FlowInfo\l# copy() : FlowInfo\l# initsWhenFalse() : FlowInfo\l# initsWhenTrue() : FlowInfo\l# isDefinitelyAssigned(FieldBinding) : boolean\l# isDefinitelyAssigned(LocalVariableBinding) : boolean\l# reachMode() : int\l# isReachable() : boolean\l# isPotentiallyAssigned(FieldBinding) : boolean\l# isPotentiallyAssigned(LocalVariableBinding) : boolean\l# markAsDefinitelyAssigned(FieldBinding) : \l# markAsDefinitelyAssigned(LocalVariableBinding) : \l# markAsDefinitelyNotAssigned(FieldBinding) : \l# markAsDefinitelyNotAssigned(LocalVariableBinding) : \l# setReachMode(int) : FlowInfo\l# mergedWith(UnconditionalFlowInfo) : UnconditionalFlowInfo\l# toString() : String\l# unconditionalInits() : UnconditionalFlowInfo\l}"
	 ]

	 ExceptionHandlingFlowContext [
		 label = "{ExceptionHandlingFlowContext|+ handledExceptions : ReferenceBinding\l+ BitCacheSize : int\l# isReached : int\l# isNeeded : int\l# initsOnExceptions : UnconditionalFlowInfo\l# indexes : ObjectCache\l# isMethodContext : boolean\l+ initsOnReturn : UnconditionalFlowInfo\l+ extendedExceptions : ArrayList\l|# ExceptionHandlingFlowContext(FlowContext, ASTNode, ReferenceBinding, BlockScope, UnconditionalFlowInfo) : \l# complainIfUnusedExceptionHandlers(AbstractMethodDeclaration) : \l# complainIfUnusedExceptionHandlers(BlockScope, TryStatement) : \l# individualToString() : String\l# initsOnException(ReferenceBinding) : UnconditionalFlowInfo\l# initsOnReturn() : UnconditionalFlowInfo\l# recordHandlingException(ReferenceBinding, UnconditionalFlowInfo, TypeBinding, ASTNode, boolean) : \l# recordReturnFrom(FlowInfo) : \l# mergeUnhandledException(TypeBinding) : \l}"
	 ]

	 FinallyFlowContext [
		 label = "{FinallyFlowContext|# finalAssignments : Reference\l# finalVariables : VariableBinding\l# assignCount : int\l|# FinallyFlowContext(FlowContext, ASTNode) : \l# complainOnRedundantFinalAssignments(FlowInfo, BlockScope) : \l# individualToString() : String\l# isSubRoutine() : boolean\l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# removeFinalAssignmentIfAny(Reference) : \l}"
	 ]

	 FlowContext [
		 label = "{FlowContext|+ associatedNode : ASTNode\l+ parent : FlowContext\l+ NotContinuableContext : FlowContext\l|# FlowContext(FlowContext, ASTNode) : \l# breakLabel() : Label\l# checkExceptionHandlers(TypeBinding, ASTNode, FlowInfo, BlockScope) : \l# checkExceptionHandlers(TypeBinding, ASTNode, FlowInfo, BlockScope) : \l# continueLabel() : Label\l# getTargetContextForBreakLabel(char) : FlowContext\l# getTargetContextForContinueLabel(char) : FlowContext\l# getTargetContextForDefaultBreak() : FlowContext\l# getTargetContextForDefaultContinue() : FlowContext\l# individualToString() : String\l# initsOnBreak() : FlowInfo\l# initsOnReturn() : UnconditionalFlowInfo\l# isBreakable() : boolean\l# isContinuable() : boolean\l# isNonReturningContext() : boolean\l# isSubRoutine() : boolean\l# labelName() : char\l# recordBreakFrom(FlowInfo) : \l# recordContinueFrom(FlowInfo) : \l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# recordReturnFrom(FlowInfo) : \l# recordSettingFinal(VariableBinding, Reference, FlowInfo) : \l# removeFinalAssignmentIfAny(Reference) : \l# subRoutine() : SubRoutineStatement\l# toString() : String\l}"
	 ]

	 FlowInfo [
		 label = "{FlowInfo|+ REACHABLE : int\l+ UNREACHABLE : int\l+ DEAD_END : UnconditionalFlowInfo\l# addInitializationsFrom : FlowInfo\l# addPotentialInitializationsFrom : FlowInfo\l# copy : FlowInfo\l# initsWhenFalse : FlowInfo\l# initsWhenTrue : FlowInfo\l# isDefinitelyAssigned : boolean\l+ isDefinitelyAssigned : boolean\l# isPotentiallyAssigned : boolean\l# isPotentiallyAssigned : boolean\l# isReachable : boolean\l# markAsDefinitelyAssigned : null\l# markAsDefinitelyAssigned : null\l# markAsDefinitelyNotAssigned : null\l# markAsDefinitelyNotAssigned : null\l# reachMode : int\l# setReachMode : FlowInfo\l# mergedWith : UnconditionalFlowInfo\l# unconditionalInits : UnconditionalFlowInfo\l|# null(FlowInfo, FlowInfo) : \l# asNegatedCondition() : FlowInfo\l# conditional(FlowInfo, FlowInfo) : FlowInfo\l# initial(int, FieldBinding, LocalVariableBinding, FieldBinding, LocalVariableBinding, FieldBinding, LocalVariableBinding, FieldBinding, LocalVariableBinding) : UnconditionalFlowInfo\l# mergedOptimizedBranches(FlowInfo, boolean, FlowInfo, boolean, boolean, int, UnconditionalFlowInfo) : FlowInfo\l# toString() : String\l}"
	 ]

	 InitializationFlowContext [
		 label = "{InitializationFlowContext|+ exceptionCount : int\l+ thrownExceptions : TypeBinding\l+ exceptionThrowers : ASTNode\l+ exceptionThrowerFlowInfos : FlowInfo\l|# InitializationFlowContext(FlowContext, ASTNode, BlockScope) : \l# checkInitializerExceptions(BlockScope, FlowContext, FlowInfo) : \l# individualToString() : String\l# recordHandlingException(ReferenceBinding, UnconditionalFlowInfo, TypeBinding, ASTNode, boolean) : \l}"
	 ]

	 InsideSubRoutineFlowContext [
		 label = "{InsideSubRoutineFlowContext|+ initsOnReturn : UnconditionalFlowInfo\l|# InsideSubRoutineFlowContext(FlowContext, ASTNode) : \l# individualToString() : String\l# initsOnReturn() : UnconditionalFlowInfo\l# isNonReturningContext() : boolean\l# subRoutine() : SubRoutineStatement\l# recordReturnFrom(FlowInfo) : \l}"
	 ]

	 LabelFlowContext [
		 label = "{LabelFlowContext|+ labelName : char\l|# LabelFlowContext(FlowContext, ASTNode, char, Label, BlockScope) : \l# checkLabelValidity(BlockScope) : \l# individualToString() : String\l# labelName() : char\l}"
	 ]

	 LoopingFlowContext [
		 label = "{LoopingFlowContext|+ continueLabel : Label\l+ initsOnContinue : UnconditionalFlowInfo\l# finalAssignments : Reference\l# finalVariables : VariableBinding\l# assignCount : int\l# associatedScope : Scope\l|# LoopingFlowContext(FlowContext, ASTNode, Label, Label, Scope) : \l# complainOnFinalAssignmentsInLoop(BlockScope, FlowInfo) : \l# continueLabel() : Label\l# individualToString() : String\l# isContinuable() : boolean\l# isContinuedTo() : boolean\l# recordContinueFrom(FlowInfo) : \l# recordFinalAssignment(VariableBinding, Reference) : boolean\l# removeFinalAssignmentIfAny(Reference) : \l}"
	 ]

	 SwitchFlowContext [
		 label = "{SwitchFlowContext|+ breakLabel : Label\l+ initsOnBreak : UnconditionalFlowInfo\l|# SwitchFlowContext(FlowContext, ASTNode, Label) : \l# bre
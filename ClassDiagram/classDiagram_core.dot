digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 Apt6CompilationParticipant [
		 label = "{Apt6CompilationParticipant||# Apt6CompilationParticipant() : \l}"
	 ]

	 Apt6Plugin [
		 label = "{Apt6Plugin|- TRACE_DATE_FORMAT : SimpleDateFormat\l+ PLUGIN_ID : String\l+ STATUS_EXCEPTION : int\l+ DEBUG : boolean\l+ APT_DEBUG_OPTION : String\l- thePlugin : Apt6Plugin\l- debugRegistration : ServiceRegistration\l|# Apt6Plugin() : \l+ start(BundleContext) : \l# stop(BundleContext) : \l# optionsChanged(DebugOptions) : \l# getPlugin() : Apt6Plugin\l# log(IStatus) : \l# log(Throwable, String) : \l# logWarning(Throwable, String) : \l# createStatus(Throwable, String) : Status\l# createWarningStatus(Throwable, String) : Status\l# createInfoStatus(Throwable, String) : Status\l# trace(String) : \l}"
	 ]

	 BuildJarIndex [
		 label = "{BuildJarIndex|- jarPath : String\l- indexPath : String\l|# execute() : \l# setJarPath(String) : \l# setIndexPath(String) : \l}"
	 ]

	 CheckDebugAttributes [
		 label = "{CheckDebugAttributes|- file : String\l- property : String\l|# execute() : \l# checkClassFile(IClassFileReader) : boolean\l# setFile(String) : \l# setProperty(String) : \l}"
	 ]

	 JDTCompilerAdapter [
		 label = "{JDTCompilerAdapter|- SEPARATOR_CHARS : char\l- ADAPTER_PREFIX : char\l- ADAPTER_ENCODING : char\l- ADAPTER_ACCESS : char\l- compilerClass : String\l# logFileName : String\l# customDefaultOptions : Map\l- fileEncodings : Map\l- dirEncodings : Map\l- accessRules : List\l|# execute() : boolean\l# setupJavacCommand() : Commandline\l# processCompilerArguments(Class) : String\l# checkCompilerArgs(String) : \l# createClasspathArgument(Commandline, Path) : \l# logAndAddFilesToCompile(Commandline) : \l# compare(Object, Object) : int\l}"
	 ]

	 BindingKey [
		 label = "{BindingKey|- key : String\l|# BindingKey(String) : \l# createArrayTypeBindingKey(String, int) : String\l# createParameterizedTypeBindingKey(String, String) : String\l# createTypeBindingKey(String) : String\l# createTypeVariableBindingKey(String, String) : String\l# createWilcardTypeBindingKey(String, char) : String\l# createWildcardTypeBindingKey(String, char, String, int) : String\l# getDeclaringType() : BindingKey\l# getThrownExceptions() : String\l# getTypeArguments() : String\l# isRawType() : boolean\l# isParameterizedType() : boolean\l# isParameterizedMethod() : boolean\l# toSignature() : String\l# toString() : String\l}"
	 ]

	 BufferChangedEvent [
		 label = "{BufferChangedEvent|- length : int\l- offset : int\l- text : String\l- serialVersionUID : long\l|# BufferChangedEvent(IBuffer, int, int, String) : \l# getBuffer() : IBuffer\l# getLength() : int\l# getOffset() : int\l# getText() : String\l}"
	 ]

	 ClasspathContainerInitializer [
		 label = "{ClasspathContainerInitializer|+ ATTRIBUTE_NOT_SUPPORTED : int\l+ ATTRIBUTE_READ_ONLY : int\l+ initialize : null\l|# ClasspathContainerInitializer(IPath, IJavaProject) : \l# canUpdateClasspathContainer(IPath, IJavaProject) : boolean\l# requestClasspathContainerUpdate(IPath, IJavaProject, IClasspathContainer) : \l# getDescription(IPath, IJavaProject) : String\l# getFailureContainer(IPath, IJavaProject) : IClasspathContainer\l# getClasspathEntries() : IClasspathEntry\l# getDescription() : String\l# getKind() : int\l# getPath() : IPath\l# toString() : String\l# getComparisonID(IPath, IJavaProject) : Object\l# getAccessRulesStatus(IPath, IJavaProject) : IStatus\l# getAttributeStatus(IPath, IJavaProject, String) : IStatus\l# getSourceAttachmentStatus(IPath, IJavaProject) : IStatus\l}"
	 ]

	 ClasspathVariableInitializer [
		 label = "{ClasspathVariableInitializer|+ initialize : null\l|# ClasspathVariableInitializer(String) : \l}"
	 ]

	 CompletionContext [
		 label = "{CompletionContext|+ TL_MEMBER_START : int\l+ TL_STATEMENT_START : int\l+ TL_CONSTRUCTOR_START : int\l+ TOKEN_KIND_UNKNOWN : int\l+ TOKEN_KIND_NAME : int\l+ TOKEN_KIND_STRING_LITERAL : int\l|# isInJavadoc() : boolean\l# isInJavadocText() : boolean\l# isInJavadocFormalReference() : boolean\l# isExtended() : boolean\l# getExpectedTypesSignatures() : char\l# getExpectedTypesKeys() : char\l# getToken() : char\l# getTokenKind() : int\l# getTokenLocation() : int\l# getTokenStart() : int\l# getTokenEnd() : int\l# getOffset() : int\l# getEnclosingElement() : IJavaElement\l# getVisibleElements(String) : IJavaElement\l}"
	 ]

	 CompletionFlags [
		 label = "{CompletionFlags|+ Default : int\l+ StaticImport : int\l|# CompletionFlags() : \l# isStaticImport(int) : boolean\l}"
	 ]

	 CompletionProposal [
		 label = "{CompletionProposal|+ ANONYMOUS_CLASS_DECLARATION : int\l+ FIELD_REF : int\l+ KEYWORD : int\l+ LABEL_REF : int\l+ LOCAL_VARIABLE_REF : int\l+ METHOD_REF : int\l+ METHOD_DECLARATION : int\l+ PACKAGE_REF : int\l+ TYPE_REF : int\l+ VARIABLE_DECLARATION : int\l+ POTENTIAL_METHOD_DECLARATION : int\l+ METHOD_NAME_REFERENCE : int\l+ ANNOTATION_ATTRIBUTE_REF : int\l+ JAVADOC_FIELD_REF : int\l+ JAVADOC_METHOD_REF : int\l+ JAVADOC_TYPE_REF : int\l+ JAVADOC_VALUE_REF : int\l+ JAVADOC_PARAM_REF : int\l+ JAVADOC_BLOCK_TAG : int\l+ JAVADOC_INLINE_TAG : int\l+ FIELD_IMPORT : int\l+ METHOD_IMPORT : int\l+ TYPE_IMPORT : int\l+ METHOD_REF_WITH_CASTED_RECEIVER : int\l+ FIELD_REF_WITH_CASTED_RECEIVER : int\l+ CONSTRUCTOR_INVOCATION : int\l+ ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION : int\l# FIRST_KIND : int\l# LAST_KIND : int\l|# create(int, int) : CompletionProposal\l# getAdditionalFlags() : int\l# setAdditionalFlags(int) : \l# getKind() : int\l# getCompletionLocation() : int\l# getTokenStart() : int\l# getTokenEnd() : int\l# setTokenRange(int, int) : \l# getCompletion() : char\l# setCompletion(char) : \l# getReplaceStart() : int\l# getReplaceEnd() : int\l# setReplaceRange(int, int) : \l# getRelevance() : int\l# setRelevance(int) : \l# getDeclarationSignature() : char\l# getDeclarationKey() : char\l# setDeclarationSignature(char) : \l# setDeclarationKey(char) : \l# getName() : char\l# setName(char) : \l# getSignature() : char\l# getKey() : char\l# setSignature(char) : \l# setKey(char) : \l# getFlags() : int\l# setFlags(int) : \l# getRequiredProposals() : CompletionProposal\l# setRequiredProposals(CompletionProposal) : \l# findParameterNames(IProgressMonitor) : char\l# setParameterNames(char) : \l# getAccessibility() : int\l# isConstructor() : boolean\l# getReceiverSignature() : char\l# getReceiverStart() : int\l# getReceiverEnd() : int\l# setReceiverSignature(char) : \l# setReceiverRange(int, int) : \l# canUseDiamond(CompletionContext) : boolean\l}"
	 ]

	 CompletionRequestor [
		 label = "{CompletionRequestor|- ignoreSet : int\l- favoriteReferences : String\l- requiredProposalAllowSet : int\l- requireExtendedContext : boolean\l+ accept : null\l|# CompletionRequestor() : \l# CompletionRequestor(boolean) : \l# isIgnored(int) : boolean\l# setIgnored(int, boolean) : \l# isAllowingRequiredProposals(int, int) : boolean\l# setAllowsRequiredProposals(int, int, boolean) : \l# getFavoriteReferences() : String\l# setFavoriteReferences(String) : \l# beginReporting() : \l# endReporting() : \l# completionFailure(IProblem, CompletionProposal) : \l# acceptContext(CompletionContext) : \l# isExtendedContextRequired() : boolean\l# setRequireExtendedContext(boolean) : \l}"
	 ]

	 CompletionRequestorAdapter [
		 label = "{CompletionRequestorAdapter||# acceptAnonymousType(char, char, char, char, char, char, int, int, int, int) : \l# acceptClass(char, char, char, int, int, int, int) : \l# acceptError(IProblem) : \l# acceptField(char, char, char, char, char, char, int, int, int, int) : \l# acceptInterface(char, char, char, int, int, int, int) : \l# acceptKeyword(char, int, int, int) : \l# acceptLabel(char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptMethodDeclaration(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptModifier(char, int, int, int) : \l# acceptPackage(char, char, int, int, int) : \l# acceptType(char, char, char, int, int, int) : \l# acceptVariableName(char, char, char, char, int, int, int) : \l}"
	 ]

	 CorrectionEngine [
		 label = "{CorrectionEngine|# correctionStart : int\l# correctionEnd : int\l# prefixLength : int\l# compilationUnit : ICompilationUnit\l# correctionRequestor : ICorrectionRequestor\l# CLASSES : int\l# INTERFACES : int\l# IMPORT : int\l# METHOD : int\l# FIELD : int\l# LOCAL : int\l# filter : int\l# completionRequestor : CompletionRequestor\l|# CorrectionEngine(Map) : \l# computeCorrections(IMarker, ICompilationUnit, int, ICorrectionRequestor) : \l# computeCorrections(IProblem, ICompilationUnit, ICorrectionRequestor) : \l# computeCorrections(ICompilationUnit, int, int, int, String, ICorrectionRequestor) : \l# correct(char) : \l# accept(CompletionProposal) : \l# getAllWarningTokens() : String\l# getProblemArguments(IMarker) : String\l# getWarningToken(int) : String\l}"
	 ]

	 ElementChangedEvent [
		 label = "{ElementChangedEvent|+ POST_CHANGE : int\l+ PRE_AUTO_BUILD : int\l+ POST_RECONCILE : int\l- serialVersionUID : long\l- type : int\l|# ElementChangedEvent(IJavaElementDelta, int) : \l# getDelta() : IJavaElementDelta\l# getType() : int\l}"
	 ]

	 Flags [
		 label = "{Flags|+ AccDefault : int\l+ AccPublic : int\l+ AccPrivate : int\l+ AccProtected : int\l+ AccStatic : int\l+ AccFinal : int\l+ AccSynchronized : int\l+ AccVolatile : int\l+ AccTransient : int\l+ AccNative : int\l+ AccInterface : int\l+ AccAbstract : int\l+ AccStrictfp : int\l+ AccSuper : int\l+ AccSynthetic : int\l+ AccDeprecated : int\l+ AccBridge : int\l+ AccVarargs : int\l+ AccEnum : int\l+ AccAnnotation : int\l+ AccDefaultMethod : int\l+ AccAnnotationDefault : int\l|# Flags() : \l# isAbstract(int) : boolean\l# isDeprecated(int) : boolean\l# isFinal(int) : boolean\l# isInterface(int) : boolean\l# isNative(int) : boolean\l# isPackageDefault(int) : boolean\l# isPrivate(int) : boolean\l# isProtected(int) : boolean\l# isPublic(int) : boolean\l# isStatic(int) : boolean\l# isSuper(int) : boolean\l# isStrictfp(int) : boolean\l# isSynchronized(int) : boolean\l# isSynthetic(int) : boolean\l# isTransient(int) : boolean\l# isVolatile(int) : boolean\l# isBridge(int) : boolean\l# isVarargs(int) : boolean\l# isEnum(int) : boolean\l# isAnnotation(int) : boolean\l# isDefaultMethod(int) : boolean\l# isAnnnotationDefault(int) : boolean\l# toString(int) : String\l}"
	 ]

	 IAccessRule [
		 label = "{IAccessRule||# K_ACCESSIBLE() : int\l# K_NON_ACCESSIBLE() : int\l# K_DISCOURAGED() : int\l# IGNORE_IF_BETTER() : int\l# getPattern() : IPath\l# getKind() : int\l# ignoreIfBetter() : boolean\l}"
	 ]

	 IAnnotatable [
		 label = "{IAnnotatable||# getAnnotation(String) : IAnnotation\l# getAnnotations() : IAnnotation\l}"
	 ]

	 IAnnotation [
		 label = "{IAnnotation||# getElementName() : String\l# getMemberValuePairs() : IMemberValuePair\l# getOccurrenceCount() : int\l}"
	 ]

	 ITextEditCapability [
		 label = "{ITextEditCapability||# null() : \l# applyTextEdit(TextEdit, IProgressMonitor) : UndoEdit\l# addBufferChangedListener(IBufferChangedListener) : \l# append(char) : \l# append(String) : \l# close() : \l# getChar(int) : char\l# getCharacters() : char\l# getContents() : String\l# getLength() : int\l# getOwner() : IOpenable\l# getText(int, int) : String\l# getUnderlyingResource() : IResource\l# hasUnsavedChanges() : boolean\l# isClosed() : boolean\l# isReadOnly() : boolean\l# removeBufferChangedListener(IBufferChangedListener) : \l# replace(int, int, char) : \l# replace(int, int, String) : \l# save(IProgressMonitor, boolean) : \l# setContents(char) : \l# setContents(String) : \l}"
	 ]

	 IBufferChangedListener [
		 label = "{IBufferChangedListener||# bufferChanged(BufferChangedEvent) : \l}"
	 ]

	 IBufferFactory [
		 label = "{IBufferFactory||# createBuffer(IOpenable) : IBuffer\l}"
	 ]

	 IClassFile [
		 label = "{IClassFile||# becomeWorkingCopy(IProblemRequestor, WorkingCopyOwner, IProgressMonitor) : ICompilationUnit\l# getBytes() : byte\l# getType() : IType\l# getWorkingCopy(IProgressMonitor, IBufferFactory) : IJavaElement\l# isClass() : boolean\l# isInterface() : boolean\l}"
	 ]

	 IClasspathAttribute [
		 label = "{IClasspathAttribute||# JAVADOC_LOCATION_ATTRIBUTE_NAME() : String\l# INDEX_LOCATION_ATTRIBUTE_NAME() : String\l# SOURCE_ATTACHMENT_ENCODING() : String\l# IGNORE_OPTIONAL_PROBLEMS() : String\l# OPTIONAL() : String\l# EXTERNAL_ANNOTATION_PATH() : String\l# getName() : String\l# getValue() : String\l}"
	 ]

	 IClasspathContainer [
		 label = "{IClasspathContainer||# K_APPLICATION() : int\l# K_SYSTEM() : int\l# K_DEFAULT_SYSTEM() : int\l# getClasspathEntries() : IClasspathEntry\l# getDescription() : String\l# getKind() : int\l# getPath() : IPath\l}"
	 ]

	 IClasspathEntry [
		 label = "{IClasspathEntry||# CPE_LIBRARY() : int\l# CPE_PROJECT() : int\l# CPE_SOURCE() : int\l# CPE_VARIABLE() : int\l# CPE_CONTAINER() : int\l# combineAccessRules() : boolean\l# getAccessRules() : IAccessRule\l# getContentKind() : int\l# getEntryKind() : int\l# getExclusionPatterns() : IPath\l# getExtraAttributes() : IClasspathAttribute\l# getInclusionPatterns() : IPath\l# getOutputLocation() : IPath\l# getPath() : IPath\l# getSourceAttachmentPath() : IPath\l# getSourceAttachmentRootPath() : IPath\l# getReferencingEntry() : IClasspathEntry\l# isExported() : boolean\l# getResolvedEntry() : IClasspathEntry\l}"
	 ]

	 ICodeAssist [
		 label = "{ICodeAssist||# codeComplete(int, ICodeCompletionRequestor) : \l# codeComplete(int, ICompletionRequestor) : \l# codeComplete(int, CompletionRequestor) : \l# codeComplete(int, CompletionRequestor, IProgressMonitor) : \l# codeComplete(int, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# codeSelect(int, int) : IJavaElement\l# codeSelect(int, int, WorkingCopyOwner) : IJavaElement\l}"
	 ]

	 ICodeCompletionRequestor [
		 label = "{ICodeCompletionRequestor||# acceptClass(char, char, char, int, int, int) : \l# acceptError(IMarker) : \l# acceptField(char, char, char, char, char, char, int, int, int) : \l# acceptInterface(char, char, char, int, int, int) : \l# acceptKeyword(char, int, int) : \l# acceptLabel(char, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, int, int, int) : \l# acceptModifier(char, int, int) : \l# acceptPackage(char, char, int, int) : \l# acceptType(char, char, char, int, int) : \l}"
	 ]

	 ICodeFormatter [
		 label = "{ICodeFormatter||# format(String, int, int, String) : String\l}"
	 ]

	 ICompilationUnit [
		 label = "{ICompilationUnit||# NO_AST() : int\l# FORCE_PROBLEM_DETECTION() : int\l# ENABLE_STATEMENTS_RECOVERY() : int\l# ENABLE_BINDINGS_RECOVERY() : int\l# IGNORE_METHOD_BODIES() : int\l# applyTextEdit(TextEdit, IProgressMonitor) : UndoEdit\l# becomeWorkingCopy(IProblemRequestor, IProgressMonitor) : \l# becomeWorkingCopy(IProgressMonitor) : \l# commitWorkingCopy(boolean, IProgressMonitor) : \l# createImport(String, IJavaElement, IProgressMonitor) : IImportDeclaration\l# createImport(String, IJavaElement, int, IProgressMonitor) : IImportDeclaration\l# createPackageDeclaration(String, IProgressMonitor) : IPackageDeclaration\l# createType(String, IJavaElement, boolean, IProgressMonitor) : IType\l# discardWorkingCopy() : \l# findElements(IJavaElement) : IJavaElement\l# findWorkingCopy(WorkingCopyOwner) : ICompilationUnit\l# getAllTypes() : IType\l# getImport(String) : IImportDeclaration\l# getImportContainer() : IImportContainer\l# getImports() : IImportDeclaration\l# getPrimary() : ICompilationUnit\l# getOwner() : WorkingCopyOwner\l# getPackageDeclaration(String) : IPackageDeclaration\l# getPackageDeclarations() : IPackageDeclaration\l# getType(String) : IType\l# getTypes() : IType\l# getWorkingCopy(IProgressMonitor) : ICompilationUnit\l# getWorkingCopy(WorkingCopyOwner, IProblemRequestor, IProgressMonitor) : ICompilationUnit\l# hasResourceChanged() : boolean\l# isWorkingCopy() : boolean\l# reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor) : CompilationUnit\l# reconcile(int, boolean, boolean, WorkingCopyOwner, IProgressMonitor) : CompilationUnit\l# reconcile(int, int, WorkingCopyOwner, IProgressMonitor) : CompilationUnit\l# restore() : \l}"
	 ]

	 ICompletionRequestor [
		 label = "{ICompletionRequestor||# acceptAnonymousType(char, char, char, char, char, char, int, int, int, int) : \l# acceptClass(char, char, char, int, int, int, int) : \l# acceptError(IProblem) : \l# acceptField(char, char, char, char, char, char, int, int, int, int) : \l# acceptInterface(char, char, char, int, int, int, int) : \l# acceptKeyword(char, int, int, int) : \l# acceptLabel(char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptMethodDeclaration(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptModifier(char, int, int, int) : \l# acceptPackage(char, char, int, int, int) : \l# acceptType(char, char, char, int, int, int) : \l# acceptVariableName(char, char, char, char, int, int, int) : \l}"
	 ]

	 ICorrectionRequestor [
		 label = "{ICorrectionRequestor||# acceptClass(char, char, char, int, int, int) : \l# acceptField(char, char, char, char, char, char, int, int, int) : \l# acceptInterface(char, char, char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int) : \l# acceptPackage(char, char, int, int) : \l}"
	 ]

	 IElementChangedListener [
		 label = "{IElementChangedListener||# elementChanged(ElementChangedEvent) : \l}"
	 ]

	 IField [
		 label = "{IField||# getConstant() : Object\l# getElementName() : String\l# getKey() : String\l# getTypeSignature() : String\l# isEnumConstant() : boolean\l# isResolved() : boolean\l}"
	 ]

	 IImportContainer [
		 label = "{IImportContainer||# getImport(String) : IImportDeclaration\l}"
	 ]

	 IImportDeclaration [
		 label = "{IImportDeclaration||# getElementName() : String\l# getFlags() : int\l# isOnDemand() : boolean\l}"
	 ]

	 IInitializer [
		 label = "{IInitializer||}"
	 ]

	 IJarEntryResource [
		 label = "{IJarEntryResource||# getChildren() : IJarEntryResource\l# getFullPath() : IPath\l# getParent() : Object\l# getPackageFragmentRoot() : IPackageFragmentRoot\l# isFile() : boolean\l}"
	 ]

	 IJavaElement [
		 label = "{IJavaElement||# JAVA_MODEL() : int\l# JAVA_PROJECT() : int\l# PACKAGE_FRAGMENT_ROOT() : int\l# PACKAGE_FRAGMENT() : int\l# COMPILATION_UNIT() : int\l# CLASS_FILE() : int\l# TYPE() : int\l# FIELD() : int\l# METHOD() : int\l# INITIALIZER() : int\l# PACKAGE_DECLARATION() : int\l# IMPORT_CONTAINER() : int\l# IMPORT_DECLARATION() : int\l# LOCAL_VARIABLE() : int\l# TYPE_PARAMETER() : int\l# ANNOTATION() : int\l# exists() : boolean\l# getAncestor(int) : IJavaElement\l# getAttachedJavadoc(IProgressMonitor) : String\l# getCorrespondingResource() : IResource\l# getElementName() : String\l# getElementType() : int\l# getHandleIdentifier() : String\l# getJavaModel() : IJavaModel\l# getJavaProject() : IJavaProject\l# getOpenable() : IOpenable\l# getParent() : IJavaElement\l# getPath() : IPath\l# getPrimaryElement() : IJavaElement\l# getResource() : IResource\l# getSchedulingRule() : ISchedulingRule\l# getUnderlyingResource() : IResource\l# isReadOnly() : boolean\l# isStructureKnown() : boolean\l}"
	 ]

	 IJavaElementDelta [
		 label = "{IJavaElementDelta||# ADDED() : int\l# REMOVED() : int\l# CHANGED() : int\l# F_CONTENT() : int\l# F_MODIFIERS() : int\l# F_CHILDREN() : int\l# F_MOVED_FROM() : int\l# F_MOVED_TO() : int\l# F_ADDED_TO_CLASSPATH() : int\l# F_REMOVED_FROM_CLASSPATH() : int\l# F_CLASSPATH_REORDER() : int\l# F_REORDER() : int\l# F_OPENED() : int\l# F_CLOSED() : int\l# F_SUPER_TYPES() : int\l# F_SOURCEATTACHED() : int\l# F_SOURCEDETACHED() : int\l# F_FINE_GRAINED() : int\l# F_ARCHIVE_CONTENT_CHANGED() : int\l# F_PRIMARY_WORKING_COPY() : int\l# F_CLASSPATH_CHANGED() : int\l# F_PRIMARY_RESOURCE() : int\l# F_AST_AFFECTED() : int\l# F_CATEGORIES() : int\l# F_RESOLVED_CLASSPATH_CHANGED() : int\l# F_ANNOTATIONS() : int\l# getAddedChildren() : IJavaElementDelta\l# getAffectedChildren() : IJavaElementDelta\l# getAnnotationDeltas() : IJavaElementDelta\l# getCompilationUnitAST() : CompilationUnit\l# getChangedChildren() : IJavaElementDelta\l# getElement() : IJavaElement\l# getFlags() : int\l# getKind() : int\l# getMovedFromElement() : IJavaElement\l# getMovedToElement() : IJavaElement\l# getRemovedChildren() : IJavaElementDelta\l# getResourceDeltas() : IResourceDelta\l}"
	 ]

	 IJavaModel [
		 label = "{IJavaModel||# contains(IResource) : boolean\l# copy(IJavaElement, IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# delete(IJavaElement, boolean, IProgressMonitor) : \l# getJavaProject(String) : IJavaProject\l# getJavaProjects() : IJavaProject\l# getNonJavaResources() : Object\l# getWorkspace() : IWorkspace\l# move(IJavaElement, IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# refreshExternalArchives(IJavaElement, IProgressMonitor) : \l# rename(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l}"
	 ]

	 IJavaModelMarker [
		 label = "{IJavaModelMarker||# JAVA_MODEL_PROBLEM_MARKER() : String\l# TRANSIENT_PROBLEM() : String\l# TASK_MARKER() : String\l# ARGUMENTS() : String\l# ID() : String\l# CATEGORY_ID() : String\l# FLAGS() : String\l# CYCLE_DETECTED() : String\l# BUILDPATH_PROBLEM_MARKER() : String\l# CLASSPATH_FILE_FORMAT() : String\l# OUTPUT_OVERLAPPING_SOURCE() : String\l}"
	 ]

	 IJavaModelStatus [
		 label = "{IJavaModelStatus||# getElements() : IJavaElement\l# getPath() : IPath\l# getString() : String\l# isDoesNotExist() : boolean\l}"
	 ]

	 IJavaModelStatusConstants [
		 label = "{IJavaModelStatusConstants||# INVALID_CP_CONTAINER_ENTRY() : int\l# CP_CONTAINER_PATH_UNBOUND() : int\l# INVALID_CLASSPATH() : int\l# CP_VARIABLE_PATH_UNBOUND() : int\l# CORE_EXCEPTION() : int\l# INVALID_ELEMENT_TYPES() : int\l# NO_ELEMENTS_TO_PROCESS() : int\l# ELEMENT_DOES_NOT_EXIST() : int\l# NULL_PATH() : int\l# PATH_OUTSIDE_PROJECT() : int\l# RELATIVE_PATH() : int\l# DEVICE_PATH() : int\l# NULL_STRING() : int\l# READ_ONLY() : int\l# NAME_COLLISION() : int\l# INVALID_DESTINATION() : int\l# INVALID_PATH() : int\l# INDEX_OUT_OF_BOUNDS() : int\l# UPDATE_CONFLICT() : int\l# NULL_NAME() : int\l# INVALID_NAME() : int\l# INVALID_CONTENTS() : int\l# IO_EXCEPTION() : int\l# DOM_EXCEPTION() : int\l# TARGET_EXCEPTION() : int\l# BUILDER_INITIALIZATION_ERROR() : int\l# BUILDER_SERIALIZATION_ERROR() : int\l# EVALUATION_ERROR() : int\l# INVALID_SIBLING() : int\l# INVALID_RESOURCE() : int\l# INVALID_RESOURCE_TYPE() : int\l# INVALID_PROJECT() : int\l# INVALID_PACKAGE() : int\l# NO_LOCAL_CONTENTS() : int\l# INVALID_CLASSPATH_FILE_FORMAT() : int\l# CLASSPATH_CYCLE() : int\l# DISABLED_CP_EXCLUSION_PATTERNS() : int\l# DISABLED_CP_MULTIPLE_OUTPUT_LOCATIONS() : int\l# INCOMPATIBLE_JDK_LEVEL() : int\l# COMPILER_FAILURE() : int\l# ELEMENT_NOT_ON_CLASSPATH() : int\l# CANNOT_RETRIEVE_ATTACHED_JAVADOC() : int\l# UNKNOWN_JAVADOC_FORMAT() : int\l# DEPRECATED_VARIABLE() : int\l# BAD_TEXT_EDIT_LOCATION() : int\l# CANNOT_RETRIEVE_ATTACHED_JAVADOC_TIMEOUT() : int\l# OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE() : int\l# CP_INVALID_EXTERNAL_ANNOTATION_PATH() : int\l}"
	 ]

	 IJavaProject [
		 label = "{IJavaProject||# CLASSPATH_FILE_NAME() : String\l# decodeClasspathEntry(String) : IClasspathEntry\l# encodeClasspathEntry(IClasspathEntry) : String\l# findElement(IPath) : IJavaElement\l# findElement(IPath, WorkingCopyOwner) : IJavaElement\l# findElement(String, WorkingCopyOwner) : IJavaElement\l# findPackageFragment(IPath) : IPackageFragment\l# findPackageFragmentRoot(IPath) : IPackageFragmentRoot\l# findPackageFragmentRoots(IClasspathEntry) : IPackageFragmentRoot\l# findType(String) : IType\l# findType(String, IProgressMonitor) : IType\l# findType(String, WorkingCopyOwner) : IType\l# findType(String, WorkingCopyOwner, IProgressMonitor) : IType\l# findType(String, String) : IType\l# findType(String, String, IProgressMonitor) : IType\l# findType(String, String, WorkingCopyOwner) : IType\l# findType(String, String, WorkingCopyOwner, IProgressMonitor) : IType\l# getAllPackageFragmentRoots() : IPackageFragmentRoot\l# getNonJavaResources() : Object\l# getOption(String, boolean) : String\l# getOptions(boolean) : Map\l# getOutputLocation() : IPath\l# getPackageFragmentRoot(String) : IPackageFragmentRoot\l# getPackageFragmentRoot(IResource) : IPackageFragmentRoot\l# getPackageFragmentRoots() : IPackageFragmentRoot\l# getPackageFragmentRoots(IClasspathEntry) : IPackageFragmentRoot\l# getPackageFragments() : IPackageFragment\l# getProject() : IProject\l# getRawClasspath() : IClasspathEntry\l# getRequiredProjectNames() : String\l# getResolvedClasspath(boolean) : IClasspathEntry\l# hasBuildState() : boolean\l# hasClasspathCycle(IClasspathEntry) : boolean\l# isOnClasspath(IJavaElement) : boolean\l# isOnClasspath(IResource) : boolean\l# newEvaluationContext() : IEvaluationContext\l# newTypeHierarchy(IRegion, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IRegion, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IType, IRegion, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IType, IRegion, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# readOutputLocation() : IPath\l# readRawClasspath() : IClasspathEntry\l# setOption(String, String) : \l# setOptions(Map) : \l# setOutputLocation(IPath, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IPath, boolean, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, boolean, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IClasspathEntry, IPath, IProgressMonitor) : \l# getReferencedClasspathEntries() : IClasspathEntry\l# setRawClasspath(IClasspathEntry, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IPath, IProgressMonitor) : \l}"
	 ]

	 ILocalVariable [
		 label = "{ILocalVariable||# getElementName() : String\l# getNameRange() : ISourceRange\l# getTypeSignature() : String\l# isParameter() : boolean\l# getFlags() : int\l# getDeclaringMember() : IMember\l# getTypeRoot() : ITypeRoot\l}"
	 ]

	 IMember [
		 label = "{IMember||# getCategories() : String\l# getClassFile() : IClassFile\l# getCompilationUnit() : ICompilationUnit\l# getDeclaringType() : IType\l# getFlags() : int\l# getJavadocRange() : ISourceRange\l# getOccurrenceCount() : int\l# getTypeRoot() : ITypeRoot\l# getType(String, int) : IType\l# isBinary() : boolean\l}"
	 ]

	 IMemberValuePair [
		 label = "{IMemberValuePair||# K_INT() : int\l# K_BYTE() : int\l# K_SHORT() : int\l# K_CHAR() : int\l# K_FLOAT() : int\l# K_DOUBLE() : int\l# K_LONG() : int\l# K_BOOLEAN() : int\l# K_STRING() : int\l# K_ANNOTATION() : int\l# K_CLASS() : int\l# K_QUALIFIED_NAME() : int\l# K_SIMPLE_NAME() : int\l# K_UNKNOWN() : int\l# getMemberName() : String\l# getValue() : Object\l# getValueKind() : int\l}"
	 ]

	 IMethod [
		 label = "{IMethod||# getDefaultValue() : IMemberValuePair\l# getElementName() : String\l# getExceptionTypes() : String\l# getTypeParameterSignatures() : String\l# getTypeParameters() : ITypeParameter\l# getNumberOfParameters() : int\l# getParameters() : ILocalVariable\l# getKey() : String\l# getParameterNames() : String\l# getParameterTypes() : String\l# getRawParameterNames() : String\l# getReturnType() : String\l# getSignature() : String\l# getTypeParameter(String) : ITypeParameter\l# isConstructor() : boolean\l# isMainMethod() : boolean\l# isLambdaMethod() : boolean\l# isResolved() : boolean\l# isSimilar(IMethod) : boolean\l}"
	 ]

	 IOpenable [
		 label = "{IOpenable||# close() : \l# findRecommendedLineSeparator() : String\l# getBuffer() : IBuffer\l# hasUnsavedChanges() : boolean\l# isConsistent() : boolean\l# isOpen() : boolean\l# makeConsistent(IProgressMonitor) : \l# open(IProgressMonitor) : \l# save(IProgressMonitor, boolean) : \l}"
	 ]

	 IPackageDeclaration [
		 label = "{IPackageDeclaration||# getElementName() : String\l}"
	 ]

	 IPackageFragment [
		 label = "{IPackageFragment||# DEFAULT_PACKAGE_NAME() : String\l# containsJavaResources() : boolean\l# createCompilationUnit(String, String, boolean, IProgressMonitor) : ICompilationUnit\l# getClassFile(String) : IClassFile\l# getClassFiles() : IClassFile\l# getCompilationUnit(String) : ICompilationUnit\l# getCompilationUnits() : ICompilationUnit\l# getCompilationUnits(WorkingCopyOwner) : ICompilationUnit\l# getElementName() : String\l# getKind() : int\l# getNonJavaResources() : Object\l# hasSubpackages() : boolean\l# isDefaultPackage() : boolean\l}"
	 ]

	 IPackageFragmentRoot [
		 label = "{IPackageFragmentRoot||# K_SOURCE() : int\l# K_BINARY() : int\l# DEFAULT_PACKAGEROOT_PATH() : String\l# NO_RESOURCE_MODIFICATION() : int\l# ORIGINATING_PROJECT_CLASSPATH() : int\l# OTHER_REFERRING_PROJECTS_CLASSPATH() : int\l# DESTINATION_PROJECT_CLASSPATH() : int\l# REPLACE() : int\l# attachSource(IPath, IPath, IProgressMonitor) : \l# copy(IPath, int, int, IClasspathEntry, IProgressMonitor) : \l# createPackageFragment(String, boolean, IProgressMonitor) : IPackageFragment\l# delete(int, int, IProgressMonitor) : \l# getKind() : int\l# getNonJavaResources() : Object\l# getPackageFragment(String) : IPackageFragment\l# getRawClasspathEntry() : IClasspathEntry\l# getResolvedClasspathEntry() : IClasspathEntry\l# getSourceAttachmentPath() : IPath\l# getSourceAttachmentRootPath() : IPath\l# isArchive() : boolean\l# isExternal() : boolean\l# move(IPath, int, int, IClasspathEntry, IProgressMonitor) : \l}"
	 ]

	 IParent [
		 label = "{IParent||# getChildren() : IJavaElement\l# hasChildren() : boolean\l}"
	 ]

	 IProblemRequestor [
		 label = "{IProblemRequestor||# acceptProblem(IProblem) : \l# beginReporting() : \l# endReporting() : \l# isActive() : boolean\l}"
	 ]

	 IRegion [
		 label = "{IRegion||# add(IJavaElement) : \l# contains(IJavaElement) : boolean\l# getElements() : IJavaElement\l# remove(IJavaElement) : boolean\l}"
	 ]

	 ISourceManipulation [
		 label = "{ISourceManipulation||# copy(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# delete(boolean, IProgressMonitor) : \l# move(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# rename(String, boolean, IProgressMonitor) : \l}"
	 ]

	 ISourceRange [
		 label = "{ISourceRange||# getLength() : int\l# getOffset() : int\l}"
	 ]

	 ISourceReference [
		 label = "{ISourceReference||# exists() : boolean\l# getSource() : String\l# getSourceRange() : ISourceRange\l# getNameRange() : ISourceRange\l}"
	 ]

	 IType [
		 label = "{IType||# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, IProgressMonitor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# createField(String, IJavaElement, boolean, IProgressMonitor) : IField\l# createInitializer(String, IJavaElement, IProgressMonitor) : IInitializer\l# createMethod(String, IJavaElement, boolean, IProgressMonitor) : IMethod\l# createType(String, IJavaElement, boolean, IProgressMonitor) : IType\l# findMethods(IMethod) : IMethod\l# getChildrenForCategory(String) : IJavaElement\l# getElementName() : String\l# getField(String) : IField\l# getFields() : IField\l# getFullyQualifiedName() : String\l# getFullyQualifiedName(char) : String\l# getFullyQualifiedParameterizedName() : String\l# getInitializer(int) : IInitializer\l# getInitializers() : IInitializer\l# getKey() : String\l# getMethod(String, String) : IMethod\l# getMethods() : IMethod\l# getPackageFragment() : IPackageFragment\l# getSuperclassName() : String\l# getSuperclassTypeSignature() : String\l# getSuperInterfaceTypeSignatures() : String\l# getSuperInterfaceNames() : String\l# getTypeParameterSignatures() : String\l# getTypeParameters() : ITypeParameter\l# getType(String) : IType\l# getTypeParameter(String) : ITypeParameter\l# getTypeQualifiedName() : String\l# getTypeQualifiedName(char) : String\l# getTypes() : IType\l# isAnonymous() : boolean\l# isClass() : boolean\l# isEnum() : boolean\l# isInterface() : boolean\l# isAnnotation() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isResolved() : boolean\l# loadTypeHierachy(InputStream, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# resolveType(String) : String\l# resolveType(String, WorkingCopyOwner) : String\l# isLambda() : boolean\l}"
	 ]

	 ITypeHierarchy [
		 label = "{ITypeHierarchy||# addTypeHierarchyChangedListener(ITypeHierarchyChangedListener) : \l# contains(IType) : boolean\l# exists() : boolean\l# getAllClasses() : IType\l# getAllInterfaces() : IType\l# getAllSubtypes(IType) : IType\l# getAllSuperclasses(IType) : IType\l# getAllSuperInterfaces(IType) : IType\l# getAllSupertypes(IType) : IType\l# getAllTypes() : IType\l# getCachedFlags(IType) : int\l# getExtendingInterfaces(IType) : IType\l# getImplementingClasses(IType) : IType\l# getRootClasses() : IType\l# getRootInterfaces() : IType\l# getSubclasses(IType) : IType\l# getSubtypes(IType) : IType\l# getSuperclass(IType) : IType\l# getSuperInterfaces(IType) : IType\l# getSupertypes(IType) : IType\l# getType() : IType\l# refresh(IProgressMonitor) : \l# removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener) : \l# store(OutputStream, IProgressMonitor) : \l}"
	 ]

	 ITypeHierarchyChangedListener [
		 label = "{ITypeHierarchyChangedListener||# typeHierarchyChanged(ITypeHierarchy) : \l}"
	 ]

	 ITypeParameter [
		 label = "{ITypeParameter||# getBounds() : String\l# getBoundsSignatures() : String\l# getDeclaringMember() : IMember\l# getTypeRoot() : ITypeRoot\l}"
	 ]

	 ITypeRoot [
		 label = "{ITypeRoot||# findPrimaryType() : IType\l# getElementAt(int) : IJavaElement\l# getWorkingCopy(WorkingCopyOwner, IProgressMonitor) : ICompilationUnit\l}"
	 ]

	 IWorkingCopy [
		 label = "{IWorkingCopy||# commit(boolean, IProgressMonitor) : \l# destroy() : \l# findSharedWorkingCopy(IBufferFactory) : IJavaElement\l# getOriginal(IJavaElement) : IJavaElement\l# getOriginalElement() : IJavaElement\l# findElements(IJavaElement) : IJavaElement\l# findPrimaryType() : IType\l# getSharedWorkingCopy(IProgressMonitor, IBufferFactory, IProblemRequestor) : IJavaElement\l# getWorkingCopy() : IJavaElement\l# getWorkingCopy(IProgressMonitor, IBufferFactory, IProblemRequestor) : IJavaElement\l# isBasedOn(IResource) : boolean\l# isWorkingCopy() : boolean\l# reconcile() : IMarker\l# reconcile(boolean, IProgressMonitor) : \l# restore() : \l}"
	 ]

	 JavaConventions [
		 label = "{JavaConventions|- DOT : char\l- PACKAGE_INFO : String\l- SCANNER : Scanner\l|# JavaConventions() : \l# isOverlappingRoots(IPath, IPath) : boolean\l# scannedIdentifier(String, String, String) : char\l# validateCompilationUnitName(String) : IStatus\l# validateCompilationUnitName(String, String, String) : IStatus\l# validateClassFileName(String) : IStatus\l# validateClassFileName(String, String, String) : IStatus\l# validateFieldName(String) : IStatus\l# validateFieldName(String, String, String) : IStatus\l# validateIdentifier(String) : IStatus\l# validateIdentifier(String, String, String) : IStatus\l# validateImportDeclaration(String) : IStatus\l# validateImportDeclaration(String, String, String) : IStatus\l# validateJavaTypeName(String) : IStatus\l# validateJavaTypeName(String, String, String) : IStatus\l# validateMethodName(String) : IStatus\l# validateMethodName(String, String, String) : IStatus\l# validatePackageName(String) : IStatus\l# validatePackageName(String, String, String) : IStatus\l# validateClasspath(IJavaProject, IClasspathEntry, IPath) : IJavaModelStatus\l# validateClasspathEntry(IJavaProject, IClasspathEntry, boolean) : IJavaModelStatus\l# validateTypeVariableName(String) : IStatus\l# validateTypeVariableName(String, String, String) : IStatus\l}"
	 ]

	 JavaCore [
		 label = "{JavaCore|- NO_GENERATED_RESOURCES : IResource\l- JAVA_CORE_PLUGIN : Plugin\l+ PLUGIN_ID : String\l+ BUILDER_ID : String\l+ MODEL_ID : String\l+ NATURE_ID : String\l# ATT_HANDLE_ID : String\l+ USER_LIBRARY_CONTAINER_ID : String\l+ COMPILER_LOCAL_VARIABLE_ATTR : String\l+ COMPILER_LINE_NUMBER_ATTR : String\l+ COMPILER_SOURCE_FILE_ATTR : String\l+ COMPILER_CODEGEN_UNUSED_LOCAL : String\l+ COMPILER_CODEGEN_METHOD_PARAMETERS_ATTR : String\l+ COMPILER_CODEGEN_TARGET_PLATFORM : String\l+ COMPILER_CODEGEN_INLINE_JSR_BYTECODE : String\l+ COMPILER_DOC_COMMENT_SUPPORT : String\l+ COMPILER_PB_UNREACHABLE_CODE : String\l+ COMPILER_PB_INVALID_IMPORT : String\l+ COMPILER_PB_OVERRIDING_PACKAGE_DEFAULT_METHOD : String\l+ COMPILER_PB_METHOD_WITH_CONSTRUCTOR_NAME : String\l+ COMPILER_PB_DEPRECATION : String\l+ COMPILER_PB_DEPRECATION_IN_DEPRECATED_CODE : String\l+ COMPILER_PB_DEPRECATION_WHEN_OVERRIDING_DEPRECATED_METHOD : String\l+ COMPILER_PB_HIDDEN_CATCH_BLOCK : String\l+ COMPILER_PB_UNUSED_LOCAL : String\l+ COMPILER_PB_UNUSED_PARAMETER : String\l+ COMPILER_PB_UNUSED_EXCEPTION_PARAMETER : String\l+ COMPILER_PB_UNUSED_PARAMETER_WHEN_IMPLEMENTING_ABSTRACT : String\l+ COMPILER_PB_UNUSED_PARAMETER_WHEN_OVERRIDING_CONCRETE : String\l+ COMPILER_PB_UNUSED_PARAMETER_INCLUDE_DOC_COMMENT_REFERENCE : String\l+ COMPILER_PB_UNUSED_IMPORT : String\l+ COMPILER_PB_UNUSED_TYPE_ARGUMENTS_FOR_METHOD_INVOCATION : String\l+ COMPILER_PB_SYNTHETIC_ACCESS_EMULATION : String\l+ COMPILER_PB_UNUSED_TYPE_PARAMETER : String\l+ COMPILER_PB_NON_NLS_STRING_LITERAL : String\l+ COMPILER_PB_ASSERT_IDENTIFIER : String\l+ COMPILER_PB_ENUM_IDENTIFIER : String\l+ COMPILER_PB_STATIC_ACCESS_RECEIVER : String\l+ COMPILER_PB_INDIRECT_STATIC_ACCESS : String\l+ COMPILER_PB_NO_EFFECT_ASSIGNMENT : String\l+ COMPILER_PB_INCOMPATIBLE_NON_INHERITED_INTERFACE_METHOD : String\l+ COMPILER_PB_UNUSED_PRIVATE_MEMBER : String\l+ COMPILER_PB_LOCAL_VARIABLE_HIDING : String\l+ COMPILER_PB_SPECIAL_PARAMETER_HIDING_FIELD : String\l+ COMPILER_PB_FIELD_HIDING : String\l+ COMPILER_PB_TYPE_PARAMETER_HIDING : String\l+ COMPILER_PB_POSSIBLE_ACCIDENTAL_BOOLEAN_ASSIGNMENT : String\l+ COMPILER_PB_FALLTHROUGH_CASE : String\l+ COMPILER_PB_EMPTY_STATEMENT : String\l+ COMPILER_PB_BOOLEAN_METHOD_THROWING_EXCEPTION : String\l+ COMPILER_PB_UNNECESSARY_TYPE_CHECK : String\l+ COMPILER_PB_UNNECESSARY_ELSE : String\l+ COMPILER_PB_UNDOCUMENTED_EMPTY_BLOCK : String\l+ COMPILER_PB_FINALLY_BLOCK_NOT_COMPLETING : String\l+ COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION : String\l+ COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_WHEN_OVERRIDING : String\l+ COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_INCLUDE_DOC_COMMENT_REFERENCE : String\l+ COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION_EXEMPT_EXCEPTION_AND_THROWABLE : String\l+ COMPILER_PB_UNQUALIFIED_FIELD_ACCESS : String\l+ COMPILER_PB_UNSAFE_TYPE_OPERATION : String\l+ COMPILER_PB_UNCHECKED_TYPE_OPERATION : String\l+ COMPILER_PB_RAW_TYPE_REFERENCE : String\l+ COMPILER_PB_UNAVOIDABLE_GENERIC_TYPE_PROBLEMS : String\l+ COMPILER_PB_FINAL_PARAMETER_BOUND : String\l+ COMPILER_PB_MISSING_SERIAL_VERSION : String\l+ COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST : String\l+ COMPILER_PB_AUTOBOXING : String\l+ COMPILER_PB_ANNOTATION_SUPER_INTERFACE : String\l+ COMPILER_PB_MISSING_OVERRIDE_ANNOTATION : String\l+ COMPILER_PB_MISSING_OVERRIDE_ANNOTATION_FOR_INTERFACE_METHOD_IMPLEMENTATION : String\l+ COMPILER_PB_MISSING_DEPRECATED_ANNOTATION : String\l+ COMPILER_PB_MISSING_HASHCODE_METHOD : String\l+ COMPILER_PB_DEAD_CODE : String\l+ COMPILER_PB_DEAD_CODE_IN_TRIVIAL_IF_STATEMENT : String\l+ COMPILER_PB_INCOMPLETE_ENUM_SWITCH : String\l+ COMPILER_PB_MISSING_ENUM_CASE_DESPITE_DEFAULT : String\l+ COMPILER_PB_SWITCH_MISSING_DEFAULT_CASE : String\l+ COMPILER_PB_INCONSISTENT_NULL_CHECK : String\l+ COMPILER_PB_UNUSED_LABEL : String\l+ COMPILER_PB_INVALID_JAVADOC : String\l+ COMPILER_PB_INVALID_JAVADOC_TAGS : String\l+ COMPILER_PB_INVALID_JAVADOC_TAGS__DEPRECATED_REF : String\l+ COMPILER_PB_INVALID_JAVADOC_TAGS__NOT_VISIBLE_REF : String\l+ COMPILER_PB_INVALID_JAVADOC_TAGS_VISIBILITY : String\l+ COMPILER_PB_MISSING_JAVADOC_TAG_DESCRIPTION : String\l+ COMPILER_PB_MISSING_JAVADOC_TAGS : String\l+ COMPILER_PB_MISSING_JAVADOC_TAGS_VISIBILITY : String\l+ COMPILER_PB_MISSING_JAVADOC_TAGS_OVERRIDING : String\l+ COMPILER_PB_MISSING_JAVADOC_TAGS_METHOD_TYPE_PARAMETERS : String\l+ COMPILER_PB_MISSING_JAVADOC_COMMENTS : String\l+ COMPILER_PB_MISSING_JAVADOC_COMMENTS_VISIBILITY : String\l+ COMPILER_PB_MISSING_JAVADOC_COMMENTS_OVERRIDING : String\l+ COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION : String\l+ COMPILER_PB_MAX_PER_UNIT : String\l+ COMPILER_PB_FATAL_OPTIONAL_ERROR : String\l+ COMPILER_PB_PARAMETER_ASSIGNMENT : String\l+ COMPILER_PB_MISSING_STATIC_ON_METHOD : String\l+ COMPILER_PB_POTENTIALLY_MISSING_STATIC_ON_METHOD : String\l+ COMPILER_PB_UNCLOSED_CLOSEABLE : String\l+ COMPILER_PB_POTENTIALLY_UNCLOSED_CLOSEABLE : String\l+ COMPILER_PB_EXPLICITLY_CLOSED_AUTOCLOSEABLE : String\l+ COMPILER_ANNOTATION_NULL_ANALYSIS : String\l+ COMPILER_NULLABLE_ANNOTATION_NAME : String\l+ COMPILER_NULLABLE_ANNOTATION_SECONDARY_NAMES : String\l+ COMPILER_NONNULL_ANNOTATION_NAME : String\l+ COMPILER_NONNULL_ANNOTATION_SECONDARY_NAMES : String\l+ COMPILER_NONNULL_BY_DEFAULT_ANNOTATION_NAME : String\l+ COMPILER_NONNULL_BY_DEFAULT_ANNOTATION_SECONDARY_NAMES : String\l+ COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION : String\l+ COMPILER_PB_NULL_SPECIFICATION_VIOLATION : String\l+ COMPILER_PB_NULL_ANNOTATION_INFERENCE_CONFLICT : String\l+ COMPILER_PB_NULL_UNCHECKED_CONVERSION : String\l+ COMPILER_PB_REDUNDANT_NULL_ANNOTATION : String\l+ COMPILER_PB_SYNTACTIC_NULL_ANALYSIS_FOR_FIELDS : String\l+ COMPILER_INHERIT_NULL_ANNOTATIONS : String\l+ COMPILER_PB_NONNULL_PARAMETER_ANNOTATION_DROPPED : String\l+ COMPILER_SOURCE : String\l+ COMPILER_COMPLIANCE : String\l+ COMPILER_TASK_PRIORITIES : String\l+ COMPILER_TASK_TAGS : String\l+ COMPILER_TASK_CASE_SENSITIVE : String\l+ COMPILER_PB_FORBIDDEN_REFERENCE : String\l+ COMPILER_PB_DISCOURAGED_REFERENCE : String\l+ COMPILER_PB_SUPPRESS_WARNINGS : String\l+ COMPILER_PB_INCLUDE_ASSERTS_IN_NULL_ANALYSIS : String\l+ COMPILER_PB_SUPPRESS_OPTIONAL_ERRORS : String\l+ COMPILER_PB_UNHANDLED_WARNING_TOKEN : String\l+ COMPILER_PB_UNUSED_WARNING_TOKEN : String\l+ COMPILER_PB_NULL_REFERENCE : String\l+ COMPILER_PB_POTENTIAL_NULL_REFERENCE : String\l+ COMPILER_PB_REDUNDANT_NULL_CHECK : String\l+ COMPILER_PB_OVERRIDING_METHOD_WITHOUT_SUPER_INVOCATION : String\l+ COMPILER_PB_REDUNDANT_SUPERINTERFACE : String\l+ COMPILER_PB_COMPARING_IDENTICAL : String\l+ COMPILER_PB_MISSING_SYNCHRONIZED_ON_INHERITED_METHOD : String\l+ COMPILER_PB_UNUSED_OBJECT_ALLOCATION : String\l+ COMPILER_PB_REDUNDANT_TYPE_ARGUMENTS : String\l+ CORE_JAVA_BUILD_ORDER : String\l+ CORE_JAVA_BUILD_RESOURCE_COPY_FILTER : String\l+ CORE_JAVA_BUILD_DUPLICATE_RESOURCE : String\l+ CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER : String\l+ CORE_JAVA_BUILD_RECREATE_MODIFIED_CLASS_FILES_IN_OUTPUT_FOLDER : String\l+ CORE_INCOMPLETE_CLASSPATH : String\l+ CORE_CIRCULAR_CLASSPATH : String\l+ CORE_INCOMPATIBLE_JDK_LEVEL : String\l+ CORE_JAVA_BUILD_INVALID_CLASSPATH : String\l+ CORE_ENCODING : String\l+ CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS : String\l+ CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS : String\l+ CORE_OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE : String\l+ TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC : String\l+ JAVA_FORMATTER : String\l+ FORMATTER_NEWLINE_OPENING_BRACE : String\l+ FORMATTER_NEWLINE_CONTROL : String\l+ FORMATTER_NEWLINE_ELSE_IF : String\l+ FORMATTER_NEWLINE_EMPTY_BLOCK : String\l+ FORMATTER_CLEAR_BLANK_LINES : String\l+ FORMATTER_LINE_SPLIT : String\l+ FORMATTER_COMPACT_ASSIGNMENT : String\l+ FORMATTER_TAB_CHAR : String\l+ FORMATTER_TAB_SIZE : String\l+ FORMATTER_SPACE_CASTEXPRESSION : String\l+ CODEASSIST_VISIBILITY_CHECK : String\l+ CODEASSIST_DEPRECATION_CHECK : String\l+ CODEASSIST_CAMEL_CASE_MATCH : String\l+ CODEASSIST_SUBSTRING_MATCH : String\l+ CODEASSIST_IMPLICIT_QUALIFICATION : String\l+ CODEASSIST_FIELD_PREFIXES : String\l+ CODEASSIST_STATIC_FIELD_PREFIXES : String\l+ CODEASSIST_STATIC_FINAL_FIELD_PREFIXES : String\l+ CODEASSIST_LOCAL_PREFIXES : String\l+ CODEASSIST_ARGUMENT_PREFIXES : String\l+ CODEASSIST_FIELD_SUFFIXES : String\l+ CODEASSIST_STATIC_FIELD_SUFFIXES : String\l+ CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES : String\l+ CODEASSIST_LOCAL_SUFFIXES : String\l+ CODEASSIST_ARGUMENT_SUFFIXES : String\l+ CODEASSIST_FORBIDDEN_REFERENCE_CHECK : String\l+ CODEASSIST_DISCOURAGED_REFERENCE_CHECK : String\l+ CODEASSIST_SUGGEST_STATIC_IMPORTS : String\l+ DEFAULT_TASK_TAG : String\l+ DEFAULT_TASK_PRIORITY : String\l+ DEFAULT_TASK_TAGS : String\l+ DEFAULT_TASK_PRIORITIES : String\l+ GENERATE : String\l+ DO_NOT_GENERATE : String\l+ PRESERVE : String\l+ OPTIMIZE_OUT : String\l+ COMPILER_TASK_PRIORITY_HIGH : String\l+ COMPILER_TASK_PRIORITY_LOW : String\l+ COMPILER_TASK_PRIORITY_NORMAL : String\l+ VERSION_1_1 : String\l+ VERSION_1_2 : String\l+ VERSION_1_3 : String\l+ VERSION_1_4 : String\l+ VERSION_1_5 : String\l+ VERSION_1_6 : String\l+ VERSION_1_7 : String\l+ VERSION_1_8 : String\l+ VERSION_CLDC_1_1 : String\l+ ABORT : String\l+ ERROR : String\l+ WARNING : String\l+ IGNORE : String\l+ INFO : String\l+ COMPUTE : String\l+ INSERT : String\l+ DO_NOT_INSERT : String\l+ PRESERVE_ONE : String\l+ CLEAR_ALL : String\l+ NORMAL : String\l+ COMPACT : String\l+ TAB : String\l+ SPACE : String\l+ ENABLED : String\l+ DISABLED : String\l+ CLEAN : String\l+ PUBLIC : String\l+ PROTECTED : String\l+ DEFAULT : String\l+ PRIVATE : String\l+ NEVER : String\l+ COMPILER_PB_MISSING_JAVADOC_TAG_DESCRIPTION_NO_TAG : String\l+ COMPILER_PB_MISSING_JAVADOC_TAG_DESCRIPTION_RETURN_TAG : String\l+ COMPILER_PB_MISSING_JAVADOC_TAG_DESCRIPTION_ALL_STANDARD_TAGS : String\l+ JAVA_SOURCE_CONTENT_TYPE : String\l+ DEFAULT_JAVA_FORMATTER : String\l+ JAVA_FORMATTER_EXTENSION_POINT_ID : String\l|# JavaCore() : \l# addElementChangedListener(IElementChangedListener) : \l# addElementChangedListener(IElementChangedListener, int) : \l# addJavaElementMarkerAttributes(Map, IJavaElement) : \l# addNonJavaResources(Object, IContainer, int, ArrayList) : \l# addPreProcessingResourceChangedListener(IResourceChangeListener) : \l# addPreProcessingResourceChangedListener(IResourceChangeListener, int) : \l# configureJavaElementMarker(IMarker, IJavaElement) : \l# create(String) : IJavaElement\l# create(String, WorkingCopyOwner) : IJavaElement\l# create(IFile) : IJavaElement\l# create(IFolder) : IJavaElement\l# create(IProject) : IJavaProject\l# create(IResource) : IJavaElement\l# create(IResource, IJavaProject) : IJavaElement\l# create(IWorkspaceRoot) : IJavaModel\l# createClassFileFrom(IFile) : IClassFile\l# createCompilationUnitFrom(IFile) : ICompilationUnit\l# createJarPackageFragmentRootFrom(IFile) : IPackageFragmentRoot\l# getClasspathContainer(IPath, IJavaProject) : IClasspathContainer\l# getClasspathContainerInitializer(String) : ClasspathContainerInitializer\l# computeClasspathContainerInitializer(String) : ClasspathContainerInitializer\l# verbose_failed_to_instanciate_container_initializer(String, IConfigurationElement) : \l# verbose_found_container_initializer(String, IConfigurationElement) : \l# getClasspathVariable(String) : IPath\l# verbose_no_variable_initializer_found(String) : \l# verbose_variable_value_after_initialization(String, IPath) : \l# verbose_triggering_variable_initialization(String, ClasspathVariableInitializer) : \l# verbose_triggering_variable_initialization_invocation_trace() : \l# getClasspathVariableDeprecationMessage(String) : String\l# getClasspathVariableInitializer(String) : ClasspathVariableInitializer\l# verbose_failed_to_instanciate_variable_initializer(String, IConfigurationElement) : \l# verbose_found_variable_initializer(String, IConfigurationElement) : \l# getClasspathVariableNames() : String\l# getDefaultOptions() : Hashtable\l# getEncoding() : String\l# getGeneratedResources(IRegion, boolean) : IResource\l# getGeneratedResource(ICompilationUnit, IContainer, State, int, ArrayList) : \l# getJavaCore() : JavaCore\l# getJavaLikeExtensions() : String\l# getOption(String) : String\l# getOptionForConfigurableSeverity(int) : String\l# getOptions() : Hashtable\l# getPlugin() : Plugin\l# getResolvedClasspathEntry(IClasspathEntry) : IClasspathEntry\l# getResolvedVariablePath(IPath) : IPath\l# getSharedWorkingCopies(IBufferFactory) : IWorkingCopy\l# getUserLibraryNames() : String\l# getWorkingCopies(WorkingCopyOwner) : ICompilationUnit\l# initializeAfterLoad(IProgressMonitor) : \l# acceptType(int, char, char, char, String) : \l# run(IProgressMonitor) : \l# isClasspathVariableReadOnly(String) : boolean\l# isJavaLikeFileName(String) : boolean\l# isReferencedBy(IJavaElement, IMarker) : boolean\l# isReferencedBy(IJavaElement, IMarkerDelta) : boolean\l# newAccessRule(IPath, int) : IAccessRule\l# newClasspathAttribute(String, String) : IClasspathAttribute\l# newContainerEntry(IPath) : IClasspathEntry\l# newContainerEntry(IPath, boolean) : IClasspathEntry\l# newContainerEntry(IPath, IAccessRule, IClasspathAttribute, boolean) : IClasspathEntry\l# newTypeHierarchy(IRegion, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newLibraryEntry(IPath, IPath, IPath) : IClasspathEntry\l# newLibraryEntry(IPath, IPath, IPath, boolean) : IClasspathEntry\l# newLibraryEntry(IPath, IPath, IPath, IAccessRule, IClasspathAttribute, boolean) : IClasspathEntry\l# newProjectEntry(IPath) : IClasspathEntry\l# newProjectEntry(IPath, boolean) : IClasspathEntry\l# newProjectEntry(IPath, IAccessRule, boolean, IClasspathAttribute, boolean) : IClasspathEntry\l# newRegion() : IRegion\l# newSourceEntry(IPath) : IClasspathEntry\l# newSourceEntry(IPath, IPath) : IClasspathEntry\l# newSourceEntry(IPath, IPath, IPath) : IClasspathEntry\l# newSourceEntry(IPath, IPath, IPath, IPath) : IClasspathEntry\l# newSourceEntry(IPath, IPath, IPath, IPath, IClasspathAttribute) : IClasspathEntry\l# newVariableEntry(IPath, IPath, IPath) : IClasspathEntry\l# newVariableEntry(IPath, IPath, IPath, boolean) : IClasspathEntry\l# newVariableEntry(IPath, IPath, IPath, IAccessRule, IClasspathAttribute, boolean) : IClasspathEntry\l# getReferencedClasspathEntries(IClasspathEntry, IJavaProject) : IClasspathEntry\l# removeClasspathVariable(String) : \l# removeClasspathVariable(String, IProgressMonitor) : \l# removeElementChangedListener(IElementChangedListener) : \l# removeJavaLikeExtension(String) : String\l# removePreProcessingResourceChangedListener(IResourceChangeListener) : \l# run(IWorkspaceRunnable, IProgressMonitor) : \l# run(IWorkspaceRunnable, ISchedulingRule, IProgressMonitor) : \l# setClasspathContainer(IPath, IJavaProject, IClasspathContainer, IProgressMonitor) : \l# setClasspathVariable(String, IPath) : \l# setClasspathVariable(String, IPath, IProgressMonitor) : \l# setClasspathVariables(String, IPath, IProgressMonitor) : \l# setComplianceOptions(String, Map) : \l# setOptions(Hashtable) : \l# compareJavaVersions(String, String) : int\l# stop(BundleContext) : \l# start(BundleContext) : \l}"
	 ]

	 JavaModelException [
		 label = "{JavaModelException|- serialVersionUID : long\l# nestedCoreException : CoreException\l|# JavaModelException(Throwable, int) : \l# JavaModelException(CoreException) : \l# JavaModelException(IJavaModelStatus) : \l# getException() : Throwable\l# getJavaModelStatus() : IJavaModelStatus\l# isDoesNotExist() : boolean\l# printStackTrace(PrintStream) : \l# printStackTrace(PrintWriter) : \l# toString() : String\l}"
	 ]

	 NamingRequestor [
		 label = "{NamingRequestor|- SIZE : int\l- firstPrefixAndFirstSuffixResults : char\l- firstPrefixAndFirstSuffixResultsCount : int\l- firstPrefixAndSuffixResults : char\l- firstPrefixAndSuffixResultsCount : int\l- prefixAndFirstSuffixResults : char\l- prefixAndFirstSuffixResultsCount : int\l- prefixAndSuffixResults : char\l- prefixAndSuffixResultsCount : int\l- firstPrefixResults : char\l- firstPrefixResultsCount : int\l- prefixResults : char\l- prefixResultsCount : int\l- firstSuffixResults : char\l- firstSuffixResultsCount : int\l- suffixResults : char\l- suffixResultsCount : int\l- otherResults : char\l- otherResultsCount : int\l- GETTER_BOOL_NAME : char\l- GETTER_NAME : char\l- SETTER_NAME : char\l+ VK_STATIC_FIELD : int\l+ VK_INSTANCE_FIELD : int\l+ VK_STATIC_FINAL_FIELD : int\l+ VK_PARAMETER : int\l+ VK_LOCAL : int\l+ BK_NAME : int\l+ BK_TYPE_NAME : int\l|# null() : \l# acceptNameWithoutPrefixAndSuffix(char, int) : \l# acceptNameWithPrefix(char, boolean, int) : \l# acceptNameWithPrefixAndSuffix(char, boolean, boolean, int) : \l# acceptNameWithSuffix(char, boolean, int) : \l# getResults() : char\l# convertCharsToString(char) : String\l# convertStringToChars(String) : char\l# removePrefixAndSuffixForArgumentName(IJavaProject, char) : char\l# removePrefixAndSuffixForArgumentName(IJavaProject, String) : String\l# removePrefixAndSuffixForFieldName(IJavaProject, char, int) : char\l# removePrefixAndSuffixForFieldName(IJavaProject, String, int) : String\l# removePrefixAndSuffixForLocalVariableName(IJavaProject, char) : char\l# removePrefixAndSuffixForLocalVariableName(IJavaProject, String) : String\l# getBaseName(int, String, IJavaProject) : String\l# getFieldVariableKind(int) : int\l# suggestAccessorName(IJavaProject, char, int) : char\l# suggestArgumentNames(IJavaProject, char, char, int, char) : char\l# suggestArgumentNames(IJavaProject, String, String, int, String) : String\l# suggestFieldNames(IJavaProject, char, char, int, int, char) : char\l# suggestFieldNames(IJavaProject, String, String, int, int, String) : String\l# suggestGetterName(IJavaProject, char, int, boolean, char) : char\l# suggestGetterName(IJavaProject, String, int, boolean, String) : String\l# suggestLocalVariableNames(IJavaProject, char, char, int, char) : char\l# suggestLocalVariableNames(IJavaProject, String, String, int, String) : String\l# suggestNewName(char, char) : char\l# suggestSetterName(IJavaProject, char, int, boolean, char) : char\l# suggestSetterName(IJavaProject, String, int, boolean, String) : String\l# suggestVariableNames(int, int, String, IJavaProject, int, String, boolean) : String\l# NamingConventions() : \l}"
	 ]

	 Signature [
		 label = "{Signature|+ ARRAY_TYPE_SIGNATURE : int\l+ BASE_TYPE_SIGNATURE : int\l- BOOLEAN : char\l- BYTE : char\l+ C_ARRAY : char\l+ C_BOOLEAN : char\l+ C_BYTE : char\l+ C_CAPTURE : char\l+ C_CHAR : char\l+ C_COLON : char\l+ C_DOLLAR : char\l+ C_DOT : char\l+ C_DOUBLE : char\l+ C_EXCEPTION_START : char\l+ C_EXTENDS : char\l+ C_FLOAT : char\l+ C_GENERIC_END : char\l+ C_GENERIC_START : char\l+ C_INT : char\l+ C_INTERSECTION : char\l+ C_LONG : char\l+ C_NAME_END : char\l+ C_PARAM_END : char\l+ C_PARAM_START : char\l+ C_RESOLVED : char\l+ C_SEMICOLON : char\l+ C_SHORT : char\l+ C_STAR : char\l+ C_SUPER : char\l+ C_TYPE_VARIABLE : char\l+ C_UNRESOLVED : char\l+ C_VOID : char\l- CAPTURE : char\l+ CAPTURE_TYPE_SIGNATURE : int\l- CHAR : char\l+ CLASS_TYPE_SIGNATURE : int\l- DOUBLE : char\l- EXTENDS : char\l- FLOAT : char\l- INT : char\l+ INTERSECTION_TYPE_SIGNATURE : int\l- LONG : char\l- SHORT : char\l+ SIG_BOOLEAN : String\l+ SIG_BYTE : String\l+ SIG_CHAR : String\l+ SIG_DOUBLE : String\l+ SIG_FLOAT : String\l+ SIG_INT : String\l+ SIG_LONG : String\l+ SIG_SHORT : String\l+ SIG_VOID : String\l- SUPER : char\l+ TYPE_VARIABLE_SIGNATURE : int\l- VOID : char\l+ WILDCARD_TYPE_SIGNATURE : int\l|# appendArgumentSimpleNames(char, int, int, StringBuffer) : \l# appendArrayTypeSignature(char, int, boolean, StringBuffer) : int\l# appendArrayTypeSignature(char, int, boolean, StringBuffer, boolean) : int\l# appendCaptureTypeSignature(char, int, boolean, StringBuffer) : int\l# appendClassTypeSignature(char, int, boolean, StringBuffer) : int\l# appendIntersectionTypeSignature(char, int, boolean, StringBuffer) : int\l# appendSimpleName(char, int, int, StringBuffer) : \l# appendTypeArgumentSignature(char, int, boolean, StringBuffer) : int\l# appendTypeArgumentSignatures(char, int, boolean, StringBuffer) : int\l# appendTypeSignature(char, int, boolean, StringBuffer) : int\l# appendTypeSignature(char, int, boolean, StringBuffer, boolean) : int\l# checkArrayDimension(char, int, int) : int\l# checkName(char, char, int, int) : int\l# checkNextChar(char, char, int, int, boolean) : int\l# consumeWhitespace(char, int, int) : int\l# createArraySignature(char, int) : char\l# createArraySignature(String, int) : String\l# createCharArrayTypeSignature(char, boolean) : char\l# createIntersectionTypeSignature(char) : String\l# createIntersectionTypeSignature(String) : String\l# createMethodSignature(char, char) : char\l# createMethodSignature(String, String) : String\l# createTypeParameterSignature(char, char) : char\l# createTypeParameterSignature(String, String) : String\l# createTypeSignature(char, boolean) : String\l# createTypeSignature(String, boolean) : String\l# encodeArrayDimension(char, int, int, StringBuffer) : int\l# encodeQualifiedName(char, int, int, StringBuffer) : int\l# encodeTypeSignature(char, int, boolean, int, StringBuffer) : int\l# getArrayCount(char) : int\l# getArrayCount(String) : int\l# getElementType(char) : char\l# getElementType(String) : String\l# getIntersectionTypeBounds(char) : char\l# getIntersectionTypeBounds(String) : String\l# getParameterCount(char) : int\l# getParameterCount(String) : int\l# getParameterTypes(char) : char\l# getParameterTypes(String) : String\l# getQualifier(char) : char\l# getQualifier(String) : String\l# getReturnType(char) : char\l# getReturnType(String) : String\l# getSignatureQualifier(char) : char\l# getSignatureQualifier(String) : String\l# getSignatureSimpleName(char) : char\l# getSignatureSimpleName(String) : String\l# getSimpleName(char) : char\l# getSimpleName(String) : String\l# getSimpleNames(char) : char\l# getSimpleNames(String) : String\l# getThrownExceptionTypes(char) : char\l# getThrownExceptionTypes(String) : String\l# getTypeArguments(char) : char\l# getTypeArguments(String) : String\l# getTypeErasure(char) : char\l# getTypeErasure(String) : String\l# getTypeParameterBounds(char) : char\l# getTypeParameterBounds(String) : String\l# getTypeParameters(char) : char\l# getTypeParameters(String) : String\l# getTypeSignatureKind(char) : int\l# getTypeSignatureKind(String) : int\l# getTypeVariable(char) : char\l# getTypeVariable(String) : String\l# removeCapture(char) : char\l# removeCapture(String) : String\l# toCharArray(char) : char\l# toCharArray(char, char, char, boolean, boolean) : char\l# toCharArray(char, char, char, boolean, boolean, boolean) : char\l# toQualifiedName(char) : char\l# toQualifiedName(String) : String\l# toString(String) : String\l# toString(String, String, String, boolean, boolean) : String\l# toString(String, String, String, boolean, boolean, boolean) : String\l# Signature() : \l}"
	 ]

	 SourceRange [
		 label = "{SourceRange|- offset : int\l- length : int\l|# isAvailable(ISourceRange) : boolean\l# SourceRange(int, int) : \l# equals(Object) : boolean\l# getLength() : int\l# getOffset() : int\l# hashCode() : int\l# toString() : String\l}"
	 ]

	 DeprecatedDisassembler [
		 label = "{DeprecatedDisassembler|+ M_FORMAT_NEW : int\l+ M_FORMAT_EXISTING : int\l|# createCodeFormatter() : ICodeFormatter\l# createCodeFormatter(Map) : CodeFormatter\l# createCodeFormatter(Map, int) : CodeFormatter\l# createDefaultClassFileBytesDisassembler() : ClassFileBytesDisassembler\l# createDefaultClassFileDisassembler() : org\l# createDefaultClassFileReader(IClassFile, int) : IClassFileReader\l# createDefaultClassFileReader(InputStream, int) : IClassFileReader\l# createDefaultClassFileReader(String, int) : IClassFileReader\l# createDefaultClassFileReader(String, String, int) : IClassFileReader\l# createDefaultCodeFormatter(Map) : ICodeFormatter\l# createScanner(boolean, boolean, boolean, boolean) : IScanner\l# createScanner(boolean, boolean, boolean, String) : IScanner\l# createScanner(boolean, boolean, boolean, String, String) : IScanner\l}"
	 ]

	 WorkingCopyOwner [
		 label = "{WorkingCopyOwner||# setPrimaryBufferProvider(WorkingCopyOwner) : \l# createBuffer(ICompilationUnit) : IBuffer\l# getProblemRequestor(ICompilationUnit) : IProblemRequestor\l# findSource(String, String) : String\l# isPackage(String) : boolean\l# newWorkingCopy(String, IClasspathEntry, IProblemRequestor, IProgressMonitor) : ICompilationUnit\l# newWorkingCopy(String, IClasspathEntry, IProgressMonitor) : ICompilationUnit\l}"
	 ]

	 AnnotatableInfo [
		 label = "{AnnotatableInfo|# annotations : IAnnotation\l# nameStart : int\l# nameEnd : int\l|# getNameSourceEnd() : int\l# getNameSourceStart() : int\l# setNameSourceEnd(int) : \l# setNameSourceStart(int) : \l# getNameRange() : ISourceRange\l}"
	 ]

	 Annotation [
		 label = "{Annotation|+ NO_ANNOTATIONS : IAnnotation\l+ NO_MEMBER_VALUE_PAIRS : IMemberValuePair\l# name : String\l# memberValuePairName : String\l|# Annotation(JavaElement, String) : \l# Annotation(JavaElement, String, String) : \l# equals(Object) : boolean\l# getDeclaringMember() : IMember\l# getElementName() : String\l# getElementType() : int\l# getHandleMementoDelimiter() : char\l# getMemberValuePairs() : IMemberValuePair\l# getNameRange() : ISourceRange\l# getSourceRange() : ISourceRange\l# getClassFile() : IClassFile\l# hashCode() : int\l# toStringName(StringBuffer) : \l}"
	 ]

	 AnnotationInfo [
		 label = "{AnnotationInfo|+ nameStart : int\l+ nameEnd : int\l+ members : IMemberValuePair\l|}"
	 ]

	 ASTHolderCUInfo [
		 label = "{ASTHolderCUInfo|# astLevel : int\l# resolveBindings : boolean\l# reconcileFlags : int\l# problems : HashMap\l# ast : CompilationUnit\l|}"
	 ]

	 BasicCompilationUnit [
		 label = "{BasicCompilationUnit|# contents : char\l# fileName : char\l# packageName : char\l# mainTypeName : char\l# encoding : String\l|# BasicCompilationUnit(char, char, String) : \l# BasicCompilationUnit(char, char, String, String) : \l# BasicCompilationUnit(char, char, String, IJavaElement) : \l# initEncoding(IJavaElement) : \l# getContents() : char\l# getFileName() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# ignoreOptionalProblems() : boolean\l# toString() : String\l}"
	 ]

	 BatchInitializationMonitor [
		 label = "{BatchInitializationMonitor|+ initializeAfterLoadMonitor : ThreadLocal\l+ subTaskName : String\l+ worked : int\l|# getMonitor() : IProgressMonitor\l# beginTask(String, int) : \l# done() : \l# internalWorked(double) : \l# isCanceled() : boolean\l# setCanceled(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# worked(int) : \l# getWorked() : int\l}"
	 ]

	 BatchOperation [
		 label = "{BatchOperation|# runnable : IWorkspaceRunnable\l|# BatchOperation(IWorkspaceRunnable) : \l# canModifyRoots() : boolean\l# executeOperation() : \l# verify() : IJavaModelStatus\l}"
	 ]

	 BecomeWorkingCopyOperation [
		 label = "{BecomeWorkingCopyOperation|# problemRequestor : IProblemRequestor\l|# BecomeWorkingCopyOperation(CompilationUnit, IProblemRequestor) : \l# executeOperation() : \l# getWorkingCopy() : CompilationUnit\l# isReadOnly() : boolean\l}"
	 ]

	 BinaryField [
		 label = "{BinaryField||# BinaryField(JavaElement, String) : \l# equals(Object) : boolean\l# getAnnotations() : IAnnotation\l# getConstant() : Object\l# getFlags() : int\l# getElementType() : int\l# getHandleMementoDelimiter() : char\l# getKey(boolean) : String\l# getTypeSignature() : String\l# isEnumConstant() : boolean\l# isResolved() : boolean\l# resolved(Binding) : JavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# getAttachedJavadoc(IProgressMonitor) : String\l}"
	 ]

	 BinaryLambdaExpression [
		 label = "{BinaryLambdaExpression||# BinaryLambdaExpression(JavaElement, org) : \l# BinaryLambdaExpression(JavaElement, String, int, int, int) : \l# BinaryLambdaExpression(JavaElement, String, int, int, int, LambdaMethod) : \l# getPrimaryElement(boolean) : IJavaElement\l# isBinary() : boolean\l}"
	 ]

	 BinaryLambdaMethod [
		 label = "{BinaryLambdaMethod||# BinaryLambdaMethod(JavaElement, String, String, int, String, String, String, SourceMethodElementInfo) : \l# getPrimaryElement(boolean) : IJavaElement\l# isBinary() : boolean\l}"
	 ]

	 BinaryMember [
		 label = "{BinaryMember|+ getKey : String\l|# BinaryMember(JavaElement, String) : \l# copy(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# getAnnotations(IBinaryAnnotation, long) : IAnnotation\l# getAnnotation(char) : IAnnotation\l# getStandardAnnotations(long) : IAnnotation\l# getCategories() : String\l# getKey(boolean) : String\l# getNameRange() : ISourceRange\l# getSourceRange() : ISourceRange\l# isBinary() : boolean\l# isStructureKnown() : boolean\l# move(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# rename(String, boolean, IProgressMonitor) : \l# setContents(String, IProgressMonitor) : \l}"
	 ]

	 ParametersNameCollector [
		 label = "{ParametersNameCollector|# parameterTypes : String\l# erasedParamaterTypes : String\l# parameterNames : String\l# exceptionTypes : String\l# returnType : String\l# javadoc : String\l|# BinaryMethod(JavaElement, String, String) : \l# equals(Object) : boolean\l# getAnnotations() : IAnnotation\l# getParameters() : ILocalVariable\l# getAnnotations(JavaElement, IBinaryAnnotation) : IAnnotation\l# getDefaultValue() : IMemberValuePair\l# getExceptionTypes() : String\l# getElementType() : int\l# getFlags() : int\l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# getKey(boolean) : String\l# getNumberOfParameters() : int\l# getParameterNames() : String\l# setJavadoc(String) : \l# getJavadoc() : String\l# run() : \l# isOpenParenForMethod(String, String, int) : boolean\l# splitParameters(char, int) : char\l# getParameterTypes() : String\l# getErasedParameterTypes() : String\l# getErasedParameterType(int) : String\l# getTypeParameter(String) : ITypeParameter\l# getTypeParameters() : ITypeParameter\l# getTypeParameterSignatures() : String\l# getRawParameterNames() : String\l# getRawParameterNames(int) : String\l# getReturnType() : String\l# getReturnType(IBinaryMethod) : String\l# getSignature() : String\l# hashCode() : int\l# isConstructor() : boolean\l# isMainMethod() : boolean\l# isLambdaMethod() : boolean\l# isResolved() : boolean\l# isSimilar(IMethod) : boolean\l# readableName() : String\l# resolved(Binding) : JavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# toStringName(StringBuffer) : \l# toStringName(StringBuffer, int) : \l# getAttachedJavadoc(IProgressMonitor) : String\l}"
	 ]

	 BinaryType [
		 label = "{BinaryType|- NO_FIELDS : IField\l- NO_METHODS : IMethod\l- NO_TYPES : IType\l- NO_INITIALIZERS : IInitializer\l+ EMPTY_JAVADOC : JavadocContents\l|# BinaryType(JavaElement, String) : \l# closing(Object) : \l# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, IProgressMonitor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# createField(String, IJavaElement, boolean, IProgressMonitor) : IField\l# createInitializer(String, IJavaElement, IProgressMonitor) : IInitializer\l# createMethod(String, IJavaElement, boolean, IProgressMonitor) : IMethod\l# createType(String, IJavaElement, boolean, IProgressMonitor) : IType\l# equals(Object) : boolean\l# findMethods(IMethod) : IMethod\l# getAnnotations() : IAnnotation\l# getChildren() : IJavaElement\l# getChildrenForCategory(String) : IJavaElement\l# getClassFileInfo() : ClassFileInfo\l# getDeclaringType() : IType\l# getElementInfo(IProgressMonitor) : Object\l# getElementType() : int\l# getField(String) : IField\l# getFields() : IField\l# getFlags() : int\l# getFullyQualifiedName() : String\l# getFullyQualifiedName(char) : String\l# getFullyQualifiedParameterizedName() : String\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getInitializer(int) : IInitializer\l# getInitializers() : IInitializer\l# getKey(boolean) : String\l# getMethod(String, String) : IMethod\l# getMethods() : IMethod\l# getPackageFragment() : IPackageFragment\l# getSuperclassTypeSignature() : String\l# getSourceFileName(IBinaryType) : String\l# getSuperclassName() : String\l# getSuperInterfaceNames() : String\l# getSuperInterfaceTypeSignatures() : String\l# getTypeParameters() : ITypeParameter\l# getTypeParameterSignatures() : String\l# getType(String) : IType\l# getTypeParameter(String) : ITypeParameter\l# getTypeQualifiedName() : String\l# getTypeQualifiedName(char) : String\l# getTypes() : IType\l# isAnonymous() : boolean\l# isClass() : boolean\l# isEnum() : boolean\l# isInterface() : boolean\l# isAnnotation() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isResolved() : boolean\l# loadTypeHierachy(InputStream, IProgressMonitor) : ITypeHierarchy\l# loadTypeHierachy(InputStream, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# resolved(Binding) : JavaElement\l# sourceFileName(IBinaryType) : String\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# toStringName(StringBuffer) : \l# getAttachedJavadoc(IProgressMonitor) : String\l# getJavadocContents(IProgressMonitor) : JavadocContents\l+ isLambda() : boolean\l}"
	 ]

	 BinaryTypeConverter [
		 label = "{BinaryTypeConverter|- compilationResult : CompilationResult\l- typeNames : HashSetOfCharArrayArray\l|# BinaryTypeConverter(ProblemReporter, CompilationResult, HashSetOfCharArrayArray) : \l# buildImports(ClassFileReader) : ImportReference\l# buildTypeDeclaration(IType, CompilationUnitDeclaration) : TypeDeclaration\l# convert(IField, IType) : FieldDeclaration\l# convert(IMethod, IType) : AbstractMethodDeclaration\l# convert(IType, IType, TypeDeclaration) : TypeDeclaration\l# stringArrayToCharArray(String) : char\l# createTypeReference(String) : TypeReference\l}"
	 ]

	 Buffer [
		 label = "{Buffer|# file : IFile\l# flags : int\l# contents : char\l# changeListeners : ArrayList\l# owner : IOpenable\l# gapStart : int\l# gapEnd : int\l# lock : Object\l# F_HAS_UNSAVED_CHANGES : int\l# F_IS_READ_ONLY : int\l# F_IS_CLOSED : int\l|# Buffer(IFile, IOpenable, boolean) : \l# addBufferChangedListener(IBufferChangedListener) : \l# append(char) : \l# append(String) : \l# close() : \l# getChar(int) : char\l# getCharacters() : char\l# getContents() : String\l# getLength() : int\l# getOwner() : IOpenable\l# getText(int, int) : String\l# getUnderlyingResource() : IResource\l# hasUnsavedChanges() : boolean\l# isClosed() : boolean\l# isReadOnly() : boolean\l# moveAndResizeGap(int, int) : \l# notifyChanged(BufferChangedEvent) : \l# handleException(Throwable) : \l# run() : \l# removeBufferChangedListener(IBufferChangedListener) : \l# replace(int, int, char) : \l# replace(int, int, String) : \l# save(IProgressMonitor, boolean) : \l# setContents(char) : \l# setContents(String) : \l# setReadOnly(boolean) : \l# toString() : String\l}"
	 ]

	 BufferCache [
		 label = "{BufferCache|- buffersToClose : ThreadLocal\l|# BufferCache(int) : \l# BufferCache(int, int) : \l# close(LRUCacheEntry) : boolean\l# closeBuffers() : \l# newInstance(int, int) : LRUCache\l}"
	 ]

	 BufferFactoryWrapper [
		 label = "{BufferFactoryWrapper|+ factory : org\l|# BufferFactoryWrapper(org) : \l# create(org) : WorkingCopyOwner\l# createBuffer(ICompilationUnit) : IBuffer\l# equals(Object) : boolean\l# hashCode() : int\l# toString() : String\l}"
	 ]

	 BufferManager [
		 label = "{BufferManager|# DEFAULT_BUFFER_MANAGER : BufferManager\l# VERBOSE : boolean\l- openBuffers : BufferCache\l# defaultBufferFactory : org\l|# createBuffer(IOpenable) : IBuffer\l# addBuffer(IBuffer) : \l# createBuffer(IOpenable) : IBuffer\l# createNullBuffer(IOpenable) : IBuffer\l# getBuffer(IOpenable) : IBuffer\l# getDefaultBufferManager() : BufferManager\l# getDefaultBufferFactory() : org\l# getOpenBuffers() : Enumeration\l# removeBuffer(IBuffer) : \l}"
	 ]

	 CancelableNameEnvironment [
		 label = "{CancelableNameEnvironment|- monitor : IProgressMonitor\l|# CancelableNameEnvironment(JavaProject, WorkingCopyOwner, IProgressMonitor) : \l# checkCanceled() : \l# findPackages(char, ISearchRequestor) : \l# findType(char, char) : NameEnvironmentAnswer\l# findType(char) : NameEnvironmentAnswer\l# findTypes(char, boolean, boolean, int, ISearchRequestor, IProgressMonitor) : \l# setMonitor(IProgressMonitor) : \l}"
	 ]

	 CancelableProblemFactory [
		 label = "{CancelableProblemFactory|+ monitor : IProgressMonitor\l|# CancelableProblemFactory(IProgressMonitor) : \l# createProblem(char, int, String, String, int, int, int, int, int) : CategorizedProblem\l# createProblem(char, int, String, int, String, int, int, int, int, int) : CategorizedProblem\l}"
	 ]

	 ChangeClasspathOperation [
		 label = "{ChangeClasspathOperation|# canChangeResources : boolean\l|# ChangeClasspathOperation(IJavaElement, boolean) : \l# canModifyRoots() : boolean\l# classpathChanged(ClasspathChange, boolean) : \l# getSchedulingRule() : ISchedulingRule\l# isReadOnly() : boolean\l}"
	 ]

	 ClassFile [
		 label = "{ClassFile|# name : String\l# binaryType : BinaryType\l- externalAnnotationBase : IPath\l|# ClassFile(PackageFragment, String) : \l# becomeWorkingCopy(IProblemRequestor, WorkingCopyOwner, IProgressMonitor) : ICompilationUnit\l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# codeComplete(int, ICompletionRequestor) : \l# codeComplete(int, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, CompletionRequestor) : \l# codeComplete(int, CompletionRequestor, IProgressMonitor) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# codeSelect(int, int) : IJavaElement\l# codeSelect(int, int, WorkingCopyOwner) : IJavaElement\l# createElementInfo() : Object\l# equals(Object) : boolean\l# existsUsingJarTypeCache() : boolean\l# findElement(IJavaElement, int, SourceMapper) : IJavaElement\l# findPrimaryType() : IType\l# getAttachedJavadoc(IProgressMonitor) : String\l# getBinaryTypeInfo(IFile) : IBinaryType\l# getBinaryTypeInfo(IFile, boolean) : IBinaryType\l# getBytes() : byte\l# getJarBinaryTypeInfo(PackageFragment, boolean) : IBinaryType\l# setupExternalAnnotationProvider(IProject, IPath, ZipFile, ClassFileReader, String) : \l+ produce() : ZipFile\l# closeAndRemoveFromJarTypeCache() : \l+ close() : \l# getBuffer() : IBuffer\l# getClassFile() : IClassFile\l# getTypeRoot() : ITypeRoot\l# getCorrespondingResource() : IResource\l# getElementAt(int) : IJavaElement\l# getElementAtConsideringSibling(int) : IJavaElement\l# getElementName() : String\l# getElementType() : int\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getPath() : IPath\l# resource(PackageFragmentRoot) : IResource\l# getSource() : String\l# getSourceRange() : ISourceRange\l# getTopLevelTypeName() : String\l# getType() : IType\l# getTypeName() : String\l# getWorkingCopy(WorkingCopyOwner, IProgressMonitor) : ICompilationUnit\l# getWorkingCopy(IProgressMonitor, org) : IJavaElement\l# hasBuffer() : boolean\l# hashCode() : int\l# isClass() : boolean\l# isInterface() : boolean\l# isReadOnly() : boolean\l# validateClassFile() : IStatus\l# openBuffer(IProgressMonitor, Object) : IBuffer\l# mapSource(SourceMapper, IBinaryType, IClassFile) : IBuffer\l# simpleName(char) : String\l# getOuterMostEnclosingType() : IType\l# translatedName(char) : char\l# translatedNames(char) : char\l# unqualifiedName(char) : char\l# codeComplete(int, org) : \l# acceptAnonymousType(char, char, char, char, char, char, int, int, int, int) : \l# acceptClass(char, char, char, int, int, int, int) : \l# acceptError(IProblem) : \l# acceptField(char, char, char, char, char, char, int, int, int, int) : \l# acceptInterface(char, char, char, int, int, int, int) : \l# acceptKeyword(char, int, int, int) : \l# acceptLabel(char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptMethodDeclaration(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptModifier(char, int, int, int) : \l# acceptPackage(char, char, int, int, int) : \l# acceptType(char, char, char, int, int, int) : \l# acceptVariableName(char, char, char, char, int, int, int) : \l# validateExistence(IResource) : IStatus\l# getNameRange() : ISourceRange\l}"
	 ]

	 ClassFileInfo [
		 label = "{ClassFileInfo|# binaryChildren : JavaElement\l# typeParameters : ITypeParameter\l|# generateAnnotationsInfos(JavaElement, IBinaryAnnotation, long, HashMap) : \l# generateAnnotationsInfos(JavaElement, char, IBinaryAnnotation, long, HashMap) : \l# generateAnnotationInfo(JavaElement, HashMap, IBinaryAnnotation, String) : \l# generateAnnotationInfo(JavaElement, char, HashMap, IBinaryAnnotation, String) : \l# generateStandardAnnotationsInfos(JavaElement, char, long, HashMap) : \l# generateStandardAnnotation(JavaElement, char, IMemberValuePair, HashMap) : \l# getTargetElementTypes(long) : IMemberValuePair\l# getValueKind() : int\l# getValue() : Object\l# getMemberName() : String\l# getRetentionPolicy(long) : IMemberValuePair\l# getValueKind() : int\l# getValue() : Object\l# getMemberName() : String\l# generateFieldInfos(IType, IBinaryType, HashMap, ArrayList) : \l# generateInnerClassHandles(IType, IBinaryType, ArrayList) : \l# generateMethodInfos(IType, IBinaryType, HashMap, ArrayList, ArrayList) : \l# generateTypeParameterInfos(BinaryMember, char, HashMap, ArrayList) : \l# hasReadBinaryChildren() : boolean\l# readBinaryChildren(ClassFile, HashMap, IBinaryType) : \l# removeBinaryChildren() : \l}"
	 ]

	 ClassFileWorkingCopy [
		 label = "{ClassFileWorkingCopy|+ classFile : ClassFile\l|# ClassFileWorkingCopy(ClassFile, WorkingCopyOwner) : \l# commitWorkingCopy(boolean, IProgressMonitor) : \l# getBuffer() : IBuffer\l# getContents() : char\l# getPath() : IPath\l# getPrimaryElement(boolean) : IJavaElement\l# resource(PackageFragmentRoot) : IResource\l# openBuffer(IProgressMonitor, Object) : IBuffer\l# toStringName(StringBuffer) : \l}"
	 ]

	 ClasspathAccessRule [
		 label = "{ClasspathAccessRule||# ClasspathAccessRule(IPath, int) : \l# ClasspathAccessRule(char, int) : \l# toProblemId(int) : int\l# getPattern() : IPath\l# getKind() : int\l}"
	 ]

	 ClasspathAttribute [
		 label = "{ClasspathAttribute|- name : String\l- value : String\l|# ClasspathAttribute(String, String) : \l# equals(Object) : boolean\l# getName() : String\l# getValue() : String\l# hashCode() : int\l# toString() : String\l}"
	 ]

	 ClasspathChange [
		 label = "{ClasspathChange|+ NO_DELTA : int\l+ HAS_DELTA : int\l+ HAS_PROJECT_CHANGE : int\l+ HAS_LIBRARY_CHANGE : int\l# project : JavaProject\l# oldRawClasspath : IClasspathEntry\l# oldOutputLocation : IPath\l# oldResolvedClasspath : IClasspathEntry\l|# ClasspathChange(JavaProject, IClasspathEntry, IPath, IClasspathEntry) : \l# addClasspathDeltas(JavaElementDelta, IPackageFragmentRoot, int) : \l# classpathContains(IClasspathEntry, IClasspathEntry) : int\l# collectAllSubfolders(IFolder, ArrayList) : \l# determineAffectedPackageFragments(IPath) : ArrayList\l# equals(Object) : boolean\l# generateDelta(JavaElementDelta, boolean) : int\l# getSourceAttachmentDeltaFlag(IPath, IPath) : int\l# hashCode() : int\l# requestIndexing() : \l# toString() : String\l}"
	 ]

	 UnknownXmlElements [
		 label = "{UnknownXmlElements|- serialVersionUID : long\l+ TAG_CLASSPATH : String\l+ TAG_CLASSPATHENTRY : String\l+ TAG_REFERENCED_ENTRY : String\l+ TAG_OUTPUT : String\l+ TAG_KIND : String\l+ TAG_PATH : String\l+ TAG_SOURCEPATH : String\l+ TAG_ROOTPATH : String\l+ TAG_EXPORTED : String\l+ TAG_INCLUDING : String\l+ TAG_EXCLUDING : String\l+ TAG_ATTRIBUTES : String\l+ TAG_ATTRIBUTE : String\l+ TAG_ATTRIBUTE_NAME : String\l+ TAG_ATTRIBUTE_VALUE : String\l+ TAG_COMBINE_ACCESS_RULES : String\l+ TAG_ACCESS_RULES : String\l+ TAG_ACCESS_RULE : String\l+ TAG_PATTERN : String\l+ TAG_ACCESSIBLE : String\l+ TAG_NON_ACCESSIBLE : String\l+ TAG_DISCOURAGED : String\l+ TAG_IGNORE_IF_BETTER : String\l+ entryKind : int\l+ contentKind : int\l+ path : IPath\l- inclusionPatterns : IPath\l- fullInclusionPatternChars : char\l- exclusionPatterns : IPath\l- fullExclusionPatternChars : char\l- UNINIT_PATTERNS : char\l+ NO_ENTRIES : ClasspathEntry\l- NO_PATHS : IPath\l- workspaceRoot : IWorkspaceRoot\l- combineAccessRules : boolean\l- rootID : String\l- accessRuleSet : AccessRuleSet\l# attributes : String\l# children : ArrayList\l+ INCLUDE_ALL : IPath\l+ EXCLUDE_NONE : IPath\l+ NO_EXTRA_ATTRIBUTES : IClasspathAttribute\l+ NO_ACCESS_RULES : IAccessRule\l+ sourceAttachmentPath : IPath\l+ sourceAttachmentRootPath : IPath\l+ referencingEntry : IClasspathEntry\l+ specificOutputLocation : IPath\l+ K_OUTPUT : int\l+ DOT_DOT : String\l+ isExported : boolean\l+ extraAttributes : IClasspathAttribute\l|# null() : \l# AssertionFailedException(String) : \l# null() : \l# ClasspathEntry(int, int, IPath, IPath, IPath, IPath, IPath, IPath, boolean, IAccessRule, boolean, IClasspathAttribute) : \l# ClasspathEntry(int, int, IPath, IPath, IPath, IPath, IPath, IPath, IClasspathEntry, boolean, IAccessRule, boolean, IClasspathAttribute) : \l# combineAccessRules() : boolean\l# combineWith(ClasspathEntry) : ClasspathEntry\l# combine(IAccessRule, IAccessRule, boolean) : IAccessRule\l# decodeExtraAttributes(NodeList) : IClasspathAttribute\l# decodeAccessRules(NodeList) : IAccessRule\l# decodePatterns(NamedNodeMap, String) : IPath\l# decodeUnknownNode(Node, StringBuffer, IJavaProject) : \l# decodeUnknownNode(Node, XMLWriter, boolean) : \l# fullExclusionPatternChars() : char\l# fullInclusionPatternChars() : char\l# elementEncode(XMLWriter, IPath, boolean, boolean, Map, boolean) : \l# encodeExtraAttributes(XMLWriter, boolean, boolean) : \l# encodeAccessRules(XMLWriter, boolean, boolean) : \l# encodeAccessRule(AccessRule, XMLWriter, boolean, boolean) : \l# encodeUnknownChildren(XMLWriter, boolean, boolean, ArrayList) : \l# elementDecode(Element, IJavaProject, Map) : IClasspathEntry\l# hasDotDot(IPath) : boolean\l# getChildAttributes(String, NodeList, boolean) : NodeList\l# removeAttribute(String, NamedNodeMap) : String\l# removeNode(String, NamedNodeMap) : Node\l# resolvedChainedLibraries(IPath) : IPath\l# resolvedChainedLibraries(IPath, HashSet, ArrayList) : \l# getCalledFileNames(IPath) : List\l# resolveDotDot(IPath, IPath) : IPath\l# encodePatterns(IPath, String, Map) : \l# equals(Object) : boolean\l# equalAttributes(IClasspathAttribute, IClasspathAttribute) : boolean\l# equalPatterns(IPath, IPath) : boolean\l# getAccessRules() : IAccessRule\l# getAccessRuleSet() : AccessRuleSet\l# getContentKind() : int\l# getEntryKind() : int\l# getExclusionPatterns() : IPath\l# getExtraAttributes() : IClasspathAttribute\l# getInclusionPatterns() : IPath\l# getOutputLocation() : IPath\l# getPath() : IPath\l# getSourceAttachmentPath() : IPath\l# getSourceAttachmentRootPath() : IPath\l# getExternalAnnotationPath(IClasspathEntry, IProject, boolean) : IPath\l# getRawExternalAnnotationPath(IClasspathEntry) : String\l# invalidExternalAnnotationPath(IProject) : \l# validateExternalAnnotationPath(IJavaProject, IPath) : IJavaModelStatus\l# getReferencingEntry() : IClasspathEntry\l# hashCode() : int\l# isExported() : boolean\l# isOptional() : boolean\l# getSourceAttachmentEncoding() : String\l# kindFromString(String) : int\l# kindToString(int) : String\l# getAccessRules(IPath, IPath) : IAccessRule\l# toString() : String\l# resolvedDotDot(IPath) : ClasspathEntry\l# resolvedChainedLibraries() : ClasspathEntry\l# rootID() : String\l# getResolvedEntry() : IClasspathEntry\l# getLibraryIndexLocation() : URL\l# ignoreOptionalProblems() : boolean\l# validateClasspath(IJavaProject, IClasspathEntry, IPath) : IJavaModelStatus\l# isOK() : boolean\l# validateClasspathEntry(IJavaProject, IClasspathEntry, boolean, boolean) : IJavaModelStatus\l# validateClasspathEntry(IJavaProject, IClasspathEntry, IClasspathContainer, boolean, boolean) : IJavaModelStatus\l# validateLibraryEntry(IPath, IJavaProject, String, IPath, String, boolean) : IJavaModelStatus\l# validateLibraryContents(IPath, IJavaProject, String) : IJavaModelStatus\l}"
	 ]

	 ClasspathValidation [
		 label = "{ClasspathValidation|- project : JavaProject\l|# ClasspathValidation(JavaProject) : \l# validate() : \l}"
	 ]

	 CommitWorkingCopyOperation [
		 label = "{CommitWorkingCopyOperation||# CommitWorkingCopyOperation(ICompilationUnit, boolean) : \l# executeOperation() : \l# getCompilationUnit() : CompilationUnit\l# getSchedulingRule() : ISchedulingRule\l# verify() : IJavaModelStatus\l}"
	 ]

	 CompilationUnit [
		 label = "{CompilationUnit|# JLS2_INTERNAL : int\l- NO_IMPORTS : IImportDeclaration\l# name : String\l+ owner : WorkingCopyOwner\l- cachedContents : char\l|# CompilationUnit(PackageFragment, String, WorkingCopyOwner) : \l# applyTextEdit(TextEdit, IProgressMonitor) : UndoEdit\l# becomeWorkingCopy(IProblemRequestor, IProgressMonitor) : \l# becomeWorkingCopy(IProgressMonitor) : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# cloneCachingContents() : CompilationUnit\l# getContents() : char\l# originalFromClone() : CompilationUnit\l# canBeRemovedFromCache() : boolean\l# canBufferBeRemovedFromCache(IBuffer) : boolean\l# close() : \l# closing(Object) : \l# codeComplete(int, ICompletionRequestor) : \l# codeComplete(int, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, ICodeCompletionRequestor) : \l# acceptAnonymousType(char, char, char, char, char, char, int, int, int, int) : \l# acceptClass(char, char, char, int, int, int, int) : \l# acceptError(IProblem) : \l# acceptField(char, char, char, char, char, char, int, int, int, int) : \l# acceptInterface(char, char, char, int, int, int, int) : \l# acceptKeyword(char, int, int, int) : \l# acceptLabel(char, int, int, int) : \l# acceptLocalVariable(char, char, char, int, int, int, int) : \l# acceptMethod(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptMethodDeclaration(char, char, char, char, char, char, char, char, char, int, int, int, int) : \l# acceptModifier(char, int, int, int) : \l# acceptPackage(char, char, int, int, int) : \l# acceptType(char, char, char, int, int, int) : \l# acceptVariableName(char, char, char, char, int, int, int) : \l# codeComplete(int, CompletionRequestor) : \l# codeComplete(int, CompletionRequestor, IProgressMonitor) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# codeSelect(int, int) : IJavaElement\l# codeSelect(int, int, WorkingCopyOwner) : IJavaElement\l# commit(boolean, IProgressMonitor) : \l# commitWorkingCopy(boolean, IProgressMonitor) : \l# copy(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# createElementInfo() : Object\l# createImport(String, IJavaElement, IProgressMonitor) : IImportDeclaration\l# createImport(String, IJavaElement, int, IProgressMonitor) : IImportDeclaration\l# createPackageDeclaration(String, IProgressMonitor) : IPackageDeclaration\l# createType(String, IJavaElement, boolean, IProgressMonitor) : IType\l# delete(boolean, IProgressMonitor) : \l# destroy() : \l# discardWorkingCopy() : \l# equals(Object) : boolean\l# findElements(IJavaElement) : IJavaElement\l# findPrimaryType() : IType\l# findSharedWorkingCopy(IBufferFactory) : IJavaElement\l# findWorkingCopy(WorkingCopyOwner) : ICompilationUnit\l# getAllTypes() : IType\l# getCompilationUnit() : ICompilationUnit\l# getContents() : char\l# getCorrespondingResource() : IResource\l# getElementAt(int) : IJavaElement\l# getElementName() : String\l# getElementType() : int\l# getFileName() : char\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getImport(String) : IImportDeclaration\l# getImportContainer() : IImportContainer\l# getImports() : IImportDeclaration\l# getTypeRoot() : ITypeRoot\l# getMainTypeName() : char\l# getOriginal(IJavaElement) : IJavaElement\l# getOriginalElement() : IJavaElement\l# getOwner() : WorkingCopyOwner\l# getPackageDeclaration(String) : IPackageDeclaration\l# getPackageDeclarations() : IPackageDeclaration\l# getPackageName() : char\l# getPath() : IPath\l# getPerWorkingCopyInfo() : JavaModelManager\l# getPrimary() : ICompilationUnit\l# getPrimaryElement(boolean) : IJavaElement\l# resource(PackageFragmentRoot) : IResource\l# getSource() : String\l# getSourceRange() : ISourceRange\l# getType(String) : IType\l# getTypes() : IType\l# getUnderlyingResource() : IResource\l# getSharedWorkingCopy(IProgressMonitor, IBufferFactory, IProblemRequestor) : IJavaElement\l# getWorkingCopy() : IJavaElement\l# getWorkingCopy(IProgressMonitor) : ICompilationUnit\l# getWorkingCopy(WorkingCopyOwner, IProgressMonitor) : ICompilationUnit\l# getWorkingCopy(IProgressMonitor, IBufferFactory, IProblemRequestor) : IJavaElement\l# getWorkingCopy(WorkingCopyOwner, IProblemRequestor, IProgressMonitor) : ICompilationUnit\l# hasBuffer() : boolean\l# hasResourceChanged() : boolean\l# ignoreOptionalProblems() : boolean\l# isBasedOn(IResource) : boolean\l# isConsistent() : boolean\l# isPrimary() : boolean\l# isSourceElement() : boolean\l# validateCompilationUnit(IResource) : IStatus\l# isWorkingCopy() : boolean\l# makeConsistent(IProgressMonitor) : \l# makeConsistent(int, boolean, int, HashMap, IProgressMonitor) : org\l# move(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# openBuffer(IProgressMonitor, Object) : IBuffer\l# openAncestors(HashMap, IProgressMonitor) : \l# originalFromClone() : CompilationUnit\l# reconcile() : IMarker\l# reconcile(boolean, IProgressMonitor) : \l# reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor) : org\l# reconcile(int, boolean, boolean, WorkingCopyOwner, IProgressMonitor) : org\l# reconcile(int, int, WorkingCopyOwner, IProgressMonitor) : org\l# rename(String, boolean, IProgressMonitor) : \l# restore() : \l# save(IProgressMonitor, boolean) : \l# toStringInfo(int, StringBuffer, Object, boolean) : \l# updateTimeStamp(CompilationUnit) : \l# validateExistence(IResource) : IStatus\l# getNameRange() : ISourceRange\l}"
	 ]

	 CompilationUnitElementInfo [
		 label = "{CompilationUnitElementInfo|+ ANNOTATION_THRESHOLD_FOR_DIET_PARSE : int\l# sourceLength : int\l# timestamp : long\l+ annotationNumber : int\l+ hasFunctionalTypes : boolean\l|# getSourceLength() : int\l# getSourceRange() : ISourceRange\l# setSourceLength(int) : \l}"
	 ]

	 CompilationUnitProblemFinder [
		 label = "{CompilationUnitProblemFinder||# CompilationUnitProblemFinder(INameEnvironment, IErrorHandlingPolicy, CompilerOptions, ICompilerRequestor, IProblemFactory) : \l# accept(ISourceType, PackageBinding, AccessRestriction) : \l# getCompilerOptions(Map, boolean, boolean) : CompilerOptions\l# getHandlingPolicy() : IErrorHandlingPolicy\l# getRequestor() : ICompilerRequestor\l# acceptResult(CompilationResult) : \l# process(CompilationUnit, SourceElementParser, WorkingCopyOwner, HashMap, boolean, int, IProgressMonitor) : CompilationUnitDeclaration\l# process(CompilationUnit, WorkingCopyOwner, HashMap, boolean, int, IProgressMonitor) : CompilationUnitDeclaration\l# initializeParser() : \l}"
	 ]

	 CompilationUnitStructureRequestor [
		 label = "{CompilationUnitStructureRequestor|# unit : ICompilationUnit\l# unitInfo : CompilationUnitElementInfo\l# importContainerInfo : ImportContainerInfo\l# importContainer : ImportContainer\l# newElements : Map\l- occurenceCounts : HashtableOfObjectToInt\l- localOccurrenceCounts : HashtableOfObjectToInt\l# infoStack : Stack\l# children : HashMap\l# handleStack : Stack\l# referenceCount : int\l# hasSyntaxErrors : boolean\l# parser : Parser\l# fieldRefCache : HashtableOfObject\l# messageRefCache : HashtableOfObject\l# typeRefCache : HashtableOfObject\l# unknownRefCache : HashtableOfObject\l|# CompilationUnitStructureRequestor(ICompilationUnit, CompilationUnitElementInfo, Map) : \l# acceptImport(int, int, int, int, char, boolean, int) : \l# acceptLineSeparatorPositions(int) : \l# acceptPackage(ImportReference) : \l# acceptProblem(CategorizedProblem) : \l# addToChildren(Object, JavaElement) : \l# createAnnotation(JavaElement, String) : Annotation\l# createField(JavaElement, FieldInfo) : SourceField\l# createImportContainer(ICompilationUnit) : ImportContainer\l# createImportDeclaration(ImportContainer, String, boolean) : ImportDeclaration\l# createInitializer(JavaElement) : Initializer\l# createMethodHandle(JavaElement, MethodInfo) : SourceMethod\l# createPackageDeclaration(JavaElement, String) : PackageDeclaration\l# createTypeHandle(JavaElement, TypeInfo) : SourceType\l# createTypeParameter(JavaElement, String) : TypeParameter\l# convertTypeNamesToSigs(char) : String\l# acceptAnnotation(org, AnnotatableInfo, JavaElement) : IAnnotation\l# enterCompilationUnit() : \l# enterConstructor(MethodInfo) : \l# enterField(FieldInfo) : \l# enterInitializer(int, int) : \l# enterMethod(MethodInfo) : \l# createMethodInfo(MethodInfo, SourceMethod) : SourceMethodElementInfo\l# acceptMethodParameters(Argument, JavaElement, MethodInfo) : LocalVariable\l# enterType(TypeInfo) : \l# createTypeInfo(TypeInfo, SourceType) : SourceTypeElementInfo\l# isAnonymousMember() : boolean\l# acceptTypeParameter(TypeParameterInfo, JavaElementInfo) : \l# exitCompilationUnit(int) : \l# exitConstructor(int) : \l# exitField(int, int, int) : \l# exitInitializer(int) : \l# exitMethod(int, Expression) : \l# exitType(int) : \l# resolveDuplicates(SourceRefElement) : \l# getMemberValuePair(MemberValuePair) : IMemberValuePair\l# getMemberValuePairs(MemberValuePair) : IMemberValuePair\l# getChildren(Object) : IJavaElement\l# getMemberValue(org, Expression) : Object\l}"
	 ]

	 CopyElementsOperation [
		 label = "{CopyElementsOperation|- sources : Map\l|# CopyElementsOperation(IJavaElement, IJavaElement, boolean) : \l# CopyElementsOperation(IJavaElement, IJavaElement, boolean) : \l# getMainTaskName() : String\l# getNestedOperation(IJavaElement) : JavaModelOperation\l# getSourceFor(IJavaElement) : String\l# isRenamingMainType(IJavaElement, IJavaElement) : boolean\l# processElement(IJavaElement) : \l# resolveRenameAnchor(IJavaElement) : IJavaElement\l# verify() : IJavaModelStatus\l# verify(IJavaElement) : \l}"
	 ]

	 CopyPackageFragmentRootOperation [
		 label = "{CopyPackageFragmentRootOperation|# destination : IPath\l# updateResourceFlags : int\l# updateModelFlags : int\l# sibling : IClasspathEntry\l|# CopyPackageFragmentRootOperation(IPackageFragmentRoot, IPath, int, int, IClasspathEntry) : \l# executeOperation() : \l# copyResource(IPackageFragmentRoot, IClasspathEntry, IWorkspaceRoot) : \l# visit(IResourceProxy) : boolean\l# addEntryToClasspath(IClasspathEntry, IWorkspaceRoot) : \l# copy(IClasspathEntry) : IClasspathEntry\l# verify() : IJavaModelStatus\l}"
	 ]

	 CopyResourceElementsOperation [
		 label = "{CopyResourceElementsOperation|# createdElements : ArrayList\l# deltasPerProject : Map\l# parser : ASTParser\l|# CopyResourceElementsOperation(IJavaElement, IJavaElement, boolean) : \l# initializeASTParser() : \l# collectResourcesOfInterest(IPackageFragment) : IResource\l# createNeededPackageFragments(IContainer, PackageFragmentRoot, String, boolean) : boolean\l# getDeltaFor(IJavaProject) : JavaElementDelta\l# getMainTaskName() : String\l# getSchedulingRule() : ISchedulingRule\l# getSchedulingRule(IJavaElement) : ISchedulingRule\l# getResource(IJavaElement) : IResource\l# prepareDeltas(IJavaElement, IJavaElement, boolean, boolean) : \l# processCompilationUnitResource(ICompilationUnit, PackageFragment) : \l# processDeltas() : \l# processElement(IJavaElement) : \l# processElements() : \l# processPackageFragmentResource(PackageFragment, PackageFragmentRoot, String) : \l# saveContent(PackageFragment, String, TextEdit, String, IFile) : \l# updateContent(ICompilationUnit, PackageFragment, String) : TextEdit\l# updatePackageStatement(CompilationUnit, String, ASTRewrite, ICompilationUnit) : \l# updateReadOnlyPackageFragmentsForCopy(IContainer, PackageFragmentRoot, String) : \l# updateReadOnlyPackageFragmentsForMove(IContainer, PackageFragmentRoot, String, boolean) : \l# updateTypeName(ICompilationUnit, CompilationUnit, String, String, ASTRewrite) : \l# verify() : IJavaModelStatus\l# verify(IJavaElement) : \l}"
	 ]

	 CreateCompilationUnitOperation [
		 label = "{CreateCompilationUnitOperation|# name : String\l# source : String\l|# CreateCompilationUnitOperation(IPackageFragment, String, String, boolean) : \l# executeOperation() : \l# getCompilationUnit() : ICompilationUnit\l# getSchedulingRule() : ISchedulingRule\l# verify() : IJavaModelStatus\l}"
	 ]

	 CreateElementInCUOperation [
		 label = "{CreateElementInCUOperation|# cuAST : CompilationUnit\l# INSERT_LAST : int\l# INSERT_AFTER : int\l# INSERT_BEFORE : int\l# insertionPolicy : int\l# anchorElement : IJavaElement\l# creationOccurred : boolean\l# getChildPropertyDescriptor : StructuralPropertyDescriptor\l# generateElementAST : ASTNode\l# generateResultHandle : IJavaElement\l+ getMainTaskName : String\l|# CreateElementInCUOperation(IJavaElement) : \l# checkCanceled() : \l# createAfter(IJavaElement) : \l# createBefore(IJavaElement) : \l# executeOperation(ASTNode, ASTRewrite, ICompilationUnit) : \l# generateNewCompilationUnitAST(ICompilationUnit) : \l# generateResultHandles() : IJavaElement\l# getCompilationUnit() : ICompilationUnit\l# getMainAmountOfWork() : int\l# getSchedulingRule() : ISchedulingRule\l# initializeDefaultPosition() : \l# insertASTNode(ASTRewrite, ASTNode, ASTNode) : \l# parse(ICompilationUnit) : CompilationUnit\l# setAlteredName(String) : \l# setRelativePosition(IJavaElement, int) : \l# verify() : IJavaModelStatus\l}"
	 ]

	 CreateFieldOperation [
		 label = "{CreateFieldOperation||# CreateFieldOperation(IType, String, boolean) : \l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getMainTaskName() : String\l# getFragment(ASTNode) : VariableDeclarationFragment\l# initializeDefaultPosition() : \l# verifyNameCollision() : IJavaModelStatus\l# getASTNodeName() : String\l# rename(ASTNode, SimpleName) : SimpleName\l}"
	 ]

	 CreateImportOperation [
		 label = "{CreateImportOperation|# importName : String\l# flags : int\l|# CreateImportOperation(String, ICompilationUnit, int) : \l# getChildPropertyDescriptor(ASTNode) : StructuralPropertyDescriptor\l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getMainTaskName() : String\l# initializeDefaultPosition() : \l# verify() : IJavaModelStatus\l}"
	 ]

	 CreateInitializerOperation [
		 label = "{CreateInitializerOperation|# numberOfInitializers : int\l|# CreateInitializerOperation(IType, String) : \l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getMainTaskName() : String\l# rename(ASTNode, SimpleName) : SimpleName\l# initializeDefaultPosition() : \l}"
	 ]

	 CreateMethodOperation [
		 label = "{CreateMethodOperation|# parameterTypes : String\l|# CreateMethodOperation(IType, String, boolean) : \l# convertASTMethodTypesToSignatures() : String\l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getASTNodeName() : String\l# getMainTaskName() : String\l# rename(ASTNode, SimpleName) : SimpleName\l# verifyNameCollision() : IJavaModelStatus\l}"
	 ]

	 CreatePackageDeclarationOperation [
		 label = "{CreatePackageDeclarationOperation|# name : String\l|# CreatePackageDeclarationOperation(String, ICompilationUnit) : \l# getChildPropertyDescriptor(ASTNode) : StructuralPropertyDescriptor\l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getMainTaskName() : String\l# initializeDefaultPosition() : \l# verify() : IJavaModelStatus\l}"
	 ]

	 CreatePackageFragmentOperation [
		 label = "{CreatePackageFragmentOperation|# pkgName : String\l|# CreatePackageFragmentOperation(IPackageFragmentRoot, String, boolean) : \l# executeOperation() : \l# getSchedulingRule() : ISchedulingRule\l# verify() : IJavaModelStatus\l}"
	 ]

	 CreateTypeHierarchyOperation [
		 label = "{CreateTypeHierarchyOperation|# typeHierarchy : TypeHierarchy\l|# CreateTypeHierarchyOperation(IRegion, ICompilationUnit, IType, boolean) : \l# CreateTypeHierarchyOperation(IType, ICompilationUnit, IJavaSearchScope, boolean) : \l# CreateTypeHierarchyOperation(IType, ICompilationUnit, IJavaProject, boolean) : \l# executeOperation() : \l# getResult() : ITypeHierarchy\l# isReadOnly() : boolean\l# verify() : IJavaModelStatus\l}"
	 ]

	 CreateTypeMemberOperation [
		 label = "{CreateTypeMemberOperation|# source : String\l# alteredName : String\l# createdNode : ASTNode\l# rename : SimpleName\l|# CreateTypeMemberOperation(IJavaElement, String, boolean) : \l# getChildPropertyDescriptor(ASTNode) : StructuralPropertyDescriptor\l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# removeIndentAndNewLines(String, ICompilationUnit, ASTNode, SimpleName) : String\l# generateSyntaxIncorrectAST() : String\l# getType() : IType\l# setAlteredName(String) : \l# verify() : IJavaModelStatus\l# verifyNameCollision() : IJavaModelStatus\l}"
	 ]

	 CreateTypeOperation [
		 label = "{CreateTypeOperation||# CreateTypeOperation(IJavaElement, String, boolean) : \l# generateElementAST(ASTRewrite, ICompilationUnit) : ASTNode\l# generateResultHandle() : IJavaElement\l# getMainTaskName() : String\l# getType() : IType\l# verifyNameCollision() : IJavaModelStatus\l# verify() : IJavaModelStatus\l# getASTNodeName() : String\l# rename(ASTNode, SimpleName) : SimpleName\l}"
	 ]

	 DefaultWorkingCopyOwner [
		 label = "{DefaultWorkingCopyOwner|+ primaryBufferProvider : WorkingCopyOwner\l+ PRIMARY : DefaultWorkingCopyOwner\l|# DefaultWorkingCopyOwner() : \l# createBuffer(ICompilationUnit) : IBuffer\l# toString() : String\l}"
	 ]

	 DeleteElementsOperation [
		 label = "{DeleteElementsOperation|# childrenToRemove : Map\l# parser : ASTParser\l|# DeleteElementsOperation(IJavaElement, boolean) : \l# deleteElement(IJavaElement, ICompilationUnit) : \l# initASTParser() : \l# getMainTaskName() : String\l# getSchedulingRule() : ISchedulingRule\l# groupElements() : \l# processElement(IJavaElement) : \l# processElements() : \l# verify(IJavaElement) : \l}"
	 ]

	 DeletePackageFragmentRootOperation [
		 label = "{DeletePackageFragmentRootOperation|# updateResourceFlags : int\l# updateModelFlags : int\l|# DeletePackageFragmentRootOperation(IPackageFragmentRoot, int, int) : \l# executeOperation() : \l# deleteResource(IPackageFragmentRoot, IClasspathEntry) : \l# visit(IResourceProxy) : boolean\l# updateReferringProjectClasspaths(IPath, IJavaProject, Map) : \l# updateProjectClasspath(IPath, IJavaProject, Map) : \l# verify() : IJavaModelStatus\l}"
	 ]

	 DeleteResourceElementsOperation [
		 label = "{DeleteResourceElementsOperation||# DeleteResourceElementsOperation(IJavaElement, boolean) : \l# deletePackageFragment(IPackageFragment) : \l# getMainTaskName() : String\l# processElement(IJavaElement) : \l# verify(IJavaElement) : \l}"
	 ]

	 DeltaProcessingState [
		 label = "{DeltaProcessingState|+ elementChangedListeners : IElementChangedListener\l+ elementChangedListenerMasks : int\l+ elementChangedListenerCount : int\l+ preResourceChangeListeners : IResourceChangeListener\l+ preResourceChangeEventMasks : int\l+ preResourceChangeListenerCount : int\l- deltaProcessors : ThreadLocal\l+ roots : HashMap\l+ otherRoots : HashMap\l+ oldRoots : HashMap\l+ oldOtherRoots : HashMap\l+ sourceAttachments : HashMap\l+ projectDependencies : HashMap\l+ rootsAreStale : boolean\l- initializingThreads : Set\l+ externalTimeStamps : Hashtable\l- classpathChanges : HashMap\l- classpathValidations : HashMap\l- projectReferenceChanges : HashMap\l- externalFolderChanges : HashMap\l- javaProjectNamesCache : HashSet\l- externalElementsToRefresh : HashSet\l|# doNotUse() : \l# addElementChangedListener(IElementChangedListener, int) : \l# addForRefresh(IJavaElement) : \l# addPreResourceChangedListener(IResourceChangeListener, int) : \l# getDeltaProcessor() : DeltaProcessor\l# addClasspathChange(IProject, IClasspathEntry, IPath, IClasspathEntry) : ClasspathChange\l# getClasspathChange(IProject) : ClasspathChange\l# removeAllClasspathChanges() : HashMap\l# addClasspathValidation(JavaProject) : ClasspathValidation\l# addExternalFolderChange(JavaProject, IClasspathEntry) : \l# addProjectReferenceChange(JavaProject, IClasspathEntry) : \l# initializeRoots(boolean) : \l# initializeRootsWithPreviousSession() : \l# getRootInfos(boolean) : HashMap\l# removeClasspathValidations() : ClasspathValidation\l# removeExternalFolderChanges() : ExternalFolderChange\l# removeProjectReferenceChanges() : ProjectReferenceChange\l# removeExternalElementsToRefresh() : HashSet\l# removeElementChangedListener(IElementChangedListener) : \l# removePreResourceChangedListener(IResourceChangeListener) : \l# resourceChanged(IResourceChangeEvent) : \l# handleException(Throwable) : \l# run() : \l# getExternalLibTimeStamps() : Hashtable\l# findJavaProject(String) : IJavaProject\l# getOldJavaProjecNames() : HashSet\l# resetOldJavaProjectNames() : \l# getTimeStampsFile() : File\l# saveExternalLibTimeStamps() : \l# updateRoots(IPath, IResourceDelta, DeltaProcessor) : \l}"
	 ]

	 FoundRelevantDeltaException [
		 label = "{FoundRelevantDeltaException|# outputCount : int\l# paths : IPath\l# traverseModes : int\l# inclusionPatterns : char\l# exclusionPatterns : char\l# project : JavaProject\l# rootPath : IPath\l# entryKind : int\l# root : IPackageFragmentRoot\l# cache : IPackageFragmentRoot\l- IGNORE : int\l- SOURCE : int\l- BINARY : int\l- EXTERNAL_JAR_ADDED : String\l- EXTERNAL_JAR_CHANGED : String\l- EXTERNAL_JAR_REMOVED : String\l- EXTERNAL_JAR_UNCHANGED : String\l- INTERNAL_JAR_IGNORE : String\l- NON_JAVA_RESOURCE : int\l+ DEBUG : boolean\l+ VERBOSE : boolean\l+ PERF : boolean\l+ DEFAULT_CHANGE_EVENT : int\l- state : DeltaProcessingState\l# manager : JavaModelManager\l- currentDelta : JavaElementDelta\l- currentElement : Openable\l+ javaModelDeltas : ArrayList\l+ reconcileDeltas : HashMap\l- isFiring : boolean\l- modelUpdater : ModelUpdater\l+ projectCachesToReset : HashSet\l+ oldRoots : Map\l+ overridenEventType : int\l- sourceElementParserCache : SourceElementParser\l- serialVersionUID : long\l|# null() : \l# OutputsInfo(IPath, int, int) : \l# toString() : String\l# null() : \l# RootInfo(JavaProject, IPath, char, char, int) : \l# getPackageFragmentRoot() : IPackageFragmentRoot\l# getPackageFragmentRoot(IResource) : IPackageFragmentRoot\l# isRootOfProject(IPath) : boolean\l# toString() : String\l# getTimeStamp(File) : long\l# DeltaProcessor(DeltaProcessingState, JavaModelManager) : \l# addDependentProjects(IJavaProject, HashMap, HashSet) : \l# addToParentInfo(Openable) : \l# addPackageFragmentRoot(OpenableElementInfo, IPackageFragmentRoot) : \l# checkProjectsAndClasspathChanges(IResourceDelta) : \l# checkExternalFolderChange(IProject, JavaProject) : \l# checkProjectReferenceChange(IProject, JavaProject) : \l# readRawClasspath(JavaProject) : \l# checkSourceAttachmentChange(IResourceDelta, IResource) : \l# close(Openable) : \l# contentChanged(Openable) : \l# createElement(IResource, int, RootInfo) : Openable\l# checkExternalArchiveChanges(IJavaElement, IProgressMonitor) : \l# checkExternalArchiveChanges(IJavaElement, boolean, IProgressMonitor) : \l# run(IProgressMonitor) : \l# createExternalArchiveDelta(HashSet, IProgressMonitor) : boolean\l# currentDelta() : JavaElementDelta\l# deleting(IProject) : \l# elementAdded(Openable, IResourceDelta, RootInfo) : \l# elementRemoved(Openable, IResourceDelta, RootInfo) : \l# elementType(IResource, int, int, RootInfo) : int\l# flush() : \l# getSourceElementParser(Openable) : SourceElementParser\l# enclosingRootInfo(IPath, int) : RootInfo\l# externalPath(IResource) : IPath\l# fire(IJavaElementDelta, int) : \l# firePostChangeDelta(IJavaElementDelta, IElementChangedListener, int, int) : \l# fireReconcileDelta(IElementChangedListener, int, int) : \l# isAffectedBy(IResourceDelta) : boolean\l# visit(IResourceDelta) : boolean\l# isPrimaryWorkingCopy(IJavaElement, int) : boolean\l# isResFilteredFromOutput(RootInfo, OutputsInfo, IResource, int) : boolean\l# mergeDeltas(Collection) : IJavaElementDelta\l# notifyListeners(IJavaElementDelta, int, IElementChangedListener, int, int) : \l# handleException(Throwable) : \l# run() : \l# notifyTypeHierarchies(IElementChangedListener, int) : \l# handleException(Throwable) : \l# run() : \l# nonJavaResourcesChanged(Openable, IResourceDelta) : \l# oldRootInfo(IPath, JavaProject) : RootInfo\l# otherRootsInfo(IPath, int) : ArrayList\l# outputsInfo(RootInfo, IResource) : OutputsInfo\l# popUntilPrefixOf(IPath) : \l# processResourceDelta(IResourceDelta) : IJavaElementDelta\l# resetProjectCaches() : \l# registerJavaModelDelta(IJavaElementDelta) : \l# removeFromParentInfo(Openable) : \l# resourceChanged(IResourceChangeEvent) : \l# rootInfo(IPath, int) : RootInfo\l# startDeltas() : \l# stopDeltas() : \l# traverseDelta(IResourceDelta, int, RootInfo, OutputsInfo) : \l# validateClasspaths(IResourceDelta, HashSet) : \l# validateClasspaths(IResourceDelta) : boolean\l# updateCurrentDeltaAndIndex(IResourceDelta, int, RootInfo) : boolean\l# updateIndex(Openable, IResourceDelta) : \l# updateJavaModel(IJavaElementDelta) : \l# updateRootIndex(PackageFragmentRoot, String, IResourceDelta) : \l}"
	 ]

	 DiscardWorkingCopyOperation [
		 label = "{DiscardWorkingCopyOperation||# DiscardWorkingCopyOperation(IJavaElement) : \l# executeOperation() : \l# getWorkingCopy() : CompilationUnit\l# isReadOnly() : boolean\l}"
	 ]

	 DocumentAdapter [
		 label = "{DocumentAdapter|- buffer : IBuffer\l|# DocumentAdapter(IBuffer) : \l# set(String) : \l# replace(int, int, String) : \l}"
	 ]

	 ElementCache [
		 label = "{ElementCache|# spaceLimitParent : IJavaElement\l|# ElementCache(int) : \l# ElementCache(int, int) : \l# close(LRUCacheEntry) : boolean\l# ensureSpaceLimit(Object, IJavaElement) : \l# newInstance(int, int) : LRUCache\l# resetSpaceLimit(int, IJavaElement) : \l}"
	 ]

	 DirectoryNode [
		 label = "{DirectoryNode|# parent : DirectoryNode\l# path : IPath\l# children : Map\l# classFiles : Map\l# modelRoot : IPackageFragmentRoot\l# tree : DirectoryNode\l- singleton : ExternalAnnotationTracker\l|# null() : \l# DirectoryNode(DirectoryNode, IPath) : \l# getChildren() : Map\l# registerClassFile(IPath, ClassFile) : \l# unregisterClassFile(IPath) : \l# unregisterDirectory(DirectoryNode) : \l+ toString() : String\l# numClassFiles() : int\l# isEmpty() : boolean\l# ExternalAnnotationTracker() : \l# start(IWorkspace) : \l# shutdown(IWorkspace) : \l# registerClassFile(IPath, IPath, ClassFile) : \l# unregisterClassFile(IPath, IPath) : \l# getAnnotationBase(DirectoryNode, IPath, int, int) : DirectoryNode\l+ resourceChanged(IResourceChangeEvent) : \l# traverseForDirectories(DirectoryNode, IResourceDelta) : \l# traverseForClassFiles(Map, IResourceDelta, int) : \l}"
	 ]

	 ExternalFolderChange [
		 label = "{ExternalFolderChange|- project : JavaProject\l- oldResolvedClasspath : IClasspathEntry\l|# ExternalFolderChange(JavaProject, IClasspathEntry) : \l# updateExternalFoldersIfNecessary(boolean, IProgressMonitor) : \l# toString() : String\l}"
	 ]

	 RefreshJob [
		 label = "{RefreshJob|- EXTERNAL_PROJECT_NAME : String\l- LINKED_FOLDER_NAME : String\l- folders : Map\l- pendingFolders : Set\l- counter : int\l- MANAGER : ExternalFoldersManager\l# externalFolders : Vector\l|# ExternalFoldersManager() : \l# getExternalFoldersManager() : ExternalFoldersManager\l# getExternalFolders(IClasspathEntry) : HashSet\l# isExternalFolderPath(IPath) : boolean\l# isInternalPathForExternalFolder(IPath) : boolean\l# addFolder(IPath, boolean) : IFolder\l# addFolder(IPath, IProject, boolean) : IFolder\l# removePendingFolder(Object) : boolean\l# createLinkFolder(IPath, boolean, IProgressMonitor) : IFolder\l# createLinkFolder(IPath, boolean, IProject, IProgressMonitor) : IFolder\l# createPendingFolders(IProgressMonitor) : \l# cleanUp(IProgressMonitor) : \l# getFoldersToCleanUp(IProgressMonitor) : ArrayList\l# getExternalFoldersProject() : IProject\l# createExternalFoldersProject(IProgressMonitor) : IProject\l# openExternalFoldersProject(IProject, IProgressMonitor) : \l# createExternalFoldersProject(IProject, IProgressMonitor) : \l# getFolder(IPath) : IFolder\l# getFolders() : Map\l# runRefreshJob(Collection) : \l# refreshReferences(IProject, IProgressMonitor) : \l# refreshReferences(IProject, IProgressMonitor) : \l# removeFolder(IPath) : IFolder\l# null() : \l# RefreshJob(Vector) : \l# belongsTo(Object) : boolean\l# addFoldersToRefresh(Collection) : \l# run(IProgressMonitor) : IStatus\l}"
	 ]

	 ExternalJavaProject [
		 label = "{ExternalJavaProject|+ EXTERNAL_PROJECT_NAME : String\l|# ExternalJavaProject(IClasspathEntry) : \l# equals(Object) : boolean\l# exists() : boolean\l# getOption(String, boolean) : String\l# isOnClasspath(IJavaElement) : boolean\l# isOnClasspath(IResource) : boolean\l# validateExistence(IResource) : IStatus\l}"
	 ]

	 ExternalPackageFragmentRoot [
		 label = "{ExternalPackageFragmentRoot|# externalPath : IPath\l|# ExternalPackageFragmentRoot(IPath, JavaProject) : \l# ExternalPackageFragmentRoot(IResource, IPath, JavaProject) : \l# determineKind(IResource) : int\l# equals(Object) : boolean\l# getElementName() : String\l# getKind() : int\l# internalKind() : int\l# getPath() : IPath\l# getUnderlyingResource() : IResource\l# hashCode() : int\l# isExternal() : boolean\l# resource(PackageFragmentRoot) : IResource\l# resourceExists(IResource) : boolean\l# toStringAncestors(StringBuffer) : \l}"
	 ]

	 IJavaElementRequestor [
		 label = "{IJavaElementRequestor||# acceptField(IField) : \l# acceptInitializer(IInitializer) : \l# acceptMemberType(IType) : \l# acceptMethod(IMethod) : \l# acceptPackageFragment(IPackageFragment) : \l# acceptType(IType) : \l# isCanceled() : boolean\l}"
	 ]

	 ImportContainer [
		 label = "{ImportContainer||# ImportContainer(CompilationUnit) : \l# equals(Object) : boolean\l# getElementType() : int\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getImport(String) : IImportDeclaration\l# getImport(String, boolean) : IImportDeclaration\l# getPrimaryElement(boolean) : IJavaElement\l# getSourceRange() : ISourceRange\l# readableName() : String\l# toString(int, StringBuffer) : \l# toStringInfo(int, StringBuffer, Object, boolean) : \l# getNameRange() : ISourceRange\l}"
	 ]

	 ImportContainerInfo [
		 label = "{ImportContainerInfo|# children : IJavaElement\l|# getChildren() : IJavaElement\l}"
	 ]

	 ImportDeclaration [
		 label = "{ImportDeclaration|# name : String\l# isOnDemand : boolean\l|# ImportDeclaration(ImportContainer, String, boolean) : \l# equals(Object) : boolean\l# getElementName() : String\l# getNameWithoutStar() : String\l# getElementType() : int\l# getFlags() : int\l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# getNameRange() : ISourceRange\l# getPrimaryElement(boolean) : IJavaElement\l# isOnDemand() : boolean\l# readableName() : String\l# toStringInfo(int, StringBuffer, Object, boolean) : \l}"
	 ]

	 ImportDeclarationElementInfo [
		 label = "{ImportDeclarationElementInfo|# nameStart : int\l# nameEnd : int\l|# setNameSourceEnd(int) : \l# setNameSourceStart(int) : \l# getNameRange() : ISourceRange\l}"
	 ]

	 INameEnvironmentWithProgress [
		 label = "{INameEnvironmentWithProgress||# setMonitor(IProgressMonitor) : \l}"
	 ]

	 INamingRequestor [
		 label = "{INamingRequestor||# acceptNameWithPrefixAndSuffix(char, boolean, boolean, int) : \l# acceptNameWithPrefix(char, boolean, int) : \l# acceptNameWithSuffix(char, boolean, int) : \l# acceptNameWithoutPrefixAndSuffix(char, int) : \l}"
	 ]

	 Initializer [
		 label = "{Initializer||# Initializer(JavaElement, int) : \l# equals(Object) : boolean\l# getElementType() : int\l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# hashCode() : int\l# readableName() : String\l# rename(String, boolean, IProgressMonitor) : \l# getNameRange() : ISourceRange\l# getPrimaryElement(boolean) : IJavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l}"
	 ]

	 InitializerElementInfo [
		 label = "{InitializerElementInfo||}"
	 ]

	 InitializerWithChildrenInfo [
		 label = "{InitializerWithChildrenInfo|# children : IJavaElement\l|# InitializerWithChildrenInfo(IJavaElement) : \l# getChildren() : IJavaElement\l}"
	 ]

	 InternalNamingConventions [
		 label = "{InternalNamingConventions|- DEFAULT_NAME : char\l+ VK_STATIC_FIELD : int\l+ VK_INSTANCE_FIELD : int\l+ VK_STATIC_FINAL_FIELD : int\l+ VK_PARAMETER : int\l+ VK_LOCAL : int\l+ BK_SIMPLE_NAME : int\l+ BK_SIMPLE_TYPE_NAME : int\l|# getNameScanner(CompilerOptions) : Scanner\l# acceptName(char, char, char, boolean, boolean, int, INamingRequestor) : \l# computeBaseTypeNames(char, boolean, char) : char\l# computeBaseTypeNames(char, char) : char\l# computeNonBaseTypeNames(char, boolean, boolean) : char\l# excludeNames(char, char, char, char) : char\l# generateNonConstantName(char, int, boolean) : char\l# generateConstantName(char, int, boolean) : char\l# getBaseName(int, IJavaProject, char, boolean) : char\l# getBaseName(char, char, char, boolean, boolean) : char\l# removeVariablePrefixAndSuffix(int, IJavaProject, char) : char\l# removeVariablePrefixAndSuffix(char, char, char, boolean) : char\l# removePrefix(char, char) : char\l# suggestVariableNames(int, int, char, IJavaProject, int, char, char, boolean, INamingRequestor) : \l}"
	 ]

	 IPathRequestor [
		 label = "{IPathRequestor||# acceptPath(String, boolean) : \l}"
	 ]

	 JarEntryDirectory [
		 label = "{JarEntryDirectory|- children : IJarEntryResource\l|# JarEntryDirectory(String) : \l# clone(Object) : JarEntryResource\l# getChildren() : IJarEntryResource\l# getContents() : InputStream\l# isFile() : boolean\l# setChildren(IJarEntryResource) : \l# toString() : String\l}"
	 ]

	 JarEntryFile [
		 label = "{JarEntryFile|- NO_CHILDREN : IJarEntryResource\l|# JarEntryFile(String) : \l# clone(Object) : JarEntryResource\l# getContents() : InputStream\l# getChildren() : IJarEntryResource\l# isFile() : boolean\l# toString() : String\l}"
	 ]

	 JarEntryResource [
		 label = "{JarEntryResource|# parent : Object\l# simpleName : String\l+ clone : JarEntryResource\l|# JarEntryResource(String, Object) : \l# equals(Object) : boolean\l# getEntryName() : String\l# getFullPath() : IPath\l# getName() : String\l# getParent() : Object\l# getPackageFragmentRoot() : IPackageFragmentRoot\l# getZipFile() : ZipFile\l# hashCode() : int\l# isReadOnly() : boolean\l# setParent(Object) : \l}"
	 ]

	 JarPackageFragment [
		 label = "{JarPackageFragment||# JarPackageFragment(PackageFragmentRoot, String) : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# computeChildren(ArrayList) : IJavaElement\l# computeNonJavaResources(ArrayList) : Object\l# containsJavaResources() : boolean\l# createCompilationUnit(String, String, boolean, IProgressMonitor) : ICompilationUnit\l# createElementInfo() : Object\l# getClassFiles() : IClassFile\l# getCompilationUnits() : ICompilationUnit\l# getCorrespondingResource() : IResource\l# getNonJavaResources() : Object\l# internalIsValidPackageName() : boolean\l# isReadOnly() : boolean\l# storedNonJavaResources() : Object\l}"
	 ]

	 JarPackageFragmentInfo [
		 label = "{JarPackageFragmentInfo||# getNonJavaResources() : Object\l}"
	 ]

	 JarPackageFragmentRoot [
		 label = "{JarPackageFragmentRoot|- EMPTY_LIST : ArrayList\l# jarPath : IPath\l|# JarPackageFragmentRoot(IPath, JavaProject) : \l# JarPackageFragmentRoot(IResource, JavaProject) : \l# computeChildren(OpenableElementInfo, IResource) : boolean\l# createElementInfo() : Object\l# determineKind(IResource) : int\l# equals(Object) : boolean\l# getElementName() : String\l# getJar() : ZipFile\l# getKind() : int\l# internalKind() : int\l# getNonJavaResources() : Object\l# getPackageFragment(String) : PackageFragment\l# internalPath() : IPath\l# resource(PackageFragmentRoot) : IResource\l# getUnderlyingResource() : IResource\l# hashCode() : int\l# initRawPackageInfo(HashtableOfArrayToObject, String, boolean, String) : \l# isArchive() : boolean\l# isExternal() : boolean\l# isReadOnly() : boolean\l# resourceExists(IResource) : boolean\l# toStringAncestors(StringBuffer) : \l# getIndexPath() : URL\l}"
	 ]

	 JarPackageFragmentRootInfo [
		 label = "{JarPackageFragmentRootInfo|# rawPackageInfo : HashtableOfArrayToObject\l|}"
	 ]

	 JavaCorePreferenceInitializer [
		 label = "{JavaCorePreferenceInitializer||# initializeDefaultPreferences() : \l# initializeDeprecatedOptions() : \l}"
	 ]

	 JavaCorePreferenceModifyListener [
		 label = "{JavaCorePreferenceModifyListener|# PREFIX_LENGTH : int\l# javaModel : JavaModel\l|# preApply(IEclipsePreferences) : IEclipsePreferences\l# cleanJavaCore(Preferences) : \l# isJavaProjectAccessible(String) : boolean\l}"
	 ]

	 JavadocConstants [
		 label = "{JavadocConstants||# ANCHOR_PREFIX_END() : String\l# ANCHOR_PREFIX_START() : char\l# ANCHOR_PREFIX_START_LENGHT() : int\l# ANCHOR_SUFFIX() : char\l# ANCHOR_SUFFIX_LENGTH() : int\l# CONSTRUCTOR_DETAIL() : char\l# CONSTRUCTOR_SUMMARY() : char\l# FIELD_DETAIL() : char\l# FIELD_SUMMARY() : char\l# ENUM_CONSTANT_SUMMARY() : char\l# ANNOTATION_TYPE_REQUIRED_MEMBER_SUMMARY() : char\l# ANNOTATION_TYPE_OPTIONAL_MEMBER_SUMMARY() : char\l# END_OF_CLASS_DATA() : char\l# HTML_EXTENSION() : String\l# INDEX_FILE_NAME() : String\l# METHOD_DETAIL() : char\l# METHOD_SUMMARY() : char\l# NESTED_CLASS_SUMMARY() : char\l# PACKAGE_FILE_NAME() : String\l# PACKAGE_DESCRIPTION_START() : char\l# PACKAGE_DESCRIPTION_START2() : char\l# H2_PREFIX() : char\l# H2_SUFFIX() : char\l# H2_SUFFIX_LENGTH() : int\l# BOTTOM_NAVBAR() : char\l# SEPARATOR_START() : char\l# START_OF_CLASS_DATA() : char\l# START_OF_CLASS_DATA_LENGTH() : int\l# P() : String\l# DIV_CLASS_BLOCK() : String\l}"
	 ]

	 JavadocContents [
		 label = "{JavadocContents|- UNKNOWN_FORMAT : int\l- type : BinaryType\l- content : char\l- childrenStart : int\l- hasComputedChildrenSections : boolean\l- indexOfFieldDetails : int\l- indexOfConstructorDetails : int\l- indexOfMethodDetails : int\l- indexOfEndOfClassData : int\l- indexOfFieldsBottom : int\l- indexOfAllMethodsTop : int\l- indexOfAllMethodsBottom : int\l- typeDocRange : int\l- fieldDocRanges : HashtableOfObjectToIntArray\l- methodDocRanges : HashtableOfObjectToIntArray\l- fieldAnchorIndexes : int\l- fieldAnchorIndexesCount : int\l- fieldLastAnchorFoundIndex : int\l- methodAnchorIndexes : int\l- methodAnchorIndexesCount : int\l- methodLastAnchorFoundIndex : int\l- unknownFormatAnchorIndexes : int\l- unknownFormatAnchorIndexesCount : int\l- unknownFormatLastAnchorFoundIndex : int\l- tempAnchorIndexes : int\l- tempAnchorIndexesCount : int\l- tempLastAnchorFoundIndex : int\l|# JavadocContents(BinaryType, String) : \l# JavadocContents(String) : \l# getTypeDoc() : String\l# getPackageDoc() : String\l# getFieldDoc(IField) : String\l# getMethodDoc(IMethod) : String\l# computeChildRange(char, int) : int\l# computeChildRange(int, char, int) : int\l# computeChildrenSections() : \l# computeFieldRange(IField) : int\l# computeMethodRange(IMethod) : int\l# getJavadoc8Anchor(char) : char\l# computeMethodAnchorPrefixEnd(BinaryMethod) : String\l# computeTypeRange() : \l}"
	 ]

	 NoResourceSchedulingRule [
		 label = "{NoResourceSchedulingRule|- CLOSING_DOUBLE_QUOTE : byte\l- CHARSET : byte\l- CHARSET_HTML5 : byte\l- META_START : byte\l- META_END : byte\l+ JEM_ESCAPE : char\l+ JEM_JAVAPROJECT : char\l+ JEM_PACKAGEFRAGMENTROOT : char\l+ JEM_PACKAGEFRAGMENT : char\l+ JEM_FIELD : char\l+ JEM_METHOD : char\l+ JEM_INITIALIZER : char\l+ JEM_COMPILATIONUNIT : char\l+ JEM_CLASSFILE : char\l+ JEM_TYPE : char\l+ JEM_PACKAGEDECLARATION : char\l+ JEM_IMPORTDECLARATION : char\l+ JEM_COUNT : char\l+ JEM_LOCALVARIABLE : char\l+ JEM_TYPE_PARAMETER : char\l+ JEM_ANNOTATION : char\l+ JEM_LAMBDA_EXPRESSION : char\l+ JEM_LAMBDA_METHOD : char\l+ JEM_STRING : char\l+ JEM_DELIMITER_ESCAPE : char\l# parent : JavaElement\l# NO_ELEMENTS : JavaElement\l# NO_INFO : Object\l- invalidURLs : Set\l- validURLs : Set\l# closing : null\l# createElementInfo : Object\l# generateInfos : null\l+ getHandleFromMemento : IJavaElement\l# getHandleMementoDelimiter : char\l+ resource : IResource\l+ path : IPath\l|# JavaElement(JavaElement) : \l# close(Object) : \l# equals(Object) : boolean\l# appendEscapedDelimiter(StringBuffer, char) : \l# escapeMementoName(StringBuffer, String) : \l# exists() : boolean\l# findNode(CompilationUnit, Object, HashMap, IProgressMonitor) : ASTNode\l# getAncestor(int) : IJavaElement\l# getChildren() : IJavaElement\l# getChildrenOfType(int) : ArrayList\l# getClassFile() : IClassFile\l# getCompilationUnit() : ICompilationUnit\l# getElementInfo() : Object\l# getElementInfo(IProgressMonitor) : Object\l# getElementName(String, MementoTokenizer, WorkingCopyOwner) : String\l# getHandleFromMemento(MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleIdentifier() : String\l# getHandleMemento() : String\l# getHandleMemento(StringBuffer) : \l# getJavaModel() : IJavaModel\l# getJavaProject() : IJavaProject\l# getOpenable() : IOpenable\l# getOpenableParent() : IOpenable\l# getParent() : IJavaElement\l# getPrimaryElement() : IJavaElement\l# getPrimaryElement(boolean) : IJavaElement\l# getResource() : IResource\l# getSourceElementAt(int) : IJavaElement\l# getSourceMapper() : SourceMapper\l# getSchedulingRule() : ISchedulingRule\l# NoResourceSchedulingRule(IPath) : \l# contains(ISchedulingRule) : boolean\l# isConflicting(ISchedulingRule) : boolean\l# hasChildren() : boolean\l# hashCode() : int\l# isAncestorOf(IJavaElement) : boolean\l# isReadOnly() : boolean\l# newNotPresentException() : JavaModelException\l# newDoesNotExistStatus() : JavaModelStatus\l# newJavaModelException(IStatus) : JavaModelException\l# openWhenClosed(Object, boolean, IProgressMonitor) : Object\l# readableName() : String\l# resolved(Binding) : JavaElement\l# unresolved() : JavaElement\l# tabString(int) : String\l# toDebugString() : String\l# toString() : String\l# toString(int, StringBuffer) : \l# toStringWithAncestors() : String\l# toStringWithAncestors(boolean) : String\l# toStringAncestors(StringBuffer) : \l# toStringChildren(int, StringBuffer, Object) : \l# toStringInfo(int, StringBuffer) : Object\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# toStringName(StringBuffer) : \l# getJavadocBaseLocation() : URL\l# getLibraryJavadocLocation(IClasspathEntry) : URL\l# getAttachedJavadoc(IProgressMonitor) : String\l# getIndexOf(byte, byte, int, int) : int\l# isSameCharacter(byte, byte) : boolean\l# validateAndCache(URL, FileNotFoundException) : \l# getURLContents(URL, String) : String\l}"
	 ]

	 Key [
		 label = "{Key|# affectedChildren : IJavaElementDelta\l# ast : CompilationUnit\l# changedElement : IJavaElement\l# resourceDeltas : IResourceDelta\l# resourceDeltasCounter : int\l# movedFromHandle : IJavaElement\l# movedToHandle : IJavaElement\l# annotationDeltas : IJavaElementDelta\l# EMPTY_DELTA : IJavaElementDelta\l# NEED_CHILD_INDEX : int\l# childIndex : Map\l+ element : IJavaElement\l|# null() : \l# Key(IJavaElement) : \l# hashCode() : int\l# equals(Object) : boolean\l# JavaElementDelta(IJavaElement) : \l# addAffectedChild(JavaElementDelta) : \l# added(IJavaElement) : \l# added(IJavaElement, int) : \l# addNewChild(JavaElementDelta) : \l# addResourceDelta(IResourceDelta) : \l# changed(IJavaElement, int) : JavaElementDelta\l# changedAST(CompilationUnit) : \l# clearAffectedChildren() : \l# contentChanged() : \l# closed(IJavaElement) : \l# createDeltaTree(IJavaElement, JavaElementDelta) : JavaElementDelta\l# equalsAndSameParent(IJavaElement, IJavaElement) : boolean\l# find(IJavaElement) : JavaElementDelta\l# findDescendant(Key) : JavaElementDelta\l# fineGrained() : \l# getAddedChildren() : IJavaElementDelta\l# getAffectedChildren() : IJavaElementDelta\l# getAncestors(IJavaElement) : ArrayList\l# getCompilationUnitAST() : CompilationUnit\l# getAnnotationDeltas() : IJavaElementDelta\l# getChangedChildren() : IJavaElementDelta\l# getChildIndex(Key) : Integer\l# getChildrenOfType(int) : IJavaElementDelta\l# getDeltaFor(IJavaElement) : JavaElementDelta\l# getElement() : IJavaElement\l# getMovedFromElement() : IJavaElement\l# getMovedToElement() : IJavaElement\l# getRemovedChildren() : IJavaElementDelta\l# getResourceDeltas() : IResourceDelta\l# growAndAddToArray(IJavaElementDelta, IJavaElementDelta) : IJavaElementDelta\l# insertDeltaTree(IJavaElement, JavaElementDelta) : \l# movedFrom(IJavaElement, IJavaElement) : \l# movedTo(IJavaElement, IJavaElement) : \l# opened(IJavaElement) : \l# removeAffectedChild(JavaElementDelta) : \l# removeAndShrinkArray(IJavaElementDelta, int) : IJavaElementDelta\l# removed(IJavaElement) : \l# removed(IJavaElement, int) : \l# removeExistingChild(Key, int) : \l# sourceAttached(IJavaElement) : \l# sourceDetached(IJavaElement) : \l# toDebugString(int) : String\l# toDebugString(StringBuffer, int) : boolean\l# toString() : String\l}"
	 ]

	 ListItem [
		 label = "{ListItem|# javaElement : IJavaElement\l# maxDepth : int\l# infos : Map\l# annotationInfos : Map\l# oldPositions : Map\l# newPositions : Map\l+ delta : JavaElementDelta\l# added : HashSet\l# removed : HashSet\l+ previous : IJavaElement\l+ next : IJavaElement\l|# null() : \l# ListItem(IJavaElement, IJavaElement) : \l# JavaElementDeltaBuilder(IJavaElement) : \l# JavaElementDeltaBuilder(IJavaElement, int) : \l# added(IJavaElement) : \l# buildDeltas() : \l# equals(char, char) : boolean\l# findAdditions(IJavaElement, int) : \l# findChangesInPositioning(IJavaElement, int) : \l# findAnnotationChanges(IAnnotation, IAnnotation, IJavaElement) : \l# findContentChange(JavaElementInfo, JavaElementInfo, IJavaElement) : \l# findDeletions() : \l# getElementInfo(IJavaElement) : JavaElementInfo\l# getNewPosition(IJavaElement) : ListItem\l# getOldPosition(IJavaElement) : ListItem\l# initialize() : \l# insertPositions(IJavaElement, boolean) : \l# isPositionedCorrectly(IJavaElement) : boolean\l# recordElementInfo(IJavaElement, JavaModel, int) : \l# recordNewPositions(IJavaElement, int) : \l# removed(IJavaElement) : \l# removeElementInfo(IJavaElement) : \l# toString() : String\l# trimDelta(JavaElementDelta) : \l}"
	 ]

	 JavaElementInfo [
		 label = "{JavaElementInfo|# NO_NON_JAVA_RESOURCES : Object\l|# clone() : Object\l# getChildren() : IJavaElement\l}"
	 ]

	 JavaElementRequestor [
		 label = "{JavaElementRequestor|# canceled : boolean\l# fields : ArrayList\l# initializers : ArrayList\l# memberTypes : ArrayList\l# methods : ArrayList\l# packageFragments : ArrayList\l# types : ArrayList\l# EMPTY_FIELD_ARRAY : IField\l# EMPTY_INITIALIZER_ARRAY : IInitializer\l# EMPTY_TYPE_ARRAY : IType\l# EMPTY_PACKAGE_FRAGMENT_ARRAY : IPackageFragment\l# EMPTY_METHOD_ARRAY : IMethod\l|# acceptField(IField) : \l# acceptInitializer(IInitializer) : \l# acceptMemberType(IType) : \l# acceptMethod(IMethod) : \l# acceptPackageFragment(IPackageFragment) : \l# acceptType(IType) : \l# getFields() : IField\l# getInitializers() : IInitializer\l# getMemberTypes() : IType\l# getMethods() : IMethod\l# getPackageFragments() : IPackageFragment\l# getTypes() : IType\l# isCanceled() : boolean\l# reset() : \l# setCanceled(boolean) : \l}"
	 ]

	 JavaModel [
		 label = "{JavaModel||# JavaModel() : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# contains(IResource) : boolean\l# copy(IJavaElement, IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# createElementInfo() : Object\l# delete(IJavaElement, boolean, IProgressMonitor) : \l# equals(Object) : boolean\l# getElementType() : int\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# getJavaProject(String) : IJavaProject\l# getJavaProject(IResource) : IJavaProject\l# getJavaProjects() : IJavaProject\l# getNonJavaResources() : Object\l# getPath() : IPath\l# resource(PackageFragmentRoot) : IResource\l# getUnderlyingResource() : IResource\l# getWorkspace() : IWorkspace\l# move(IJavaElement, IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# refreshExternalArchives(IJavaElement, IProgressMonitor) : \l# rename(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# runOperation(MultiOperation, IJavaElement, IJavaElement, String, IProgressMonitor) : \l# toStringInfo(int, StringBuffer, Object, boolean) : \l# getTarget(IPath, boolean) : Object\l# getWorkspaceTarget(IPath) : IResource\l# getExternalTarget(IPath, boolean) : Object\l# isFile(Object) : boolean\l# isExternalFile(IPath) : boolean\l# getFile(Object) : File\l# validateExistence(IResource) : IStatus\l}"
	 ]

	 JavaModelCache [
		 label = "{JavaModelCache|+ VERBOSE : boolean\l+ DEFAULT_PROJECT_SIZE : int\l+ DEFAULT_ROOT_SIZE : int\l+ DEFAULT_PKG_SIZE : int\l+ DEFAULT_OPENABLE_SIZE : int\l+ DEFAULT_CHILDREN_SIZE : int\l+ RATIO_PROPERTY : String\l+ JAR_TYPE_RATIO_PROPERTY : String\l+ NON_EXISTING_JAR_TYPE_INFO : Object\l# memoryRatio : double\l# modelInfo : Object\l# projectCache : HashMap\l# rootCache : ElementCache\l# pkgCache : ElementCache\l# openableCache : ElementCache\l# childrenCache : Map\l# jarTypeCache : LRUCache\l|# JavaModelCache() : \l# getOpenableRatio() : double\l# getJarTypeRatio() : double\l# getRatioForProperty(String) : double\l# getInfo(IJavaElement) : Object\l# getExistingElement(IJavaElement) : IJavaElement\l# getMemoryRatio() : double\l# peekAtInfo(IJavaElement) : Object\l# putInfo(IJavaElement, Object) : \l# removeInfo(JavaElement) : \l# resetJarTypeCache() : \l# removeFromJarTypeCache(BinaryType) : \l# toString() : String\l# toStringFillingRation(String) : String\l}"
	 ]

	 JavaModelInfo [
		 label = "{JavaModelInfo|# nonJavaResources : Object\l|# computeNonJavaResources() : Object\l# getNonJavaResources() : Object\l}"
	 ]

	 IPostAction [
		 label = "{IPostAction|# APPEND : int\l# REMOVEALL_APPEND : int\l# KEEP_EXISTING : int\l# POST_ACTION_VERBOSE : boolean\l# actions : IPostAction\l# actionsStart : int\l# actionsEnd : int\l# attributes : HashMap\l+ HAS_MODIFIED_RESOURCE_ATTR : String\l+ TRUE : String\l# elementsToProcess : IJavaElement\l# parentElements : IJavaElement\l# NO_ELEMENTS : IJavaElement\l# resultElements : IJavaElement\l+ progressMonitor : SubMonitor\l# isNested : boolean\l# force : boolean\l# OPERATION_STACKS : ThreadLocal\l# executeOperation : null\l|# null() : \l# getID() : String\l# run() : \l# JavaModelOperation() : \l# JavaModelOperation(IJavaElement) : \l# JavaModelOperation(IJavaElement, IJavaElement) : \l# JavaModelOperation(IJavaElement, IJavaElement, boolean) : \l# JavaModelOperation(IJavaElement, boolean) : \l# JavaModelOperation(IJavaElement) : \l# addAction(IPostAction) : \l# addDelta(IJavaElementDelta) : \l# addReconcileDelta(ICompilationUnit, IJavaElementDelta) : \l# removeReconcileDelta(ICompilationUnit) : \l# applyTextEdit(ICompilationUnit, TextEdit) : \l# beginTask(String, int) : \l# canModifyRoots() : boolean\l# checkCanceled() : \l# commonVerify() : IJavaModelStatus\l# copyResources(IResource, IPath) : \l# createFile(IContainer, String, InputStream, boolean) : \l# createFolder(IContainer, String, boolean) : \l# deleteEmptyPackageFragment(IPackageFragment, boolean, IResource) : \l# deleteResource(IResource, int) : \l# deleteResources(IResource, boolean) : \l# done() : \l# equalsOneOf(IPath, IPath) : boolean\l# executeNestedOperation(JavaModelOperation, int) : \l# getAttribute(Object) : Object\l# getCompilationUnitFor(IJavaElement) : ICompilationUnit\l# getCurrentOperationStack() : ArrayList\l# getDocument(ICompilationUnit) : IDocument\l# getElementToProcess() : IJavaElement\l# getJavaModel() : IJavaModel\l# getNestedFolders(IPackageFragmentRoot) : IPath\l# getParentElement() : IJavaElement\l# getParentElements() : IJavaElement\l# getResultElements() : IJavaElement\l# getSchedulingRule() : ISchedulingRule\l# getSubProgressMonitor(int) : IProgressMonitor\l# hasModifiedResource() : boolean\l# internalWorked(double) : \l# isCanceled() : boolean\l# isReadOnly() : boolean\l# isTopLevelOperation() : boolean\l# firstActionWithID(String, int) : int\l# moveResources(IResource, IPath) : \l# newJavaElementDelta() : JavaElementDelta\l# popOperation() : JavaModelOperation\l# postAction(IPostAction, int) : \l# prefixesOneOf(IPath, IPath) : boolean\l# pushOperation(JavaModelOperation) : \l# removeAllPostAction(String) : \l# run(IProgressMonitor) : \l# runOperation(IProgressMonitor) : \l# runPostActions() : \l# setAttribute(Object, Object) : \l# setCanceled(boolean) : \l# setNested(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# verify() : IJavaModelStatus\l# worked(int) : \l}"
	 ]

	 JavaModelStatus [
		 label = "{JavaModelStatus|# elements : IJavaElement\l# path : IPath\l# string : String\l# NO_CHILDREN : IStatus\l# children : IStatus\l+ VERIFIED_OK : IJavaModelStatus\l|# JavaModelStatus() : \l# JavaModelStatus(int) : \l# JavaModelStatus(int, IJavaElement) : \l# JavaModelStatus(int, String) : \l# JavaModelStatus(int, int, String) : \l# JavaModelStatus(int, Throwable) : \l# JavaModelStatus(int, IPath) : \l# JavaModelStatus(int, IJavaElement) : \l# JavaModelStatus(int, IJavaElement, String) : \l# JavaModelStatus(int, IJavaElement, IPath) : \l# JavaModelStatus(int, IJavaElement, IPath, String) : \l# JavaModelStatus(int, int, IJavaElement, IPath, String) : \l# JavaModelStatus(CoreException) : \l# getBits() : int\l# getChildren() : IStatus\l# getElements() : IJavaElement\l# getMessage() : String\l# getPath() : IPath\l# getSeverity() : int\l# getString() : String\l# isDoesNotExist() : boolean\l# isMultiStatus() : boolean\l# isOK() : boolean\l# matches(int) : boolean\l# matches(JavaModelStatus, int) : boolean\l# newMultiStatus(IJavaModelStatus) : IJavaModelStatus\l# toString() : String\l}"
	 ]

	 ResolvedClasspath [
		 label = "{ResolvedClasspath|+ CLASSPATH_FILENAME : String\l+ INVALID_CLASSPATH : IClasspathEntry\l# IS_CASE_SENSITIVE : boolean\l# NO_PREREQUISITES : String\l- PREF_FILENAME : String\l+ DEFAULT_PREFERENCES_DIRNAME : String\l+ JAVA_CORE_PREFS_FILE : String\l- RESOLUTION_IN_PROGRESS : IClasspathEntry\l- CP_RESOLUTION_BP_LISTENERS : ArrayList\l# project : IProject\l- preferencesNodeListener : IEclipsePreferences\l- preferencesChangeListener : IEclipsePreferences\l# resolvedClasspath : IClasspathEntry\l# unresolvedEntryStatus : IJavaModelStatus\l# rawReverseMap : HashMap\l# rootPathToResolvedEntries : Map\l# referencedEntries : IClasspathEntry\l|# null() : \l# breakpoint(int) : \l# JavaProject() : \l# JavaProject(IProject, JavaElement) : \l# addCPResolutionBPListener(ClasspathResolutionBreakpointListener) : \l# removeCPResolutionBPListener(ClasspathResolutionBreakpointListener) : \l# getBPListeners() : ClasspathResolutionBreakpointListener\l# breakpoint(int, JavaProject) : \l# areClasspathsEqual(IClasspathEntry, IClasspathEntry, IPath, IPath) : boolean\l# areClasspathsEqual(IClasspathEntry, IPath, IClasspathEntry) : boolean\l# areClasspathsEqual(IClasspathEntry, IClasspathEntry) : boolean\l# canonicalizedPath(IPath) : IPath\l# hasJavaNature(IProject) : boolean\l# validateCycles(Map) : \l# addToBuildSpec(String) : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# close() : \l# computeExpandedClasspath(ClasspathEntry, HashSet, ObjectVector) : \l# computePackageFragmentRoots(IClasspathEntry) : IPackageFragmentRoot\l# computePackageFragmentRoots(IClasspathEntry, ObjectVector, HashSet, IClasspathEntry, boolean, Map) : \l# computePackageFragmentRoots(IClasspathEntry, boolean, Map) : IPackageFragmentRoot\l# computePackageFragmentRoots(IClasspathEntry, ObjectVector, HashSet, IClasspathEntry, boolean, Map) : \l# computeSharedPropertyFileName(QualifiedName) : String\l# configure() : \l# contains(IResource) : boolean\l# createClasspathProblemMarker(IJavaModelStatus) : \l# createElementInfo() : Object\l# decodeClasspath(String, Map) : IClasspathEntry\l# decodeClasspathEntry(String) : IClasspathEntry\l# deconfigure() : \l# defaultClasspath() : IClasspathEntry\l# defaultOutputLocation() : IPath\l# encodeClasspath(IClasspathEntry, IClasspathEntry, IPath, boolean, Map) : String\l# encodeClasspathEntry(IClasspathEntry) : String\l# equals(Object) : boolean\l# findElement(IPath) : IJavaElement\l# findElement(IPath, WorkingCopyOwner) : IJavaElement\l# findPackageFragment(String) : IJavaElement\l# findElement(String, WorkingCopyOwner) : IJavaElement\l# findPackageFragment(IPath) : IPackageFragment\l# findPackageFragment0(IPath) : IPackageFragment\l# findPackageFragmentRoot(IPath) : IPackageFragmentRoot\l# findPackageFragmentRoot0(IPath) : IPackageFragmentRoot\l# findPackageFragmentRoots(IClasspathEntry) : IPackageFragmentRoot\l# findType(String) : IType\l# findType(String, IProgressMonitor) : IType\l# findType(String, NameLookup, boolean, IProgressMonitor) : IType\l# findType(String, String) : IType\l# findType(String, String, IProgressMonitor) : IType\l# findType(String, String, NameLookup, boolean, IProgressMonitor) : IType\l# findType(String, String, WorkingCopyOwner) : IType\l# findType(String, String, WorkingCopyOwner, IProgressMonitor) : IType\l# findType(String, WorkingCopyOwner) : IType\l# findType(String, WorkingCopyOwner, IProgressMonitor) : IType\l# flushClasspathProblemMarkers(boolean, boolean, boolean) : \l# getAccessRestrictions(String) : IPath\l# getAllPackageFragmentRoots() : IPackageFragmentRoot\l# getAllPackageFragmentRoots(Map) : IPackageFragmentRoot\l# getClasspathEntryFor(IPath) : IClasspathEntry\l# getCycleMarker() : IMarker\l# getEclipsePreferences() : IEclipsePreferences\l# added(IEclipsePreferences) : \l# removed(IEclipsePreferences) : \l# preferenceChange(IEclipsePreferences) : \l# getElementName() : String\l# getElementType() : int\l# getExpandedClasspath() : IClasspathEntry\l# getFolderPackageFragmentRoot(IPath) : IPackageFragmentRoot\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getJavaCommandIndex(ICommand) : int\l# getJavaProjectElementInfo() : JavaProjectElementInfo\l# getNonJavaResources() : Object\l# getOption(String, boolean) : String\l# getOptions(boolean) : Map\l# getOutputLocation() : IPath\l# getPackageFragmentRoot(IPath) : IPackageFragmentRoot\l# getPackageFragmentRoot(IResource) : IPackageFragmentRoot\l# getPackageFragmentRoot(IResource, IPath) : IPackageFragmentRoot\l# getPackageFragmentRoot(String) : IPackageFragmentRoot\l# getPackageFragmentRoot0(IPath) : IPackageFragmentRoot\l# getPackageFragmentRoots() : IPackageFragmentRoot\l# getPackageFragmentRoots(IClasspathEntry) : IPackageFragmentRoot\l# getPackageFragments() : IPackageFragment\l# getPackageFragmentsInRoots(IPackageFragmentRoot) : IPackageFragment\l# getPath() : IPath\l# getPerProjectInfo() : JavaModelManager\l# getPluginWorkingLocation() : IPath\l# getProject() : IProject\l# getProjectCache() : ProjectCache\l# getRawClasspath() : IClasspathEntry\l# getReferencedClasspathEntries() : IClasspathEntry\l# getRequiredProjectNames() : String\l# getResolvedClasspath() : IClasspathEntry\l# getResolvedClasspath(boolean) : IClasspathEntry\l# verbose_reentering_classpath_resolution() : \l# resource(PackageFragmentRoot) : IResource\l# getSharedProperty(String) : String\l# getSourceMapper() : SourceMapper\l# getUnderlyingResource() : IResource\l# hasBuildState() : boolean\l# hasClasspathCycle(IClasspathEntry) : boolean\l# hasCycleMarker() : boolean\l# hashCode() : int\l# hasUTF8BOM(byte) : boolean\l# hasSource() : boolean\l# isOnClasspath(IJavaElement) : boolean\l# isOnClasspath(IResource) : boolean\l# isOnClasspathEntry(IPath, boolean, boolean, IClasspathEntry) : boolean\l# loadPreferences() : IEclipsePreferences\l# newEvaluationContext() : IEvaluationContext\l# newNameLookup(ICompilationUnit) : NameLookup\l# newNameLookup(WorkingCopyOwner) : NameLookup\l# newSearchableNameEnvironment(ICompilationUnit) : SearchableEnvironment\l# newSearchableNameEnvironment(WorkingCopyOwner) : SearchableEnvironment\l# newTemporaryInfo() : PerProjectInfo\l# addClasspathChange() : ClasspathChange\l# newTypeHierarchy(IRegion, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IRegion, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IType, IRegion, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IType, IRegion, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# projectPrerequisites(IClasspathEntry) : String\l# readFileEntriesWithException(Map) : IClasspathEntry\l# readFileEntries(Map) : IClasspathEntry\l# readOutputLocation() : IPath\l# readRawClasspath() : IClasspathEntry\l# removeFromBuildSpec(String) : \l# resetCaches() : \l# resetResolvedClasspath() : ClasspathChange\l# resolveClasspath(IClasspathEntry) : IClasspathEntry\l# null() : \l# resolveClasspath(IClasspathEntry, boolean, boolean) : ResolvedClasspath\l# resolveClasspath(IClasspathEntry, IClasspathEntry, boolean, boolean) : ResolvedClasspath\l# addToResult(IClasspathEntry, IClasspathEntry, ResolvedClasspath, LinkedHashSet, ExternalFoldersManager, Map, boolean, Map) : \l# copyFromOldChainedEntry(ClasspathEntry, ClasspathEntry) : \l# driveExists(IPath, Map) : boolean\l# resolveClasspath(PerProjectInfo, boolean, boolean) : \l# rootID() : String\l# writeFileEntries(IClasspathEntry, IClasspathEntry, IPath) : boolean\l# writeFileEntries(IClasspathEntry, IPath) : boolean\l# setJavaCommand(IProjectDescription, ICommand) : \l# setOption(String, String) : \l# setOptions(Map) : \l# setOutputLocation(IPath, IProgressMonitor) : \l# setProject(IProject) : \l# setRawClasspath(IClasspathEntry, boolean, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IPath, boolean, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IPath, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IClasspathEntry, IPath, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IClasspathEntry, IPath, boolean, IProgressMonitor) : \l# setRawClasspath(IClasspathEntry, IProgressMonitor) : \l# setSharedProperty(String, String) : \l# updateCycleParticipants(ArrayList, LinkedHashSet, IWorkspaceRoot, HashSet, Map) : \l# updatePreferences(IEclipsePreferences) : \l# validateExistence(IResource) : IStatus\l}"
	 ]

	 ProjectCache [
		 label = "{ProjectCache|# NO_ROOTS : IPackageFragmentRoot\l+ allPkgFragmentRootsCache : IPackageFragmentRoot\l+ allPkgFragmentsCache : HashtableOfArrayToObject\l+ pkgFragmentsCaches : Map\l+ rootToResolvedEntries : Map\l- nonJavaResources : Object\l# projectCache : ProjectCache\l|# null() : \l# ProjectCache(IPackageFragmentRoot, Map, Map) : \l# addSuperPackageNames(String, HashtableOfArrayToObject) : \l# JavaProjectElementInfo() : \l# computeNonJavaResources(JavaProject) : Object\l# getProjectCache(JavaProject) : ProjectCache\l# getNonJavaResources(JavaProject) : Object\l# initializePackageNames(IPackageFragmentRoot, HashSetOfArray) : \l# isClasspathEntryOrOutputLocation(IPath, IPath, IClasspathEntry, IPath) : boolean\l# newNameLookup(JavaProject, ICompilationUnit) : NameLookup\l# resetCaches() : \l# setNonJavaResources(Object) : \l}"
	 ]

	 LambdaExpression [
		 label = "{LambdaExpression|# elementInfo : SourceTypeElementInfo\l# lambdaMethod : LambdaMethod\l# sourceStart : int\l# sourceEnd : int\l# arrowPosition : int\l# interphase : String\l|# LambdaExpression(JavaElement, org) : \l# findLambdaSuperType(org) : TypeBinding\l+ substitute(TypeVariableBinding) : TypeBinding\l+ isRawSubstitution() : boolean\l+ environment() : LookupEnvironment\l# LambdaExpression(JavaElement, String, int, int, int) : \l# LambdaExpression(JavaElement, String, int, int, int, LambdaMethod) : \l# makeTypeElementInfo(LambdaExpression, String, int, int, int) : SourceTypeElementInfo\l# closing(Object) : \l# equals(Object) : boolean\l# hashCode() : int\l# getElementInfo(IProgressMonitor) : Object\l# getHandleMementoDelimiter() : char\l# getHandleMemento(StringBuffer) : \l# getHandleMemento(StringBuffer, boolean, boolean) : \l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getChildren() : IJavaElement\l# isLocal() : boolean\l# resolved(Binding) : JavaElement\l# getMethod() : IMethod\l+ isLambda() : boolean\l+ isAnonymous() : boolean\l# toStringName(StringBuffer) : \l+ getPrimaryElement(boolean) : IJavaElement\l# getSuperInterfaceTypeSignatures() : String\l}"
	 ]

	 LambdaFactory [
		 label = "{LambdaFactory||# createLambdaExpression(JavaElement, org) : LambdaExpression\l# createLambdaExpression(JavaElement, String, int, int, int) : LambdaExpression\l# createLambdaMethod(JavaElement, org) : LambdaMethod\l# createLambdaMethod(JavaElement, String, String, int, int, int, String, String, String) : LambdaMethod\l# getTypeSignature(JavaModelManager, TypeBinding) : String\l# isBinaryMember(JavaElement) : boolean\l}"
	 ]

	 LambdaMethod [
		 label = "{LambdaMethod|- sourceStart : int\l- parameterNameStrings : String\l- returnTypeString : String\l# elementInfo : SourceMethodElementInfo\l- key : String\l|# LambdaMethod(JavaElement, String, String, int, String, String, String, SourceMethodElementInfo) : \l# getReturnType() : String\l# getSignature() : String\l# isLambdaMethod() : boolean\l# closing(Object) : \l# equals(Object) : boolean\l# getElementInfo(IProgressMonitor) : Object\l# getHandleMemento(StringBuffer, boolean) : \l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# getKey() : String\l# hashCode() : int\l# isResolved() : boolean\l# resolved(Binding) : JavaElement\l}"
	 ]

	 LocalVarAnnotation [
		 label = "{LocalVarAnnotation|+ NO_LOCAL_VARIABLES : ILocalVariable\l# name : String\l+ declarationSourceStart : int\l+ nameStart : int\l# typeSignature : String\l+ annotations : IAnnotation\l- flags : int\l- isParameter : boolean\l+ annotationsOnDimensions : IAnnotation\l# memberValuePairs : IMemberValuePair\l|# LocalVariable(JavaElement, String, int, int, int, int, String, org, int, boolean) : \l# LocalVariable(JavaElement, String, int, int, int, int, String, org, int, boolean, org) : \l# closing(Object) : \l# createElementInfo() : Object\l# equals(Object) : boolean\l# exists() : boolean\l# generateInfos(Object, HashMap, IProgressMonitor) : \l# getAnnotation(String) : IAnnotation\l# getAnnotations() : IAnnotation\l# getAnnotations(org) : IAnnotation\l# getAnnotation(org, JavaElement) : IAnnotation\l# LocalVarAnnotation(JavaElement, String) : \l# getMemberValuePairs() : IMemberValuePair\l# getNameRange() : ISourceRange\l# getSourceRange() : ISourceRange\l# exists() : boolean\l# getAnnotationMemberValue(MemberValuePair, Expression, JavaElement) : Object\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMemento(StringBuffer) : \l# getHandleMemento(StringBuffer, boolean) : \l# getHandleMementoDelimiter() : char\l# getCorrespondingResource() : IResource\l# getDeclaringMember() : IMember\l# getElementName() : String\l# getElementType() : int\l# getFlags() : int\l# getClassFile() : IClassFile\l# getNameRange() : ISourceRange\l# getPath() : IPath\l# resource() : IResource\l# getSource() : String\l# getSourceRange() : ISourceRange\l# getTypeRoot() : ITypeRoot\l# getTypeSignature() : String\l# getUnderlyingResource() : IResource\l# hashCode() : int\l# isParameter() : boolean\l# isStructureKnown() : boolean\l# getKey(boolean) : String\l# toStringInfo(int, StringBuffer, Object, boolean) : \l}"
	 ]

	 LRUEnumeratorElement [
		 label = "{LRUEnumeratorElement|# elementQueue : LRUEnumeratorElement\l+ value : Object\l+ next : LRUEnumeratorElement\l|# null() : \l# LRUEnumeratorElement(Object) : \l# LRUCacheEnumerator(LRUEnumeratorElement) : \l# hasMoreElements() : boolean\l# nextElement() : Object\l}"
	 ]

	 Member [
		 label = "{Member||# Member(JavaElement) : \l# areSimilarMethods(String, String, String, String, String) : boolean\l# convertConstant(Constant) : Object\l# findMethods(IMethod, IMethod) : IMethod\l# getCategories() : String\l# getClassFile() : IClassFile\l# getDeclaringType() : IType\l# getFlags() : int\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getOuterMostLocalContext() : Member\l# getJavadocRange() : ISourceRange\l# getNameRange() : ISourceRange\l# getType(String, int) : IType\l# getTypeRoot() : ITypeRoot\l# isBinary() : boolean\l# isMainMethod(IMethod) : boolean\l# isReadOnly() : boolean\l# readableName() : String\l}"
	 ]

	 MemberElementInfo [
		 label = "{MemberElementInfo|# flags : int\l|# getNameSourceEnd() : int\l# getNameSourceStart() : int\l# getModifiers() : int\l# setFlags(int) : \l}"
	 ]

	 MemberValuePair [
		 label = "{MemberValuePair|# memberName : String\l+ value : Object\l+ valueKind : int\l|# MemberValuePair(String) : \l# MemberValuePair(String, Object, int) : \l# equals(Object) : boolean\l# getMemberName() : String\l# getValue() : Object\l# getValueKind() : int\l# hashCode() : int\l}"
	 ]

	 ModelUpdater [
		 label = "{ModelUpdater|# projectsToUpdate : HashSet\l|# addToParentInfo(Openable) : \l# close(Openable) : \l# elementAdded(Openable) : \l# elementChanged(Openable) : \l# elementRemoved(Openable) : \l# processJavaDelta(IJavaElementDelta) : \l# removeFromParentInfo(Openable) : \l# traverseDelta(IJavaElementDelta, IPackageFragmentRoot, IJavaProject) : \l}"
	 ]

	 MoveElementsOperation [
		 label = "{MoveElementsOperation||# MoveElementsOperation(IJavaElement, IJavaElement, boolean) : \l# getMainTaskName() : String\l# isMove() : boolean\l}"
	 ]

	 MovePackageFragmentRootOperation [
		 label = "{MovePackageFragmentRootOperation||# renameEntryInClasspath(IPath, IJavaProject) : \l# renamePatterns(IPath, IPath) : IPath\l# MovePackageFragmentRootOperation(IPackageFragmentRoot, IPath, int, int, IClasspathEntry) : \l# executeOperation() : \l# moveResource(IPackageFragmentRoot, IClasspathEntry, IWorkspaceRoot) : \l# visit(IResourceProxy) : boolean\l# updateReferringProjectClasspaths(IPath, IJavaProject) : \l# removeEntryFromClasspath(IPath, IJavaProject) : \l}"
	 ]

	 MoveResourceElementsOperation [
		 label = "{MoveResourceElementsOperation||# MoveResourceElementsOperation(IJavaElement, IJavaElement, boolean) : \l# getMainTaskName() : String\l# isMove() : boolean\l}"
	 ]

	 MultiOperation [
		 label = "{MultiOperation|# insertBeforeElements : Map\l# newParents : Map\l# renamings : Map\l# renamingsList : String\l# getMainTaskName : String\l# processElement : null\l# verify : null\l|# MultiOperation(IJavaElement, boolean) : \l# MultiOperation(IJavaElement, IJavaElement, boolean) : \l# error(int, IJavaElement) : \l# executeOperation() : \l# getDestinationParent(IJavaElement) : IJavaElement\l# getNewNameFor(IJavaElement) : String\l# initializeRenamings() : \l# isMove() : boolean\l# isRename(IJavaElement) : boolean\l# processElements() : \l# setInsertBefore(IJavaElement, IJavaElement) : \l# setRenamings(String, IJavaElement) : \l# verifyDestination(IJavaElement, IJavaElement) : \l# verifyRenaming(IJavaElement) : \l# verifySibling(IJavaElement, IJavaElement) : \l}"
	 ]

	 TypeResolveRequestor [
		 label = "{TypeResolveRequestor|# name : String\l# answers : String\l|# NamedMember(JavaElement, String) : \l# appendTypeParameters(StringBuffer) : \l# getElementName() : String\l# getKey(IField, boolean) : String\l# getKey(IMethod, boolean) : String\l# getKey(IType, boolean) : String\l# getFullyQualifiedParameterizedName(String, String) : String\l# getPackageFragment() : IPackageFragment\l# getFullyQualifiedName(char, boolean) : String\l# getTypeQualifiedName(char, boolean) : String\l# getOccurrenceCountSignature() : String\l# getTypeParameters() : ITypeParameter\l# resolveType(String) : String\l# resolveType(String, WorkingCopyOwner) : String\l# acceptType(char, char, int, boolean, char, int, int) : \l# acceptError(CategorizedProblem) : \l# acceptField(char, char, char, boolean, char, int, int) : \l# acceptMethod(char, char, String, char, char, char, String, char, char, boolean, boolean, char, int, int) : \l# acceptPackage(char) : \l# acceptTypeParameter(char, char, char, boolean, int, int) : \l# acceptMethodTypeParameter(char, char, char, int, int, char, boolean, int, int) : \l}"
	 ]

	 Answer [
		 label = "{Answer|+ type : IType\l# restriction : AccessRestriction\l+ ACCEPT_CLASSES : int\l+ ACCEPT_INTERFACES : int\l+ ACCEPT_ENUMS : int\l+ ACCEPT_ANNOTATIONS : int\l+ ACCEPT_ALL : int\l+ VERBOSE : boolean\l- NO_TYPES : IType\l# packageFragmentRoots : IPackageFragmentRoot\l# packageFragments : HashtableOfArrayToObject\l# rootToResolvedEntries : Map\l# typesInWorkingCopies : HashMap\l+ timeSpentInSeekTypesInSourcePackage : long\l+ timeSpentInSeekTypesInBinaryPackage : long\l|# null() : \l# Answer(IType, AccessRestriction) : \l# ignoreIfBetter() : boolean\l# isBetter(Answer) : boolean\l# NameLookup(IPackageFragmentRoot, HashtableOfArrayToObject, ICompilationUnit, Map) : \l# acceptType(IType, int, boolean) : boolean\l# findAllTypes(String, boolean, int, IJavaElementRequestor) : \l# findCompilationUnit(String) : ICompilationUnit\l# findCompilationUnit(String, String, PackageFragmentRoot) : ICompilationUnit\l# findPackageFragment(IPath) : IPackageFragment\l# findPackageFragments(String, boolean) : IPackageFragment\l# findPackageFragments(String, boolean, boolean) : IPackageFragment\l# findSecondaryType(String, String, IJavaProject, boolean, IProgressMonitor) : IType\l# findType(String, String, boolean, int, boolean) : Answer\l# findType(String, String, boolean, int, boolean, boolean, boolean, IProgressMonitor) : Answer\l# getViolatedRestriction(String, String, IType, AccessRestriction) : AccessRestriction\l# findType(String, IPackageFragment, boolean, int, boolean, boolean) : IType\l# findType(String, IPackageFragment, boolean, int) : IType\l# findType(String, boolean, int) : IType\l# findType(String, boolean, int, boolean) : Answer\l# findType(String, boolean, int, boolean, boolean, boolean, IProgressMonitor) : Answer\l# getMemberType(IType, String, int) : IType\l# isPackage(String) : boolean\l# nameMatches(String, IJavaElement, boolean) : boolean\l# nameMatches(String, ICompilationUnit, boolean) : boolean\l# seekPackageFragments(String, boolean, IJavaElementRequestor) : \l# seekTypes(String, IPackageFragment, boolean, int, IJavaElementRequestor) : \l# seekTypes(String, IPackageFragment, boolean, int, IJavaElementRequestor, boolean) : \l# seekTypesInBinaryPackage(String, IPackageFragment, boolean, int, IJavaElementRequestor) : \l# seekTypesInSourcePackage(String, IPackageFragment, int, boolean, String, int, IJavaElementRequestor) : \l# isPrimaryType(String, IType, boolean) : boolean\l# seekTypesInType(String, int, IType, IJavaElementRequestor, int) : boolean\l# seekTypesInTopLevelType(String, int, IType, IJavaElementRequestor, int) : boolean\l# seekTypesInWorkingCopies(String, IPackageFragment, int, boolean, String, int, IJavaElementRequestor, boolean) : boolean\l}"
	 ]

	 NonJavaResource [
		 label = "{NonJavaResource|- NO_CHILDREN : IJarEntryResource\l# parent : Object\l# resource : IResource\l|# NonJavaResource(Object, IResource) : \l# equals(Object) : boolean\l# getChildren() : IJarEntryResource\l# getContents() : InputStream\l# getEntryName() : String\l# getFullPath() : IPath\l# getName() : String\l# getPackageFragmentRoot() : IPackageFragmentRoot\l# getParent() : Object\l# hashCode() : int\l# isFile() : boolean\l# isReadOnly() : boolean\l# toString() : String\l}"
	 ]

	 NullBuffer [
		 label = "{NullBuffer||# NullBuffer(IFile, IOpenable, boolean) : \l}"
	 ]

	 Openable [
		 label = "{Openable|# buildStructure : boolean\l# resource : IResource\l# validateExistence : IStatus\l|# Openable(JavaElement) : \l# bufferChanged(BufferChangedEvent, OpenableElementInfo, IProgressMonitor, Map, IResource) : \l# canBeRemovedFromCache() : boolean\l# canBufferBeRemovedFromCache(IBuffer) : boolean\l# closeBuffer() : \l# closing(Object) : \l# codeComplete(org, org, int, CompletionRequestor, WorkingCopyOwner, ITypeRoot, IProgressMonitor) : \l# codeSelect(org, int, int, WorkingCopyOwner) : IJavaElement\l# createElementInfo() : Object\l# exists() : boolean\l# findRecommendedLineSeparator() : String\l# generateInfos(Object, HashMap, IProgressMonitor) : \l# getBuffer() : IBuffer\l# getBufferFactory() : IBufferFactory\l# getBufferManager() : BufferManager\l# getCorrespondingResource() : IResource\l# getOpenable() : IOpenable\l# getUnderlyingResource() : IResource\l# hasBuffer() : boolean\l# hasUnsavedChanges() : boolean\l# isConsistent() : boolean\l# isOpen() : boolean\l# isSourceElement() : boolean\l# isStructureKnown() : boolean\l# makeConsistent(IProgressMonitor) : \l# open(IProgressMonitor) : \l# openBuffer(IProgressMonitor, Object) : IBuffer\l# getResource() : IResource\l# resource(PackageFragmentRoot) : IResource\l# resourceExists(IResource) : boolean\l# save(IProgressMonitor, boolean) : \l# getPackageFragmentRoot(IResource) : PackageFragmentRoot\l# openAncestors(HashMap, IProgressMonitor) : \l}"
	 ]

	 OpenableElementInfo [
		 label = "{OpenableElementInfo|# children : IJavaElement\l# isStructureKnown : boolean\l|# addChild(IJavaElement) : \l# getChildren() : IJavaElement\l# isStructureKnown() : boolean\l# removeChild(IJavaElement) : \l# setChildren(IJavaElement) : \l# setIsStructureKnown(boolean) : \l}"
	 ]

	 Temp [
		 label = "{Temp|# overflow : int\l# timestampsOn : boolean\l# loadFactor : double\l# close : boolean\l# newInstance : LRUCache\l+ clazz : Class\l+ count : int\l|# OverflowingLRUCache(int) : \l# OverflowingLRUCache(int, int) : \l# clone(LRUCacheEntry) : Object\l# elements() : Enumeration\l# fillingRatio() : double\l# getEntryTable() : java\l# getLoadFactor() : double\l# getOverflow() : int\l# makeSpace(int, int, int) : boolean\l# printStats() : \l# Temp(Class) : \l# toString() : String\l# privateRemoveEntry(LRUCacheEntry, boolean) : \l# privateRemoveEntry(LRUCacheEntry, boolean, boolean) : \l# put(Object, Object) : Object\l# remove(Object) : Object\l# setLoadFactor(double) : \l# setSpaceLimit(int) : \l# shrink() : boolean\l# toString() : String\l# updateTimestamp(LRUCacheEntry) : \l}"
	 ]

	 PackageDeclaration [
		 label = "{PackageDeclaration|# name : String\l|# PackageDeclaration(CompilationUnit, String) : \l# equals(Object) : boolean\l# getElementName() : String\l# getElementType() : int\l# getHandleMementoDelimiter() : char\l# getNameRange() : ISourceRange\l# getPrimaryElement(boolean) : IJavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l}"
	 ]

	 PackageFragment [
		 label = "{PackageFragment|# NO_CLASSFILES : IClassFile\l# NO_COMPILATION_UNITS : ICompilationUnit\l+ names : String\l- isValidPackageName : boolean\l|# PackageFragment(PackageFragmentRoot, String) : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# containsJavaResources() : boolean\l# copy(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# createCompilationUnit(String, String, boolean, IProgressMonitor) : ICompilationUnit\l# createElementInfo() : Object\l# delete(boolean, IProgressMonitor) : \l# equals(Object) : boolean\l# exists() : boolean\l# getClassFile(String) : IClassFile\l# getClassFiles() : IClassFile\l# getCompilationUnit(String) : ICompilationUnit\l# getCompilationUnits() : ICompilationUnit\l# getCompilationUnits(WorkingCopyOwner) : ICompilationUnit\l# getElementName() : String\l# getElementType() : int\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMementoDelimiter() : char\l# getKind() : int\l# getNonJavaResources() : Object\l# getPath() : IPath\l# resource(PackageFragmentRoot) : IResource\l# getUnderlyingResource() : IResource\l# hashCode() : int\l# hasChildren() : boolean\l# hasSubpackages() : boolean\l# internalIsValidPackageName() : boolean\l# isDefaultPackage() : boolean\l# isValidPackageName() : boolean\l# move(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# rename(String, boolean, IProgressMonitor) : \l# toStringChildren(int, StringBuffer, Object) : \l# toStringInfo(int, StringBuffer, Object, boolean) : \l# getAttachedJavadoc(IProgressMonitor) : String\l# validateExistence(IResource) : IStatus\l}"
	 ]

	 PackageFragmentInfo [
		 label = "{PackageFragmentInfo|# nonJavaResources : Object\l|# PackageFragmentInfo() : \l# containsJavaResources() : boolean\l# getNonJavaResources(IResource, PackageFragmentRoot) : Object\l# setNonJavaResources(Object) : \l}"
	 ]

	 PackageFragmentRoot [
		 label = "{PackageFragmentRoot|# ATTACHMENT_PROPERTY_DELIMITER : char\l+ NO_SOURCE_ATTACHMENT : String\l# resource : IResource\l|# PackageFragmentRoot(IResource, JavaProject) : \l# attachSource(IPath, IPath, IProgressMonitor) : \l# buildStructure(OpenableElementInfo, IProgressMonitor, Map, IResource) : boolean\l# createSourceMapper(IPath, IPath) : SourceMapper\l# delete(int, int, IProgressMonitor) : \l# computeChildren(OpenableElementInfo, IResource) : boolean\l# computeFolderChildren(IContainer, boolean, String, ArrayList, char, char) : \l# copy(IPath, int, int, IClasspathEntry, IProgressMonitor) : \l# createElementInfo() : Object\l# createPackageFragment(String, boolean, IProgressMonitor) : IPackageFragment\l# determineKind(IResource) : int\l# equals(Object) : boolean\l# findSourceAttachmentRecommendation() : IClasspathEntry\l# fullExclusionPatternChars() : char\l# fullInclusionPatternChars() : char\l# getElementName() : String\l# getElementType() : int\l# getHandleMementoDelimiter() : char\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMemento(StringBuffer) : \l# getKind() : int\l# internalKind() : int\l# getNonJavaResources() : Object\l# getPackageFragment(String) : IPackageFragment\l# getPackageFragment(String) : PackageFragment\l# getPackageName(IFolder) : String\l# getPath() : IPath\l# internalPath() : IPath\l# getRawClasspathEntry() : IClasspathEntry\l# getResolvedClasspathEntry() : IClasspathEntry\l# resource() : IResource\l# resource(PackageFragmentRoot) : IResource\l# getSourceAttachmentPath() : IPath\l# setSourceMapper(SourceMapper) : \l# getSourceAttachmentRootPath() : IPath\l# getSourceMapper() : SourceMapper\l# getUnderlyingResource() : IResource\l# hasChildren() : boolean\l# hashCode() : int\l# ignoreOptionalProblems() : boolean\l# isArchive() : boolean\l# isExternal() : boolean\l# validateOnClasspath() : IStatus\l# move(IPath, int, int, IClasspathEntry, IProgressMonitor) : \l# toStringInfo(int, StringBuffer, Object, boolean) : \l# validateExistence(IResource) : IStatus\l# verifyAttachSource(IPath) : \l}"
	 ]

	 PackageFragmentRootInfo [
		 label = "{PackageFragmentRootInfo|# sourceMapper : SourceMapper\l# rootKind : int\l# nonJavaResources : Object\l- ignoreOptionalProblems : boolean\l- initialized : boolean\l|# PackageFragmentRootInfo() : \l# computeFolderNonJavaResources(IPackageFragmentRoot, IContainer, char, char) : Object\l# computeNonJavaResources(IResource, PackageFragmentRoot) : Object\l# getNonJavaResources(IJavaProject, IResource, PackageFragmentRoot) : Object\l# getRootKind() : int\l# getSourceMapper() : SourceMapper\l# ignoreOptionalProblems(PackageFragmentRoot) : boolean\l# isClasspathEntry(IPath, IClasspathEntry) : boolean\l# setNonJavaResources(Object) : \l# setRootKind(int) : \l# setSourceMapper(SourceMapper) : \l}"
	 ]

	 ProjectReferenceChange [
		 label = "{ProjectReferenceChange|- project : JavaProject\l- oldResolvedClasspath : IClasspathEntry\l|# ProjectReferenceChange(JavaProject, IClasspathEntry) : \l# updateProjectReferencesIfNecessary() : \l# run(IProgressMonitor) : \l# toString() : String\l}"
	 ]

	 ReconcileWorkingCopyOperation [
		 label = "{ReconcileWorkingCopyOperation|+ PERF : boolean\l+ astLevel : int\l+ resolveBindings : boolean\l+ problems : HashMap\l+ reconcileFlags : int\l# workingCopyOwner : WorkingCopyOwner\l+ ast : org\l+ deltaBuilder : JavaElementDeltaBuilder\l+ requestorIsActive : boolean\l|# ReconcileWorkingCopyOperation(IJavaElement, int, int, WorkingCopyOwner) : \l# executeOperation() : \l# reportProblems(CompilationUnit, IProblemRequestor) : \l# getWorkingCopy() : CompilationUnit\l# isReadOnly() : boolean\l# makeConsistent(CompilationUnit) : org\l# notifyParticipants(CompilationUnit) : \l# handleException(Throwable) : \l# run() : \l# verify() : IJavaModelStatus\l}"
	 ]

	 Region [
		 label = "{Region|# rootElements : ArrayList\l|# Region() : \l# add(IJavaElement) : \l# contains(IJavaElement) : boolean\l# getAncestors(IJavaElement) : ArrayList\l# getElements() : IJavaElement\l# remove(IJavaElement) : boolean\l# removeAllChildren(IJavaElement) : \l# toString() : String\l}"
	 ]

	 RenameElementsOperation [
		 label = "{RenameElementsOperation||# RenameElementsOperation(IJavaElement, IJavaElement, String, boolean) : \l# getMainTaskName() : String\l# isRename() : boolean\l# verify() : IJavaModelStatus\l# verify(IJavaElement) : \l}"
	 ]

	 RenameResourceElementsOperation [
		 label = "{RenameResourceElementsOperation||# RenameResourceElementsOperation(IJavaElement, IJavaElement, String, boolean) : \l# getMainTaskName() : String\l# isRename() : boolean\l# verify(IJavaElement) : \l}"
	 ]

	 ResolvedBinaryField [
		 label = "{ResolvedBinaryField|- uniqueKey : String\l|# ResolvedBinaryField(JavaElement, String, String) : \l# getKey() : String\l# getKey(boolean) : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedBinaryMethod [
		 label = "{ResolvedBinaryMethod|- uniqueKey : String\l|# ResolvedBinaryMethod(JavaElement, String, String, String) : \l# getKey() : String\l+ getKey(boolean) : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedBinaryType [
		 label = "{ResolvedBinaryType|- uniqueKey : String\l|# ResolvedBinaryType(JavaElement, String, String) : \l# getFullyQualifiedParameterizedName() : String\l# getKey() : String\l+ getKey(boolean) : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedLambdaExpression [
		 label = "{ResolvedLambdaExpression|- uniqueKey : String\l# unresolved : LambdaExpression\l|# ResolvedLambdaExpression(JavaElement, LambdaExpression, String) : \l# getFullyQualifiedParameterizedName() : String\l# getKey() : String\l+ equals(Object) : boolean\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedSourceField [
		 label = "{ResolvedSourceField|- uniqueKey : String\l|# ResolvedSourceField(JavaElement, String, String) : \l# getKey() : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedSourceMethod [
		 label = "{ResolvedSourceMethod|- uniqueKey : String\l|# ResolvedSourceMethod(JavaElement, String, String, String) : \l# getKey() : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 ResolvedSourceType [
		 label = "{ResolvedSourceType|- uniqueKey : String\l|# ResolvedSourceType(JavaElement, String, String) : \l# getFullyQualifiedParameterizedName() : String\l# getKey() : String\l# isResolved() : boolean\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# unresolved() : JavaElement\l}"
	 ]

	 SearchableEnvironment [
		 label = "{SearchableEnvironment|+ nameLookup : NameLookup\l# unitToSkip : ICompilationUnit\l# workingCopies : org\l# owner : WorkingCopyOwner\l# project : JavaProject\l# searchScope : IJavaSearchScope\l# checkAccessRestrictions : boolean\l# isCanceled : boolean\l# isCanceled : boolean\l# isCanceled : boolean\l|# SearchableEnvironment(JavaProject, org) : \l# SearchableEnvironment(JavaProject, WorkingCopyOwner) : \l# convertSearchFilterToModelFilter(int) : int\l# find(String, String) : NameEnvironmentAnswer\l# findPackages(char, ISearchRequestor) : \l# findExactTypes(char, boolean, int, ISearchRequestor) : \l# beginTask(String, int) : \l# done() : \l# internalWorked(double) : \l# isCanceled() : boolean\l# setCanceled(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# worked(int) : \l# acceptType(int, char, char, char, String, AccessRestriction) : \l# findExactTypes(String, ISearchRequestor, int) : \l# findType(char) : NameEnvironmentAnswer\l# findType(char, char) : NameEnvironmentAnswer\l# findTypes(char, boolean, boolean, int, ISearchRequestor) : \l# findTypes(char, boolean, boolean, int, ISearchRequestor, IProgressMonitor) : \l# beginTask(String, int) : \l# done() : \l# internalWorked(double) : \l# isCanceled() : boolean\l# setCanceled(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# worked(int) : \l# acceptType(int, char, char, char, String, AccessRestriction) : \l# findConstructorDeclarations(char, boolean, ISearchRequestor, IProgressMonitor) : \l# beginTask(String, int) : \l# done() : \l# internalWorked(double) : \l# isCanceled() : boolean\l# setCanceled(boolean) : \l# setTaskName(String) : \l# subTask(String) : \l# worked(int) : \l# acceptConstructor(int, char, int, char, char, char, int, char, int, String, AccessRestriction) : \l+ belongsTo(String) : boolean\l+ cancel() : \l+ ensureReadyToRun() : \l+ execute(IProgressMonitor) : boolean\l+ getJobFamily() : String\l# findTypes(String, ISearchRequestor, int) : \l# getSearchScope() : IJavaSearchScope\l# isPackage(char, char) : boolean\l# toStringChar(char) : String\l# toStringCharChar(char) : String\l# cleanup() : \l}"
	 ]

	 SearchableEnvironmentRequestor [
		 label = "{SearchableEnvironmentRequestor|# requestor : ISearchRequestor\l# unitToSkip : ICompilationUnit\l# project : IJavaProject\l# nameLookup : NameLookup\l# checkAccessRestrictions : boolean\l|# SearchableEnvironmentRequestor(ISearchRequestor) : \l# SearchableEnvironmentRequestor(ISearchRequestor, ICompilationUnit, IJavaProject, NameLookup) : \l# acceptInitializer(IInitializer) : \l# acceptPackageFragment(IPackageFragment) : \l# acceptType(IType) : \l}"
	 ]

	 SelectionRequestor [
		 label = "{SelectionRequestor|# nameLookup : NameLookup\l# openable : Openable\l# elements : IJavaElement\l# elementIndex : int\l# handleFactory : HandleFactory\l|# SelectionRequestor(NameLookup, Openable) : \l# acceptBinaryMethod(IType, IMethod, char, boolean) : \l# acceptBinaryMethod(IType, char, char, char, String, char, char, char, boolean) : \l# acceptType(char, char, int, boolean, char, int, int) : \l# acceptType(IType) : \l# acceptError(CategorizedProblem) : \l# acceptField(char, char, char, boolean, char, int, int) : \l# acceptLocalField(FieldBinding) : \l# acceptLocalMethod(MethodBinding) : \l# acceptLocalType(TypeBinding) : \l# acceptLocalTypeParameter(TypeVariableBinding) : \l# acceptLocalMethodTypeParameter(TypeVariableBinding) : \l# acceptLocalVariable(LocalVariableBinding, org) : \l# acceptMethod(char, char, String, char, char, char, String, char, char, boolean, boolean, char, int, int) : \l# acceptPackage(char) : \l# acceptSourceMethod(IType, char, char, char, String, char, char, char) : \l# acceptMethodDeclaration(IType, char, int, int) : \l# acceptTypeParameter(char, char, char, boolean, int, int) : \l# acceptMethodTypeParameter(char, char, char, int, int, char, boolean, int, int) : \l# addElement(IJavaElement) : \l# areTypeParametersCompatible(IMethod, char, char) : boolean\l# findLocalElement(int) : IJavaElement\l# findLocalElement(int, MethodScope) : IJavaElement\l# findMethodFromBinding(MethodBinding, String, ReferenceBinding) : IJavaElement\l# getElements() : IJavaElement\l# resolveType(char, char, int) : IType\l# resolveTypeByLocation(char, char, int, int, int) : IType\l}"
	 ]

	 SetClasspathOperation [
		 label = "{SetClasspathOperation|# newRawClasspath : IClasspathEntry\l# referencedEntries : IClasspathEntry\l# newOutputLocation : IPath\l# project : JavaProject\l|# SetClasspathOperation(JavaProject, IClasspathEntry, IPath, boolean) : \l# SetClasspathOperation(JavaProject, IClasspathEntry, IClasspathEntry, IPath, boolean) : \l# executeOperation() : \l# getSchedulingRule() : ISchedulingRule\l# toString() : String\l# verify() : IJavaModelStatus\l}"
	 ]

	 SetContainerOperation [
		 label = "{SetContainerOperation|# containerPath : IPath\l# affectedProjects : IJavaProject\l# respectiveContainers : IClasspathContainer\l|# SetContainerOperation(IPath, IJavaProject, IClasspathContainer) : \l# executeOperation() : \l# verbose_failure(CoreException) : \l# verbose_update_project(JavaProject) : \l# verbose_set_container() : \l# displayString(Object) : String\l# displayString(Object) : String\l# verbose_set_container_invocation_trace() : \l}"
	 ]

	 SetVariablesOperation [
		 label = "{SetVariablesOperation|# variableNames : String\l# variablePaths : IPath\l# updatePreferences : boolean\l|# SetVariablesOperation(String, IPath, boolean) : \l# executeOperation() : \l# verbose_failure(String) : \l# verbose_update_project(String, JavaProject) : \l# verbose_set_variables() : \l}"
	 ]

	 SimpleDelta [
		 label = "{SimpleDelta|# kind : int\l# changeFlags : int\l|# added() : \l# changed(int) : \l# getFlags() : int\l# getKind() : int\l# modifiers() : \l# removed() : \l# superTypes() : \l# toDebugString(StringBuffer) : \l# toDebugString(StringBuffer, int) : boolean\l# toString() : String\l}"
	 ]

	 SingleTypeRequestor [
		 label = "{SingleTypeRequestor|# element : IType\l|# acceptField(IField) : \l# acceptInitializer(IInitializer) : \l# acceptMemberType(IType) : \l# acceptMethod(IMethod) : \l# acceptPackageFragment(IPackageFragment) : \l# acceptType(IType) : \l# getType() : IType\l# isCanceled() : boolean\l# reset() : \l}"
	 ]

	 SortElementsOperation [
		 label = "{SortElementsOperation|+ CONTAINS_MALFORMED_NODES : String\l# comparator : Comparator\l# positions : int\l# apiLevel : int\l|# SortElementsOperation(int, IJavaElement, int, Comparator) : \l# getMainAmountOfWork() : int\l# checkMalformedNodes(ASTNode) : boolean\l# isMalformed(ASTNode) : boolean\l# executeOperation() : \l# calculateEdit(org, TextEditGroup) : TextEdit\l# processElement(ICompilationUnit, char) : String\l# sortCompilationUnit(org, TextEditGroup) : ASTRewrite\l# visit(org) : boolean\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# sortElements(List, ListRewrite) : \l# visit(org) : boolean\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# verify() : IJavaModelStatus\l# insert(TextEdit, TextEdit) : \l# covers(TextEdit, TextEdit) : boolean\l}"
	 ]

	 SourceAnnotationMethodInfo [
		 label = "{SourceAnnotationMethodInfo|+ defaultValueStart : int\l+ defaultValueEnd : int\l+ defaultValue : IMemberValuePair\l|# isAnnotationMethod() : boolean\l}"
	 ]

	 SourceConstructorInfo [
		 label = "{SourceConstructorInfo|- RETURN_TYPE_NAME : char\l|# isAnnotationMethod() : boolean\l# isConstructor() : boolean\l# getReturnTypeName() : char\l# setReturnType(char) : \l}"
	 ]

	 SourceConstructorWithChildrenInfo [
		 label = "{SourceConstructorWithChildrenInfo|# children : IJavaElement\l|# SourceConstructorWithChildrenInfo(IJavaElement) : \l# getChildren() : IJavaElement\l}"
	 ]

	 SourceField [
		 label = "{SourceField||# SourceField(JavaElement, String) : \l# equals(Object) : boolean\l# findNode(org) : ASTNode\l# getConstant() : Object\l# getElementType() : int\l# getKey() : String\l# getHandleMementoDelimiter() : char\l# getPrimaryElement(boolean) : IJavaElement\l# getTypeSignature() : String\l# isEnumConstant() : boolean\l# isResolved() : boolean\l# resolved(Binding) : JavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l}"
	 ]

	 SourceFieldElementInfo [
		 label = "{SourceFieldElementInfo|# typeName : char\l# initializationSource : char\l|# getInitializationSource() : char\l# getTypeName() : char\l# getTypeSignature() : String\l# setTypeName(char) : \l}"
	 ]

	 SourceFieldWithChildrenInfo [
		 label = "{SourceFieldWithChildrenInfo|# children : IJavaElement\l|# SourceFieldWithChildrenInfo(IJavaElement) : \l# getChildren() : IJavaElement\l}"
	 ]

	 LocalVariableElementKey [
		 label = "{LocalVariableElementKey|# parent : String\l# name : String\l+ VERBOSE : boolean\l# rootPaths : ArrayList\l# binaryType : BinaryType\l# sourcePath : IPath\l# rootPath : String\l# parameterNames : HashMap\l# sourceRanges : HashMap\l# categories : HashMap\l# parametersRanges : HashMap\l# finalParameters : HashSet\l+ UNKNOWN_RANGE : SourceRange\l# memberDeclarationStart : int\l# memberNameRange : SourceRange\l# memberName : String\l# methodParameterNames : char\l# methodParameterTypes : char\l# searchedElement : IJavaElement\l- importsTable : HashMap\l- importsCounterTable : HashMap\l# types : IType\l# typeDeclarationStarts : int\l# typeNameRanges : SourceRange\l# typeModifiers : int\l# typeDepth : int\l# anonymousCounter : int\l# anonymousClassName : int\l# encoding : String\l# defaultEncoding : String\l# options : Map\l- areRootPathsComputed : boolean\l|# null() : \l# LocalVariableElementKey(IJavaElement, String) : \l# hashCode() : int\l# equals(Object) : boolean\l# toString() : String\l# SourceMapper() : \l# SourceMapper(IPath, String, Map) : \l# SourceMapper(IPath, String, Map, String) : \l# acceptImport(int, int, int, int, char, boolean, int) : \l# acceptLineSeparatorPositions(int) : \l# acceptPackage(ImportReference) : \l# acceptProblem(CategorizedProblem) : \l# addCategories(IJavaElement, char) : \l# close() : \l# convertTypeNamesToSigs(char) : String\l# findMatchingGenericEnd(char, int) : int\l# computeAllRootPaths(IType) : \l# compare(Object, Object) : int\l# computeRootPath(IContainer, HashSet, boolean, Set, int) : \l# enterType(TypeInfo) : \l# enterCompilationUnit() : \l# enterConstructor(MethodInfo) : \l# enterField(FieldInfo) : \l# enterInitializer(int, int) : \l# enterMethod(MethodInfo) : \l# enterAbstractMethod(MethodInfo) : \l# exitType(int) : \l# exitCompilationUnit(int) : \l# exitConstructor(int) : \l# exitField(int, int, int) : \l# exitInitializer(int) : \l# exitMethod(int, Expression) : \l# exitAbstractMethod(int) : \l# findSource(IType, IBinaryType) : char\l# findSource(IType, String) : char\l# getSourceForRootPath(String, String) : char\l# findSource(String) : char\l# getFlags(IJavaElement) : int\l# getNameRange(IJavaElement) : SourceRange\l# getMethodParameterNames(IMethod) : char\l# getSourceRange(IJavaElement) : SourceRange\l# getType(String) : IType\l# getUnqualifiedMethodHandle(IMethod, boolean) : IJavaElement\l# getUnqualifiedTypeSignature(String, int, int, StringBuffer, boolean) : int\l# mapSource(IType, char, IBinaryType) : \l# mapSource(IType, char, IBinaryType, IJavaElement) : ISourceRange\l# readSource(ZipEntry, ZipFile, String) : char\l# setMethodParameterNames(IMethod, char) : \l# setSourceRange(IJavaElement, SourceRange, SourceRange) : \l# getImports(BinaryType) : char\l# hasToRetrieveSourceRangesForLocalClass(char) : boolean\l}"
	 ]

	 SourceMethod [
		 label = "{SourceMethod|# parameterTypes : String\l|# SourceMethod(JavaElement, String, String) : \l# closing(Object) : \l# equals(Object) : boolean\l# getDefaultValue() : IMemberValuePair\l# getElementType() : int\l# getExceptionTypes() : String\l# getHandleMemento(StringBuffer) : \l# getHandleMementoDelimiter() : char\l# getKey() : String\l# getNumberOfParameters() : int\l# getParameterNames() : String\l# getParameterTypes() : String\l# getTypeParameter(String) : ITypeParameter\l# getTypeParameters() : ITypeParameter\l# getParameters() : ILocalVariable\l# getTypeParameterSignatures() : String\l# getPrimaryElement(boolean) : IJavaElement\l# getRawParameterNames() : String\l# getReturnType() : String\l# getSignature() : String\l# hashCode() : int\l# isConstructor() : boolean\l# isMainMethod() : boolean\l# isLambdaMethod() : boolean\l# isResolved() : boolean\l# isSimilar(IMethod) : boolean\l# readableName() : String\l# resolved(Binding) : JavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l# toStringName(StringBuffer) : \l# toStringName(StringBuffer, int) : \l}"
	 ]

	 SourceMethodElementInfo [
		 label = "{SourceMethodElementInfo|# argumentNames : char\l# exceptionTypes : char\l# arguments : ILocalVariable\l# typeParameters : ITypeParameter\l+ getReturnTypeName : char\l+ isConstructor : boolean\l+ isAnnotationMethod : boolean\l# setReturnType : null\l|# getArgumentNames() : char\l# getExceptionTypeNames() : char\l# getTypeParameterBounds() : char\l# getTypeParameterNames() : char\l# setArgumentNames(char) : \l# setExceptionTypeNames(char, char) : \l}"
	 ]

	 SourceMethodInfo [
		 label = "{SourceMethodInfo|# returnType : char\l|# isAnnotationMethod() : boolean\l# isConstructor() : boolean\l# getReturnTypeName() : char\l# setReturnType(char) : \l}"
	 ]

	 SourceMethodWithChildrenInfo [
		 label = "{SourceMethodWithChildrenInfo|# children : IJavaElement\l|# SourceMethodWithChildrenInfo(IJavaElement) : \l# getChildren() : IJavaElement\l}"
	 ]

	 SourceRefElement [
		 label = "{SourceRefElement|+ occurrenceCount : int\l|# SourceRefElement(JavaElement) : \l# closing(Object) : \l# createElementInfo() : Object\l# copy(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# delete(boolean, IProgressMonitor) : \l# equals(Object) : boolean\l# findNode(CompilationUnit) : ASTNode\l# generateInfos(Object, HashMap, IProgressMonitor) : \l# getAnnotation(String) : IAnnotation\l# getAnnotations() : IAnnotation\l# getCompilationUnit() : ICompilationUnit\l# getCorrespondingResource() : IResource\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getHandleMemento(StringBuffer) : \l# getHandleUpdatingCountFromMemento(MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getOccurrenceCount() : int\l# getOpenableParent() : IOpenable\l# getPath() : IPath\l# resource() : IResource\l# getSource() : String\l# getSourceRange() : ISourceRange\l# getUnderlyingResource() : IResource\l# hasChildren() : boolean\l# isStructureKnown() : boolean\l# move(IJavaElement, IJavaElement, String, boolean, IProgressMonitor) : \l# rename(String, boolean, IProgressMonitor) : \l# toStringName(StringBuffer) : \l}"
	 ]

	 SourceRefElementInfo [
		 label = "{SourceRefElementInfo|# sourceRangeStart : int\l|# getDeclarationSourceEnd() : int\l# getDeclarationSourceStart() : int\l# getSourceRange() : ISourceRange\l# setSourceRangeEnd(int) : \l# setSourceRangeStart(int) : \l}"
	 ]

	 SourceType [
		 label = "{SourceType|+ localOccurrenceCount : int\l|# SourceType(JavaElement, String) : \l# closing(Object) : \l# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, ICompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, IProgressMonitor) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner) : \l# codeComplete(char, int, int, char, char, int, boolean, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) : \l# createField(String, IJavaElement, boolean, IProgressMonitor) : IField\l# createInitializer(String, IJavaElement, IProgressMonitor) : IInitializer\l# createMethod(String, IJavaElement, boolean, IProgressMonitor) : IMethod\l# createType(String, IJavaElement, boolean, IProgressMonitor) : IType\l# equals(Object) : boolean\l# findMethods(IMethod) : IMethod\l# getAnnotations() : IAnnotation\l# getChildrenForCategory(String) : IJavaElement\l# getDeclaringType() : IType\l# getElementType() : int\l# getField(String) : IField\l# getFields() : IField\l# getFullyQualifiedName() : String\l# getFullyQualifiedName(char) : String\l# getFullyQualifiedParameterizedName() : String\l# getOccurrenceCountSignature() : String\l# getHandleFromMemento(String, MementoTokenizer, WorkingCopyOwner) : IJavaElement\l# getInitializer(int) : IInitializer\l# getInitializers() : IInitializer\l# getKey() : String\l# getMethod(String, String) : IMethod\l# getMethods() : IMethod\l# getPackageFragment() : IPackageFragment\l# getPrimaryElement(boolean) : IJavaElement\l# getSuperclassName() : String\l# getSuperclassTypeSignature() : String\l# getSuperInterfaceNames() : String\l# getSuperInterfaceTypeSignatures() : String\l# getTypeParameters() : ITypeParameter\l# getTypeParameterSignatures() : String\l# getType(String) : IType\l# getTypeParameter(String) : ITypeParameter\l# getTypeQualifiedName() : String\l# getTypeQualifiedName(char) : String\l# getTypes() : IType\l# isAnonymous() : boolean\l# isClass() : boolean\l# isEnum() : boolean\l# isInterface() : boolean\l# isAnnotation() : boolean\l# isLocal() : boolean\l# isMember() : boolean\l# isResolved() : boolean\l# loadTypeHierachy(InputStream, IProgressMonitor) : ITypeHierarchy\l# loadTypeHierachy(InputStream, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newSupertypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IJavaProject, WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(ICompilationUnit, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(IWorkingCopy, IProgressMonitor) : ITypeHierarchy\l# newTypeHierarchy(WorkingCopyOwner, IProgressMonitor) : ITypeHierarchy\l# resolved(Binding) : JavaElement\l# toStringInfo(int, StringBuffer, Object, boolean) : \l+ isLambda() : boolean\l}"
	 ]

	 SourceTypeElementInfo [
		 label = "{SourceTypeElementInfo|# NO_IMPORTS : ISourceImport\l# NO_INITIALIZERS : InitializerElementInfo\l# NO_FIELDS : SourceField\l# NO_METHODS : SourceMethod\l# NO_TYPES : SourceType\l# children : IJavaElement\l# superclassName : char\l# superInterfaceNames : char\l# handle : IType\l# typeParameters : ITypeParameter\l# categories : HashMap\l|# addCategories(IJavaElement, char) : \l# getCategories() : HashMap\l# getChildren() : IJavaElement\l# getEnclosingType() : ISourceType\l# getFields() : ISourceField\l# getFieldHandles() : SourceField\l# getFileName() : char\l# getHandle() : IType\l# getInitializers() : InitializerElementInfo\l# getInterfaceNames() : char\l# getMemberTypes() : ISourceType\l# getMemberTypeHandles() : SourceType\l# getMethods() : ISourceMethod\l# getMethodHandles() : SourceMethod\l# getName() : char\l# getSuperclassName() : char\l# getTypeParameterBounds() : char\l# getTypeParameterNames() : char\l# isBinaryType() : boolean\l+ isAnonymous() : boolean\l# isAnonymousMember() : boolean\l# setHandle(IType) : \l# setSuperclassName(char) : \l# setSuperInterfaceNames(char) : \l# toString() : String\l}"
	 ]

	 TypeParameter [
		 label = "{TypeParameter|# NO_TYPE_PARAMETERS : ITypeParameter\l# name : String\l|# TypeParameter(JavaElement, String) : \l# equals(Object) : boolean\l# getBounds() : String\l# getBoundsSignatures() : String\l# getDeclaringMember() : IMember\l# getElementName() : String\l# getElementType() : int\l# getHandleMementoDelimiter() : char\l# getKey(boolean) : String\l# getNameRange() : ISourceRange\l# getSourceRange() : ISourceRange\l# getClassFile() : IClassFile\l# getTypeRoot() : ITypeRoot\l# toStringName(StringBuffer) : \l}"
	 ]

	 TypeParameterElementInfo [
		 label = "{TypeParameterElementInfo|+ nameStart : int\l+ nameEnd : int\l+ bounds : char\l+ boundsSignatures : char\l|}"
	 ]

	 TypeVector [
		 label = "{TypeVector|# INITIAL_SIZE : int\l+ size : int\l# maxSize : int\l# elements : IType\l+ NoElements : IType\l|# TypeVector() : \l# TypeVector(IType) : \l# TypeVector(IType) : \l# add(IType) : \l# addAll(IType) : \l# contains(IType) : boolean\l# copy() : TypeVector\l# elementAt(int) : IType\l# elements() : IType\l# find(IType) : IType\l# remove(IType) : IType\l# removeAll() : \l# toString() : String\l}"
	 ]

	 UserLibrary [
		 label = "{UserLibrary|- VERSION_ONE : String\l- CURRENT_VERSION : String\l- TAG_VERSION : String\l- TAG_USERLIBRARY : String\l- TAG_SOURCEATTACHMENT : String\l- TAG_SOURCEATTACHMENTROOT : String\l- TAG_PATH : String\l- TAG_ARCHIVE : String\l- TAG_SYSTEMLIBRARY : String\l- isSystemLibrary : boolean\l- entries : IClasspathEntry\l|# UserLibrary(IClasspathEntry, boolean) : \l# getEntries() : IClasspathEntry\l# isSystemLibrary() : boolean\l# equals(Object) : boolean\l# hashCode() : int\l# serialize(IClasspathEntry, boolean) : String\l# createFromString(Reader) : UserLibrary\l# toString() : String\l}"
	 ]

	 UserLibraryClasspathContainer [
		 label = "{UserLibraryClasspathContainer|- name : String\l|# UserLibraryClasspathContainer(String) : \l# getClasspathEntries() : IClasspathEntry\l# getDescription() : String\l# getKind() : int\l# getPath() : IPath\l# getUserLibrary() : UserLibrary\l# verbose_no_user_library_found(String) : \l}"
	 ]

	 UserLibraryClasspathContainerInitializer [
		 label = "{UserLibraryClasspathContainerInitializer||# canUpdateClasspathContainer(IPath, IJavaProject) : boolean\l# getComparisonID(IPath, IJavaProject) : Object\l# getDescription(IPath, IJavaProject) : String\l# initialize(IPath, IJavaProject) : \l# isUserLibraryContainer(IPath) : boolean\l# requestClasspathContainerUpdate(IPath, IJavaProject, IClasspathContainer) : \l# verbose_no_user_library_found(IJavaProject, String) : \l# verbose_not_a_user_library(IJavaProject, IPath) : \l}"
digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 AndLocator [
		 label = "{AndLocator|# patternLocators : PatternLocator\l# levels : int\l|# AndLocator(AndPattern) : \l# initializePolymorphicSearch(MatchLocator) : \l# match(Annotation, MatchingNodeSet) : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(ConstructorDeclaration, MatchingNodeSet) : int\l# match(Expression, MatchingNodeSet) : int\l# match(FieldDeclaration, MatchingNodeSet) : int\l# match(LambdaExpression, MatchingNodeSet) : int\l# match(LocalDeclaration, MatchingNodeSet) : int\l# match(MethodDeclaration, MatchingNodeSet) : int\l# match(MemberValuePair, MatchingNodeSet) : int\l# match(MessageSend, MatchingNodeSet) : int\l# match(Reference, MatchingNodeSet) : int\l# match(ReferenceExpression, MatchingNodeSet) : int\l# match(TypeDeclaration, MatchingNodeSet) : int\l# match(TypeParameter, MatchingNodeSet) : int\l# match(TypeReference, MatchingNodeSet) : int\l# matchContainer() : int\l# matchReportImportRef(ImportReference, Binding, IJavaElement, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# setFlavors(int) : \l# recordResolution(QualifiedTypeReference, TypeBinding) : \l}"
	 ]

	 AndPattern [
		 label = "{AndPattern|# patterns : SearchPattern\l# current : int\l|# combinedMatchRule(int, int) : int\l# AndPattern(SearchPattern, SearchPattern) : \l# currentPattern() : SearchPattern\l# hasNextQuery() : boolean\l# resetQuery() : \l}"
	 ]

	 ClassFileMatchLocator [
		 label = "{ClassFileMatchLocator|- TARGET_ANNOTATION_BITS : long\l- JAVA_LANG_ANNOTATION_ELEMENTTYPE : char\l|# convertClassFileFormat(char) : char\l# checkAnnotation(IBinaryAnnotation, TypeReferencePattern) : boolean\l# checkAnnotations(TypeReferencePattern, IBinaryAnnotation, long) : boolean\l# checkAnnotationTypeReference(char, TypeReferencePattern) : boolean\l# checkDeclaringType(IBinaryType, char, char, boolean, boolean) : boolean\l# checkParameters(char, char, char, boolean, boolean) : boolean\l# checkStandardAnnotations(long, TypeReferencePattern) : boolean\l# checkTypeName(char, char, char, boolean, boolean) : boolean\l# locateMatches(MatchLocator, ClassFile, IBinaryType) : \l# matchAnnotations(SearchPattern, MatchLocator, ClassFile, IBinaryType) : \l# matchBinary(SearchPattern, Object, IBinaryType) : boolean\l# matchConstructor(ConstructorPattern, Object, IBinaryType) : boolean\l# matchField(FieldPattern, Object, IBinaryType) : boolean\l# matchMethod(MethodPattern, Object, IBinaryType) : boolean\l# matchSuperTypeReference(SuperTypeReferencePattern, Object, IBinaryType) : boolean\l# matchTypeDeclaration(TypeDeclarationPattern, Object, IBinaryType) : boolean\l}"
	 ]

	 ClasspathSourceDirectory [
		 label = "{ClasspathSourceDirectory|# sourceFolder : IContainer\l# directoryCache : SimpleLookupTable\l# missingPackageHolder : SimpleLookupTable\l# fullExclusionPatternChars : char\l# fulInclusionPatternChars : char\l|# ClasspathSourceDirectory(IContainer, char, char) : \l# cleanup() : \l# directoryTable(String) : SimpleLookupTable\l# equals(Object) : boolean\l# findClass(String, String, String) : NameEnvironmentAnswer\l# getProjectRelativePath() : IPath\l# hashCode() : int\l# isPackage(String) : boolean\l# reset() : \l# toString() : String\l# debugPathString() : String\l}"
	 ]

	 ConstructorDeclarationPattern [
		 label = "{ConstructorDeclarationPattern|+ extraFlags : int\l+ declaringTypeModifiers : int\l+ declaringPackageName : char\l+ modifiers : int\l+ signature : char\l+ parameterTypes : char\l+ parameterNames : char\l|# ConstructorDeclarationPattern(char, char, int) : \l# ConstructorDeclarationPattern(int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# matchesDecodedKey(SearchPattern) : boolean\l# removeInternalFlags() : \l}"
	 ]

	 ConstructorLocator [
		 label = "{ConstructorLocator|# pattern : ConstructorPattern\l|# ConstructorLocator(ConstructorPattern) : \l# fineGrain() : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(ConstructorDeclaration, MatchingNodeSet) : int\l# match(Expression, MatchingNodeSet) : int\l# match(FieldDeclaration, MatchingNodeSet) : int\l# match(MessageSend, MatchingNodeSet) : int\l# match(ReferenceExpression, MatchingNodeSet) : int\l# match(TypeDeclaration, MatchingNodeSet) : int\l# matchConstructor(MethodBinding) : int\l# matchContainer() : int\l# matchLevelForReferences(ConstructorDeclaration) : int\l# matchLevelForDeclarations(ConstructorDeclaration) : int\l# matchParametersCount(ASTNode, Expression) : boolean\l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# newDeclarationMatch(ASTNode, IJavaElement, Binding, int, int, MatchLocator) : SearchMatch\l# resolveLevel(ASTNode) : int\l# referenceType() : int\l# resolveLevel(AllocationExpression) : int\l# resolveLevel(FieldDeclaration) : int\l# resolveLevel(Binding) : int\l# resolveLevel(ConstructorDeclaration, boolean) : int\l# resolveLevel(TypeDeclaration) : int\l# toString() : String\l}"
	 ]

	 ConstructorPattern [
		 label = "{ConstructorPattern|# findDeclarations : boolean\l# findReferences : boolean\l+ declaringQualification : char\l+ declaringSimpleName : char\l+ parameterQualifications : char\l+ parameterSimpleNames : char\l+ parameterCount : int\l+ varargs : boolean\l# parametersTypeSignatures : char\l# parametersTypeArguments : char\l# constructorParameters : boolean\l# constructorArguments : char\l# REF_CATEGORIES : char\l# REF_AND_DECL_CATEGORIES : char\l# DECL_CATEGORIES : char\l+ FINE_GRAIN_MASK : int\l|# createDeclarationIndexKey(char, int, char, char, char, int, char, int, int) : char\l# createDefaultDeclarationIndexKey(char, char, int, int) : char\l# createIndexKey(char, int) : char\l# decodeExtraFlags(int) : int\l# decodeModifers(int) : int\l# encodeExtraFlags(int) : int\l# getTypeErasure(char) : char\l# ConstructorPattern(int) : \l# ConstructorPattern(char, char, char, char, int, int) : \l# ConstructorPattern(char, char, char, char, String, IMethod, int, int) : \l# ConstructorPattern(char, char, String, char, char, String, char, int, int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# hasConstructorArguments() : boolean\l# hasConstructorParameters() : boolean\l# matchesDecodedKey(SearchPattern) : boolean\l# mustResolve() : boolean\l# queryIn(Index) : EntryResult\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 DeclarationOfAccessedFieldsPattern [
		 label = "{DeclarationOfAccessedFieldsPattern|# enclosingElement : IJavaElement\l# knownFields : SimpleSet\l|# DeclarationOfAccessedFieldsPattern(IJavaElement) : \l}"
	 ]

	 DeclarationOfReferencedMethodsPattern [
		 label = "{DeclarationOfReferencedMethodsPattern|# enclosingElement : IJavaElement\l# knownMethods : SimpleSet\l|# DeclarationOfReferencedMethodsPattern(IJavaElement) : \l}"
	 ]

	 DeclarationOfReferencedTypesPattern [
		 label = "{DeclarationOfReferencedTypesPattern|# knownTypes : SimpleSet\l# enclosingElement : IJavaElement\l|# DeclarationOfReferencedTypesPattern(IJavaElement) : \l}"
	 ]

	 FieldLocator [
		 label = "{FieldLocator|# isDeclarationOfAccessedFieldsPattern : boolean\l|# FieldLocator(FieldPattern) : \l# fineGrain() : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(FieldDeclaration, MatchingNodeSet) : int\l# matchContainer() : int\l# matchField(FieldBinding, boolean) : int\l# matchLevelAndReportImportRef(ImportReference, Binding, MatchLocator) : \l# matchReference(Reference, MatchingNodeSet, boolean) : int\l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# updateMatch(ParameterizedTypeBinding, char, MatchLocator) : \l# reportDeclaration(FieldBinding, MatchLocator, SimpleSet) : \l# referenceType() : int\l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# resolveLevel(NameReference) : int\l# resolveLevelForType(TypeBinding) : int\l}"
	 ]

	 FieldPattern [
		 label = "{FieldPattern|# declaringQualification : char\l# declaringSimpleName : char\l# typeQualification : char\l# typeSimpleName : char\l# REF_CATEGORIES : char\l# REF_AND_DECL_CATEGORIES : char\l# DECL_CATEGORIES : char\l|# createIndexKey(char) : char\l# FieldPattern(char, char, char, char, char, int, int) : \l# FieldPattern(char, char, char, char, char, String, int, int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexKey() : char\l# getIndexCategories() : char\l# matchesDecodedKey(SearchPattern) : boolean\l# mustResolve() : boolean\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 ImportMatchLocatorParser [
		 label = "{ImportMatchLocatorParser|# reportImportMatch : boolean\l|# ImportMatchLocatorParser(ProblemReporter, MatchLocator) : \l# consumeStaticImportOnDemandDeclarationName() : \l# consumeSingleStaticImportDeclarationName() : \l# consumeSingleTypeImportDeclarationName() : \l# consumeTypeImportOnDemandDeclarationName() : \l}"
	 ]

	 IntersectingPattern [
		 label = "{IntersectingPattern|# hasNextQuery : boolean\l# resetQuery : null\l|# IntersectingPattern(int, int) : \l# findIndexMatches(Index, IndexQueryRequestor, SearchParticipant, IJavaSearchScope, IProgressMonitor) : \l}"
	 ]

	 JavaSearchNameEnvironment [
		 label = "{JavaSearchNameEnvironment|# locationSet : LinkedHashSet\l# workingCopies : HashMap\l|# JavaSearchNameEnvironment(IJavaProject, org) : \l# cleanup() : \l# addProjectClassPath(JavaProject) : \l# computeClasspathLocations(JavaProject) : LinkedHashSet\l# mapToClassPathLocation(JavaModelManager, PackageFragmentRoot) : ClasspathLocation\l# findClass(String, char) : NameEnvironmentAnswer\l# findType(char, char) : NameEnvironmentAnswer\l# findType(char) : NameEnvironmentAnswer\l# isPackage(char, char) : boolean\l# isPackage(String) : boolean\l}"
	 ]

	 JavaSearchPattern [
		 label = "{JavaSearchPattern|# isCaseSensitive : boolean\l# isCamelCase : boolean\l# matchMode : int\l# matchCompatibility : int\l+ fineGrain : int\l+ MATCH_MODE_MASK : int\l+ MATCH_COMPATIBILITY_MASK : int\l# typeSignatures : char\l- typeArguments : char\l- flags : int\l# HAS_TYPE_ARGUMENTS : int\l|# JavaSearchPattern(int, int) : \l# getFineGrainFlagString(int) : String\l# getBlankPattern() : SearchPattern\l# getMatchMode() : int\l# isCamelCase() : boolean\l# isCaseSensitive() : boolean\l# isErasureMatch() : boolean\l# isEquivalentMatch() : boolean\l# extractMethodArguments(IMethod) : char\l# getTypeArguments() : char\l# hasSignatures() : boolean\l# hasTypeArguments() : boolean\l# hasTypeParameters() : boolean\l# matchDifferentTypeSuffixes(int, int) : boolean\l# print(StringBuffer) : StringBuffer\l# setTypeArguments(char) : \l# storeTypeSignaturesAndArguments(IType) : \l# toString() : String\l}"
	 ]

	 LocalVariableLocator [
		 label = "{LocalVariableLocator||# LocalVariableLocator(LocalVariablePattern) : \l# match(LocalDeclaration, MatchingNodeSet) : int\l# getLocalVariable() : LocalVariable\l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# matchContainer() : int\l# matchLocalVariable(LocalVariableBinding, boolean) : int\l# referenceType() : int\l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# resolveLevel(NameReference) : int\l}"
	 ]

	 LocalVariablePattern [
		 label = "{LocalVariablePattern|# localVariable : LocalVariable\l|# LocalVariablePattern(LocalVariable, int, int) : \l# findIndexMatches(Index, IndexQueryRequestor, SearchParticipant, IJavaSearchScope, IProgressMonitor) : \l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 MatchingNodeSet [
		 label = "{MatchingNodeSet|# matchingNodes : SimpleLookupTable\l- matchingNodesKeys : HashtableOfLong\l# EXACT_MATCH : Integer\l# POTENTIAL_MATCH : Integer\l# ERASURE_MATCH : Integer\l+ mustResolve : boolean\l# possibleMatchingNodesSet : SimpleSet\l- possibleMatchingNodesKeys : HashtableOfLong\l|# MatchingNodeSet(boolean) : \l# addMatch(ASTNode, int) : int\l# addPossibleMatch(ASTNode) : \l# addTrustedMatch(ASTNode, boolean) : \l# addTrustedMatch(ASTNode, Integer) : \l# hasPossibleNodes(int, int) : boolean\l# matchingNodes(int, int) : ASTNode\l# compare(Object, Object) : int\l# removePossibleMatch(ASTNode) : Object\l# removeTrustedMatch(ASTNode) : Object\l# toString() : String\l}"
	 ]

	 WrappedCoreException [
		 label = "{WrappedCoreException|+ MAX_AT_ONCE : int\l+ pattern : SearchPattern\l+ patternLocator : PatternLocator\l+ matchContainer : int\l+ requestor : SearchRequestor\l+ scope : IJavaSearchScope\l+ progressMonitor : IProgressMonitor\l+ workingCopies : org\l+ handleFactory : HandleFactory\l+ allSuperTypeNames : char\l+ parser : MatchLocatorParser\l- basicParser : Parser\l+ nameEnvironment : INameEnvironment\l+ nameLookup : NameLookup\l+ lookupEnvironment : LookupEnvironment\l+ hierarchyResolver : HierarchyResolver\l+ options : CompilerOptions\l+ numberOfMatches : int\l+ matchesToProcess : PossibleMatch\l+ currentPossibleMatch : PossibleMatch\l+ resultCollectorTime : long\l# progressStep : int\l# progressWorked : int\l# unitScope : CompilationUnitScope\l# bindings : SimpleLookupTable\l# inTypeOccurrencesCounts : HashtableOfIntValues\l# methodHandles : HashSet\l- searchPackageDeclaration : boolean\l- sourceStartOfMethodToRetain : int\l- sourceEndOfMethodToRetain : int\l+ workingCopy : org\l- serialVersionUID : long\l+ coreException : CoreException\l|# null() : \l# null() : \l# WorkingCopyDocument(org, SearchParticipant) : \l# toString() : String\l# null() : \l# WrappedCoreException(CoreException) : \l# addWorkingCopies(SearchPattern, SearchDocument, org, SearchParticipant) : SearchDocument\l# setFocus(SearchPattern, IJavaElement) : \l# workingCopiesThatCanSeeFocus(org, SearchPattern, SearchParticipant) : HashMap\l# classFileReader(IType) : ClassFileReader\l# findIndexMatches(SearchPattern, Index, IndexQueryRequestor, SearchParticipant, IJavaSearchScope, IProgressMonitor) : \l# getProjectOrJar(IJavaElement) : IJavaElement\l# projectOrJarFocus(SearchPattern) : IJavaElement\l# MatchLocator(SearchPattern, SearchRequestor, IJavaSearchScope, IProgressMonitor) : \l# accept(IBinaryType, PackageBinding, AccessRestriction) : \l# accept(ICompilationUnit, AccessRestriction) : \l# accept(ISourceType, PackageBinding, AccessRestriction) : \l# basicParser() : Parser\l# cacheBinaryType(IType, IBinaryType) : BinaryTypeBinding\l# computeSuperTypeNames(IType) : char\l# createHandle(LambdaExpression, IJavaElement) : IJavaElement\l# createHandle(AbstractMethodDeclaration, IJavaElement) : IJavaElement\l# createBinaryMethodHandle(IType, char, char) : IMethod\l# createMethodHandle(IType, String, String) : IJavaElement\l# createHandle(FieldDeclaration, TypeDeclaration, IJavaElement) : IJavaElement\l# createHandle(AbstractVariableDeclaration, IJavaElement) : IJavaElement\l# createHandle(Annotation, IAnnotatable) : IJavaElement\l# createHandles(FieldDeclaration, TypeDeclaration, IJavaElement) : IJavaElement\l# createHierarchyResolver(IType, PossibleMatch) : boolean\l# createImportHandle(ImportReference) : IJavaElement\l# createPackageDeclarationHandle(CompilationUnitDeclaration) : IJavaElement\l# createTypeHandle(String) : IType\l# encloses(IJavaElement) : boolean\l# filterEnum(SearchMatch) : boolean\l# findLastTypeArgumentInfo(TypeReference) : long\l# getBinaryInfo(ClassFile, IResource) : IBinaryType\l# getFocusType() : IType\l# getMethodBodies(CompilationUnitDeclaration, MatchingNodeSet) : \l# getType(Object, char) : TypeBinding\l# getMethodBinding(MethodPattern) : MethodBinding\l# getInverseFullName(char, char) : List\l# getMaxResult(int) : int\l# mapParameter(List, List) : int\l# getResultMap(Map, Map) : int\l# getSplitNames(char, char) : Map\l# getSplitNames(MethodBinding) : Map\l# getMostApplicableMethod(List, MethodPattern) : MethodBinding\l# getMethodBinding0(MethodPattern) : MethodBinding\l# hasAlreadyDefinedType(CompilationUnitDeclaration) : boolean\l# initialize(JavaProject, int) : \l# locateMatches(JavaProject, PossibleMatch, int, int) : \l# locateMatches(JavaProject, PossibleMatchSet, int) : \l# locateMatches(SearchDocument) : \l# compare(Object, Object) : int\l# locatePackageDeclarations(SearchParticipant, IJavaProject) : \l# locatePackageDeclarations(SearchPattern, SearchParticipant, IJavaProject) : \l# lookupType(ReferenceBinding) : IType\l# newDeclarationMatch(IJavaElement, Binding, int, int, int) : SearchMatch\l# newDeclarationMatch(IJavaElement, Binding, int, int, int, SearchParticipant, IResource) : SearchMatch\l# newFieldReferenceMatch(IJavaElement, IJavaElement, Binding, int, int, int, ASTNode) : FieldReferenceMatch\l# newLocalVariableReferenceMatch(IJavaElement, int, int, int, ASTNode) : SearchMatch\l# newMethodReferenceMatch(IJavaElement, Binding, int, int, int, boolean, boolean, ASTNode) : MethodReferenceMatch\l# newPackageReferenceMatch(IJavaElement, int, int, int, ASTNode) : PackageReferenceMatch\l# newTypeParameterReferenceMatch(IJavaElement, int, int, int, ASTNode) : SearchMatch\l# newTypeReferenceMatch(IJavaElement, Binding, int, int, int, ASTNode) : TypeReferenceMatch\l# newTypeReferenceMatch(IJavaElement, Binding, int, ASTNode) : TypeReferenceMatch\l# parseAndBuildBindings(PossibleMatch, boolean) : boolean\l# process(PossibleMatch, boolean) : \l# purgeMethodStatements(TypeDeclaration, boolean) : \l# reduceParseTree(CompilationUnitDeclaration) : \l# getParticipant() : SearchParticipant\l# report(SearchMatch) : \l# reportAccurateTypeReference(SearchMatch, ASTNode, char) : \l# reportAccurateParameterizedMethodReference(SearchMatch, ASTNode, TypeReference) : \l# reportAccurateParameterizedTypeReference(SearchMatch, TypeReference, int, TypeReference) : \l# reportAccurateEnumConstructorReference(SearchMatch, FieldDeclaration, AllocationExpression) : \l# reportAccurateFieldReference(SearchMatch, QualifiedNameReference) : \l# reportBinaryMemberDeclaration(IResource, IMember, Binding, IBinaryType, int) : \l# reportMatching(LambdaExpression, IJavaElement, int, MatchingNodeSet, boolean) : \l# reportMatching(AbstractMethodDeclaration, TypeDeclaration, IJavaElement, int, boolean, MatchingNodeSet) : \l# reportMatching(Annotation, IJavaElement, IJavaElement, Binding, MatchingNodeSet, boolean, boolean) : \l# reportMatching(Annotation, IJavaElement, Binding, MatchingNodeSet, boolean) : \l# reportMatching(CompilationUnitDeclaration, boolean) : \l# reportMatching(FieldDeclaration, FieldDeclaration, TypeDeclaration, IJavaElement, int, boolean, MatchingNodeSet) : \l# reportMatching(TypeDeclaration, IJavaElement, int, MatchingNodeSet, int) : \l# reportMatching(TypeParameter, IJavaElement, IJavaElement, Binding, MatchingNodeSet) : \l# reportMatchingSuper(TypeReference, IJavaElement, Binding, MatchingNodeSet, boolean) : \l# typeInHierarchy(ReferenceBinding) : boolean\l}"
	 ]

	 ClassAndMethodDeclarationVisitor [
		 label = "{ClassAndMethodDeclarationVisitor|# nodeSet : MatchingNodeSet\l# patternLocator : PatternLocator\l- localDeclarationVisitor : ASTVisitor\l# patternFineGrain : int\l|# createParser(ProblemReporter, MatchLocator) : MatchLocatorParser\l# null() : \l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# null() : \l# visit(TypeDeclaration, BlockScope) : boolean\l# null() : \l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# visit(AnnotationMethodDeclaration, ClassScope) : boolean\l# null() : \l# visit(TypeDeclaration, BlockScope) : boolean\l# MatchLocatorParser(ProblemReporter, MatchLocator) : \l# checkComment() : \l# classInstanceCreation(boolean) : \l# consumeAdditionalBound() : \l# consumeAssignment() : \l# consumeCastExpressionLL1() : \l# consumeCastExpressionLL1WithBounds() : \l# consumeCastExpressionWithGenericsArray() : \l# consumeCastExpressionWithNameArray() : \l# consumeCastExpressionWithPrimitiveType() : \l# consumeCastExpressionWithQualifiedGenericsArray() : \l# consumeCatchFormalParameter() : \l# consumeClassHeaderExtends() : \l# consumeClassInstanceCreationExpressionQualifiedWithTypeArguments() : \l# consumeClassInstanceCreationExpressionWithTypeArguments() : \l# consumeEnterAnonymousClassBody(boolean) : \l# consumeEnterVariable() : \l# consumeExplicitConstructorInvocation(int, int) : \l# consumeExplicitConstructorInvocationWithTypeArguments(int, int) : \l# consumeFieldAccess(boolean) : \l# consumeFormalParameter(boolean) : \l# consumeInstanceOfExpression() : \l# consumeInstanceOfExpressionWithName() : \l# consumeInterfaceType() : \l+ consumeLambdaExpression() : \l# consumeLocalVariableDeclaration() : \l# consumeMarkerAnnotation(boolean) : \l# consumeMemberValuePair() : \l# consumeMethodHeaderName(boolean) : \l# consumeMethodHeaderRightParen() : \l# consumeMethodHeaderThrowsClause() : \l# consumeMethodInvocationName() : \l# consumeMethodInvocationNameWithTypeArguments() : \l# consumeMethodInvocationPrimary() : \l# consumeMethodInvocationPrimaryWithTypeArguments() : \l# consumeMethodInvocationSuper() : \l# consumeMethodInvocationSuperWithTypeArguments() : \l# consumeNormalAnnotation(boolean) : \l# consumeOnlyTypeArguments() : \l# consumePrimaryNoNewArrayWithName() : \l+ consumeReferenceExpression(ReferenceExpression) : \l# consumeSingleMemberAnnotation(boolean) : \l# consumeStatementCatch() : \l# consumeTypeArgumentList1() : \l# consumeTypeArgumentList2() : \l# consumeTypeArgumentList3() : \l# consumeTypeArgumentReferenceType1() : \l# consumeTypeArgumentReferenceType2() : \l# consumeTypeArguments() : \l# consumeTypeElidedLambdaParameter(boolean) : \l# consumeTypeParameter1WithExtends() : \l# consumeTypeParameter1WithExtendsAndBounds() : \l# consumeTypeParameterHeader() : \l# consumeTypeParameterWithExtends() : \l# consumeTypeParameterWithExtendsAndBounds() : \l# consumeUnaryExpression(int, boolean) : \l# consumeWildcardBounds1Extends() : \l# consumeWildcardBounds1Super() : \l# consumeWildcardBounds2Extends() : \l# consumeWildcardBounds2Super() : \l# consumeWildcardBounds3Extends() : \l# consumeWildcardBounds3Super() : \l# consumeWildcardBoundsExtends() : \l# consumeWildcardBoundsSuper() : \l# augmentTypeWithAdditionalDimensions(TypeReference, int, Annotation, boolean) : TypeReference\l# getTypeReference(int) : TypeReference\l# getUnspecifiedReference(boolean) : NameReference\l# getUnspecifiedReferenceOptimized() : NameReference\l# parseBodies(CompilationUnitDeclaration) : \l# parseBodies(TypeDeclaration, CompilationUnitDeclaration) : \l}"
	 ]

	 MemberDeclarationVisitor [
		 label = "{MemberDeclarationVisitor|- locator : MatchLocator\l- enclosingElement : IJavaElement\l- nodeSet : MatchingNodeSet\l- matchingNodes : ASTNode\l- matchingNode : ASTNode\l# occurrencesCounts : HashtableOfIntValues\l# inTypeOccurrencesCounts : HashtableOfIntValues\l# nodesCount : int\l- annotation : Annotation\l- localDeclaration : LocalDeclaration\l# localElement : IJavaElement\l# localElements : IJavaElement\l# allOtherElements : IJavaElement\l# ptr : int\l# ptrs : int\l- typeInHierarchy : boolean\l|# MemberDeclarationVisitor(IJavaElement, ASTNode, MatchingNodeSet, MatchLocator, boolean) : \l# endVisit(Argument, BlockScope) : \l# endVisit(LocalDeclaration, BlockScope) : \l# endVisit(MarkerAnnotation, BlockScope) : \l# endVisit(NormalAnnotation, BlockScope) : \l# endVisit(SingleMemberAnnotation, BlockScope) : \l# getLocalElement(int) : IJavaElement\l# getOtherElements(int) : IJavaElement\l# matchNode(ASTNode) : int\l# storeHandle(int) : \l# visit(Argument, BlockScope) : boolean\l# visit(LambdaExpression, BlockScope) : boolean\l# visit(LocalDeclaration, BlockScope) : boolean\l# visit(MarkerAnnotation, BlockScope) : boolean\l# visit(NormalAnnotation, BlockScope) : boolean\l# visit(QualifiedNameReference, BlockScope) : boolean\l# visit(QualifiedTypeReference, BlockScope) : boolean\l# visit(SingleMemberAnnotation, BlockScope) : boolean\l# visit(SingleNameReference, BlockScope) : boolean\l# visit(SingleTypeReference, BlockScope) : boolean\l# getInTypeOccurrenceCountForBinaryAnonymousType(TypeDeclaration, char, IJavaElement, int) : int\l# visit(TypeDeclaration, BlockScope) : boolean\l}"
	 ]

	 MethodDeclarationPattern [
		 label = "{MethodDeclarationPattern|+ extraFlags : int\l+ declaringTypeModifiers : int\l+ modifiers : int\l+ signature : char\l+ parameterTypes : char\l+ parameterNames : char\l+ fusedDeclaringQualifier : char\l|# createDeclarationIndexKey(char, char, char, int, char, char, char, char, int, char, int, int) : char\l# encodeExtraFlags(int) : int\l# getTypeErasure(char) : char\l# MethodDeclarationPattern(char, char, char, char, int) : \l# MethodDeclarationPattern(char, char, int) : \l# MethodDeclarationPattern(int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# removeInternalFlags() : \l}"
	 ]

	 MethodLocator [
		 label = "{MethodLocator|# pattern : MethodPattern\l# isDeclarationOfReferencedMethodsPattern : boolean\l+ allSuperDeclaringTypeNames : char\l- samePkgSuperDeclaringTypeNames : char\l- matchLocator : MatchLocator\l- methodDeclarationsWithInvalidParam : HashMap\l|# MethodLocator(MethodPattern) : \l# clear() : \l# fineGrain() : int\l# getMatchingSuper(ReferenceBinding) : ReferenceBinding\l# getMethodBinding(ReferenceBinding, char, TypeBinding) : MethodBinding\l# initializePolymorphicSearch(MatchLocator) : \l# isTypeInSuperDeclaringTypeNames(char) : boolean\l# isVirtualInvoke(MethodBinding, MessageSend) : boolean\l# match(ASTNode, MatchingNodeSet) : int\l# match(LambdaExpression, MatchingNodeSet) : int\l# match(MethodDeclaration, MatchingNodeSet) : int\l# match(MemberValuePair, MatchingNodeSet) : int\l# match(MessageSend, MatchingNodeSet) : int\l# match(ReferenceExpression, MatchingNodeSet) : int\l# match(Annotation, MatchingNodeSet) : int\l# matchContainer() : int\l# matchLevelAndReportImportRef(ImportReference, Binding, MatchLocator) : \l# matchMethod(MethodBinding, boolean) : int\l# matchOverriddenMethod(ReferenceBinding, MethodBinding, MethodBinding) : boolean\l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(MessageSend, MatchLocator, int, MethodBinding) : \l# methodParametersEqualsPattern(MethodBinding) : boolean\l# newDeclarationMatch(ASTNode, IJavaElement, Binding, int, int, MatchLocator) : SearchMatch\l# referenceType() : int\l# reportDeclaration(MethodBinding, MatchLocator, SimpleSet) : \l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# resolveLevel(MessageSend) : int\l# resolveLevel(ReferenceExpression) : int\l# resolveLevelAsSubtype(char, char, ReferenceBinding, char, TypeBinding, char, boolean) : int\l# resolveLevelAsSuperInvocation(ReferenceBinding, TypeBinding, char, boolean) : boolean\l# toString() : String\l}"
	 ]

	 MethodPattern [
		 label = "{MethodPattern|# findDeclarations : boolean\l# findReferences : boolean\l+ selector : char\l+ declaringQualification : char\l+ declaringSimpleName : char\l+ declaringPackageName : char\l+ returnQualification : char\l+ returnSimpleName : char\l+ parameterQualifications : char\l+ parameterSimpleNames : char\l+ parameterCount : int\l+ varargs : boolean\l# declaringType : IType\l# returnTypeSignatures : char\l# parametersTypeSignatures : char\l# parametersTypeArguments : char\l# methodParameters : boolean\l# methodArguments : char\l# REF_CATEGORIES : char\l# REF_AND_DECL_CATEGORIES : char\l# DECL_CATEGORIES : char\l+ FINE_GRAIN_MASK : int\l|# createIndexKey(char, int) : char\l# MethodPattern(int) : \l# MethodPattern(char, char, char, char, char, char, char, IType, int, int) : \l# MethodPattern(char, char, char, char, char, String, char, char, String, IMethod, int, int) : \l# MethodPattern(char, char, char, String, char, char, String, char, char, String, char, int, int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# hasMethodArguments() : boolean\l# hasMethodParameters() : boolean\l# isPolymorphicSearch() : boolean\l# matchesDecodedKey(SearchPattern) : boolean\l# mustResolve() : boolean\l# queryIn(Index) : EntryResult\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 MultiTypeDeclarationPattern [
		 label = "{MultiTypeDeclarationPattern|+ simpleNames : char\l+ qualifications : char\l+ typeSuffix : char\l# CATEGORIES : char\l|# MultiTypeDeclarationPattern(char, char, char, int) : \l# MultiTypeDeclarationPattern(int) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# matchesDecodedKey(SearchPattern) : boolean\l# queryIn(Index) : EntryResult\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 OrLocator [
		 label = "{OrLocator|# patternLocators : PatternLocator\l|# OrLocator(OrPattern) : \l# initializePolymorphicSearch(MatchLocator) : \l# match(Annotation, MatchingNodeSet) : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(ConstructorDeclaration, MatchingNodeSet) : int\l# match(Expression, MatchingNodeSet) : int\l# match(FieldDeclaration, MatchingNodeSet) : int\l# match(LambdaExpression, MatchingNodeSet) : int\l# match(LocalDeclaration, MatchingNodeSet) : int\l# match(MethodDeclaration, MatchingNodeSet) : int\l# match(MemberValuePair, MatchingNodeSet) : int\l# match(MessageSend, MatchingNodeSet) : int\l# match(Reference, MatchingNodeSet) : int\l# match(ReferenceExpression, MatchingNodeSet) : int\l# match(TypeDeclaration, MatchingNodeSet) : int\l# match(TypeParameter, MatchingNodeSet) : int\l# match(TypeReference, MatchingNodeSet) : int\l# matchContainer() : int\l# matchLevelAndReportImportRef(ImportReference, Binding, MatchLocator) : \l# matchReportImportRef(ImportReference, Binding, IJavaElement, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# newDeclarationMatch(ASTNode, IJavaElement, Binding, int, int, MatchLocator) : SearchMatch\l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# setFlavors(int) : \l# recordResolution(QualifiedTypeReference, TypeBinding) : \l}"
	 ]

	 OrPattern [
		 label = "{OrPattern|# patterns : SearchPattern\l# matchCompatibility : int\l|# OrPattern(SearchPattern, SearchPattern) : \l# findIndexMatches(Index, IndexQueryRequestor, SearchParticipant, IJavaSearchScope, IProgressMonitor) : \l# getBlankPattern() : SearchPattern\l# isErasureMatch() : boolean\l# isPolymorphicSearch() : boolean\l# hasPackageDeclaration() : boolean\l# hasSignatures() : boolean\l# toString() : String\l}"
	 ]

	 PackageDeclarationLocator [
		 label = "{PackageDeclarationLocator|# pattern : PackageDeclarationPattern\l|# PackageDeclarationLocator(PackageDeclarationPattern) : \l# matchContainer() : int\l# toString() : String\l}"
	 ]

	 PackageDeclarationPattern [
		 label = "{PackageDeclarationPattern|# pkgName : char\l|# PackageDeclarationPattern(char, int) : \l# queryIn(Index) : EntryResult\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 PackageReferenceLocator [
		 label = "{PackageReferenceLocator|# pattern : PackageReferencePattern\l|# isDeclaringPackageFragment(IPackageFragment, ReferenceBinding) : boolean\l# PackageReferenceLocator(PackageReferencePattern) : \l# match(Annotation, MatchingNodeSet) : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(Reference, MatchingNodeSet) : int\l# match(TypeReference, MatchingNodeSet) : int\l# matchLevel(ImportReference) : int\l# matchLevelForTokens(char) : int\l# matchLevelAndReportImportRef(ImportReference, Binding, MatchLocator) : \l# matchReportImportRef(ImportReference, Binding, IJavaElement, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# referenceType() : int\l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# resolveLevel(QualifiedNameReference) : int\l# toString() : String\l}"
	 ]

	 PackageReferencePattern [
		 label = "{PackageReferencePattern|# pkgName : char\l# segments : char\l# currentSegment : int\l# CATEGORIES : char\l|# PackageReferencePattern(char, int) : \l# PackageReferencePattern(int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexKey() : char\l# getIndexCategories() : char\l# hasNextQuery() : boolean\l# matchesDecodedKey(SearchPattern) : boolean\l# resetQuery() : \l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 PatternLocator [
		 label = "{PatternLocator|# matchMode : int\l# isCaseSensitive : boolean\l# isEquivalentMatch : boolean\l# isErasureMatch : boolean\l# mustResolve : boolean\l# mayBeGeneric : boolean\l# match : SearchMatch\l+ IMPOSSIBLE_MATCH : int\l+ INACCURATE_MATCH : int\l+ POSSIBLE_MATCH : int\l+ ACCURATE_MATCH : int\l+ ERASURE_MATCH : int\l# flavors : int\l+ NO_FLAVOR : int\l+ EXACT_FLAVOR : int\l+ PREFIX_FLAVOR : int\l+ PATTERN_FLAVOR : int\l+ REGEXP_FLAVOR : int\l+ CAMELCASE_FLAVOR : int\l+ SUPER_INVOCATION_FLAVOR : int\l+ SUB_INVOCATION_FLAVOR : int\l+ OVERRIDDEN_METHOD_FLAVOR : int\l+ SUPERTYPE_REF_FLAVOR : int\l+ MATCH_LEVEL_MASK : int\l+ FLAVORS_MASK : int\l+ COMPILATION_UNIT_CONTAINER : int\l+ CLASS_CONTAINER : int\l+ METHOD_CONTAINER : int\l+ FIELD_CONTAINER : int\l+ ALL_CONTAINER : int\l+ RAW_MASK : int\l+ RULE_MASK : int\l|# patternLocator(SearchPattern) : PatternLocator\l# qualifiedPattern(char, char) : char\l# qualifiedSourceName(TypeBinding) : char\l# PatternLocator(SearchPattern) : \l# clear() : \l# getQualifiedPattern(char, char) : char\l# getQualifiedSourceName(TypeBinding) : char\l# getTypeNameBinding(int) : TypeBinding\l# initializePolymorphicSearch(MatchLocator) : \l# match(Annotation, MatchingNodeSet) : int\l# match(ASTNode, MatchingNodeSet) : int\l# match(ConstructorDeclaration, MatchingNodeSet) : int\l# match(Expression, MatchingNodeSet) : int\l# match(FieldDeclaration, MatchingNodeSet) : int\l# match(LambdaExpression, MatchingNodeSet) : int\l# match(LocalDeclaration, MatchingNodeSet) : int\l# match(MethodDeclaration, MatchingNodeSet) : int\l# match(MemberValuePair, MatchingNodeSet) : int\l# match(MessageSend, MatchingNodeSet) : int\l# match(Reference, MatchingNodeSet) : int\l# match(ReferenceExpression, MatchingNodeSet) : int\l# match(TypeDeclaration, MatchingNodeSet) : int\l# match(TypeParameter, MatchingNodeSet) : int\l# match(TypeReference, MatchingNodeSet) : int\l# matchContainer() : int\l# fineGrain() : int\l# matchesName(char, char) : boolean\l# matchNameValue(char, char) : int\l# matchesTypeReference(char, TypeReference) : boolean\l# matchLevel(ImportReference) : int\l# matchLevelAndReportImportRef(ImportReference, Binding, MatchLocator) : \l# matchReportImportRef(ImportReference, Binding, IJavaElement, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# matchReportReference(ASTNode, IJavaElement, IJavaElement, IJavaElement, Binding, int, MatchLocator) : \l# newDeclarationMatch(ASTNode, IJavaElement, Binding, int, int, MatchLocator) : SearchMatch\l# referenceType() : int\l# resolveLevel(ASTNode) : int\l# setFlavors(int) : \l# updateMatch(ParameterizedTypeBinding, char, MatchLocator) : \l# updateMatch(ParameterizedTypeBinding, char, boolean, int, MatchLocator) : \l# updateMatch(TypeBinding, MatchLocator, char, boolean) : \l# resolveLevel(Binding) : int\l# resolveLevelForType(char, char, TypeBinding) : int\l# resolveLevelForType(char, TypeBinding) : int\l# resolveLevelForType(char, char, char, int, TypeBinding) : int\l# toString() : String\l# recordResolution(QualifiedTypeReference, TypeBinding) : \l}"
	 ]

	 PossibleMatch [
		 label = "{PossibleMatch|+ NO_SOURCE_FILE_NAME : String\l+ NO_SOURCE_FILE : char\l+ resource : IResource\l+ openable : Openable\l+ nodeSet : MatchingNodeSet\l+ compoundName : char\l# parsedUnit : CompilationUnitDeclaration\l+ document : SearchDocument\l- sourceFileName : String\l- source : char\l- similarMatch : PossibleMatch\l|# PossibleMatch(MatchLocator, IResource, Openable, SearchDocument, boolean) : \l# cleanUp() : \l# equals(Object) : boolean\l# getContents() : char\l# getFileName() : char\l# getMainTypeName() : char\l# getPackageName() : char\l# getQualifiedName() : char\l# getSimilarMatch() : PossibleMatch\l# getSourceFileName() : String\l# hasSimilarMatch() : boolean\l# hashCode() : int\l# ignoreOptionalProblems() : boolean\l# setSimilarMatch(PossibleMatch) : \l# toString() : String\l}"
	 ]

	 PossibleMatchSet [
		 label = "{PossibleMatchSet|- rootsToPossibleMatches : SimpleLookupTable\l- elementCount : int\l|# add(PossibleMatch) : \l# getPossibleMatches(IPackageFragmentRoot) : PossibleMatch\l# reset() : \l}"
	 ]

	 QualifiedTypeDeclarationPattern [
		 label = "{QualifiedTypeDeclarationPattern|+ qualification : char\l# packagePattern : PackageDeclarationPattern\l+ packageIndex : int\l|# QualifiedTypeDeclarationPattern(char, char, char, int) : \l# QualifiedTypeDeclarationPattern(char, int, char, char, int) : \l# QualifiedTypeDeclarationPattern(int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# matchesDecodedKey(SearchPattern) : boolean\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 SecondaryTypeDeclarationPattern [
		 label = "{SecondaryTypeDeclarationPattern|- SECONDARY_PATTERN_KEY : char\l|# SecondaryTypeDeclarationPattern() : \l# SecondaryTypeDeclarationPattern(int) : \l# getBlankPattern() : SearchPattern\l# print(StringBuffer) : StringBuffer\l# queryIn(Index) : EntryResult\l}"
	 ]

	 TypeDeclarationVisitor [
		 label = "{TypeDeclarationVisitor|# pattern : SearchPattern\l# typeSimpleName : char\l# typeQualification : char\l# locator : MatchLocator\l# type : IType\l# progressMonitor : IProgressMonitor\l# result : char\l# resultIndex : int\l# samePackageSuperTypeName : char\l# samePackageIndex : int\l|# null() : \l# visit(TypeDeclaration, BlockScope) : boolean\l# visit(TypeDeclaration, CompilationUnitScope) : boolean\l# visit(TypeDeclaration, ClassScope) : boolean\l# visit(FieldDeclaration, MethodScope) : boolean\l# visit(Initializer, MethodScope) : boolean\l# visit(ConstructorDeclaration, ClassScope) : boolean\l# visit(MethodDeclaration, ClassScope) : boolean\l# SuperTypeNamesCollector(SearchPattern, char, char, MatchLocator, IType, IProgressMonitor) : \l# addIfSamePackage(char, char) : boolean\l# addToResult(char) : \l# buildBindings(ICompilationUnit, boolean) : CompilationUnitDeclaration\l# collect() : char\l# collectSuperTypeNames(ReferenceBinding, char) : \l# getPathsOfDeclaringType() : String\l# acceptIndexMatch(String, SearchPattern, SearchParticipant, AccessRuleSet) : boolean\l# getSamePackageSuperTypeNames() : char\l# matches(char) : boolean\l# matches(ReferenceBinding) : boolean\l}"
	 ]

	 SuperTypeReferenceLocator [
		 label = "{SuperTypeReferenceLocator|# pattern : SuperTypeReferencePattern\l|# SuperTypeReferenceLocator(SuperTypeReferencePattern) : \l# match(LambdaExpression, MatchingNodeSet) : int\l# match(TypeReference, MatchingNodeSet) : int\l# matchContainer() : int\l# matchReportReference(ASTNode, IJavaElement, Binding, int, MatchLocator) : \l# referenceType() : int\l# resolveLevel(ASTNode) : int\l# resolveLevel(Binding) : int\l# toString() : String\l}"
	 ]

	 SuperTypeReferencePattern [
		 label = "{SuperTypeReferencePattern|+ superQualification : char\l+ superSimpleName : char\l+ superClassOrInterface : char\l+ typeSuffix : char\l+ pkgName : char\l+ simpleName : char\l+ enclosingTypeName : char\l+ classOrInterface : char\l+ modifiers : int\l+ typeParameterSignatures : char\l# superRefKind : int\l+ ALL_SUPER_TYPES : int\l+ ONLY_SUPER_INTERFACES : int\l+ ONLY_SUPER_CLASSES : int\l# CATEGORIES : char\l|# createIndexKey(int, char, char, char, char, char, char, char) : char\l# SuperTypeReferencePattern(char, char, int, int) : \l# SuperTypeReferencePattern(char, char, int, char, int) : \l# SuperTypeReferencePattern(int) : \l# decodeIndexKey(char) : \l# getBlankPattern() : SearchPattern\l# getIndexCategories() : char\l# matchesDecodedKey(SearchPattern) : boolean\l# queryIn(Index) : EntryResult\l# print(StringBuffer) : StringBuffer\l}"
	 ]

	 TypeDeclarationLocator [
		 label = "{TypeDeclarationLocator|# pattern : TypeDeclarationPattern\l|# TypeDeclarationLocator(TypeDeclarationPattern) : \l# match(TypeDeclaration, MatchingNodeSet) : i
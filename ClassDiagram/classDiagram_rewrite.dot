digraph ClassDiagram {
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8

	 node [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
		 shape = "record"
	 ]

	 edge [
		 fontname = "Bistream Vera Sans"
		 fontsize = 8
	 ]

	 ASTRewrite [
		 label = "{ASTRewrite|- ast : AST\l- eventStore : RewriteEventStore\l- nodeStore : NodeInfoStore\l- targetSourceRangeComputer : TargetSourceRangeComputer\l- property1 : Object\l- property2 : Object\l|# create(AST) : ASTRewrite\l# ASTRewrite(AST) : \l# getAST() : AST\l# getRewriteEventStore() : RewriteEventStore\l# getNodeStore() : NodeInfoStore\l# rewriteAST(IDocument, Map) : TextEdit\l# rewriteAST() : TextEdit\l# internalRewriteAST(char, LineInformation, String, List, Map, ASTNode, RecoveryScannerData) : TextEdit\l# getRootNode() : ASTNode\l# remove(ASTNode, TextEditGroup) : \l# replace(ASTNode, ASTNode, TextEditGroup) : \l# set(ASTNode, StructuralPropertyDescriptor, Object, TextEditGroup) : \l# get(ASTNode, StructuralPropertyDescriptor) : Object\l# getListRewrite(ASTNode, ChildListPropertyDescriptor) : ListRewrite\l# getProperty(String) : Object\l# track(ASTNode) : ITrackedNodePosition\l# validateIsExistingNode(ASTNode) : \l# validateIsCorrectAST(ASTNode) : \l# validateIsListProperty(StructuralPropertyDescriptor) : \l# validateIsPropertyOfNode(StructuralPropertyDescriptor, ASTNode) : \l# validatePropertyType(StructuralPropertyDescriptor, Object) : \l# createStringPlaceholder(String, int) : ASTNode\l# createGroupNode(ASTNode) : ASTNode\l# createTargetNode(ASTNode, boolean) : ASTNode\l# createCopyTarget(ASTNode) : ASTNode\l# createMoveTarget(ASTNode) : ASTNode\l# getExtendedSourceRangeComputer() : TargetSourceRangeComputer\l# setProperty(String, Object) : \l# setTargetSourceRangeComputer(TargetSourceRangeComputer) : \l# toString() : String\l}"
	 ]

	 ImportRewriteContext [
		 label = "{ImportRewriteContext|+ RES_NAME_FOUND : int\l+ RES_NAME_UNKNOWN : int\l+ RES_NAME_CONFLICT : int\l+ RES_NAME_UNKNOWN_NEEDS_EXPLICIT_IMPORT : int\l+ KIND_TYPE : int\l+ KIND_STATIC_FIELD : int\l+ KIND_STATIC_METHOD : int\l+ findInContext : int\l- STATIC_PREFIX : char\l- NORMAL_PREFIX : char\l- defaultContext : ImportRewriteContext\l- compilationUnit : ICompilationUnit\l- astRoot : CompilationUnit\l- restoreExistingImports : boolean\l- existingImports : List\l- importsKindMap : Map\l- importOrder : String\l- importOnDemandThreshold : int\l- staticImportOnDemandThreshold : int\l- addedImports : List\l- removedImports : List\l- typeExplicitSimpleNames : Set\l- staticExplicitSimpleNames : Set\l- createdImports : String\l- createdStaticImports : String\l- filterImplicitImports : boolean\l- useContextToFilterImplicitImports : boolean\l|# null(String, String, int) : \l# create(ICompilationUnit, boolean) : ImportRewrite\l# create(CompilationUnit, boolean) : ImportRewrite\l# ImportRewrite(ICompilationUnit, CompilationUnit, List) : \l# findInContext(String, String, int) : int\l# setImportOrder(String) : \l# setOnDemandImportThreshold(int) : \l# setStaticOnDemandImportThreshold(int) : \l# getCompilationUnit() : ICompilationUnit\l# getDefaultImportRewriteContext() : ImportRewriteContext\l# setFilterImplicitImports(boolean) : \l# setUseContextToFilterImplicitImports(boolean) : \l# compareImport(char, String, String, String) : int\l# findInImports(String, String, int) : int\l# addAnnotation(IAnnotationBinding, AST, ImportRewriteContext) : Annotation\l# addImportFromSignature(String, AST) : Type\l# addImportFromSignature(String, AST, ImportRewriteContext) : Type\l# addImport(ITypeBinding) : String\l# addImport(ITypeBinding, ImportRewriteContext) : String\l# containsNestedCapture(ITypeBinding, boolean) : boolean\l# containsNestedCapture(String) : boolean\l# normalizeTypeBinding(ITypeBinding) : ITypeBinding\l# addImport(ITypeBinding, AST) : Type\l# addImport(ITypeBinding, AST, ImportRewriteContext) : Type\l# addImport(String, ImportRewriteContext) : String\l# addImport(String) : String\l# addStaticImport(IBinding) : String\l# addStaticImport(IBinding, ImportRewriteContext) : String\l# addStaticImport(String, String, boolean) : String\l# addStaticImport(String, String, boolean, ImportRewriteContext) : String\l# internalAddImport(String, ImportRewriteContext) : String\l# addEntry(String) : \l# removeEntry(String) : boolean\l# removeImport(String) : boolean\l# removeStaticImport(String) : boolean\l# getRawName(ITypeBinding) : String\l# getRawQualifiedName(ITypeBinding) : String\l# rewriteImports(IProgressMonitor) : TextEdit\l# buildImportRewriteConfiguration() : ImportRewriteConfiguration\l# getCreatedImports() : String\l# getCreatedStaticImports() : String\l# getAddedImports() : String\l# getAddedStaticImports() : String\l# getRemovedImports() : String\l# getRemovedStaticImports() : String\l# hasRecordedChanges() : boolean\l# filterFromList(List, char) : String\l# annotateList(List, IAnnotationBinding, AST, ImportRewriteContext) : \l# annotateType(ITypeBinding, AST, ImportRewriteContext, Type) : Type\l# buildType(ITypeBinding, ITypeBinding, AST, ImportRewriteContext, Type) : Type\l# checkAnnotationAndGenerics(ITypeBinding) : ITypeBinding\l# createBaseType(AST, ImportRewriteContext, ITypeBinding) : Type\l# getArrayType(Type, AST, ImportRewriteContext, ITypeBinding) : Type\l# internalAddImport(ITypeBinding, AST, ImportRewriteContext, Type, boolean) : Type\l# addAnnotation(AST, Object, ImportRewriteContext) : Expression\l}"
	 ]

	 ITrackedNodePosition [
		 label = "{ITrackedNodePosition||# getStartPosition() : int\l# getLength() : int\l}"
	 ]

	 ListRewrite [
		 label = "{ListRewrite|- parent : ASTNode\l- childListProperty : ChildListPropertyDescriptor\l- rewriter : ASTRewrite\l|# ListRewrite(ASTRewrite, ASTNode, ChildListPropertyDescriptor) : \l# getRewriteStore() : RewriteEventStore\l# getEvent() : ListRewriteEvent\l# getParent() : ASTNode\l# getLocationInParent() : StructuralPropertyDescriptor\l# remove(ASTNode, TextEditGroup) : \l# getASTRewrite() : ASTRewrite\l# replace(ASTNode, ASTNode, TextEditGroup) : \l# insertAfter(ASTNode, ASTNode, TextEditGroup) : \l# insertBefore(ASTNode, ASTNode, TextEditGroup) : \l# insertFirst(ASTNode, TextEditGroup) : \l# insertLast(ASTNode, TextEditGroup) : \l# insertAt(ASTNode, int, TextEditGroup) : \l# internalInsertAt(ASTNode, int, boolean, TextEditGroup) : \l# validatePropertyType(ASTNode) : \l# createTargetNode(ASTNode, ASTNode, boolean, ASTNode, TextEditGroup) : ASTNode\l# createCopyTarget(ASTNode, ASTNode) : ASTNode\l# createMoveTarget(ASTNode, ASTNode) : ASTNode\l# createMoveTarget(ASTNode, ASTNode, ASTNode, TextEditGroup) : ASTNode\l# isInsertBoundToPreviousByDefault(ASTNode) : boolean\l# getOriginalList() : List\l# getRewrittenList() : List\l}"
	 ]

	 SourceRange [
		 label = "{SourceRange|- startPosition : int\l- length : int\l|# null() : \l# SourceRange(int, int) : \l# getStartPosition() : int\l# getLength() : int\l# TargetSourceRangeComputer() : \l# computeSourceRange(ASTNode) : SourceRange\l}"
	 ]

	 SwitchListRewriter [
		 label = "{SwitchListRewriter|- INTERNAL_ARRAY_COMPONENT_TYPE_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_FIELD_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_INITIALIZER_MODIFIERS_PROPERTY3 : SimplePropertyDescriptor\l- INTERNAL_METHOD_MODIFIERS_PROPERTY2 : SimplePropertyDescriptor\l- INTERNAL_METHOD_RETURN_TYPE_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_METHOD_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY : ChildListPropertyDescriptor\l- INTERNAL_TYPE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_TYPE_SUPERCLASS_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_TYPE_SUPER_INTERFACES_PROPERTY : ChildListPropertyDescriptor\l- INTERNAL_CIC_NAME_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_FRAGMENT_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_TDS_TYPE_DECLARATION_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_VARIABLE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VARIABLE_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VDE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VDS_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- JLS2_INTERNAL : int\l- JLS3_INTERNAL : int\l- JLS4_INTERNAL : int\l# currentEdit : TextEdit\l# eventStore : RewriteEventStore\l- tokenScanner : TokenScanner\l- sourceCopyInfoToEdit : Map\l- sourceCopyEndNodes : Stack\l- content : char\l- lineInfo : LineInformation\l- formatter : ASTRewriteFormatter\l- nodeInfos : NodeInfoStore\l- extendedSourceRangeComputer : TargetSourceRangeComputer\l- lineCommentEndOffsets : LineCommentEndOffsets\l- beforeRequiredSpaceIndex : int\l# options : Map\l- recoveryScannerData : RecoveryScannerData\l# constantSeparator : String\l# startPos : int\l# list : RewriteEvent\l+ DEFAULT_SPACING : int\l- initialIndent : int\l- separatorLines : int\l- annotationSeparation : Prefix\l- indentSwitchStatementsCompareToCases : boolean\l|# ASTRewriteAnalyzer(char, LineInformation, String, TextEdit, RewriteEventStore, NodeInfoStore, List, Map, TargetSourceRangeComputer, RecoveryScannerData) : \l# getScanner() : TokenScanner\l# getContent() : char\l# getLineInformation() : LineInformation\l# getLineCommentEndOffsets() : LineCommentEndOffsets\l# getExtendedRange(ASTNode) : SourceRange\l# getExtendedOffset(ASTNode) : int\l# getExtendedEnd(ASTNode) : int\l# getCopySourceEdit(CopySourceInfo) : TextEdit\l# getChangeKind(ASTNode, StructuralPropertyDescriptor) : int\l# hasChildrenChanges(ASTNode) : boolean\l# isChanged(ASTNode, StructuralPropertyDescriptor) : boolean\l# isCollapsed(ASTNode) : boolean\l# isInsertBoundToPrevious(ASTNode) : boolean\l# getEditGroup(ASTNode, StructuralPropertyDescriptor) : TextEditGroup\l# getEvent(ASTNode, StructuralPropertyDescriptor) : RewriteEvent\l# getEditGroup(RewriteEvent) : TextEditGroup\l# getOriginalValue(ASTNode, StructuralPropertyDescriptor) : Object\l# getNewValue(ASTNode, StructuralPropertyDescriptor) : Object\l# addEdit(TextEdit) : \l# getLineDelimiter() : String\l# createIndentString(int) : String\l# getIndentOfLine(int) : String\l# getIndentAtOffset(int) : String\l# doTextInsert(int, String, TextEditGroup) : \l# addEditGroup(TextEditGroup, TextEdit) : \l# doTextRemove(int, int, TextEditGroup) : TextEdit\l# doTextRemoveAndVisit(int, int, ASTNode, TextEditGroup) : \l# doVisit(ASTNode) : int\l# doVisit(ASTNode, StructuralPropertyDescriptor, int) : int\l# doVisitList(List, int) : int\l# voidVisit(ASTNode) : \l# voidVisit(ASTNode, StructuralPropertyDescriptor) : \l# voidVisitList(List) : \l# doVisitUnchangedChildren(ASTNode) : boolean\l# doTextReplace(int, int, String, TextEditGroup) : \l# doTextCopy(TextEdit, int, int, String, TextEditGroup) : TextEdit\l# changeNotSupported(ASTNode) : \l# null() : \l# getOriginalNode(int) : ASTNode\l# getNewNode(int) : ASTNode\l# getSeparatorString(int) : String\l# getInitialIndent() : int\l# getNodeIndent(int) : int\l# getStartOfNextNode(int, int) : int\l# getEndOfNode(ASTNode) : int\l# rewriteList(ASTNode, StructuralPropertyDescriptor, int, String, String) : int\l# insertAfterSeparator(ASTNode) : boolean\l# lineCommentSwallowsActualCode(int) : boolean\l# mustRemoveSeparator(int, int) : boolean\l# rewriteList(ASTNode, StructuralPropertyDescriptor, String, String, int) : int\l# rewriteList(ASTNode, StructuralPropertyDescriptor, int, String) : int\l# updateIndent(int, int, int, TextEditGroup) : \l# rewriteList(ASTNode, StructuralPropertyDescriptor, int, String, String, String) : int\l# rewriteRequiredNode(ASTNode, StructuralPropertyDescriptor) : int\l# rewriteNode(ASTNode, StructuralPropertyDescriptor, int, Prefix) : int\l# rewriteJavadoc(ASTNode, StructuralPropertyDescriptor) : int\l# rewriteBodyNode(ASTNode, StructuralPropertyDescriptor, int, int, int, BlockContext) : int\l# rewriteOptionalQualifier(ASTNode, StructuralPropertyDescriptor, int) : int\l# null() : \l# ParagraphListRewriter(int, int) : \l# getInitialIndent() : int\l# getSeparatorString(int) : String\l# getSeparatorString(int, int) : String\l# getNode(int) : ASTNode\l# getNewLines(int) : int\l# countEmptyLines(ASTNode) : int\l# mustRemoveSeparator(int, int) : boolean\l# rewriteParagraphList(ASTNode, StructuralPropertyDescriptor, int, int, int, int) : int\l# rewriteOptionalTypeParameters(ASTNode, StructuralPropertyDescriptor, int, String, boolean, boolean) : int\l# isAllOfKind(RewriteEvent, int) : boolean\l# rewriteNodeList(ASTNode, StructuralPropertyDescriptor, int, String, String, String) : int\l# rewriteNodeList(ASTNode, StructuralPropertyDescriptor, int, String, String) : int\l# rewriteMethodBody(MethodDeclaration, int) : \l# rewriteExtraDimensionsInfo(ASTNode, int, ChildListPropertyDescriptor) : int\l# rewriteExtraDimensions(ASTNode, StructuralPropertyDescriptor, int) : int\l# rewriteExtraDimensions(int, int, int, TextEditGroup) : \l# getPosAfterLeftBrace(int) : int\l# getPosAfterTry(int) : int\l# getIndent(int) : int\l# doTextInsert(int, ASTNode, int, boolean, TextEditGroup) : \l# needsNewLineForLineComment(ASTNode, String, int) : boolean\l# getCurrentLineStart(String, int) : int\l# rewriteModifiers(ASTNode, StructuralPropertyDescriptor, int) : \l# null() : \l# ModifierRewriter(Prefix) : \l# getSeparatorString(int) : String\l# rewriteModifiers2(ASTNode, ChildListPropertyDescriptor, int) : int\l# rewriteTypeAnnotations(ASTNode, ChildListPropertyDescriptor, int) : int\l# rewriteVarargsAnnotations(ASTNode, ChildListPropertyDescriptor, int) : int\l# replaceOperation(int, String, TextEditGroup) : \l# rewriteOperation(ASTNode, StructuralPropertyDescriptor, int) : \l# postVisit(ASTNode) : \l# preVisit(ASTNode) : \l# doCopySourcePreVisit(CopySourceInfo, Stack) : \l# doCopySourcePostVisit(ASTNode, Stack) : \l# visit(CompilationUnit) : boolean\l# visit(TypeDeclaration) : boolean\l# rewriteReturnType(MethodDeclaration, boolean, boolean) : \l# rewriteMethodReceiver(MethodDeclaration, int) : int\l# getPreviousNode(ASTNode) : ASTNode\l# getPreviousTokenEndOffset(ASTNode, int) : int\l# visit(Dimension) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(Block) : boolean\l# visit(ReturnStatement) : boolean\l# visit(AnonymousClassDeclaration) : boolean\l# visit(ArrayAccess) : boolean\l# visit(ArrayCreation) : boolean\l# insertAnnotationsOnDimension(ArrayType, int, int, TextEditGroup, boolean) : \l# rewriteAnnotationsOnDimension(ArrayType, ArrayType, int, int, boolean, TextEditGroup) : \l# retrieveRightBracketEndPosition(int, int, boolean) : int\l# getElementType(ArrayType) : Type\l# getDimensions(ArrayType) : int\l# visit(ArrayInitializer) : boolean\l# rewriteArrayTypeDimensions(ArrayType, int) : int\l# visit(ArrayType) : boolean\l# visit(AssertStatement) : boolean\l# visit(Assignment) : boolean\l# visit(BooleanLiteral) : boolean\l# visit(BreakStatement) : boolean\l# visit(CastExpression) : boolean\l# visit(CatchClause) : boolean\l# visit(CharacterLiteral) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(ConditionalExpression) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(ContinueStatement) : boolean\l# visitReferenceTypeArguments(ASTNode, StructuralPropertyDescriptor, int) : \l# visit(CreationReference) : boolean\l# visit(DoStatement) : boolean\l# visit(EmptyStatement) : boolean\l# visit(ExpressionStatement) : boolean\l# visit(FieldAccess) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(ForStatement) : boolean\l# visit(IfStatement) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(InfixExpression) : boolean\l# visit(Initializer) : boolean\l# visit(InstanceofExpression) : boolean\l# ensureSpaceAfterReplace(ASTNode, ChildPropertyDescriptor) : \l# ensureSpaceBeforeReplace(ASTNode) : \l# visit(IntersectionType) : boolean\l# visit(Javadoc) : boolean\l# visit(LabeledStatement) : boolean\l# visit(LambdaExpression) : boolean\l# visit(MethodInvocation) : boolean\l# visit(NullLiteral) : boolean\l# visit(NumberLiteral) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ParenthesizedExpression) : boolean\l# visit(PostfixExpression) : boolean\l# visit(PrefixExpression) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(StringLiteral) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(SuperFieldAccess) : boolean\l# visit(SuperMethodInvocation) : boolean\l# visit(SwitchCase) : boolean\l# null() : \l# SwitchListRewriter(int) : \l# getNodeIndent(int) : int\l# getSeparatorString(int) : String\l# updateIndent(int, int, int, TextEditGroup) : \l# visit(SwitchStatement) : boolean\l# visit(SynchronizedStatement) : boolean\l# visit(ThisExpression) : boolean\l# visit(ThrowStatement) : boolean\l# visit(TryStatement) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(TypeLiteral) : boolean\l# visit(UnionType) : boolean\l# visit(VariableDeclarationExpression) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(VariableDeclarationStatement) : boolean\l# visit(WhileStatement) : boolean\l# visit(MemberRef) : boolean\l# visit(MethodRef) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(TagElement) : boolean\l# findTagNameEnd(TagElement) : int\l# visit(TextElement) : boolean\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnnotationTypeMemberDeclaration) : boolean\l# visit(EnhancedForStatement) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(ExpressionMethodReference) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(MemberValuePair) : boolean\l# visit(Modifier) : boolean\l# visit(NormalAnnotation) : boolean\l# visit(NameQualifiedType) : boolean\l# visit(ParameterizedType) : boolean\l# visit(QualifiedType) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(SuperMethodReference) : boolean\l# visit(TypeMethodReference) : boolean\l# visit(TypeParameter) : boolean\l# visit(WildcardType) : boolean\l# handleException(Throwable) : \l}"
	 ]

	 ASTRewriteFlattener [
		 label = "{ASTRewriteFlattener|- INTERNAL_ARRAY_COMPONENT_TYPE_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_FIELD_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_INITIALIZER_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_METHOD_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_METHOD_RETURN_TYPE_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_METHOD_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_METHOD_THROWN_EXCEPTIONS_PROPERTY : ChildListPropertyDescriptor\l- INTERNAL_TYPE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_TYPE_SUPERCLASS_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_TYPE_SUPER_INTERFACES_PROPERTY : ChildListPropertyDescriptor\l- INTERNAL_CIC_NAME_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_FRAGMENT_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_TDS_TYPE_DECLARATION_PROPERTY : ChildPropertyDescriptor\l- INTERNAL_VARIABLE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VARIABLE_EXTRA_DIMENSIONS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VDE_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- INTERNAL_VDS_MODIFIERS_PROPERTY : SimplePropertyDescriptor\l- JLS2_INTERNAL : int\l- JLS3_INTERNAL : int\l- JLS4_INTERNAL : int\l# result : StringBuffer\l- store : RewriteEventStore\l|# asString(ASTNode, RewriteEventStore) : String\l# ASTRewriteFlattener(RewriteEventStore) : \l# getResult() : String\l# reset() : \l# printModifiers(int, StringBuffer) : \l# getChildList(ASTNode, StructuralPropertyDescriptor) : List\l# getChildNode(ASTNode, StructuralPropertyDescriptor) : ASTNode\l# getIntAttribute(ASTNode, StructuralPropertyDescriptor) : int\l# getBooleanAttribute(ASTNode, StructuralPropertyDescriptor) : boolean\l# getAttribute(ASTNode, StructuralPropertyDescriptor) : Object\l# visitList(ASTNode, StructuralPropertyDescriptor, String) : \l# visitList(ASTNode, StructuralPropertyDescriptor, String, String, String) : \l# visitExtraDimensions(ASTNode, SimplePropertyDescriptor, ChildListPropertyDescriptor) : \l# visit(AnonymousClassDeclaration) : boolean\l# visit(ArrayAccess) : boolean\l# visit(ArrayCreation) : boolean\l# internalVisitDimensionAnnotations(ArrayType, int, boolean) : \l# visit(ArrayInitializer) : boolean\l# visit(ArrayType) : boolean\l# visit(AssertStatement) : boolean\l# visit(Assignment) : boolean\l# visit(Block) : boolean\l# visit(BooleanLiteral) : boolean\l# visit(BreakStatement) : boolean\l# visit(CastExpression) : boolean\l# visit(CatchClause) : boolean\l# visit(CharacterLiteral) : boolean\l# visit(ClassInstanceCreation) : boolean\l# visit(CompilationUnit) : boolean\l# visit(ConditionalExpression) : boolean\l# visit(ConstructorInvocation) : boolean\l# visit(ContinueStatement) : boolean\l# visit(CreationReference) : boolean\l# visit(Dimension) : boolean\l# visit(DoStatement) : boolean\l# visit(EmptyStatement) : boolean\l# visit(ExpressionStatement) : boolean\l# visit(FieldAccess) : boolean\l# visit(FieldDeclaration) : boolean\l# visit(ForStatement) : boolean\l# visit(IfStatement) : boolean\l# visit(ImportDeclaration) : boolean\l# visit(InfixExpression) : boolean\l# visit(Initializer) : boolean\l# visit(InstanceofExpression) : boolean\l# visit(IntersectionType) : boolean\l# visit(Javadoc) : boolean\l# visit(LabeledStatement) : boolean\l# visit(LambdaExpression) : boolean\l# visit(MethodDeclaration) : boolean\l# visit(MethodInvocation) : boolean\l# visit(NullLiteral) : boolean\l# visit(NumberLiteral) : boolean\l# visit(PackageDeclaration) : boolean\l# visit(ParenthesizedExpression) : boolean\l# visit(PostfixExpression) : boolean\l# visit(PrefixExpression) : boolean\l# visit(PrimitiveType) : boolean\l# visit(QualifiedName) : boolean\l# visit(ReturnStatement) : boolean\l# visit(SimpleName) : boolean\l# visit(SimpleType) : boolean\l# visit(SingleVariableDeclaration) : boolean\l# visit(StringLiteral) : boolean\l# visit(SuperConstructorInvocation) : boolean\l# visit(SuperFieldAccess) : boolean\l# visit(SuperMethodInvocation) : boolean\l# visit(SwitchCase) : boolean\l# visit(SwitchStatement) : boolean\l# visit(SynchronizedStatement) : boolean\l# visit(ThisExpression) : boolean\l# visit(ThrowStatement) : boolean\l# visit(TryStatement) : boolean\l# visit(TypeDeclaration) : boolean\l# visit(TypeDeclarationStatement) : boolean\l# visit(TypeLiteral) : boolean\l# visit(UnionType) : boolean\l# visit(VariableDeclarationExpression) : boolean\l# visit(VariableDeclarationFragment) : boolean\l# visit(VariableDeclarationStatement) : boolean\l# visit(WhileStatement) : boolean\l# visit(BlockComment) : boolean\l# visit(LineComment) : boolean\l# visit(MemberRef) : boolean\l# visit(MethodRef) : boolean\l# visit(MethodRefParameter) : boolean\l# visit(TagElement) : boolean\l# visit(TextElement) : boolean\l# visit(AnnotationTypeDeclaration) : boolean\l# visit(AnnotationTypeMemberDeclaration) : boolean\l# visit(EnhancedForStatement) : boolean\l# visit(EnumConstantDeclaration) : boolean\l# visit(EnumDeclaration) : boolean\l# visit(ExpressionMethodReference) : boolean\l# visit(MarkerAnnotation) : boolean\l# visit(MemberValuePair) : boolean\l# visit(Modifier) : boolean\l# visit(NormalAnnotation) : boolean\l# visit(NameQualifiedType) : boolean\l# visit(ParameterizedType) : boolean\l# visit(QualifiedType) : boolean\l# visit(SingleMemberAnnotation) : boolean\l# visit(SuperMethodReference) : boolean\l# visit(TypeMethodReference) : boolean\l# visit(TypeParameter) : boolean\l# visit(WildcardType) : boolean\l}"
	 ]

	 BlockFormattingPrefixSuffix [
		 label = "{BlockFormattingPrefixSuffix|+ data : Object\l- positions : ArrayList\l- lineDelimiter : String\l- tabWidth : int\l- indentWidth : int\l- placeholders : NodeInfoStore\l- eventStore : RewriteEventStore\l- options : Map\l- prefix : String\l- kind : int\l- string : String\l- start : int\l- length : int\l- prefix : String\l- start : int\l- prefix : String\l- suffix : String\l- start : int\l+ NONE : Prefix\l+ SPACE : Prefix\l+ ASSERT_COMMENT : Prefix\l+ VAR_INITIALIZER : Prefix\l+ METHOD_BODY : Prefix\l+ FINALLY_BLOCK : Prefix\l+ CATCH_BLOCK : Prefix\l+ ANNOT_MEMBER_DEFAULT : Prefix\l+ ENUM_BODY_START : Prefix\l+ ENUM_BODY_END : Prefix\l+ WILDCARD_EXTENDS : Prefix\l+ WILDCARD_SUPER : Prefix\l+ FIRST_ENUM_CONST : Prefix\l+ ANNOTATION_SEPARATION : Prefix\l+ PARAM_ANNOTATION_SEPARATION : Prefix\l+ VARARGS : Prefix\l+ TRY_RESOURCES : Prefix\l+ TRY_RESOURCES_PAREN : Prefix\l+ IF_BLOCK_WITH_ELSE : BlockContext\l+ IF_BLOCK_NO_ELSE : BlockContext\l+ ELSE_AFTER_STATEMENT : BlockContext\l+ ELSE_AFTER_BLOCK : BlockContext\l+ FOR_BLOCK : BlockContext\l+ WHILE_BLOCK : BlockContext\l+ DO_BLOCK : BlockContext\l|# null() : \l# null() : \l# ExtendedFlattener(RewriteEventStore) : \l# preVisit(ASTNode) : \l# postVisit(ASTNode) : \l# visit(Block) : boolean\l# addMarker(Object, int, int) : NodeMarker\l# fixupLength(Object, int) : \l# getMarkers() : NodeMarker\l# ASTRewriteFormatter(NodeInfoStore, RewriteEventStore, Map, String) : \l# getPlaceholders() : NodeInfoStore\l# getEventStore() : RewriteEventStore\l# getTabWidth() : int\l# getIndentWidth() : int\l# getLineDelimiter() : String\l# getFormattedResult(ASTNode, int, Collection) : String\l# createIndentString(int) : String\l# getIndentString(String) : String\l# changeIndent(String, int, String) : String\l# computeIndentUnits(String) : int\l# evaluateFormatterEdit(String, TextEdit, Position) : String\l# formatString(int, String, int, int, int) : TextEdit\l# formatNode(ASTNode, String, int) : TextEdit\l# shifEdit(TextEdit, int) : TextEdit\l# createDocument(String, Position) : Document\l# notDeleted() : boolean\l# null() : \l# getPrefix(int) : String\l# null() : \l# getPrefixAndSuffix(int, ASTNode, RewriteEventStore) : String\l# null() : \l# ConstPrefix(String) : \l# getPrefix(int) : String\l# null() : \l# FormattingPrefix(String, String, int) : \l# getPrefix(int) : String\l# null() : \l# BlockFormattingPrefix(String, int) : \l# getPrefixAndSuffix(int, ASTNode, RewriteEventStore) : String\l# null() : \l# BlockFormattingPrefixSuffix(String, String, int) : \l# getPrefixAndSuffix(int, ASTNode, RewriteEventStore) : String\l}"
	 ]

	 LineCommentEndOffsets [
		 label = "{LineCommentEndOffsets|- offsets : int\l- commentList : List\l|# LineCommentEndOffsets(List) : \l# getOffsets() : int\l# isEndOfLineComment(int) : boolean\l# isEndOfLineComment(int, char) : boolean\l# remove(int) : boolean\l}"
	 ]

	 LineInformation [
		 label = "{LineInformation|+ getLineOfOffset : int\l+ getLineOffset : int\l|# create(IDocument) : LineInformation\l# getLineOfOffset(int) : int\l# getLineOffset(int) : int\l# create(CompilationUnit) : LineInformation\l# getLineOfOffset(int) : int\l# getLineOffset(int, int, int) : int\l}"
	 ]

	 ListRewriteEvent [
		 label = "{ListRewriteEvent|+ NEW : int\l+ OLD : int\l+ BOTH : int\l- originalNodes : List\l- listEntries : List\l|# ListRewriteEvent(List) : \l# ListRewriteEvent(RewriteEvent) : \l# getEntries() : List\l# getChangeKind() : int\l# isListRewrite() : boolean\l# getChildren() : RewriteEvent\l# getOriginalValue() : Object\l# getNewValue() : Object\l# removeEntry(ASTNode) : RewriteEvent\l# replaceEntry(ASTNode, ASTNode) : RewriteEvent\l# revertChange(NodeRewriteEvent) : \l# getIndex(ASTNode, int) : int\l# insert(ASTNode, int) : RewriteEvent\l# setNewValue(ASTNode, int) : \l# getChangeKind(int) : int\l# toString() : String\l}"
	 ]

	 StringPlaceholderData [
		 label = "{StringPlaceholderData|- ast : AST\l- placeholderNodes : Map\l- collapsedNodes : Set\l+ copySource : CopySourceInfo\l+ code : String\l|# NodeInfoStore(AST) : \l# markAsStringPlaceholder(ASTNode, String) : \l# markAsCopyTarget(ASTNode, CopySourceInfo) : \l# newPlaceholderNode(int) : ASTNode\l# createCollapsePlaceholder() : Block\l# isCollapsed(ASTNode) : boolean\l# getPlaceholderData(ASTNode) : Object\l# setPlaceholderData(ASTNode, PlaceholderData) : \l# null() : \l# null() : \l# toString() : String\l# null() : \l# toString() : String\l# clear() : \l}"
	 ]

	 NodeRewriteEvent [
		 label = "{NodeRewriteEvent|- originalValue : Object\l- newValue : Object\l|# NodeRewriteEvent(Object, Object) : \l# getNewValue() : Object\l# getOriginalValue() : Object\l# getChangeKind() : int\l# isListRewrite() : boolean\l# setNewValue(Object) : \l# getChildren() : RewriteEvent\l# toString() : String\l}"
	 ]

	 RewriteEvent [
		 label = "{RewriteEvent|+ INSERTED : int\l+ REMOVED : int\l+ REPLACED : int\l+ CHILDREN_CHANGED : int\l+ UNCHANGED : int\l+ getChangeKind : int\l+ isListRewrite : boolean\l+ getOriginalValue : Object\l+ getNewValue : Object\l+ getChildren : RewriteEvent\l|}"
	 ]

	 ParentIterator [
		 label = "{ParentIterator|+ DEBUG : boolean\l- parent : ASTNode\l- property : StructuralPropertyDescriptor\l+ parent : ASTNode\l+ childProperty : StructuralPropertyDescriptor\l+ event : RewriteEvent\l+ location : PropertyLocation\l- node : ASTNode\l+ isMove : boolean\l- first : ASTNode\l- last : ASTNode\l+ copyInfo : CopySourceInfo\l+ replacingNode : ASTNode\l+ editGroup : TextEditGroup\l- eventIter : Iterator\l- sourceNodeIter : Iterator\l- rangeNodeIter : Iterator\l- trackedNodeIter : Iterator\l+ NEW : int\l+ ORIGINAL : int\l+ BOTH : int\l# eventLookup : Map\l- lastEvent : EventHolder\l- editGroups : Map\l# nodeCopySources : List\l# nodeRangeInfos : Map\l# trackedNodes : Map\l- insertBoundToPrevious : Set\l- nodePropertyMapper : INodePropertyMapper\l- INTERNAL_PLACEHOLDER_PROPERTY : String\l|# null() : \l# PropertyLocation(ASTNode, StructuralPropertyDescriptor) : \l# getParent() : ASTNode\l# getProperty() : StructuralPropertyDescriptor\l# equals(Object) : boolean\l# hashCode() : int\l# null() : \l# getOriginalValue(ASTNode, StructuralPropertyDescriptor) : Object\l# null() : \l# EventHolder(ASTNode, StructuralPropertyDescriptor, RewriteEvent) : \l# toString() : String\l# null() : \l# CopySourceInfo(PropertyLocation, ASTNode, boolean) : \l# getNode() : ASTNode\l# compareTo(Object) : int\l# toString() : String\l# null() : \l# NodeRangeInfo(ASTNode, StructuralPropertyDescriptor, ASTNode, ASTNode, CopySourceInfo, ASTNode, TextEditGroup) : \l# getStartNode() : ASTNode\l# getEndNode() : ASTNode\l# isMove() : boolean\l# getInternalPlaceholder() : Block\l# compareTo(Object) : int\l# updatePlaceholderSourceRanges(TargetSourceRangeComputer) : \l# toString() : String\l# null() : \l# ParentIterator() : \l# hasNext() : boolean\l# next() : Object\l# remove() : \l# RewriteEventStore() : \l# setNodePropertyMapper(INodePropertyMapper) : \l# clear() : \l# addEvent(ASTNode, StructuralPropertyDescriptor, RewriteEvent) : \l# getEvent(ASTNode, StructuralPropertyDescriptor) : RewriteEvent\l# getNodeEvent(ASTNode, StructuralPropertyDescriptor, boolean) : NodeRewriteEvent\l# getListEvent(ASTNode, StructuralPropertyDescriptor, boolean) : ListRewriteEvent\l# getChangeRootIterator() : Iterator\l# hasChangedProperties(ASTNode) : boolean\l# getPropertyLocation(Object, int) : PropertyLocation\l# findEvent(Object, int) : RewriteEvent\l# isNodeInEvent(RewriteEvent, Object, int) : boolean\l# getOriginalValue(ASTNode, StructuralPropertyDescriptor) : Object\l# getNewValue(ASTNode, StructuralPropertyDescriptor) : Object\l# getChangedPropertieEvents(ASTNode) : List\l# getChangeKind(ASTNode) : int\l# accessOriginalValue(ASTNode, StructuralPropertyDescriptor) : Object\l# getEventEditGroup(RewriteEvent) : TextEditGroup\l# setEventEditGroup(RewriteEvent, TextEditGroup) : \l# getTrackedNodeData(ASTNode) : TextEditGroup\l# setTrackedNodeData(ASTNode, TextEditGroup) : \l# markAsTracked(ASTNode, TextEditGroup) : \l# createCopySourceInfo(PropertyLocation, ASTNode, boolean) : CopySourceInfo\l# markAsCopySource(ASTNode, StructuralPropertyDescriptor, ASTNode, boolean) : CopySourceInfo\l# isRangeCopyPlaceholder(ASTNode) : boolean\l# createRangeCopy(ASTNode, StructuralPropertyDescriptor, ASTNode, ASTNode, boolean, ASTNode, ASTNode, TextEditGroup) : CopySourceInfo\l# getNodeCopySources(ASTNode) : CopySourceInfo\l# internalGetCopySources(List, ASTNode) : CopySourceInfo\l# assertNoOverlap(ListRewriteEvent, int, int, List) : \l# prepareMovedNodes(TargetSourceRangeComputer) : \l# revertMovedNodes() : \l# removeMoveRangePlaceholders() : \l# revertListWithRanges(RewriteEvent, Set, List) : \l# prepareNodeRangeCopies(TargetSourceRangeComputer) : \l# processListWithRanges(List, RewriteEvent, TargetSourceRangeComputer) : RewriteEvent\l# prepareSingleNodeCopies() : \l# doMarkMovedAsRemoved(CopySourceInfo, ASTNode, StructuralPropertyDescriptor) : \l# isInsertBoundToPrevious(ASTNode) : boolean\l# setInsertBoundToPrevious(ASTNode) : \l# validateIsListProperty(StructuralPropertyDescriptor) : \l# validateHasChildProperty(ASTNode, StructuralPropertyDescriptor) : \l# validateIsNodeProperty(StructuralPropertyDes